
==================== FINAL INTERFACE ====================
2017-12-28 08:49:04.187394 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Language.R.HExp [boot] 8022
  interface hash: 5316614259e4dd9f32be26c33bab5697
  ABI hash: 8da1953fd15113c7b035ce87337813bb
  export-list hash: 51e0a6288db3a7c2e94eec6b3f9a17a5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f77bb006efa1021244653976f3b4e5b8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.R.HExp.HExp
module dependencies: Foreign.R.Constraints Foreign.R.Type
                     Internal.Error
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 mtl-2.2.1
                      pretty-1.1.3.3 primitive-0.6.2.0 safe-0.3.15 singletons-2.3.1
                      syb-0.7 template-haskell-2.12.0.0 text-1.2.2.2 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
  exports: 5754d5cde3f2758aa360e9e8b66ebc71
  SEXPTYPE 155aac0ce58f46653dea12e588ab4eb0
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
a9df0cd31665c09cd9b708c1007746a8
  $tcHExp :: GHC.Types.TyCon
69a54fc89aa6bc18c481cffa68b43fe0
  $trModule :: GHC.Types.Module
a2955c107a6d49c1260dd3641993e4da
  type role HExp phantom nominal
  data HExp a (b :: Foreign.R.Type.SEXPTYPE)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False


==================== FINAL INTERFACE ====================
2017-12-28 08:49:39.097037 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Language.R.HExp 8022
  interface hash: 5413eb89f6b9d281bc2c14d3366257fe
  ABI hash: 65742348049316c593051d25bc8cd9c6
  export-list hash: c8c11e48e2f3de692b7c0633951e2386
  orphan hash: cee3290e1fddc7ea4296ed13467f83ee
  flag hash: d1e0a860b6e12e7ea207fbaf3ad56259
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.R.HExp.===
  Language.R.HExp.hexp
  Language.R.HExp.unhexp
  Language.R.HExp.vector
  Language.R.HExp.HExp{Language.R.HExp.Builtin Language.R.HExp.Bytecode Language.R.HExp.Char Language.R.HExp.Closure Language.R.HExp.Complex Language.R.HExp.DotDotDot Language.R.HExp.Env Language.R.HExp.Expr Language.R.HExp.ExtPtr Language.R.HExp.Int Language.R.HExp.Lang Language.R.HExp.List Language.R.HExp.Logical Language.R.HExp.Nil Language.R.HExp.Promise Language.R.HExp.Raw Language.R.HExp.Real Language.R.HExp.S4 Language.R.HExp.Special Language.R.HExp.String Language.R.HExp.Symbol Language.R.HExp.Vector Language.R.HExp.WeakRef}
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP Data.Vector.SEXP.Base
                     Data.Vector.SEXP.Mutable Data.Vector.SEXP.Mutable.Internal
                     Foreign.R Foreign.R.Constraints Foreign.R.EventLoop
                     Foreign.R.Internal Foreign.R.Type Internal.Error Language.R.Globals
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.1 pretty-1.1.3.3 primitive-0.6.2.0
                      reflection-2.1.2 safe-0.3.15 singletons-2.3.1 stm-2.4.4.1 syb-0.7
                      template-haskell-2.12.0.0 text-1.2.2.2 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: stm-2.4.4.1:Control.Monad.STM
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         syb-0.7:Data.Generics.Instances reflection-2.1.2:Data.Reflection
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Control.Memory.Region
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Data.Vector.SEXP
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Complex b75c9c36fb3e1275b27f07a23b164de4
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Int e234a0a6d2a21ac9385a90eec01cbcae
import  -/  base-4.10.1.0:Data.Maybe 07738c5485acb328136bb15596f8b845
import  -/  base-4.10.1.0:Data.Type.Equality ca4e91e1727dfab58cd5d13c463acc81
import  -/  base-4.10.1.0:Data.Word c4e948c409792d945106eb5269810128
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:Foreign.C f34e348e91247a99e0eb5a41b6102351
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:Foreign.Storable c463817097bdd1b4c7f7c325680a9964
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:Unsafe.Coerce 9a8b9bbea9e2b938217a6b224822fb7b
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
  exports: ebb323240982ac39e80db1d6fb39a690
  MonadR 3b2bb150f2b80e2d32d08e5e9fb3cdc6
  Region 49abf5cb38f3f6f39f201ac2b8615c87
  acquire 4887fbeabaa4df5f85760e10afb98633
  io dcc175ea7fefcdd9812fba741a117c5c
import  -/  Data.Vector.SEXP 1ba3b4d0f52c5e1239a58edb94ac6587
  exports: ba6781c44342a369931119b5db2f7524
  Vector 3476d9bcd1360fdfad479ca1a02d99fb
  toList 3476d9bcd1360fdfad479ca1a02d99fb
  unsafeFromSEXP a01d1f186234da584184293dcf0533c0
  unsafeToSEXP abf4be13e5402fc7759ecfe137de044d
import  -/  Data.Vector.SEXP.Base 45a38cf91fe2cf94fe8625a751ba7f0f
  ElemRep 2b851d09f4d303100201309c9c4ed4f7
import  -/  Foreign.R 51460710da704a1aff942901939ab83a
  exports: 66604cef250b707139e6d39041287043
  allocSEXP ac1dd40f71116a7552db9e47e4fbffed
  cons fee87b1ee2bdbb223983957d883b92e2
  protect 9d62708a46a0cadab0ad0a511a77c60d
  unprotect 815b337c705ba5d9ef7902b5da589473
  withProtected ee6067e4d5f6ac7496f0966c08f7bc06
import  -/  Foreign.R.Constraints 5e190340d29314eb38fd1cdb5ab46fca
  exports: 441429338cad6caf0808dc7f956d20fa
  :∈ 94dd0ad55a7963a5e0d3bae0faa1a5cd
import  -/  Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
  SEXP b92a1b967edd9e3e71e3bf97a52c270d
  SEXP 8e71af79acc64eda5f9cb7291bf461df
  SomeSEXP d3242a05a97056d0f4278da347cae3e8
  SomeSEXP 870de88561703105d28633d6a8e2294b
  release 47626d4fe9a76c8454cdf7c4f29723b0
  setCar ec152320c68dd49dfd782e62af40d151
  setCdr 8cfa7b7f3723547ac742983db92adf95
  sexp a96c72508b040bb5e852a135425663e6
  typeOf 7afee6af5a3ea33aea03a8fcb3ded45f
  unSEXP 8e71af79acc64eda5f9cb7291bf461df
  unsafeCoerce fd24c6a04fe85cae12472829ca64771e
  unsafeSEXPToVectorPtr 793ad2fe9d7f56fdd17d73e58572c323
  unsexp 456b119a325c68ef328adef52d3b1e7c
import  -/  Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
  exports: 5754d5cde3f2758aa360e9e8b66ebc71
  Any 589ebb68a061744ef10e332567d19085
  Builtin d18bce5c914c2fdf5839a86e3afb9f7a
  Bytecode ddc02e285aec69b8e38f5cb6db9f74ed
  Char 1eeae3bbb682357f0ba159402f19e108
  Closure 0e61dfaa233694de6f4f2676b4b17cac
  Complex 03b70292738c47ec6de32b86c6c9acd6
  DotDotDot 536dd85e7fdb83eb4b1d98e40f2f2c58
  Env e1a632c9d1d6cbdbf86e3a47e2532589
  Expr 436bad07c9b16edb50cb6c3f0bb45e34
  ExtPtr 09861da2031986d92237c2e2fd47f695
  Int 846c6444255f487e6112f24053a1fef2
  IsExpression 402475b9f6dc18d1b68b5d637838b242
  IsPairList 1be6a0cd0b2fbe0b9527b58b8b9eb862
  IsVector dd85b2d9ae3c40d713f260e06d8370c5
  Lang 02f1e57acf95c324993b6cdd035f426d
  List a0780a1f3942a25c40211c99f0d43fbe
  Logical 5beffbd327782875e2209d8de33ff56f
  Logical 1780ac06eb92df8fe8d6ec65362cd7e7
  Nil 36bcb069ae5a9368ced2bacefcf86560
  Promise 6a69c028f5d2e2ca411491c33d53c546
  Raw 26e1a1cc553af22e87fb0296aa30967f
  Real c1c8247577c466184e317ce009c96d3a
  S4 a63fd9c03461594588296f40f69465d8
  SBuiltin 49d2e42027c6ce46b5bc5e64ae310c2b
  SClosure e701802e7fc6120d59e6efa0517ccd84
  SEXPTYPE 155aac0ce58f46653dea12e588ab4eb0
  SEnv b7882cabffbc9b324897ba071b2e226b
  SLang c34bb2caf96fad5cf98cc797e0e49a04
  SPromise 2938244c5d043689ff58227c5bc912fe
  SSpecial 3fd1be8f117b2f1293cba847ad512a20
  SSymbol 02020c4b0a5c84bc4baaa88d3b84886d
  Special 8b3d355614cb181a22d8fc1c774281f6
  String e0243b21c36f7ea25c758c04c63f25ed
  Symbol b075a8e4ed98a88def156c76f406cf71
  Vector 4a29567e5052891b025190b67a7acdde
  WeakRef 20ec488b3919b679514940e1b6db9219
import  -/  Internal.Error 740162e156c3d9ec6fcb98a35435f6ce
  exports: 13dcfd343f68bd642398afc1dc7f61a0
  unimplemented 8b7f071ba26c09d6b472c8188a7279bf
  violation b8d3d6683e7c01fa74a453c2d484fb85
import  -/  Language.R.Globals 6466af466952ec50029e279d952209f8
  exports: d382aabb26fa46ceafcdf718d6d966c6
  nilValue 6fd3b3a9ae25de3a8024897c909e667c
import  -/  primitive-0.6.2.0:Control.Monad.Primitive 51a1d708ce9627dfc5884be7480b4b76
addDependentFile "src/Language/R/HExp.hsc"
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
433c4132461aebffaa9ab039f602c411
  $fEqHExp :: GHC.Classes.Eq (Language.R.HExp.HExp s a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s @ a :: Foreign.R.Type.SEXPTYPE.
                  @ (Language.R.HExp.HExp s a)
                  (Language.R.HExp.$fEqHExp_$c== @ s @ a)
                  (Language.R.HExp.$fEqHExp_$c/= @ s @ a) -}
433c4132461aebffaa9ab039f602c411
  $fEqHExp_$c/= ::
    Language.R.HExp.HExp s a
    -> Language.R.HExp.HExp s a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (x :: Language.R.HExp.HExp s a)
                   (y :: Language.R.HExp.HExp s a) ->
                 case Language.R.HExp.$fEqHExp_$ctestEquality
                        @ s
                        @ a
                        @ a
                        x
                        y of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just ipv -> GHC.Types.False }) -}
433c4132461aebffaa9ab039f602c411
  $fEqHExp_$c== ::
    Language.R.HExp.HExp s a
    -> Language.R.HExp.HExp s a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (x :: Language.R.HExp.HExp s a)
                   (y :: Language.R.HExp.HExp s a) ->
                 case Language.R.HExp.$fEqHExp_$ctestEquality
                        @ s
                        @ a
                        @ a
                        x
                        y of wild {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ipv -> GHC.Types.True }) -}
433c4132461aebffaa9ab039f602c411
  $fEqHExp_$ctestEquality ::
    Language.R.HExp.HExp s a
    -> Language.R.HExp.HExp s b
    -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp ::
    Foreign.Storable.Storable (Language.R.HExp.HExp s a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s @ a :: Foreign.R.Type.SEXPTYPE.
                  @ (Language.R.HExp.HExp s a)
                  (Language.R.HExp.$fStorableHExp_$csizeOf @ s @ a)
                  (Language.R.HExp.$fStorableHExp_$calignment @ s @ a)
                  (Language.R.HExp.$fStorableHExp6 @ s @ a)
                    `cast`
                  (<GHC.Ptr.Ptr (Language.R.HExp.HExp s a)>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R))
                  (Language.R.HExp.$fStorableHExp5 @ s @ a)
                    `cast`
                  (<GHC.Ptr.Ptr (Language.R.HExp.HExp s a)>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R <Language.R.HExp.HExp s a>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  (Language.R.HExp.$fStorableHExp4 @ s @ a)
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Ptr.Ptr b>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R))
                  (Language.R.HExp.$fStorableHExp3 @ s @ a)
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Ptr.Ptr b>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R <Language.R.HExp.HExp s a>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  (Language.R.HExp.$fStorableHExp_$cpeek @ s @ a)
                  (Language.R.HExp.$fStorableHExp1 @ s @ a)
                    `cast`
                  (<GHC.Ptr.Ptr (Language.R.HExp.HExp s a)>_R
                   ->_R <Language.R.HExp.HExp s a>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp1 ::
    GHC.Ptr.Ptr (Language.R.HExp.HExp s a)
    -> Language.R.HExp.HExp s a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><S,U>,
     Unfolding: (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (s1 :: GHC.Ptr.Ptr (Language.R.HExp.HExp s a))
                   (h :: Language.R.HExp.HExp s a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case h of wild {
                   Language.R.HExp.Nil cobox -> (# eta, GHC.Tuple.() #)
                   Language.R.HExp.Symbol a1 b c cobox irred pname value internal
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case pname
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      a1, Foreign.R.Internal.SEXPREC>)_R) of wild2 { GHC.Ptr.Ptr x ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             x
                             eta of s2 { DEFAULT ->
                      case value
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <b>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      b, Foreign.R.Internal.SEXPREC>)_R) of wild3 { GHC.Ptr.Ptr x1 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 40#)
                             0#
                             x1
                             s2 of s3 { DEFAULT ->
                      case internal
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <c>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      c, Foreign.R.Internal.SEXPREC>)_R) of wild4 { GHC.Ptr.Ptr x2 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 48#)
                             0#
                             x2
                             s3 of s4 { DEFAULT ->
                      (# s4, GHC.Tuple.() #) } } } } } } }
                   Language.R.HExp.List b c a1 cobox $d(%,%) irred carval cdrval tagval
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case carval
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      a1, Foreign.R.Internal.SEXPREC>)_R) of wild2 { GHC.Ptr.Ptr x ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             x
                             eta of s2 { DEFAULT ->
                      case cdrval
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <b>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      b, Foreign.R.Internal.SEXPREC>)_R) of wild3 { GHC.Ptr.Ptr x1 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 40#)
                             0#
                             x1
                             s2 of s3 { DEFAULT ->
                      case tagval
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <c>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      c, Foreign.R.Internal.SEXPREC>)_R) of wild4 { GHC.Ptr.Ptr x2 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 48#)
                             0#
                             x2
                             s3 of s4 { DEFAULT ->
                      (# s4, GHC.Tuple.() #) } } } } } } }
                   Language.R.HExp.Env a1 b c cobox $d(%,%) irred irred1 frame enclos hashtab
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case frame
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      a1, Foreign.R.Internal.SEXPREC>)_R) of wild2 { GHC.Ptr.Ptr x ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             x
                             eta of s2 { DEFAULT ->
                      case enclos
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <b>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      b, Foreign.R.Internal.SEXPREC>)_R) of wild3 { GHC.Ptr.Ptr x1 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 40#)
                             0#
                             x1
                             s2 of s3 { DEFAULT ->
                      case hashtab
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <c>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      c, Foreign.R.Internal.SEXPREC>)_R) of wild4 { GHC.Ptr.Ptr x2 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 48#)
                             0#
                             x2
                             s3 of s4 { DEFAULT ->
                      (# s4, GHC.Tuple.() #) } } } } } } }
                   Language.R.HExp.Closure a1 b cobox $d(%,%) formals body env
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case formals
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      a1, Foreign.R.Internal.SEXPREC>)_R) of wild2 { GHC.Ptr.Ptr x ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             x
                             eta of s2 { DEFAULT ->
                      case body
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <b>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      b, Foreign.R.Internal.SEXPREC>)_R) of wild3 { GHC.Ptr.Ptr x1 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 40#)
                             0#
                             x1
                             s2 of s3 { DEFAULT ->
                      case env
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Env>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      'Foreign.R.Type.Env, Foreign.R.Internal.SEXPREC>)_R) of wild4 { GHC.Ptr.Ptr x2 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 48#)
                             0#
                             x2
                             s3 of s4 { DEFAULT ->
                      (# s4, GHC.Tuple.() #) } } } } } } }
                   Language.R.HExp.Promise b c a1 cobox $d(%,%) irred value expr env
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case value
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      a1, Foreign.R.Internal.SEXPREC>)_R) of wild2 { GHC.Ptr.Ptr x ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             x
                             eta of s2 { DEFAULT ->
                      case expr
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <b>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      b, Foreign.R.Internal.SEXPREC>)_R) of wild3 { GHC.Ptr.Ptr x1 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 40#)
                             0#
                             x1
                             s2 of s3 { DEFAULT ->
                      case env
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <c>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      c, Foreign.R.Internal.SEXPREC>)_R) of wild4 { GHC.Ptr.Ptr x2 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 48#)
                             0#
                             x2
                             s3 of s4 { DEFAULT ->
                      (# s4, GHC.Tuple.() #) } } } } } } }
                   Language.R.HExp.Lang a1 b cobox $d(%,%) $d(%,%)1 carval cdrval
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case carval
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      a1, Foreign.R.Internal.SEXPREC>)_R) of wild2 { GHC.Ptr.Ptr x ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             x
                             eta of s2 { DEFAULT ->
                      case cdrval
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <b>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      s
                                      b, Foreign.R.Internal.SEXPREC>)_R) of wild3 { GHC.Ptr.Ptr x1 ->
                      case GHC.Prim.writeAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 40#)
                             0#
                             x1
                             s2 of s3 { DEFAULT ->
                      (# s3, GHC.Tuple.() #) } } } } }
                   Language.R.HExp.Special cobox dt
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case GHC.Prim.writeInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             dt
                             eta of s2 { DEFAULT ->
                      (# s2, GHC.Tuple.() #) } }
                   Language.R.HExp.Builtin cobox dt
                   -> case s1 of wild1 { GHC.Ptr.Ptr addr ->
                      case GHC.Prim.writeInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# addr 32#)
                             0#
                             dt
                             eta of s2 { DEFAULT ->
                      (# s2, GHC.Tuple.() #) } }
                   Language.R.HExp.Char cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Logical cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Int cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Real cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Complex cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.String cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.DotDotDot a1 cobox $d(%,%) ds
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Vector cobox dt dt1 dt2 dt3 dt4
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Expr cobox dt dt1 dt2 dt3 dt4
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Bytecode cobox
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.ExtPtr b cobox ds ds1 ds2
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.WeakRef a1 c d b cobox irred irred1 irred2 ds ds1 ds2 ds3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.Raw cobox dt dt1 dt2 dt3
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   Language.R.HExp.S4 a1 cobox ds
                   -> case Language.R.HExp.$fStorableHExp2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {} }) -}
4f4af7d9f1472037ae083d22fedc849a
  $fStorableHExp2 :: GHC.Types.IO ()
  {- Strictness: x -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp3 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Language.R.HExp.HExp s a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Language.R.HExp.HExp s a)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.HExp.$fStorableHExp1
                   @ s
                   @ a
                   (case ptr of wild { GHC.Ptr.Ptr addr ->
                    case off of wild1 { GHC.Types.I# d ->
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp s a)
                      (GHC.Prim.plusAddr# addr d) } })
                   eta
                   eta1) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp4 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Language.R.HExp.HExp s a #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   @ b
                   (w :: GHC.Ptr.Ptr b)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Ptr.Ptr ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Language.R.HExp.$w$cpeekByteOff @ s @ a @ b ww1 ww3 w2 } }) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp5 ::
    GHC.Ptr.Ptr (Language.R.HExp.HExp s a)
    -> GHC.Types.Int
    -> Language.R.HExp.HExp s a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (ptr :: GHC.Ptr.Ptr (Language.R.HExp.HExp s a))
                   (off :: GHC.Types.Int)
                   (val :: Language.R.HExp.HExp s a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.HExp.$fStorableHExp1
                   @ s
                   @ a
                   (case ptr of wild { GHC.Ptr.Ptr addr ->
                    case off of wild1 { GHC.Types.I# x ->
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp s a)
                      (GHC.Prim.plusAddr# addr (GHC.Prim.*# x 56#)) } })
                   val
                   eta) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp6 ::
    GHC.Ptr.Ptr (Language.R.HExp.HExp s a)
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Language.R.HExp.HExp s a #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (ptr :: GHC.Ptr.Ptr (Language.R.HExp.HExp s a))
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case off of wild { GHC.Types.I# x ->
                 Language.R.HExp.$fStorableHExp4
                   @ s
                   @ a
                   @ (Language.R.HExp.HExp s a)
                   ptr
                   (GHC.Types.I# (GHC.Prim.*# x 56#))
                   eta }) -}
67fd6fdb7cfe69683530c9b164fd4b86
  $fStorableHExp7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
fb92e49dda10fc2e23684bdd3139d9ec
  $fStorableHExp8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 56#) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp_$calignment ::
    Language.R.HExp.HExp s a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (ds :: Language.R.HExp.HExp s a) ->
                 Language.R.HExp.$fStorableHExp7) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp_$cpeek ::
    GHC.Ptr.Ptr (Language.R.HExp.HExp s a)
    -> GHC.Types.IO (Language.R.HExp.HExp s a)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (x :: GHC.Ptr.Ptr (Language.R.HExp.HExp s a)) ->
                 let {
                   $d(%,%) :: (Data.Singletons.SingI 'Foreign.R.Type.Any,
                               () :: Constraint)
                   = (Foreign.R.Type.$fSingISEXPTYPEAny1
                        `cast`
                      (Trans
                           (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                           (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Any>_N),
                      GHC.Classes.C:(%%))
                 } in
                 case x `cast`
                      (GHC.Ptr.Ptr
                         <Language.R.HExp.HExp
                            s a, Foreign.R.Internal.SEXPREC>)_R of ds { GHC.Ptr.Ptr ds1 ->
                 case {__pkg_ccall inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 GHC.Prim.Int# #)}
                        ds1
                        GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                 case Foreign.R.Type.$w$ctoEnum
                        (GHC.Prim.narrow32Int# ds3) of wild1 {
                   DEFAULT
                   -> Internal.Error.unimplemented
                        @ (GHC.Types.IO (Language.R.HExp.HExp s a))
                        (GHC.Base.augment
                           @ GHC.Types.Char
                           (\ @ b
                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.CString.unpackFoldrCString# @ b "peekHExp: "# c n)
                           (case {__pkg_ccall inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                      -> GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                      -> (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld,
                                                                                            GHC.Prim.Int# #)}
                                   ds1
                                   GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                            Foreign.R.Type.$fLiftSEXPTYPE_$cshow
                              (Foreign.R.Type.$w$ctoEnum (GHC.Prim.narrow32Int# ds5)) }))
                   Foreign.R.Type.Nil
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s1, Language.R.HExp.$WNil @ s #))
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Nil))_R))
                   Foreign.R.Type.Symbol
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       (# ipv4,
                          Language.R.HExp.$WSymbol
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ GHC.Types.Any
                            @ GHC.Types.Any
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Char, 'Foreign.R.Type.Nil]>_N)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <GHC.Types.Any>_P))) #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Symbol))_R))
                   Foreign.R.Type.List
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       (# ipv4,
                          Language.R.HExp.$WList
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            @ GHC.Types.Any
                            $d(%,%)
                              `cast`
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                               (Sym (Foreign.R.Constraints.D:R::∈[0]
                                         <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Symbol, 'Foreign.R.Type.Nil]>_N)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Any>_P))) #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.List))_R))
                   Foreign.R.Type.Closure
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       (# ipv4,
                          Language.R.HExp.$WClosure
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ GHC.Types.Any
                            $d(%,%)
                              `cast`
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                               (Sym (Foreign.R.Constraints.D:R::∈[0]
                                         <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Env>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Env>_P))) #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Closure))_R))
                   Foreign.R.Type.Env
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       (# ipv4,
                          Language.R.HExp.$WEnv
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            $d(%,%)
                              `cast`
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                               (Sym (Foreign.R.Constraints.D:R::∈[0]
                                         <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Env, 'Foreign.R.Type.Nil]>_N)))
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Vector, 'Foreign.R.Type.Nil]>_N)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Any>_P))) #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Env))_R))
                   Foreign.R.Type.Promise
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       (# ipv4,
                          Language.R.HExp.$WPromise
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            $d(%,%)
                              `cast`
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                               (Sym (Foreign.R.Constraints.D:R::∈[0]
                                         <'['Foreign.R.Type.Lang, 'Foreign.R.Type.Expr,
                                            'Foreign.R.Type.Symbol]>_N)))_R
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Env, 'Foreign.R.Type.Nil]>_N)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Any>_P))) #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Promise))_R))
                   Foreign.R.Type.Lang
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       (# ipv2,
                          Language.R.HExp.$WLang
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            $d(%,%)
                              `cast`
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                               (Sym (Foreign.R.Constraints.D:R::∈[0]
                                         <'['Foreign.R.Type.Lang, 'Foreign.R.Type.Expr,
                                            'Foreign.R.Type.Symbol]>_N)))_R
                            $d(%,%)
                              `cast`
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                               (Sym (Foreign.R.Constraints.D:R::∈[0]
                                         <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Any>_P))) #) } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Lang))_R))
                   Foreign.R.Type.Special
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readInt32OffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       (# ipv, Language.R.HExp.$WSpecial @ s (GHC.Int.I32# ipv1) #) })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Special))_R))
                   Foreign.R.Type.Builtin
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readInt32OffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       (# ipv, Language.R.HExp.$WBuiltin @ s (GHC.Int.I32# ipv1) #) })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Builtin))_R))
                   Foreign.R.Type.Char
                   -> (Language.R.HExp.$WChar
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.Char
                            @ GHC.Word.Word8
                            (Foreign.Storable.$fStorableWord8,
                             (Foreign.R.Type.$fSingISEXPTYPEChar1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Char>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEChar1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Char>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ GHC.Word.Word8
                                @ GHC.Word.Word8
                                @~ <GHC.Word.Word8>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0]
                                       <*>_N) <GHC.Word.Word8>_N <GHC.Word.Word8>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable GHC.Word.Word8>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Char>_N
                                  (Sym (Foreign.R.Constraints.D:R::∈[1]
                                            <'Foreign.R.Type.Char>_N
                                            <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                               'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                               'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                               'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                               'Foreign.R.Type.Raw]>_N)))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Char>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[0] <GHC.Types.Any>_N))
                                  <GHC.Word.Word8>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.Char, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any
                                                    'Foreign.R.Type.Char) (GHC.Types.IO
                                                                             (Language.R.HExp.HExp
                                                                                s a)))
                   Foreign.R.Type.Logical
                   -> (Language.R.HExp.$WLogical
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.Logical
                            @ Foreign.R.Type.Logical
                            (Foreign.R.Type.$fStorableLogical,
                             (Foreign.R.Type.$fSingISEXPTYPELogical1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Logical>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPELogical1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Logical>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ Foreign.R.Type.Logical
                                @ Foreign.R.Type.Logical
                                @~ <Foreign.R.Type.Logical>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0]
                                       <*>_N) <Foreign.R.Type.Logical>_N <Foreign.R.Type.Logical>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable Foreign.R.Type.Logical>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Logical>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Logical>_N
                                                 <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                    'Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                    'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                    'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                 <'Foreign.R.Type.Logical>_N
                                                 <'Foreign.R.Type.Char>_N
                                                 <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                    'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                    'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                    'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Logical>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[1] <GHC.Types.Any>_N))
                                  <Foreign.R.Type.Logical>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.Logical, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any
                                                    'Foreign.R.Type.Logical) (GHC.Types.IO
                                                                                (Language.R.HExp.HExp
                                                                                   s a)))
                   Foreign.R.Type.Int
                   -> (Language.R.HExp.$WInt
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.Int
                            @ GHC.Int.Int32
                            (Foreign.Storable.$fStorableInt32,
                             (Foreign.R.Type.$fSingISEXPTYPEInt1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEInt1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ GHC.Int.Int32
                                @ GHC.Int.Int32
                                @~ <GHC.Int.Int32>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0]
                                       <*>_N) <GHC.Int.Int32>_N <GHC.Int.Int32>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable GHC.Int.Int32>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Int>_N
                                                 <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                    'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                    'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Int>_N
                                                      <'Foreign.R.Type.Logical>_N
                                                      <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                         'Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Int>_N
                                                      <'Foreign.R.Type.Char>_N
                                                      <'['Foreign.R.Type.Logical,
                                                         'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                         'Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N)))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2] <GHC.Types.Any>_N))
                                  <GHC.Int.Int32>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.Int, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any 'Foreign.R.Type.Int) (GHC.Types.IO
                                                                                          (Language.R.HExp.HExp
                                                                                             s a)))
                   Foreign.R.Type.Real
                   -> (Language.R.HExp.$WReal
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.Real
                            @ GHC.Types.Double
                            (Foreign.Storable.$fStorableDouble,
                             (Foreign.R.Type.$fSingISEXPTYPEReal1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEReal1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ GHC.Types.Double
                                @ GHC.Types.Double
                                @~ <GHC.Types.Double>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0]
                                       <*>_N) <GHC.Types.Double>_N <GHC.Types.Double>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable GHC.Types.Double>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Real>_N
                                                 <'['Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                    'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                    'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Real>_N
                                                      <'Foreign.R.Type.Int>_N
                                                      <'['Foreign.R.Type.Real,
                                                         'Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Real>_N
                                                           <'Foreign.R.Type.Logical>_N
                                                           <'['Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Real>_N
                                                           <'Foreign.R.Type.Char>_N
                                                           <'['Foreign.R.Type.Logical,
                                                              'Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3] <GHC.Types.Any>_N))
                                  <GHC.Types.Double>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.Real, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any
                                                    'Foreign.R.Type.Real) (GHC.Types.IO
                                                                             (Language.R.HExp.HExp
                                                                                s a)))
                   Foreign.R.Type.Complex
                   -> (Language.R.HExp.$WComplex
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.Complex
                            @ (Data.Complex.Complex GHC.Types.Double)
                            (Language.R.HExp.$fStorableHExp_$s$fStorableComplex,
                             (Foreign.R.Type.$fSingISEXPTYPEComplex1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Complex>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEComplex1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Complex>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ (Data.Complex.Complex GHC.Types.Double)
                                @ (Data.Complex.Complex GHC.Types.Double)
                                @~ <Data.Complex.Complex GHC.Types.Double>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0] <*>_N) <Data.Complex.Complex
                                                                       GHC.Types.Double>_N <Data.Complex.Complex
                                                                                              GHC.Types.Double>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable
                                  (Data.Complex.Complex GHC.Types.Double)>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Complex>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Complex>_N
                                                 <'['Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                    'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Complex>_N
                                                      <'Foreign.R.Type.Real>_N
                                                      <'['Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Complex>_N
                                                           <'Foreign.R.Type.Int>_N
                                                           <'['Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Complex>_N
                                                                <'Foreign.R.Type.Logical>_N
                                                                <'['Foreign.R.Type.Int,
                                                                   'Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Complex>_N
                                                                <'Foreign.R.Type.Char>_N
                                                                <'['Foreign.R.Type.Logical,
                                                                   'Foreign.R.Type.Int,
                                                                   'Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N)))))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Complex>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[4] <GHC.Types.Any>_N))
                                  <Data.Complex.Complex GHC.Types.Double>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.Complex, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any
                                                    'Foreign.R.Type.Complex) (GHC.Types.IO
                                                                                (Language.R.HExp.HExp
                                                                                   s a)))
                   Foreign.R.Type.String
                   -> (Language.R.HExp.$WString
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.String
                            @ (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)
                            (Foreign.R.Internal.$fStorableSEXP
                               @ GHC.Types.Any
                               @ 'Foreign.R.Type.Char,
                             (Foreign.R.Type.$fSingISEXPTYPEString1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.String>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEString1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.String>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)
                                @ (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)
                                @~ <Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0] <*>_N) <Foreign.R.Internal.SEXP
                                                                       GHC.Types.Any
                                                                       'Foreign.R.Type.Char>_N <Foreign.R.Internal.SEXP
                                                                                                  GHC.Types.Any
                                                                                                  'Foreign.R.Type.Char>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable
                                  (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.String>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.String>_N
                                                 <'['Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                    'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.String>_N
                                                      <'Foreign.R.Type.Complex>_N
                                                      <'['Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.String>_N
                                                           <'Foreign.R.Type.Real>_N
                                                           <'['Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.String>_N
                                                                <'Foreign.R.Type.Int>_N
                                                                <'['Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.String>_N
                                                                     <'Foreign.R.Type.Logical>_N
                                                                     <'['Foreign.R.Type.Int,
                                                                        'Foreign.R.Type.Real,
                                                                        'Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.String>_N
                                                                     <'Foreign.R.Type.Char>_N
                                                                     <'['Foreign.R.Type.Logical,
                                                                        'Foreign.R.Type.Int,
                                                                        'Foreign.R.Type.Real,
                                                                        'Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))))))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.String>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[5] <GHC.Types.Any>_N))
                                  <Foreign.R.Internal.SEXP
                                     GHC.Types.Any 'Foreign.R.Type.Char>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.String, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any
                                                    'Foreign.R.Type.String) (GHC.Types.IO
                                                                               (Language.R.HExp.HExp
                                                                                  s a)))
                   Foreign.R.Type.Vector
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readInt32OffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 36#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       (# ipv,
                          Language.R.HExp.$WVector
                            @ s
                            (GHC.Int.I32# ipv1)
                            (Data.Vector.SEXP.unsafeFromSEXP
                               @ s
                               @ 'Foreign.R.Type.Vector
                               @ (Foreign.R.Internal.SomeSEXP s)
                               (Foreign.R.Internal.$fStorableSomeSEXP @ s,
                                (Foreign.R.Type.$fSingISEXPTYPEVector1
                                   `cast`
                                 (Trans
                                      (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                      (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Vector>_N),
                                 GHC.Classes.C:(%%)),
                                Foreign.R.Type.$fSingISEXPTYPEVector1
                                  `cast`
                                (Trans
                                     (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                     (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Vector>_N),
                                (GHC.Types.Eq#
                                   @ *
                                   @ *
                                   @ (Foreign.R.Internal.SomeSEXP s)
                                   @ (Foreign.R.Internal.SomeSEXP s)
                                   @~ <Foreign.R.Internal.SomeSEXP s>_N)
                                  `cast`
                                (Sym (Data.Type.Equality.N:~[0] <*>_N) <Foreign.R.Internal.SomeSEXP
                                                                          s>_N <Foreign.R.Internal.SomeSEXP
                                                                                  s>_N))
                                 `cast`
                               (GHC.Classes.(%,,,%)
                                  <Foreign.Storable.Storable (Foreign.R.Internal.SomeSEXP s)>_N
                                  (GHC.Classes.(%,%)
                                     <Data.Singletons.SingI 'Foreign.R.Type.Vector>_N
                                     (Trans
                                          (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                    <'Foreign.R.Type.Vector>_N
                                                    <'['Foreign.R.Type.Expr,
                                                       'Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw]>_N))
                                          (Trans
                                               (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                         <'Foreign.R.Type.Vector>_N
                                                         <'Foreign.R.Type.String>_N
                                                         <'['Foreign.R.Type.Vector,
                                                            'Foreign.R.Type.Expr,
                                                            'Foreign.R.Type.WeakRef,
                                                            'Foreign.R.Type.Raw]>_N))
                                               (Trans
                                                    (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                              <'Foreign.R.Type.Vector>_N
                                                              <'Foreign.R.Type.Complex>_N
                                                              <'['Foreign.R.Type.String,
                                                                 'Foreign.R.Type.Vector,
                                                                 'Foreign.R.Type.Expr,
                                                                 'Foreign.R.Type.WeakRef,
                                                                 'Foreign.R.Type.Raw]>_N))
                                                    (Trans
                                                         (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                   <'Foreign.R.Type.Vector>_N
                                                                   <'Foreign.R.Type.Real>_N
                                                                   <'['Foreign.R.Type.Complex,
                                                                      'Foreign.R.Type.String,
                                                                      'Foreign.R.Type.Vector,
                                                                      'Foreign.R.Type.Expr,
                                                                      'Foreign.R.Type.WeakRef,
                                                                      'Foreign.R.Type.Raw]>_N))
                                                         (Trans
                                                              (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                        <'Foreign.R.Type.Vector>_N
                                                                        <'Foreign.R.Type.Int>_N
                                                                        <'['Foreign.R.Type.Real,
                                                                           'Foreign.R.Type.Complex,
                                                                           'Foreign.R.Type.String,
                                                                           'Foreign.R.Type.Vector,
                                                                           'Foreign.R.Type.Expr,
                                                                           'Foreign.R.Type.WeakRef,
                                                                           'Foreign.R.Type.Raw]>_N))
                                                              (Trans
                                                                   (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                             <'Foreign.R.Type.Vector>_N
                                                                             <'Foreign.R.Type.Logical>_N
                                                                             <'['Foreign.R.Type.Int,
                                                                                'Foreign.R.Type.Real,
                                                                                'Foreign.R.Type.Complex,
                                                                                'Foreign.R.Type.String,
                                                                                'Foreign.R.Type.Vector,
                                                                                'Foreign.R.Type.Expr,
                                                                                'Foreign.R.Type.WeakRef,
                                                                                'Foreign.R.Type.Raw]>_N))
                                                                   (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                             <'Foreign.R.Type.Vector>_N
                                                                             <'Foreign.R.Type.Char>_N
                                                                             <'['Foreign.R.Type.Logical,
                                                                                'Foreign.R.Type.Int,
                                                                                'Foreign.R.Type.Real,
                                                                                'Foreign.R.Type.Complex,
                                                                                'Foreign.R.Type.String,
                                                                                'Foreign.R.Type.Vector,
                                                                                'Foreign.R.Type.Expr,
                                                                                'Foreign.R.Type.WeakRef,
                                                                                'Foreign.R.Type.Raw]>_N)))))))))_N
                                  <Data.Singletons.SingI 'Foreign.R.Type.Vector>_N
                                  ((Data.Type.Equality.~)
                                     <*>_N
                                     (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[6] <s>_N))
                                     <Foreign.R.Internal.SomeSEXP s>_N)_N)_R
                               ds
                                 `cast`
                               (Trans
                                    (GHC.Ptr.Ptr
                                       <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                    (Sym (Foreign.R.Internal.N:SEXP[0]
                                              <s>_P <'Foreign.R.Type.Vector, a>)))) #) })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Vector))_R))
                   Foreign.R.Type.Expr
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readInt32OffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 36#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       (# ipv,
                          Language.R.HExp.$WExpr
                            @ s
                            (GHC.Int.I32# ipv1)
                            (Data.Vector.SEXP.unsafeFromSEXP
                               @ s
                               @ 'Foreign.R.Type.Expr
                               @ (Foreign.R.Internal.SomeSEXP s)
                               (Foreign.R.Internal.$fStorableSomeSEXP @ s,
                                (Foreign.R.Type.$fSingISEXPTYPEExpr1
                                   `cast`
                                 (Trans
                                      (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                      (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Expr>_N),
                                 GHC.Classes.C:(%%)),
                                Foreign.R.Type.$fSingISEXPTYPEExpr1
                                  `cast`
                                (Trans
                                     (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                     (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Expr>_N),
                                (GHC.Types.Eq#
                                   @ *
                                   @ *
                                   @ (Foreign.R.Internal.SomeSEXP s)
                                   @ (Foreign.R.Internal.SomeSEXP s)
                                   @~ <Foreign.R.Internal.SomeSEXP s>_N)
                                  `cast`
                                (Sym (Data.Type.Equality.N:~[0] <*>_N) <Foreign.R.Internal.SomeSEXP
                                                                          s>_N <Foreign.R.Internal.SomeSEXP
                                                                                  s>_N))
                                 `cast`
                               (GHC.Classes.(%,,,%)
                                  <Foreign.Storable.Storable (Foreign.R.Internal.SomeSEXP s)>_N
                                  (GHC.Classes.(%,%)
                                     <Data.Singletons.SingI 'Foreign.R.Type.Expr>_N
                                     (Trans
                                          (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                    <'Foreign.R.Type.Expr>_N
                                                    <'['Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw]>_N))
                                          (Trans
                                               (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                         <'Foreign.R.Type.Expr>_N
                                                         <'Foreign.R.Type.Vector>_N
                                                         <'['Foreign.R.Type.Expr,
                                                            'Foreign.R.Type.WeakRef,
                                                            'Foreign.R.Type.Raw]>_N))
                                               (Trans
                                                    (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                              <'Foreign.R.Type.Expr>_N
                                                              <'Foreign.R.Type.String>_N
                                                              <'['Foreign.R.Type.Vector,
                                                                 'Foreign.R.Type.Expr,
                                                                 'Foreign.R.Type.WeakRef,
                                                                 'Foreign.R.Type.Raw]>_N))
                                                    (Trans
                                                         (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                   <'Foreign.R.Type.Expr>_N
                                                                   <'Foreign.R.Type.Complex>_N
                                                                   <'['Foreign.R.Type.String,
                                                                      'Foreign.R.Type.Vector,
                                                                      'Foreign.R.Type.Expr,
                                                                      'Foreign.R.Type.WeakRef,
                                                                      'Foreign.R.Type.Raw]>_N))
                                                         (Trans
                                                              (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                        <'Foreign.R.Type.Expr>_N
                                                                        <'Foreign.R.Type.Real>_N
                                                                        <'['Foreign.R.Type.Complex,
                                                                           'Foreign.R.Type.String,
                                                                           'Foreign.R.Type.Vector,
                                                                           'Foreign.R.Type.Expr,
                                                                           'Foreign.R.Type.WeakRef,
                                                                           'Foreign.R.Type.Raw]>_N))
                                                              (Trans
                                                                   (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                             <'Foreign.R.Type.Expr>_N
                                                                             <'Foreign.R.Type.Int>_N
                                                                             <'['Foreign.R.Type.Real,
                                                                                'Foreign.R.Type.Complex,
                                                                                'Foreign.R.Type.String,
                                                                                'Foreign.R.Type.Vector,
                                                                                'Foreign.R.Type.Expr,
                                                                                'Foreign.R.Type.WeakRef,
                                                                                'Foreign.R.Type.Raw]>_N))
                                                                   (Trans
                                                                        (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                  <'Foreign.R.Type.Expr>_N
                                                                                  <'Foreign.R.Type.Logical>_N
                                                                                  <'['Foreign.R.Type.Int,
                                                                                     'Foreign.R.Type.Real,
                                                                                     'Foreign.R.Type.Complex,
                                                                                     'Foreign.R.Type.String,
                                                                                     'Foreign.R.Type.Vector,
                                                                                     'Foreign.R.Type.Expr,
                                                                                     'Foreign.R.Type.WeakRef,
                                                                                     'Foreign.R.Type.Raw]>_N))
                                                                        (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                  <'Foreign.R.Type.Expr>_N
                                                                                  <'Foreign.R.Type.Char>_N
                                                                                  <'['Foreign.R.Type.Logical,
                                                                                     'Foreign.R.Type.Int,
                                                                                     'Foreign.R.Type.Real,
                                                                                     'Foreign.R.Type.Complex,
                                                                                     'Foreign.R.Type.String,
                                                                                     'Foreign.R.Type.Vector,
                                                                                     'Foreign.R.Type.Expr,
                                                                                     'Foreign.R.Type.WeakRef,
                                                                                     'Foreign.R.Type.Raw]>_N))))))))))_N
                                  <Data.Singletons.SingI 'Foreign.R.Type.Expr>_N
                                  ((Data.Type.Equality.~)
                                     <*>_N
                                     (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[7] <s>_N))
                                     <Foreign.R.Internal.SomeSEXP s>_N)_N)_R
                               ds
                                 `cast`
                               (Trans
                                    (GHC.Ptr.Ptr
                                       <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                    (Sym (Foreign.R.Internal.N:SEXP[0]
                                              <s>_P <'Foreign.R.Type.Expr, a>)))) #) })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Expr))_R))
                   Foreign.R.Type.Bytecode
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s1, Language.R.HExp.$WBytecode @ s #))
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.Bytecode))_R))
                   Foreign.R.Type.ExtPtr
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 32#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       (# ipv4,
                          Language.R.HExp.$WExtPtr
                            @ s
                            @ GHC.Types.Any
                            (GHC.Ptr.Ptr @ GHC.Types.Any ipv1)
                              `cast`
                            (GHC.Ptr.Ptr <GHC.Types.Any, ()>)_R
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Symbol>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Symbol>_P))) #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.ExtPtr))_R))
                   Foreign.R.Type.WeakRef
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              1#
                              ipv of ds5 { (#,#) ipv2 ipv3 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              2#
                              ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 40#)
                              3#
                              ipv4 of ds7 { (#,#) ipv6 ipv7 ->
                       (# ipv6,
                          Language.R.HExp.$WWeakRef
                            @ s
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            @ 'Foreign.R.Type.Any
                            @ GHC.Types.Any
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Env, 'Foreign.R.Type.ExtPtr,
                                              'Foreign.R.Type.Nil]>_N)))
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.Closure, 'Foreign.R.Type.Builtin,
                                              'Foreign.R.Type.Special, 'Foreign.R.Type.Nil]>_N)))
                            GHC.Classes.C:(%%)
                              `cast`
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                           <'['Foreign.R.Type.WeakRef, 'Foreign.R.Type.Nil]>_N)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv7)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s 'Foreign.R.Type.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Any>_P))) #) } } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.WeakRef))_R))
                   Foreign.R.Type.Raw
                   -> (Language.R.HExp.$WRaw
                         @ GHC.Types.Any
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ GHC.Types.Any
                            @ 'Foreign.R.Type.Raw
                            @ GHC.Word.Word8
                            (Foreign.Storable.$fStorableWord8,
                             (Foreign.R.Type.$fSingISEXPTYPERaw1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Raw>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPERaw1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Raw>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ GHC.Word.Word8
                                @ GHC.Word.Word8
                                @~ <GHC.Word.Word8>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0]
                                       <*>_N) <GHC.Word.Word8>_N <GHC.Word.Word8>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable GHC.Word.Word8>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Raw>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Raw>_N <'[]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Raw>_N
                                                      <'Foreign.R.Type.WeakRef>_N
                                                      <'['Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Raw>_N
                                                           <'Foreign.R.Type.Expr>_N
                                                           <'['Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Raw>_N
                                                                <'Foreign.R.Type.Vector>_N
                                                                <'['Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.Raw>_N
                                                                     <'Foreign.R.Type.String>_N
                                                                     <'['Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Trans
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.Raw>_N
                                                                          <'Foreign.R.Type.Complex>_N
                                                                          <'['Foreign.R.Type.String,
                                                                             'Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N))
                                                                (Trans
                                                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                               <'Foreign.R.Type.Raw>_N
                                                                               <'Foreign.R.Type.Real>_N
                                                                               <'['Foreign.R.Type.Complex,
                                                                                  'Foreign.R.Type.String,
                                                                                  'Foreign.R.Type.Vector,
                                                                                  'Foreign.R.Type.Expr,
                                                                                  'Foreign.R.Type.WeakRef,
                                                                                  'Foreign.R.Type.Raw]>_N))
                                                                     (Trans
                                                                          (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                    <'Foreign.R.Type.Raw>_N
                                                                                    <'Foreign.R.Type.Int>_N
                                                                                    <'['Foreign.R.Type.Real,
                                                                                       'Foreign.R.Type.Complex,
                                                                                       'Foreign.R.Type.String,
                                                                                       'Foreign.R.Type.Vector,
                                                                                       'Foreign.R.Type.Expr,
                                                                                       'Foreign.R.Type.WeakRef,
                                                                                       'Foreign.R.Type.Raw]>_N))
                                                                          (Trans
                                                                               (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                         <'Foreign.R.Type.Raw>_N
                                                                                         <'Foreign.R.Type.Logical>_N
                                                                                         <'['Foreign.R.Type.Int,
                                                                                            'Foreign.R.Type.Real,
                                                                                            'Foreign.R.Type.Complex,
                                                                                            'Foreign.R.Type.String,
                                                                                            'Foreign.R.Type.Vector,
                                                                                            'Foreign.R.Type.Expr,
                                                                                            'Foreign.R.Type.WeakRef,
                                                                                            'Foreign.R.Type.Raw]>_N))
                                                                               (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                         <'Foreign.R.Type.Raw>_N
                                                                                         <'Foreign.R.Type.Char>_N
                                                                                         <'['Foreign.R.Type.Logical,
                                                                                            'Foreign.R.Type.Int,
                                                                                            'Foreign.R.Type.Real,
                                                                                            'Foreign.R.Type.Complex,
                                                                                            'Foreign.R.Type.String,
                                                                                            'Foreign.R.Type.Vector,
                                                                                            'Foreign.R.Type.Expr,
                                                                                            'Foreign.R.Type.WeakRef,
                                                                                            'Foreign.R.Type.Raw]>_N))))))))))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Raw>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[8] <GHC.Types.Any>_N))
                                  <GHC.Word.Word8>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <GHC.Types.Any, s> <'Foreign.R.Type.Raw, a>)))))
                        `cast`
                      (UnsafeCo representational (Language.R.HExp.HExp
                                                    GHC.Types.Any 'Foreign.R.Type.Raw) (GHC.Types.IO
                                                                                          (Language.R.HExp.HExp
                                                                                             s a)))
                   Foreign.R.Type.S4
                   -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case GHC.Prim.readAddrOffAddr#
                              @ GHC.Prim.RealWorld
                              (GHC.Prim.plusAddr# ds1 48#)
                              0#
                              s1 of ds4 { (#,#) ipv ipv1 ->
                       (# ipv,
                          Language.R.HExp.$WS4
                            @ s
                            @ GHC.Types.Any
                            (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   s GHC.Types.Any>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P))) #) })
                        `cast`
                      (Sym (GHC.Types.N:IO[0]
                                (Language.R.HExp.HExp
                                   <s>_P (UnsafeCo nominal a 'Foreign.R.Type.S4))_R)) } } }) -}
433c4132461aebffaa9ab039f602c411
  $fStorableHExp_$csizeOf ::
    Language.R.HExp.HExp s a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (ds :: Language.R.HExp.HExp s a) ->
                 Language.R.HExp.$fStorableHExp8) -}
885f750abfeca37bd9e1ecc02c150a40
  $fStorableHExp_$s$fStorableComplex ::
    Foreign.Storable.Storable (Data.Complex.Complex GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Complex.Complex GHC.Types.Double)
                  (\ (a1 :: Data.Complex.Complex GHC.Types.Double) ->
                   GHC.Types.I# 16#)
                  (\ (a1 :: Data.Complex.Complex GHC.Types.Double) ->
                   Foreign.Storable.$fStorableDouble5)
                  (\ (ptr :: GHC.Ptr.Ptr (Data.Complex.Complex GHC.Types.Double))
                     (off :: GHC.Types.Int)
                     (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case ptr of wild { GHC.Ptr.Ptr addr ->
                   case off of wild1 { GHC.Types.I# x ->
                   let {
                     a :: GHC.Prim.Addr# = GHC.Prim.plusAddr# addr (GHC.Prim.*# x 16#)
                   } in
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          a
                          0#
                          eta of ds2 { (#,#) ipv ipv1 ->
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          a
                          1#
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   (# ipv2,
                      Data.Complex.$W:+
                        @ GHC.Types.Double
                        (GHC.Types.D# ipv1)
                        (GHC.Types.D# ipv3) #) } } } })
                    `cast`
                  (<GHC.Ptr.Ptr (Data.Complex.Complex GHC.Types.Double)>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Complex.Complex GHC.Types.Double>_R))
                  (Data.Complex.$fStorableComplex6
                     @ GHC.Types.Double
                     Foreign.Storable.$fStorableDouble)
                    `cast`
                  (<GHC.Ptr.Ptr (Data.Complex.Complex GHC.Types.Double)>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R <Data.Complex.Complex GHC.Types.Double>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  (\ @ b
                     (ptr :: GHC.Ptr.Ptr b)
                     (off :: GHC.Types.Int)
                     (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case ptr of wild { GHC.Ptr.Ptr addr ->
                   case off of wild1 { GHC.Types.I# d ->
                   let {
                     a :: GHC.Prim.Addr# = GHC.Prim.plusAddr# addr d
                   } in
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          a
                          0#
                          eta of ds2 { (#,#) ipv ipv1 ->
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          a
                          1#
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   (# ipv2,
                      Data.Complex.$W:+
                        @ GHC.Types.Double
                        (GHC.Types.D# ipv1)
                        (GHC.Types.D# ipv3) #) } } } })
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Ptr.Ptr b>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Complex.Complex GHC.Types.Double>_R))
                  (\ @ b
                     (ptr :: GHC.Ptr.Ptr b)
                     (off :: GHC.Types.Int)
                     (eta :: Data.Complex.Complex GHC.Types.Double)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   Data.Complex.$fStorableComplex1
                     @ GHC.Types.Double
                     Foreign.Storable.$fStorableDouble
                     (case ptr of wild { GHC.Ptr.Ptr addr ->
                      case off of wild1 { GHC.Types.I# d ->
                      GHC.Ptr.Ptr
                        @ (Data.Complex.Complex GHC.Types.Double)
                        (GHC.Prim.plusAddr# addr d) } })
                     eta
                     eta1)
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Ptr.Ptr b>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R <Data.Complex.Complex GHC.Types.Double>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  (\ (p :: GHC.Ptr.Ptr (Data.Complex.Complex GHC.Types.Double))
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case p `cast`
                        (GHC.Ptr.Ptr
                           <Data.Complex.Complex
                              GHC.Types.Double, GHC.Types.Double>)_R of wild { GHC.Ptr.Ptr a ->
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          a
                          0#
                          s of ds2 { (#,#) ipv ipv1 ->
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          a
                          1#
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   (# ipv2,
                      Data.Complex.$W:+
                        @ GHC.Types.Double
                        (GHC.Types.D# ipv1)
                        (GHC.Types.D# ipv3) #) } } })
                    `cast`
                  (<GHC.Ptr.Ptr (Data.Complex.Complex GHC.Types.Double)>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Complex.Complex GHC.Types.Double>_R))
                  (Data.Complex.$fStorableComplex1
                     @ GHC.Types.Double
                     Foreign.Storable.$fStorableDouble)
                    `cast`
                  (<GHC.Ptr.Ptr (Data.Complex.Complex GHC.Types.Double)>_R
                   ->_R <Data.Complex.Complex GHC.Types.Double>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
266c60d1df5cd63c548e88ec291361f1
  $fTestEqualitySEXPTYPEE ::
    Data.Type.Equality.TestEquality (Language.R.HExp.E s)
  DFunId
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.R.HExp.$fTestEqualitySEXPTYPEE_$ctestEquality
                  `cast`
                (forall (s :: <*>_N).
                 Sym (Data.Type.Equality.N:TestEquality[0]
                          <Foreign.R.Type.SEXPTYPE>_N <Language.R.HExp.E s>_N)) -}
266c60d1df5cd63c548e88ec291361f1
  $fTestEqualitySEXPTYPEE_$ctestEquality ::
    Language.R.HExp.E s a
    -> Language.R.HExp.E s b
    -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   @ b :: Foreign.R.Type.SEXPTYPE
                   (w :: Language.R.HExp.E s a)
                   (w1 :: Language.R.HExp.E s b) ->
                 case w `cast`
                      (Trans
                           (Language.R.HExp.N:E[0] <s>_N <a>_N)
                           (Foreign.R.Internal.N:SEXP[0]
                                <s>_P <a>_P)) of ww { GHC.Ptr.Ptr ww1 ->
                 case w1
                        `cast`
                      (Trans
                           (Language.R.HExp.N:E[0] <s>_N <b>_N)
                           (Foreign.R.Internal.N:SEXP[0]
                                <s>_P <b>_P)) of ww2 { GHC.Ptr.Ptr ww3 ->
                 Language.R.HExp.$w$ctestEquality @ s @ a @ b ww1 ww3 } }) -}
433c4132461aebffaa9ab039f602c411
  $fTestEqualitySEXPTYPEHExp ::
    Data.Type.Equality.TestEquality (Language.R.HExp.HExp s)
  DFunId
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.R.HExp.$fEqHExp_$ctestEquality
                  `cast`
                (forall (s :: <*>_N).
                 Sym (Data.Type.Equality.N:TestEquality[0]
                          <Foreign.R.Type.SEXPTYPE>_N <Language.R.HExp.HExp s>_N)) -}
97c0504c171e84286cf80abee7ba193b
  $s$WClosure1 ::
    (Data.Singletons.SingI 'Foreign.R.Type.Any, () :: Constraint)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.R.Type.$fSingISEXPTYPEAny1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Any>_N),
                  GHC.Classes.C:(%%))) -}
b2ecf1c0f7e0fe74cc4d9364bb8b6cdb
  $s$fEqComplex ::
    GHC.Classes.Eq (Data.Complex.Complex GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Complex.Complex GHC.Types.Double)
                  (Data.Complex.$fEqComplex_$c==
                     @ GHC.Types.Double
                     GHC.Classes.$fEqDouble)
                  (\ (a1 :: Data.Complex.Complex GHC.Types.Double)
                     (b :: Data.Complex.Complex GHC.Types.Double) ->
                   case Data.Complex.$fEqComplex_$c==
                          @ GHC.Types.Double
                          GHC.Classes.$fEqDouble
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False }) -}
3488a92cd14dd5f77e32a0f8e013e923
  $tc'Builtin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   693705491919687480##
                   8273406643012701481##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Builtin2
                   1#
                   Language.R.HExp.$tc'Builtin1) -}
2952781615fc6a75bfd05ccd1d9c275c
  $tc'Builtin1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
104b9699a891b6a6e7d629662d3bdcb2
  $tc'Builtin2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Builtin3) -}
cccf8f47f77cf698d2cc07078e5298af
  $tc'Builtin3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Builtin"#) -}
c00a0705f81e1f505e4d3a8e5920a8e1
  $tc'Bytecode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5387633276959002437##
                   8607383485863829161##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Bytecode2
                   1#
                   Language.R.HExp.$tc'Bytecode1) -}
38035f7dfbb62e8501cdc09db897f66a
  $tc'Bytecode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
537f61eb263c36901f3dcc42e879580a
  $tc'Bytecode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Bytecode3) -}
9da2265275dfaa3dd871afeb0da4b52e
  $tc'Bytecode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Bytecode"#) -}
c33dba1fe62b19052752dfd431f753de
  $tc'Char :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17156719447259294439##
                   9720251530061885833##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Char2
                   1#
                   Language.R.HExp.$tc'Char1) -}
8fd1a145f7bd31a4e3c334a42ac98f9a
  $tc'Char1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
110fa08963b5fe916d6af7bf845ee9a3
  $tc'Char2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Char3) -}
99c44fbedfb9019b3f898bdb40434734
  $tc'Char3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Char"#) -}
d3572d6baffe9e26982c51f387a34c14
  $tc'Complex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2027526967165639152##
                   2838819160545741932##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Complex2
                   1#
                   Language.R.HExp.$tc'Complex1) -}
3612cc555e2ce6aa0540f9d8ba946062
  $tc'Complex1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a1292feb69560659d563a71f8a0aeb14
  $tc'Complex2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Complex3) -}
2c43e894a31a243072c132052801f75a
  $tc'Complex3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Complex"#) -}
7aec1c1602760842b5ca4bd7d8cfdb32
  $tc'E :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14197734351493977312##
                   2717100548213111167##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'E2
                   2#
                   Language.R.HExp.$tc'E1) -}
619cb1757d9b9d86211f385436660e78
  $tc'E1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cb157ba837767a203f28ea9985759816
  $tc'E2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'E3) -}
98bc3df4e64b0ae874150d1a76f0b9a0
  $tc'E3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'E"#) -}
81e77a6c055797a6077e4f4c18f1674d
  $tc'Expr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15695118093756117059##
                   11245017836775419839##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Expr2
                   1#
                   Language.R.HExp.$tc'Expr1) -}
e293e7f05150e8f029948ba5229b5e69
  $tc'Expr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bfb24ee6085ac02a65202e844e799742
  $tc'Expr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Expr3) -}
8954cb9eef3f6ec746ca7b3e84d1ddbd
  $tc'Expr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Expr"#) -}
4f2b23278c0c45d74b29f3a2b0884d00
  $tc'ExtPtr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17503675307111533482##
                   2187233439539482580##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'ExtPtr2
                   2#
                   Language.R.HExp.$tc'ExtPtr1) -}
89ca086fa353934c85f3f87b81522218
  $tc'ExtPtr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
deef60227a3ebb36558ec19c2ee1002b
  $tc'ExtPtr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'ExtPtr3) -}
748025f43cdfeb63ce5258ff3ee2c99f
  $tc'ExtPtr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExtPtr"#) -}
083797f3b74e3d365b4c1e573fb566b0
  $tc'Int :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14885586921437193568##
                   8818273958656373162##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Int2
                   1#
                   Language.R.HExp.$tc'Int1) -}
ebfd071a6bdb8ab18bb158101a9e37d9
  $tc'Int1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e8e9093cb1535303495586e134b2df51
  $tc'Int2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Int3) -}
04957c0300d40782e6dbbc6d637de858
  $tc'Int3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Int"#) -}
52c466b5581c263e552b215178f7d616
  $tc'Logical :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1005826888468341775##
                   18347059430716034712##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Logical2
                   1#
                   Language.R.HExp.$tc'Logical1) -}
3aea346acd4381440c187be32bc626c1
  $tc'Logical1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4626a41cdde37d662c85397cb273d528
  $tc'Logical2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Logical3) -}
33ff3862587d3b0ab5815f1cfe96a30a
  $tc'Logical3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Logical"#) -}
42eed951c8656ec3c8f3a4cd3a2d9b5a
  $tc'Nil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16416822459184664107##
                   1000129254689509536##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Nil2
                   1#
                   Language.R.HExp.$tc'Nil1) -}
ecd82c31fb37aeb5ba52d309cf156d55
  $tc'Nil1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
8b00223315abf0e29c0df440aab879b1
  $tc'Nil2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Nil3) -}
1f1f7a573b9b0c144390e76be2655bf8
  $tc'Nil3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Nil"#) -}
0e9c3951fc7463cc2eed6eb51f2a3bd0
  $tc'Raw :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14905453588230133511##
                   10519871510181443153##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Raw2
                   1#
                   Language.R.HExp.$tc'Raw1) -}
3eece32525e347d14e119f7d0172db83
  $tc'Raw1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
76130aac570f1d35589a363860175be9
  $tc'Raw2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Raw3) -}
0bf2057cc50504a315c6ca707933df3d
  $tc'Raw3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Raw"#) -}
7e78b4f42e17513ce7d12a126bf792c2
  $tc'Real :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16460935312317222567##
                   10617491165696047886##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Real2
                   1#
                   Language.R.HExp.$tc'Real1) -}
23d09b477e68a379a42d4306b3067d9d
  $tc'Real1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
474fe1850f82c0cf68d3bbed84c4e5df
  $tc'Real2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Real3) -}
c54baea80d83b4d974a83ef9ad955532
  $tc'Real3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Real"#) -}
d2dc60de9ad9dfb449cbd8e6ec4a4a48
  $tc'S1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e3ad398d584c598923964af2cb20c3cf
  $tc'S2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'S3) -}
be6eec89cbabe87abcc0132e75d508c4
  $tc'S3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'S4"#) -}
83822bfc0985b1ee19a10bdc902482e2
  $tc'S4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8334584743573468849##
                   5339969888654403069##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'S2
                   2#
                   Language.R.HExp.$tc'S1) -}
e52b5915dfe3c1e078c1be0f8c543bbc
  $tc'Special :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3409985085571304652##
                   17572894780447609141##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Special2
                   1#
                   Language.R.HExp.$tc'Special1) -}
085d5417c86a72be4722eb5a8842218a
  $tc'Special1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
40c65e2a59c67696e39a8e8e4c555f20
  $tc'Special2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Special3) -}
6938cd6f48dc678e1f49981c2f47a302
  $tc'Special3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Special"#) -}
d1162e251fed76e14d9b9bc6f78ecb79
  $tc'String :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5497448017209506399##
                   7825449294207657139##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'String2
                   1#
                   Language.R.HExp.$tc'String1) -}
587bbc65452e82b737a13afd3d9bdcbc
  $tc'String1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3a7eb5edaf21ababfc434acfd90fb6e0
  $tc'String2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'String3) -}
0f0bffa5f145300e4529f1d8afa7d3a9
  $tc'String3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'String"#) -}
e4cc0ef97a4aa699a2538642a8b37dcd
  $tc'Vector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12218509631847446222##
                   9577026832429107742##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tc'Vector2
                   1#
                   Language.R.HExp.$tc'Vector1) -}
f40fedd9e0a096836a820bc07660b4c1
  $tc'Vector1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a9f20fa126b4ab948bb91fc7e2b260dc
  $tc'Vector2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tc'Vector3) -}
1e9e184cb7d73fe9c53c2ace204abcdf
  $tc'Vector3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Vector"#) -}
1946199651f530261f91a6203b32a9e8
  $tcE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1233624208525920831##
                   17024755180519752252##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tcE2
                   0#
                   Language.R.HExp.$tcE1) -}
bccff049906e05cfe4b93920ce044935
  $tcE1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2a220dd22895f7a1ebcbb84ff61c9452
  $tcE2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tcE3) -}
d148c9b56329cad3a1f21cd4339e3d70
  $tcE3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("E"#) -}
76079addd90469647c9db93d69b25d69
  $tcHExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1342217634968188807##
                   998587110910509940##
                   Language.R.HExp.$trModule
                   Language.R.HExp.$tcHExp1
                   0#
                   Language.R.HExp.$tcE1) -}
e9ea5537fa7c55adfd5d2f314edb01c1
  $tcHExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$tcHExp2) -}
900b08b90b2dd3ade53f5db02f6c4480
  $tcHExp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HExp"#) -}
fec1f163221bb1552867e35a5a8d25c8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.R.HExp.$trModule3
                   Language.R.HExp.$trModule1) -}
2e39f6d599eb71be951fbacc0e530445
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$trModule2) -}
765dfa4fd142b098c5ae6ffc63e5c333
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.R.HExp"#) -}
bff07c6cb4c1fc8246b315f001640ef6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.HExp.$trModule4) -}
bbf24e7dea366b27e4f42eee99bc7727
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
433c4132461aebffaa9ab039f602c411
  $w$cpeekByteOff ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Language.R.HExp.HExp s a #)
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [0] -}
abee3eafa485554a7f8b6e17a0f30be0
  $w$ctestEquality ::
    GHC.Prim.Addr#
    -> GHC.Prim.Addr# -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
f1bcafb9e167a33efc2a06a3e29e60f1
  $wvector ::
    GHC.Prim.Addr#
    -> Data.Vector.SEXP.Vector s a (Data.Vector.SEXP.Base.ElemRep s a)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
65e33a95fbf553063595c4b0afdfd42b
  (===) ::
    forall k (f :: k -> *) (a :: k) (b :: k).
    Data.Type.Equality.TestEquality f =>
    f a -> f b -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ f :: k -> *
                   @ a :: k
                   @ b :: k
                   ($dTestEquality :: Data.Type.Equality.TestEquality f)
                   (x :: f a)
                   (y :: f b) ->
                 case $dTestEquality
                        `cast`
                      (Data.Type.Equality.N:TestEquality[0] <k>_N <f>_N)
                        @ a
                        @ b
                        x
                        y of wild {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ipv -> GHC.Types.True }) -}
266c60d1df5cd63c548e88ec291361f1
  type role E phantom phantom
  newtype E s (a :: Foreign.R.Type.SEXPTYPE)
    = E (Foreign.R.Internal.SEXP s a)
433c4132461aebffaa9ab039f602c411
  type role HExp phantom nominal
  data HExp a (b :: Foreign.R.Type.SEXPTYPE) where
    Nil :: HExp a 'Foreign.R.Type.Nil
    Symbol :: (a1
               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                          'Foreign.R.Type.Nil]) =>
              (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
              -> (Foreign.R.Internal.SEXP a c) -> HExp a 'Foreign.R.Type.Symbol
    List :: (Foreign.R.Type.IsPairList b1,
             c
             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Symbol,
                                        'Foreign.R.Type.Nil]) =>
            (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
            -> (Foreign.R.Internal.SEXP a c) -> HExp a 'Foreign.R.Type.List
    Env :: (Foreign.R.Type.IsPairList a1,
            b1
            Foreign.R.Constraints.:∈ '['Foreign.R.Type.Env,
                                       'Foreign.R.Type.Nil],
            c
            Foreign.R.Constraints.:∈ '['Foreign.R.Type.Vector,
                                       'Foreign.R.Type.Nil]) =>
           (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
           -> (Foreign.R.Internal.SEXP a c) -> HExp a 'Foreign.R.Type.Env
    Closure :: Foreign.R.Type.IsPairList a1 =>
               (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
               -> (Foreign.R.Internal.SEXP a 'Foreign.R.Type.Env)
               -> HExp a 'Foreign.R.Type.Closure
    Promise :: (Foreign.R.Type.IsExpression b1,
                c
                Foreign.R.Constraints.:∈ '['Foreign.R.Type.Env,
                                           'Foreign.R.Type.Nil]) =>
               (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
               -> (Foreign.R.Internal.SEXP a c) -> HExp a 'Foreign.R.Type.Promise
    Lang :: (Foreign.R.Type.IsExpression a1,
             Foreign.R.Type.IsPairList b1) =>
            (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
            -> HExp a 'Foreign.R.Type.Lang
    Special :: {-# UNPACK #-}GHC.Int.Int32
               -> HExp a 'Foreign.R.Type.Special
    Builtin :: {-# UNPACK #-}GHC.Int.Int32
               -> HExp a 'Foreign.R.Type.Builtin
    Char :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                             a 'Foreign.R.Type.Char GHC.Word.Word8)
            -> HExp a 'Foreign.R.Type.Char
    Logical :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                                a 'Foreign.R.Type.Logical Foreign.R.Type.Logical)
               -> HExp a 'Foreign.R.Type.Logical
    Int :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                            a 'Foreign.R.Type.Int GHC.Int.Int32)
           -> HExp a 'Foreign.R.Type.Int
    Real :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                             a 'Foreign.R.Type.Real GHC.Types.Double)
            -> HExp a 'Foreign.R.Type.Real
    Complex :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                                a 'Foreign.R.Type.Complex (Data.Complex.Complex GHC.Types.Double))
               -> HExp a 'Foreign.R.Type.Complex
    String :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                               a
                               'Foreign.R.Type.String
                               (Foreign.R.Internal.SEXP a 'Foreign.R.Type.Char))
              -> HExp a 'Foreign.R.Type.String
    DotDotDot :: Foreign.R.Type.IsPairList a1 =>
                 (Foreign.R.Internal.SEXP a a1) -> HExp a 'Foreign.R.Type.List
    Vector :: {-# UNPACK #-}GHC.Int.Int32
              -> {-# UNPACK #-}(Data.Vector.SEXP.Vector
                                  a 'Foreign.R.Type.Vector (Foreign.R.Internal.SomeSEXP a))
              -> HExp a 'Foreign.R.Type.Vector
    Expr :: {-# UNPACK #-}GHC.Int.Int32
            -> {-# UNPACK #-}(Data.Vector.SEXP.Vector
                                a 'Foreign.R.Type.Expr (Foreign.R.Internal.SomeSEXP a))
            -> HExp a 'Foreign.R.Type.Expr
    Bytecode :: HExp a 'Foreign.R.Type.Bytecode
    ExtPtr :: (GHC.Ptr.Ptr ()) -> (Foreign.R.Internal.SEXP a b1)
              -> (Foreign.R.Internal.SEXP a 'Foreign.R.Type.Symbol)
              -> HExp a 'Foreign.R.Type.ExtPtr
    WeakRef :: (a1
                Foreign.R.Constraints.:∈ '['Foreign.R.Type.Env,
                                           'Foreign.R.Type.ExtPtr, 'Foreign.R.Type.Nil],
                c
                Foreign.R.Constraints.:∈ '['Foreign.R.Type.Closure,
                                           'Foreign.R.Type.Builtin, 'Foreign.R.Type.Special,
                                           'Foreign.R.Type.Nil],
                d
                Foreign.R.Constraints.:∈ '['Foreign.R.Type.WeakRef,
                                           'Foreign.R.Type.Nil]) =>
               (Foreign.R.Internal.SEXP a a1) -> (Foreign.R.Internal.SEXP a b1)
               -> (Foreign.R.Internal.SEXP a c) -> (Foreign.R.Internal.SEXP a d)
               -> HExp a 'Foreign.R.Type.WeakRef
    Raw :: {-# UNPACK #-}(Data.Vector.SEXP.Vector
                            a 'Foreign.R.Type.Raw GHC.Word.Word8)
           -> HExp a 'Foreign.R.Type.Raw
    S4 :: (Foreign.R.Internal.SEXP a a1) -> HExp a 'Foreign.R.Type.S4
4c1fd9e46ec95c8e40058dd387b6e55d
  hexp :: Foreign.R.Internal.SEXP s a -> Language.R.HExp.HExp s a
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (x :: Foreign.R.Internal.SEXP s a) ->
                 let {
                   $d(%,%) :: (Data.Singletons.SingI 'Foreign.R.Type.Any,
                               () :: Constraint)
                   = (Foreign.R.Type.$fSingISEXPTYPEAny1
                        `cast`
                      (Trans
                           (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                           (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Any>_N),
                      GHC.Classes.C:(%%))
                 } in
                 case x `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <s>_P <a>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 s a, Foreign.R.Internal.SEXPREC>)_R) of ds { GHC.Ptr.Ptr ds1 ->
                 case {__pkg_ccall inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 GHC.Prim.Int# #)}
                        ds1
                        GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                 case Foreign.R.Type.$w$ctoEnum
                        (GHC.Prim.narrow32Int# ds3) of wild1 {
                   DEFAULT
                   -> case Internal.Error.unimplemented
                             @ (GHC.Types.IO (Language.R.HExp.HExp s a))
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n :: b)[OneShot] ->
                                 GHC.CString.unpackFoldrCString# @ b "peekHExp: "# c n)
                                (case {__pkg_ccall inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Int# #)}
                                        ds1
                                        GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                                 Foreign.R.Type.$fLiftSEXPTYPE_$cshow
                                   (Foreign.R.Type.$w$ctoEnum (GHC.Prim.narrow32Int# ds5)) }))
                      ret_ty (Language.R.HExp.HExp s a)
                      of {}
                   Foreign.R.Type.Nil
                   -> (Language.R.HExp.$WNil @ s)
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Nil a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R))))
                   Foreign.R.Type.Symbol
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      (Language.R.HExp.$WSymbol
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ GHC.Types.Any
                         @ GHC.Types.Any
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Char, 'Foreign.R.Type.Nil]>_N)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Symbol a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } }
                   Foreign.R.Type.List
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      (Language.R.HExp.$WList
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         @ GHC.Types.Any
                         $d(%,%)
                           `cast`
                         (GHC.Classes.(%,%)
                            <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                            (Sym (Foreign.R.Constraints.D:R::∈[0]
                                      <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Symbol, 'Foreign.R.Type.Nil]>_N)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.List a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } }
                   Foreign.R.Type.Closure
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      (Language.R.HExp.$WClosure
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ GHC.Types.Any
                         $d(%,%)
                           `cast`
                         (GHC.Classes.(%,%)
                            <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                            (Sym (Foreign.R.Constraints.D:R::∈[0]
                                      <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Env>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Env>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Closure a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } }
                   Foreign.R.Type.Env
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      (Language.R.HExp.$WEnv
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         $d(%,%)
                           `cast`
                         (GHC.Classes.(%,%)
                            <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                            (Sym (Foreign.R.Constraints.D:R::∈[0]
                                      <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Env, 'Foreign.R.Type.Nil]>_N)))
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Vector, 'Foreign.R.Type.Nil]>_N)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Env a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } }
                   Foreign.R.Type.Promise
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      (Language.R.HExp.$WPromise
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         $d(%,%)
                           `cast`
                         (GHC.Classes.(%,%)
                            <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                            (Sym (Foreign.R.Constraints.D:R::∈[0]
                                      <'['Foreign.R.Type.Lang, 'Foreign.R.Type.Expr,
                                         'Foreign.R.Type.Symbol]>_N)))_R
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Env, 'Foreign.R.Type.Nil]>_N)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Promise a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } }
                   Foreign.R.Type.Lang
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      (Language.R.HExp.$WLang
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         $d(%,%)
                           `cast`
                         (GHC.Classes.(%,%)
                            <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                            (Sym (Foreign.R.Constraints.D:R::∈[0]
                                      <'['Foreign.R.Type.Lang, 'Foreign.R.Type.Expr,
                                         'Foreign.R.Type.Symbol]>_N)))_R
                         $d(%,%)
                           `cast`
                         (GHC.Classes.(%,%)
                            <Data.Singletons.SingI 'Foreign.R.Type.Any>_N
                            (Sym (Foreign.R.Constraints.D:R::∈[0]
                                      <'['Foreign.R.Type.List, 'Foreign.R.Type.Nil]>_N)))_R
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Lang a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } }
                   Foreign.R.Type.Special
                   -> case GHC.Prim.readInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      (Language.R.HExp.$WSpecial @ s (GHC.Int.I32# ipv1))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Special a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) }
                   Foreign.R.Type.Builtin
                   -> case GHC.Prim.readInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      (Language.R.HExp.$WBuiltin @ s (GHC.Int.I32# ipv1))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Builtin a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) }
                   Foreign.R.Type.Char
                   -> case (Language.R.HExp.$WChar
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Char
                                 @ GHC.Word.Word8
                                 (Foreign.Storable.$fStorableWord8,
                                  (Foreign.R.Type.$fSingISEXPTYPEChar1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Char>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPEChar1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Char>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ GHC.Word.Word8
                                     @ GHC.Word.Word8
                                     @~ <GHC.Word.Word8>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <*>_N) <GHC.Word.Word8>_N <GHC.Word.Word8>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable GHC.Word.Word8>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.Char>_N
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Char>_N
                                                 <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                    'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                    'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                    'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N)))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.Char>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[0]
                                                 <GHC.Types.Any>_N))
                                       <GHC.Word.Word8>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.Char, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Char) (GHC.Types.IO
                                                                                       (Language.R.HExp.HExp
                                                                                          s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.Logical
                   -> case (Language.R.HExp.$WLogical
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Logical
                                 @ Foreign.R.Type.Logical
                                 (Foreign.R.Type.$fStorableLogical,
                                  (Foreign.R.Type.$fSingISEXPTYPELogical1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Logical>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPELogical1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Logical>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ Foreign.R.Type.Logical
                                     @ Foreign.R.Type.Logical
                                     @~ <Foreign.R.Type.Logical>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <*>_N) <Foreign.R.Type.Logical>_N <Foreign.R.Type.Logical>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable Foreign.R.Type.Logical>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.Logical>_N
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                      <'Foreign.R.Type.Logical>_N
                                                      <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                         'Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Logical>_N
                                                      <'Foreign.R.Type.Char>_N
                                                      <'['Foreign.R.Type.Logical,
                                                         'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                         'Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.Logical>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[1]
                                                 <GHC.Types.Any>_N))
                                       <Foreign.R.Type.Logical>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.Logical, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Logical) (GHC.Types.IO
                                                                                          (Language.R.HExp.HExp
                                                                                             s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.Int
                   -> case (Language.R.HExp.$WInt
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Int
                                 @ GHC.Int.Int32
                                 (Foreign.Storable.$fStorableInt32,
                                  (Foreign.R.Type.$fSingISEXPTYPEInt1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPEInt1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ GHC.Int.Int32
                                     @ GHC.Int.Int32
                                     @~ <GHC.Int.Int32>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <*>_N) <GHC.Int.Int32>_N <GHC.Int.Int32>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable GHC.Int.Int32>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                      <'Foreign.R.Type.Int>_N
                                                      <'['Foreign.R.Type.Real,
                                                         'Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Int>_N
                                                           <'Foreign.R.Type.Logical>_N
                                                           <'['Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Int>_N
                                                           <'Foreign.R.Type.Char>_N
                                                           <'['Foreign.R.Type.Logical,
                                                              'Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N)))))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2]
                                                 <GHC.Types.Any>_N))
                                       <GHC.Int.Int32>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.Int, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Int) (GHC.Types.IO
                                                                                      (Language.R.HExp.HExp
                                                                                         s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.Real
                   -> case (Language.R.HExp.$WReal
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Real
                                 @ GHC.Types.Double
                                 (Foreign.Storable.$fStorableDouble,
                                  (Foreign.R.Type.$fSingISEXPTYPEReal1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPEReal1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ GHC.Types.Double
                                     @ GHC.Types.Double
                                     @~ <GHC.Types.Double>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <*>_N) <GHC.Types.Double>_N <GHC.Types.Double>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable GHC.Types.Double>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                      <'Foreign.R.Type.Real>_N
                                                      <'['Foreign.R.Type.Complex,
                                                         'Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Real>_N
                                                           <'Foreign.R.Type.Int>_N
                                                           <'['Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Real>_N
                                                                <'Foreign.R.Type.Logical>_N
                                                                <'['Foreign.R.Type.Int,
                                                                   'Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Real>_N
                                                                <'Foreign.R.Type.Char>_N
                                                                <'['Foreign.R.Type.Logical,
                                                                   'Foreign.R.Type.Int,
                                                                   'Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))))))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3]
                                                 <GHC.Types.Any>_N))
                                       <GHC.Types.Double>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.Real, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Real) (GHC.Types.IO
                                                                                       (Language.R.HExp.HExp
                                                                                          s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.Complex
                   -> case (Language.R.HExp.$WComplex
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Complex
                                 @ (Data.Complex.Complex GHC.Types.Double)
                                 (Language.R.HExp.$fStorableHExp_$s$fStorableComplex,
                                  (Foreign.R.Type.$fSingISEXPTYPEComplex1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Complex>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPEComplex1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Complex>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ (Data.Complex.Complex GHC.Types.Double)
                                     @ (Data.Complex.Complex GHC.Types.Double)
                                     @~ <Data.Complex.Complex GHC.Types.Double>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0] <*>_N) <Data.Complex.Complex
                                                                            GHC.Types.Double>_N <Data.Complex.Complex
                                                                                                   GHC.Types.Double>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable
                                       (Data.Complex.Complex GHC.Types.Double)>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.Complex>_N
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                      <'Foreign.R.Type.Complex>_N
                                                      <'['Foreign.R.Type.String,
                                                         'Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Complex>_N
                                                           <'Foreign.R.Type.Real>_N
                                                           <'['Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Complex>_N
                                                                <'Foreign.R.Type.Int>_N
                                                                <'['Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.Complex>_N
                                                                     <'Foreign.R.Type.Logical>_N
                                                                     <'['Foreign.R.Type.Int,
                                                                        'Foreign.R.Type.Real,
                                                                        'Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.Complex>_N
                                                                     <'Foreign.R.Type.Char>_N
                                                                     <'['Foreign.R.Type.Logical,
                                                                        'Foreign.R.Type.Int,
                                                                        'Foreign.R.Type.Real,
                                                                        'Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N)))))))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.Complex>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[4]
                                                 <GHC.Types.Any>_N))
                                       <Data.Complex.Complex GHC.Types.Double>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.Complex, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Complex) (GHC.Types.IO
                                                                                          (Language.R.HExp.HExp
                                                                                             s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.String
                   -> case (Language.R.HExp.$WString
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.String
                                 @ (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)
                                 (Foreign.R.Internal.$fStorableSEXP
                                    @ GHC.Types.Any
                                    @ 'Foreign.R.Type.Char,
                                  (Foreign.R.Type.$fSingISEXPTYPEString1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.String>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPEString1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.String>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)
                                     @ (Foreign.R.Internal.SEXP GHC.Types.Any 'Foreign.R.Type.Char)
                                     @~ <Foreign.R.Internal.SEXP
                                           GHC.Types.Any 'Foreign.R.Type.Char>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0] <*>_N) <Foreign.R.Internal.SEXP
                                                                            GHC.Types.Any
                                                                            'Foreign.R.Type.Char>_N <Foreign.R.Internal.SEXP
                                                                                                       GHC.Types.Any
                                                                                                       'Foreign.R.Type.Char>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable
                                       (Foreign.R.Internal.SEXP
                                          GHC.Types.Any 'Foreign.R.Type.Char)>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.String>_N
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                      <'Foreign.R.Type.String>_N
                                                      <'['Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.String>_N
                                                           <'Foreign.R.Type.Complex>_N
                                                           <'['Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.String>_N
                                                                <'Foreign.R.Type.Real>_N
                                                                <'['Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.String>_N
                                                                     <'Foreign.R.Type.Int>_N
                                                                     <'['Foreign.R.Type.Real,
                                                                        'Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Trans
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.String>_N
                                                                          <'Foreign.R.Type.Logical>_N
                                                                          <'['Foreign.R.Type.Int,
                                                                             'Foreign.R.Type.Real,
                                                                             'Foreign.R.Type.Complex,
                                                                             'Foreign.R.Type.String,
                                                                             'Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N))
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.String>_N
                                                                          <'Foreign.R.Type.Char>_N
                                                                          <'['Foreign.R.Type.Logical,
                                                                             'Foreign.R.Type.Int,
                                                                             'Foreign.R.Type.Real,
                                                                             'Foreign.R.Type.Complex,
                                                                             'Foreign.R.Type.String,
                                                                             'Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N))))))))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.String>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[5]
                                                 <GHC.Types.Any>_N))
                                       <Foreign.R.Internal.SEXP
                                          GHC.Types.Any 'Foreign.R.Type.Char>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.String, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.String) (GHC.Types.IO
                                                                                         (Language.R.HExp.HExp
                                                                                            s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.Vector
                   -> case GHC.Prim.readInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 36#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      (Language.R.HExp.$WVector
                         @ s
                         (GHC.Int.I32# ipv1)
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ s
                            @ 'Foreign.R.Type.Vector
                            @ (Foreign.R.Internal.SomeSEXP s)
                            (Foreign.R.Internal.$fStorableSomeSEXP @ s,
                             (Foreign.R.Type.$fSingISEXPTYPEVector1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Vector>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEVector1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Vector>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ (Foreign.R.Internal.SomeSEXP s)
                                @ (Foreign.R.Internal.SomeSEXP s)
                                @~ <Foreign.R.Internal.SomeSEXP s>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0] <*>_N) <Foreign.R.Internal.SomeSEXP
                                                                       s>_N <Foreign.R.Internal.SomeSEXP
                                                                               s>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable (Foreign.R.Internal.SomeSEXP s)>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Vector>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Vector>_N
                                                 <'['Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Vector>_N
                                                      <'Foreign.R.Type.String>_N
                                                      <'['Foreign.R.Type.Vector,
                                                         'Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Vector>_N
                                                           <'Foreign.R.Type.Complex>_N
                                                           <'['Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Vector>_N
                                                                <'Foreign.R.Type.Real>_N
                                                                <'['Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.Vector>_N
                                                                     <'Foreign.R.Type.Int>_N
                                                                     <'['Foreign.R.Type.Real,
                                                                        'Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Trans
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.Vector>_N
                                                                          <'Foreign.R.Type.Logical>_N
                                                                          <'['Foreign.R.Type.Int,
                                                                             'Foreign.R.Type.Real,
                                                                             'Foreign.R.Type.Complex,
                                                                             'Foreign.R.Type.String,
                                                                             'Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N))
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.Vector>_N
                                                                          <'Foreign.R.Type.Char>_N
                                                                          <'['Foreign.R.Type.Logical,
                                                                             'Foreign.R.Type.Int,
                                                                             'Foreign.R.Type.Real,
                                                                             'Foreign.R.Type.Complex,
                                                                             'Foreign.R.Type.String,
                                                                             'Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N)))))))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Vector>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[6] <s>_N))
                                  <Foreign.R.Internal.SomeSEXP s>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Vector, a>)))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Vector a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) }
                   Foreign.R.Type.Expr
                   -> case GHC.Prim.readInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 36#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      (Language.R.HExp.$WExpr
                         @ s
                         (GHC.Int.I32# ipv1)
                         (Data.Vector.SEXP.unsafeFromSEXP
                            @ s
                            @ 'Foreign.R.Type.Expr
                            @ (Foreign.R.Internal.SomeSEXP s)
                            (Foreign.R.Internal.$fStorableSomeSEXP @ s,
                             (Foreign.R.Type.$fSingISEXPTYPEExpr1
                                `cast`
                              (Trans
                                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                   (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Expr>_N),
                              GHC.Classes.C:(%%)),
                             Foreign.R.Type.$fSingISEXPTYPEExpr1
                               `cast`
                             (Trans
                                  (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                  (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Expr>_N),
                             (GHC.Types.Eq#
                                @ *
                                @ *
                                @ (Foreign.R.Internal.SomeSEXP s)
                                @ (Foreign.R.Internal.SomeSEXP s)
                                @~ <Foreign.R.Internal.SomeSEXP s>_N)
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0] <*>_N) <Foreign.R.Internal.SomeSEXP
                                                                       s>_N <Foreign.R.Internal.SomeSEXP
                                                                               s>_N))
                              `cast`
                            (GHC.Classes.(%,,,%)
                               <Foreign.Storable.Storable (Foreign.R.Internal.SomeSEXP s)>_N
                               (GHC.Classes.(%,%)
                                  <Data.Singletons.SingI 'Foreign.R.Type.Expr>_N
                                  (Trans
                                       (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                 <'Foreign.R.Type.Expr>_N
                                                 <'['Foreign.R.Type.WeakRef,
                                                    'Foreign.R.Type.Raw]>_N))
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                      <'Foreign.R.Type.Expr>_N
                                                      <'Foreign.R.Type.Vector>_N
                                                      <'['Foreign.R.Type.Expr,
                                                         'Foreign.R.Type.WeakRef,
                                                         'Foreign.R.Type.Raw]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Expr>_N
                                                           <'Foreign.R.Type.String>_N
                                                           <'['Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Expr>_N
                                                                <'Foreign.R.Type.Complex>_N
                                                                <'['Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.Expr>_N
                                                                     <'Foreign.R.Type.Real>_N
                                                                     <'['Foreign.R.Type.Complex,
                                                                        'Foreign.R.Type.String,
                                                                        'Foreign.R.Type.Vector,
                                                                        'Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Trans
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.Expr>_N
                                                                          <'Foreign.R.Type.Int>_N
                                                                          <'['Foreign.R.Type.Real,
                                                                             'Foreign.R.Type.Complex,
                                                                             'Foreign.R.Type.String,
                                                                             'Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N))
                                                                (Trans
                                                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                               <'Foreign.R.Type.Expr>_N
                                                                               <'Foreign.R.Type.Logical>_N
                                                                               <'['Foreign.R.Type.Int,
                                                                                  'Foreign.R.Type.Real,
                                                                                  'Foreign.R.Type.Complex,
                                                                                  'Foreign.R.Type.String,
                                                                                  'Foreign.R.Type.Vector,
                                                                                  'Foreign.R.Type.Expr,
                                                                                  'Foreign.R.Type.WeakRef,
                                                                                  'Foreign.R.Type.Raw]>_N))
                                                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                               <'Foreign.R.Type.Expr>_N
                                                                               <'Foreign.R.Type.Char>_N
                                                                               <'['Foreign.R.Type.Logical,
                                                                                  'Foreign.R.Type.Int,
                                                                                  'Foreign.R.Type.Real,
                                                                                  'Foreign.R.Type.Complex,
                                                                                  'Foreign.R.Type.String,
                                                                                  'Foreign.R.Type.Vector,
                                                                                  'Foreign.R.Type.Expr,
                                                                                  'Foreign.R.Type.WeakRef,
                                                                                  'Foreign.R.Type.Raw]>_N))))))))))_N
                               <Data.Singletons.SingI 'Foreign.R.Type.Expr>_N
                               ((Data.Type.Equality.~)
                                  <*>_N
                                  (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[7] <s>_N))
                                  <Foreign.R.Internal.SomeSEXP s>_N)_N)_R
                            ds
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <'Foreign.R.Type.Expr, a>)))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Expr a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) }
                   Foreign.R.Type.Bytecode
                   -> (Language.R.HExp.$WBytecode @ s)
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.Bytecode a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R))))
                   Foreign.R.Type.ExtPtr
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 32#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      (Language.R.HExp.$WExtPtr
                         @ s
                         @ GHC.Types.Any
                         (GHC.Ptr.Ptr @ GHC.Types.Any ipv1)
                           `cast`
                         (GHC.Ptr.Ptr <GHC.Types.Any, ()>)_R
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Symbol>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Symbol>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.ExtPtr a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } }
                   Foreign.R.Type.WeakRef
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             1#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             2#
                             ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 40#)
                             3#
                             ipv4 of ds7 { (#,#) ipv6 ipv7 ->
                      (Language.R.HExp.$WWeakRef
                         @ s
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         @ 'Foreign.R.Type.Any
                         @ GHC.Types.Any
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Env, 'Foreign.R.Type.ExtPtr,
                                           'Foreign.R.Type.Nil]>_N)))
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.Closure, 'Foreign.R.Type.Builtin,
                                           'Foreign.R.Type.Special, 'Foreign.R.Type.Nil]>_N)))
                         GHC.Classes.C:(%%)
                           `cast`
                         (Sub (Sym (Foreign.R.Constraints.D:R::∈[0]
                                        <'['Foreign.R.Type.WeakRef, 'Foreign.R.Type.Nil]>_N)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv3)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv5)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)))
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv7)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s 'Foreign.R.Type.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0]
                                        <s>_P <'Foreign.R.Type.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.WeakRef a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } } }
                   Foreign.R.Type.Raw
                   -> case (Language.R.HExp.$WRaw
                              @ GHC.Types.Any
                              (Data.Vector.SEXP.unsafeFromSEXP
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Raw
                                 @ GHC.Word.Word8
                                 (Foreign.Storable.$fStorableWord8,
                                  (Foreign.R.Type.$fSingISEXPTYPERaw1
                                     `cast`
                                   (Trans
                                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                        (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Raw>_N),
                                   GHC.Classes.C:(%%)),
                                  Foreign.R.Type.$fSingISEXPTYPERaw1
                                    `cast`
                                  (Trans
                                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Raw>_N),
                                  (GHC.Types.Eq#
                                     @ *
                                     @ *
                                     @ GHC.Word.Word8
                                     @ GHC.Word.Word8
                                     @~ <GHC.Word.Word8>_N)
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <*>_N) <GHC.Word.Word8>_N <GHC.Word.Word8>_N))
                                   `cast`
                                 (GHC.Classes.(%,,,%)
                                    <Foreign.Storable.Storable GHC.Word.Word8>_N
                                    (GHC.Classes.(%,%)
                                       <Data.Singletons.SingI 'Foreign.R.Type.Raw>_N
                                       (Trans
                                            (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                      <'Foreign.R.Type.Raw>_N <'[]>_N))
                                            (Trans
                                                 (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                           <'Foreign.R.Type.Raw>_N
                                                           <'Foreign.R.Type.WeakRef>_N
                                                           <'['Foreign.R.Type.Raw]>_N))
                                                 (Trans
                                                      (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                <'Foreign.R.Type.Raw>_N
                                                                <'Foreign.R.Type.Expr>_N
                                                                <'['Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw]>_N))
                                                      (Trans
                                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                     <'Foreign.R.Type.Raw>_N
                                                                     <'Foreign.R.Type.Vector>_N
                                                                     <'['Foreign.R.Type.Expr,
                                                                        'Foreign.R.Type.WeakRef,
                                                                        'Foreign.R.Type.Raw]>_N))
                                                           (Trans
                                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                          <'Foreign.R.Type.Raw>_N
                                                                          <'Foreign.R.Type.String>_N
                                                                          <'['Foreign.R.Type.Vector,
                                                                             'Foreign.R.Type.Expr,
                                                                             'Foreign.R.Type.WeakRef,
                                                                             'Foreign.R.Type.Raw]>_N))
                                                                (Trans
                                                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                               <'Foreign.R.Type.Raw>_N
                                                                               <'Foreign.R.Type.Complex>_N
                                                                               <'['Foreign.R.Type.String,
                                                                                  'Foreign.R.Type.Vector,
                                                                                  'Foreign.R.Type.Expr,
                                                                                  'Foreign.R.Type.WeakRef,
                                                                                  'Foreign.R.Type.Raw]>_N))
                                                                     (Trans
                                                                          (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                    <'Foreign.R.Type.Raw>_N
                                                                                    <'Foreign.R.Type.Real>_N
                                                                                    <'['Foreign.R.Type.Complex,
                                                                                       'Foreign.R.Type.String,
                                                                                       'Foreign.R.Type.Vector,
                                                                                       'Foreign.R.Type.Expr,
                                                                                       'Foreign.R.Type.WeakRef,
                                                                                       'Foreign.R.Type.Raw]>_N))
                                                                          (Trans
                                                                               (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                         <'Foreign.R.Type.Raw>_N
                                                                                         <'Foreign.R.Type.Int>_N
                                                                                         <'['Foreign.R.Type.Real,
                                                                                            'Foreign.R.Type.Complex,
                                                                                            'Foreign.R.Type.String,
                                                                                            'Foreign.R.Type.Vector,
                                                                                            'Foreign.R.Type.Expr,
                                                                                            'Foreign.R.Type.WeakRef,
                                                                                            'Foreign.R.Type.Raw]>_N))
                                                                               (Trans
                                                                                    (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                              <'Foreign.R.Type.Raw>_N
                                                                                              <'Foreign.R.Type.Logical>_N
                                                                                              <'['Foreign.R.Type.Int,
                                                                                                 'Foreign.R.Type.Real,
                                                                                                 'Foreign.R.Type.Complex,
                                                                                                 'Foreign.R.Type.String,
                                                                                                 'Foreign.R.Type.Vector,
                                                                                                 'Foreign.R.Type.Expr,
                                                                                                 'Foreign.R.Type.WeakRef,
                                                                                                 'Foreign.R.Type.Raw]>_N))
                                                                                    (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                                                              <'Foreign.R.Type.Raw>_N
                                                                                              <'Foreign.R.Type.Char>_N
                                                                                              <'['Foreign.R.Type.Logical,
                                                                                                 'Foreign.R.Type.Int,
                                                                                                 'Foreign.R.Type.Real,
                                                                                                 'Foreign.R.Type.Complex,
                                                                                                 'Foreign.R.Type.String,
                                                                                                 'Foreign.R.Type.Vector,
                                                                                                 'Foreign.R.Type.Expr,
                                                                                                 'Foreign.R.Type.WeakRef,
                                                                                                 'Foreign.R.Type.Raw]>_N))))))))))))_N
                                    <Data.Singletons.SingI 'Foreign.R.Type.Raw>_N
                                    ((Data.Type.Equality.~)
                                       <*>_N
                                       (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[8]
                                                 <GHC.Types.Any>_N))
                                       <GHC.Word.Word8>_N)_N)_R
                                 ds
                                   `cast`
                                 (Trans
                                      (GHC.Ptr.Ptr
                                         <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any, s> <'Foreign.R.Type.Raw, a>)))))
                             `cast`
                           (Trans
                                (UnsafeCo representational (Language.R.HExp.HExp
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Raw) (GHC.Types.IO
                                                                                      (Language.R.HExp.HExp
                                                                                         s a)))
                                (Trans
                                     (GHC.Types.N:IO[0] <Language.R.HExp.HExp s a>_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))
                             GHC.Prim.realWorld#
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds4 { (#,#) ipv ipv1 ->
                      ipv1 }
                   Foreign.R.Type.S4
                   -> case GHC.Prim.readAddrOffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ds1 48#)
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      (Language.R.HExp.$WS4
                         @ s
                         @ GHC.Types.Any
                         (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ipv1)
                           `cast`
                         (Trans
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                s GHC.Types.Any>)_R
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <GHC.Types.Any>_P))))
                        `cast`
                      (Nth:3
                           (Nth:3
                                (Trans
                                     (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              (Language.R.HExp.HExp
                                                 <s>_P
                                                 (UnsafeCo nominal 'Foreign.R.Type.S4 a))_R)_R)
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <Language.R.HExp.HExp s a>_R)_R)))) } } } }) -}
9df14c64844230c3144c262c0f3619de
  unhexp ::
    Control.Monad.R.Class.MonadR m =>
    Language.R.HExp.HExp (Control.Monad.R.Class.Region m) a
    -> m (Foreign.R.Internal.SEXP (Control.Monad.R.Class.Region m) a)
  {- Arity: 2,
     Strictness: <S,U(A,1*U(1*U(A,1*C1(C1(U)),A,1*C1(U),A),A),A,A,A,1*C1(U),1*C1(U),A,A)><S,1*U> -}
8ce556eec4bc0ee0f73f6203a7d04ddc
  vector ::
    Foreign.R.Type.IsVector a =>
    Foreign.R.Internal.SEXP s a
    -> Data.Vector.SEXP.Vector s a (Data.Vector.SEXP.Base.ElemRep s a)
  {- Arity: 2, Strictness: <L,A><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Foreign.R.Type.SEXPTYPE
                   @ s
                   (w :: Foreign.R.Type.IsVector a)
                   (w1 :: Foreign.R.Internal.SEXP s a) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <a>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.HExp.$wvector @ a @ s ww1 }) -}
instance GHC.Classes.Eq [Language.R.HExp.HExp]
  = Language.R.HExp.$fEqHExp
instance Foreign.Storable.Storable [Language.R.HExp.HExp]
  = Language.R.HExp.$fStorableHExp
instance Data.Type.Equality.TestEquality [Foreign.R.Type.SEXPTYPE,
                                          Language.R.HExp.E]
  = Language.R.HExp.$fTestEqualitySEXPTYPEE
instance Data.Type.Equality.TestEquality [Foreign.R.Type.SEXPTYPE,
                                          Language.R.HExp.HExp]
  = Language.R.HExp.$fTestEqualitySEXPTYPEHExp
"SPEC/Language.R.HExp $fEqComplex @ Double" [orphan] forall (v :: GHC.Classes.Eq
                                                                    GHC.Types.Double)
  Data.Complex.$fEqComplex @ GHC.Types.Double v
  = Language.R.HExp.$s$fEqComplex
"SPEC/Language.R.HExp $fStorableComplex @ Double" [orphan] forall (v :: Foreign.Storable.Storable
                                                                          GHC.Types.Double)
  Data.Complex.$fStorableComplex @ GHC.Types.Double v
  = Language.R.HExp.$fStorableHExp_$s$fStorableComplex
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

