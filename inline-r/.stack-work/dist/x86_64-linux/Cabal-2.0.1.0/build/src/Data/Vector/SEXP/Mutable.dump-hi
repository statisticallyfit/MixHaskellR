
==================== FINAL INTERFACE ====================
2017-12-28 08:49:11.854273 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Data.Vector.SEXP.Mutable 8022
  interface hash: 6cd7d2fc50a3b687a65caa9097c74faa
  ABI hash: 099966697135647881a6d1b4beb0bf6d
  export-list hash: 0f2c8059872224e98e761b2b6e1eb9f3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 15ee3e726a502daef6040a48cd29a907
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Vector.SEXP.Mutable.clear
  Data.Vector.SEXP.Mutable.clone
  Data.Vector.SEXP.Mutable.copy
  Data.Vector.SEXP.Mutable.drop
  Data.Vector.SEXP.Mutable.fromSEXP
  Data.Vector.SEXP.Mutable.init
  Data.Vector.SEXP.Mutable.length
  Data.Vector.SEXP.Mutable.move
  Data.Vector.SEXP.Mutable.new
  Data.Vector.SEXP.Mutable.null
  Data.Vector.SEXP.Mutable.overlaps
  Data.Vector.SEXP.Mutable.read
  Data.Vector.SEXP.Mutable.replicate
  Data.Vector.SEXP.Mutable.replicateM
  Data.Vector.SEXP.Mutable.set
  Data.Vector.SEXP.Mutable.slice
  Data.Vector.SEXP.Mutable.splitAt
  Data.Vector.SEXP.Mutable.swap
  Data.Vector.SEXP.Mutable.tail
  Data.Vector.SEXP.Mutable.take
  Data.Vector.SEXP.Mutable.toSEXP
  Data.Vector.SEXP.Mutable.unsafeCopy
  Data.Vector.SEXP.Mutable.unsafeDrop
  Data.Vector.SEXP.Mutable.unsafeInit
  Data.Vector.SEXP.Mutable.unsafeMove
  Data.Vector.SEXP.Mutable.unsafeNew
  Data.Vector.SEXP.Mutable.unsafeRead
  Data.Vector.SEXP.Mutable.unsafeSlice
  Data.Vector.SEXP.Mutable.unsafeSwap
  Data.Vector.SEXP.Mutable.unsafeTail
  Data.Vector.SEXP.Mutable.unsafeTake
  Data.Vector.SEXP.Mutable.unsafeWrite
  Data.Vector.SEXP.Mutable.write
  Data.Vector.SEXP.Mutable.Internal.release
  Data.Vector.SEXP.Mutable.Internal.unsafeRelease
  Data.Vector.SEXP.Mutable.Internal.MVector
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP.Base
                     Data.Vector.SEXP.Mutable.Internal Foreign.R Foreign.R.Constraints
                     Foreign.R.Internal Foreign.R.Type Internal.Error
                     Language.R.HExp [boot]
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.1 pretty-1.1.3.3 primitive-0.6.2.0
                      reflection-2.1.2 safe-0.3.15 singletons-2.3.1 stm-2.4.4.1 syb-0.7
                      template-haskell-2.12.0.0 text-1.2.2.2 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: stm-2.4.4.1:Control.Monad.STM
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         syb-0.7:Data.Generics.Instances
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         reflection-2.1.2:Data.Reflection base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Control.Memory.Region
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Control.Arrow b4ff99f516cf3ba87a1e4985dc7f496f
import  -/  base-4.10.1.0:Control.Category e391ae0ab2b20aef43c0035a99142ed1
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Proxy da449059b879cc23dde5f0d9cfa646e9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO.Unsafe 00b3b8853d06169d9bfd9af46118ba88
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
  exports: ebb323240982ac39e80db1d6fb39a690
  MonadR 3b2bb150f2b80e2d32d08e5e9fb3cdc6
  Region 49abf5cb38f3f6f39f201ac2b8615c87
import  -/  Control.Monad.R.Internal 7e2ecbd29d45230b86889dd7cfc2de14
  exports: 084c7ee60e1e0a888ea9879c8f37011c
  AcquireIO def7db1ddf0366b192098f6d6e5684ea
  AcquireIO c8b72b02cf4a158565287a5422af958e
  withAcquire 11d36a6b5d214213546187014e6c58b6
import  -/  Data.Vector.SEXP.Base 45a38cf91fe2cf94fe8625a751ba7f0f
  exports: d0b6c580d2d1031904153012b70cf3a9
  VECTOR 206ef0809e9e9bd525db9efc5a1a282d
import  -/  Data.Vector.SEXP.Mutable.Internal 2ce42555caaa41eef4158ba025e8960c
  exports: 4779780d75ff69f9cf4aa828db53af07
  MVector dfc8199367261377902d960e92ead89f
  MVector 65227b433ce3b999cef5e7dedfaea8e6
  W 10c7637486ed7ba2d8d7ddd8e482e622
  W d6d594f37ed0e9805ca87e2c4fb3a6df
  proxyW 2e839adb05ae524a7f8b9215c3bab093
  release c2299d71aa4f221f1149052946dc9fdf
  unW d6d594f37ed0e9805ca87e2c4fb3a6df
  unsafeRelease 735161a458a7ee6f3eca1022bce3e3f7
  withW 245b61808944994e76f50e949c581046
import  -/  Foreign.R 51460710da704a1aff942901939ab83a
  exports: 66604cef250b707139e6d39041287043
import  -/  Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
  SEXP 8e71af79acc64eda5f9cb7291bf461df
  length d97165116b64357a957efbb7daa72d55
import  -/  Internal.Error 740162e156c3d9ec6fcb98a35435f6ce
  exports: 13dcfd343f68bd642398afc1dc7f61a0
  violation b8d3d6683e7c01fa74a453c2d484fb85
import  -/  reflection-2.1.2:Data.Reflection 6c398a27ead1631e1e6ccc4b00487094
import  -/  vector-0.12.0.1:Data.Vector.Generic.Mutable 2f826eb33b222a49aa71d222d259d320
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
d7bac34895f5584dcb748a1d193e5b46
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Vector.SEXP.Mutable.$trModule3
                   Data.Vector.SEXP.Mutable.$trModule1) -}
d5e98379abb36ff9b8a9e9541a0548e4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.$trModule2) -}
d16d1da97f75c679534ff3ca7db7149a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Vector.SEXP.Mutable"#) -}
b339e487e292b9cd411f7b399f1a2d7f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.$trModule4) -}
91f9c25150d36691c3a31dda45f57be6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
f66ab28c6f61ff365a9c0efe2c687ea0
  $wtoSEXP ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> m (Foreign.R.Internal.SEXP (Control.Monad.R.Class.Region m) ty)
  {- Arity: 5,
     Strictness: <L,U(A,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),A),A,A,U(U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><L,U><S,U><L,U>,
     Inline: [0] -}
8f4f7fc19bf5a1118af7fbedc5788e73
  clear ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,A,A,1*C1(U),A),A),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,A>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    GHC.Base.return
                      @ m
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      @ ()
                      GHC.Tuple.() }) }) -}
a8a9a346df2a7480fa372d2e2a441955
  clone ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,U(U))><L,U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (eta1 :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $d(%,%) :: Foreign.R.Type.IsVector ty
                            = GHC.Classes.$p2(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%)
                          } in
                          let {
                            $dSingI :: Data.Singletons.SingI ty
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Singletons.SingI ty)
                                @ (ty
                                   Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                              'Foreign.R.Type.Logical,
                                                              'Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw])
                                $d(%,%)
                          } in
                          let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          let {
                            n :: GHC.Types.Int
                            = case GHC.Types.HEq_sc
                                     @ *
                                     @ *
                                     @ (Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty)
                                     @ a
                                     (GHC.Classes.$p4(%,,,%)
                                        @ (Foreign.Storable.Storable a)
                                        @ (Foreign.R.Type.IsVector ty)
                                        @ (Data.Singletons.SingI ty)
                                        @ ((Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty :: *)
                                           Data.Type.Equality.~
                                           (a :: *))
                                        $d(%,,,%))
                                       `cast`
                                     (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                         (Control.Monad.Primitive.PrimState
                                                                            m)
                                                                         ty>_N <a>_N) of cobox2 { DEFAULT ->
                              case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                              GHC.Types.I# dt2 } }
                          } in
                          case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                  @ ty
                                  $dSingI
                                    `cast`
                                  (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                 `cast`
                               (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                          case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                            DEFAULT
                            -> GHC.Base.>>=
                                 @ m
                                 $dMonad2
                                 @ (Foreign.R.Internal.SEXP
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a)
                                 (Control.Monad.Primitive.primitive
                                    @ m
                                    $dPrimMonad
                                    @ (Foreign.R.Internal.SEXP
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case Foreign.R.allocVector1
                                            @ ty
                                            $d(%,%)
                                            $dSingI
                                              `cast`
                                            (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                            n
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     (($dReifies
                                         `cast`
                                       (Data.Reflection.N:Reifies[0]
                                            <*>_N
                                            <s>_N
                                            <Control.Monad.R.Internal.AcquireIO
                                               (Control.Monad.Primitive.PrimState m)>_N)
                                         @ Data.Proxy.Proxy
                                         (Data.Proxy.Proxy @ * @ s))
                                        `cast`
                                      (Control.Monad.R.Internal.N:AcquireIO[0]
                                           <Control.Monad.Primitive.PrimState m>_P)
                                        @ ty
                                        ipv1)
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Foreign.R.Internal.SEXP
                                             (Control.Monad.Primitive.PrimState m) ty>_R)
                                       ipv })
                                      `cast`
                                    (Trans
                                         ((GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                  <Foreign.R.Internal.SEXP
                                                     (Control.Monad.Primitive.PrimState m) ty>_R)_R)
                                         ((GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState
                                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState
                                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                  <Foreign.R.Internal.SEXP
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_R)_R)))
                                 (\ (sx :: Foreign.R.Internal.SEXP
                                             (Control.Monad.Primitive.PrimState m) ty) ->
                                  GHC.Base.return
                                    @ m
                                    $dMonad2
                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a)
                                    (case n of wild { GHC.Types.I# x# ->
                                     (Data.Vector.SEXP.Mutable.Internal.$WMVector
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        @ a
                                        sx
                                        (GHC.Int.I32# 0#)
                                        (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N) }))
                            9#
                            -> Internal.Error.failure1
                                 @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Data.Vector.SEXP.Mutable.new"#)) } } })
                         (\ (v' :: Data.Vector.SEXP.Mutable.Internal.W
                                     s ty (Control.Monad.Primitive.PrimState m) a) ->
                          GHC.Base.>>
                            @ m
                            $dMonad1
                            @ ()
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a)
                            (case v'
                                    `cast`
                                  (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                       <s>_P
                                       <ty>_P
                                       <Control.Monad.Primitive.PrimState
                                          m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                             case v of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%)
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild2 { GHC.Types.I# y ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild3 { GHC.Types.I# y1 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.copyArray1
                                          @ a) of wild4 { GHC.Types.I# y2 ->
                                case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                -> GHC.Prim.Addr#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Addr# #)}
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# ipv 40#)
                                          (GHC.Prim.*# ipv1 y))
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# ipv3 40#)
                                          (GHC.Prim.*# ipv4 y1))
                                       (GHC.Prim.int2Word# (GHC.Prim.*# ipv2 y2))
                                       s1 of wild5 { (#,#) ds4 ds5 ->
                                (# ds4, GHC.Tuple.() #) } } } } })
                                 `cast`
                               (Trans
                                    ((GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                             <()>_R)_R)
                                    ((GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState
                                           (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.PrimState
                                                   (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                             <()>_R)_R)) } } })
                            (GHC.Base.return
                               @ m
                               $dMonad1
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a)
                               v')))) }) -}
f8e64467e161bd8bf347db78a10ea604
  copy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><L,U(U,U,U)><L,U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a)
                   (v2 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    case v1 of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case v2 of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                    let {
                      $j :: m () <join 0>
                      = case GHC.Types.HEq_sc
                               @ *
                               @ *
                               @ (Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty)
                               @ a
                               (GHC.Classes.$p4(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ ((Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty :: *)
                                     Data.Type.Equality.~
                                     (a :: *))
                                  $d(%,,,%))
                                 `cast`
                               (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   ty>_N <a>_N) of cobox2 { DEFAULT ->
                        case GHC.Types.HEq_sc
                               @ *
                               @ *
                               @ (Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty)
                               @ a
                               (GHC.Classes.$p4(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ ((Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty :: *)
                                     Data.Type.Equality.~
                                     (a :: *))
                                  $d(%,,,%))
                                 `cast`
                               (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   ty>_N <a>_N) of cobox3 { DEFAULT ->
                        case GHC.Classes.eqInt
                               (GHC.Types.I# dt2)
                               (GHC.Types.I# dt5) of wild2 {
                          GHC.Types.False
                          -> Data.Vector.Internal.Check.checkError
                               @ (m ())
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 778#)
                               Data.Vector.Internal.Check.Bounds
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "copy"#))
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                          GHC.Types.True
                          -> case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox4 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%)
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild3 { GHC.Types.I# y ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild4 { GHC.Types.I# y1 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox5 { DEFAULT ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.copyArray1
                                          @ a) of wild5 { GHC.Types.I# y2 ->
                                case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                -> GHC.Prim.Addr#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Addr# #)}
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# dt 40#)
                                          (GHC.Prim.*# dt1 y))
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# dt3 40#)
                                          (GHC.Prim.*# dt4 y1))
                                       (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y2))
                                       s1 of wild6 { (#,#) ds4 ds5 ->
                                (# ds4, GHC.Tuple.() #) } } } } })
                                 `cast`
                               (Trans
                                    ((GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                             <()>_R)_R)
                                    ((GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState
                                           (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.PrimState
                                                   (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                             <()>_R)_R)) } } } }
                    } in
                    let {
                      $j1 :: m () <join 0>
                      = Data.Vector.Internal.Check.checkError
                          @ (m ())
                          (GHC.Base.build
                             @ GHC.Types.Char
                             (\ @ b ->
                              GHC.CString.unpackFoldrCString#
                                @ b
                                "./Data/Vector/Generic/Mutable.hs"#))
                          (GHC.Types.I# 776#)
                          Data.Vector.Internal.Check.Bounds
                          (GHC.Base.build
                             @ GHC.Types.Char
                             (\ @ b -> GHC.CString.unpackFoldrCString# @ b "copy"#))
                          (GHC.Base.build
                             @ GHC.Types.Char
                             (\ @ b ->
                              GHC.CString.unpackFoldrCString# @ b "overlapping vectors"#))
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.eqAddr# dt dt3) of wild2 {
                      GHC.Types.False -> $j
                      GHC.Types.True
                      -> case GHC.Int.ltInt32
                                (GHC.Int.I32# dt4)
                                (GHC.Int.I32#
                                   (GHC.Prim.narrow32Int# (GHC.Prim.+# dt1 dt2))) of wild3 {
                           GHC.Types.False
                           -> case GHC.Int.ltInt32
                                     (GHC.Int.I32# dt1)
                                     (GHC.Int.I32#
                                        (GHC.Prim.narrow32Int# (GHC.Prim.+# dt4 dt5))) of wild4 {
                                GHC.Types.False -> $j GHC.Types.True -> $j1 }
                           GHC.Types.True -> $j1 } } } } }) }) -}
ea78af8476e368678dd6f087f056dfe6
  drop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox3 { DEFAULT ->
                  case n of wild2 { GHC.Types.I# x1 ->
                  let {
                    $j :: GHC.Prim.Int#
                          -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
                      <join 1> {- Arity: 1 -}
                    = \ (y1 :: GHC.Prim.Int#)[OneShot] ->
                      let {
                        $j1 :: GHC.Prim.Int#
                               -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
                          <join 1> {- Arity: 1 -}
                        = \ (x# :: GHC.Prim.Int#)[OneShot] ->
                          let {
                            y2 :: GHC.Prim.Int# = GHC.Prim.-# dt2 y1
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# 0# y2) of wild3 {
                            GHC.Types.False
                            -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                                 @ s
                                 @ ty
                                 @ a
                                 (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                   `cast`
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                                 (GHC.Int.I32#
                                    (GHC.Prim.narrow32Int#
                                       (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x#))))
                                 (GHC.Int.I32# 0#)
                            GHC.Types.True
                            -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                                 @ s
                                 @ ty
                                 @ a
                                 (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                   `cast`
                                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                                 (GHC.Int.I32#
                                    (GHC.Prim.narrow32Int#
                                       (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x#))))
                                 (GHC.Int.I32# (GHC.Prim.narrow32Int# y2)) }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# dt2 y1) of wild3 {
                        GHC.Types.False -> $j1 y1 GHC.Types.True -> $j1 dt2 }
                  } in
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.<=# x1 0#) of wild3 {
                    GHC.Types.False -> $j x1 GHC.Types.True -> $j 0# } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
4c37c0d8deb4e71b8cb79d67440edf49
  drop1 ::
    GHC.Types.Any
    -> forall (ty :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty
       -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ @ s (ds :: GHC.Types.Any) ->
                 Data.Vector.SEXP.Mutable.drop2 @ s) -}
a9b35e5371e0fbdcdd4778f21debe8da
  drop2 ::
    Foreign.R.Internal.SEXP Control.Memory.Region.V ty
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Strictness: x -}
df91a45cf98a04e59c05579e3c2c5211
  fromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Foreign.R.Internal.SEXP s ty
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int32 #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate#
                                @ GHC.Prim.RealWorld
                                s1 of s' { DEFAULT ->
                         case GHC.Prim.readInt32OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# ww1 32#)
                                0#
                                s' of ds2 { (#,#) ipv ipv1 ->
                         (# ipv,
                            GHC.Int.I32#
                              (GHC.Prim.narrow32Int# ipv1) #) } }) of ds { (#,#) ipv ipv1 ->
                 case ipv1 of dt { GHC.Int.I32# dt1 ->
                 Data.Vector.SEXP.Mutable.Internal.MVector
                   @ s
                   @ ty
                   @ a
                   ww1
                   0#
                   dt1 } } } }) -}
829721cfb1ad02ccddd4b59c8282458c
  init ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  let {
                    n :: GHC.Types.Int
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox2 { DEFAULT ->
                      case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                      GHC.Types.I# (GHC.Prim.-# dt2 1#) } }
                  } in
                  let {
                    n1 :: GHC.Types.Int
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox2 { DEFAULT ->
                      case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                      GHC.Types.I# dt2 } }
                  } in
                  let {
                    $j :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a <join 0>
                    = case n of wild1 { GHC.Types.I# m# ->
                      case n1 of wild2 { GHC.Types.I# n# ->
                      (Data.Vector.Internal.Check.checkError
                         @ (Data.Vector.SEXP.Mutable.Internal.W s1 ty s a)
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 513#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "slice"#))
                         (Data.Vector.Internal.Check.checkSlice_msg# 0# m# n#))
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <s1>_P <ty>_P <s>_P <a>_N) } }
                  } in
                  case GHC.Classes.geInt
                         (GHC.Types.I# 0#)
                         (GHC.Types.I# 0#) of wild1 {
                    GHC.Types.False -> $j
                    GHC.Types.True
                    -> case GHC.Classes.geInt n (GHC.Types.I# 0#) of wild2 {
                         GHC.Types.False -> $j
                         GHC.Types.True
                         -> case n of wild4 { GHC.Types.I# y ->
                            case GHC.Classes.leInt (GHC.Types.I# y) n1 of wild5 {
                              GHC.Types.False -> $j
                              GHC.Types.True
                              -> case GHC.Types.HEq_sc
                                        @ *
                                        @ *
                                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                        @ a
                                        (GHC.Classes.$p4(%,,,%)
                                           @ (Foreign.Storable.Storable a)
                                           @ (Foreign.R.Type.IsVector ty)
                                           @ (Data.Singletons.SingI ty)
                                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                              Data.Type.Equality.~
                                              (a :: *))
                                           $d(%,,,%))
                                          `cast`
                                        (Data.Type.Equality.N:~[0]
                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                      s ty>_N <a>_N) of cobox2 { DEFAULT ->
                                 case eta of wild7 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                 Data.Vector.SEXP.Mutable.Internal.$WMVector
                                   @ s
                                   @ ty
                                   @ a
                                   (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                     `cast`
                                   (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                                   (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                                   (GHC.Int.I32# (GHC.Prim.narrow32Int# y)) } } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
afd4c2ecbaf27bc5eda6db194e23d643
  length ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(LLS),1*U(A,A,U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                    @ s1
                    @ s
                    @ ty
                    @ a
                    $dReifies
                    $d(%,,,%)
                    @ s
                    eta
                      `cast`
                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s1>_P <ty>_P <s>_P) <a>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Int) ((GHC.Types.Any
                                                                     -> Control.Monad.R.Internal.AcquireIO
                                                                          s)
                                                                    -> Data.Proxy.Proxy
                                                                         GHC.Types.Any
                                                                    -> GHC.Types.Int)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
9da3b3199444ff810a405f333ed2bc66
  move ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><L,U(U,U,U)><L,U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a)
                   (v2 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    case v1 of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox2 { DEFAULT ->
                    case v2 of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                    case GHC.Classes.eqInt
                           (GHC.Types.I# dt2)
                           (GHC.Types.I# dt6) of wild2 {
                      GHC.Types.False
                      -> Data.Vector.Internal.Check.checkError
                           @ (m ())
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "./Data/Vector/Generic/Mutable.hs"#))
                           (GHC.Types.I# 792#)
                           Data.Vector.Internal.Check.Bounds
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "move"#))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                      GHC.Types.True
                      -> case GHC.Types.HEq_sc
                                @ *
                                @ *
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty)
                                @ a
                                (GHC.Classes.$p4(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%))
                                  `cast`
                                (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                    (Control.Monad.Primitive.PrimState
                                                                       m)
                                                                    ty>_N <a>_N) of cobox3 { DEFAULT ->
                         let {
                           $dStorable :: Foreign.Storable.Storable a
                           = GHC.Classes.$p1(%,,,%)
                               @ (Foreign.Storable.Storable a)
                               @ (Foreign.R.Type.IsVector ty)
                               @ (Data.Singletons.SingI ty)
                               @ ((Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty :: *)
                                  Data.Type.Equality.~
                                  (a :: *))
                               $d(%,,,%)
                         } in
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.advancePtr1
                                      @ a) of wild3 { GHC.Types.I# y ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.advancePtr1
                                      @ a) of wild4 { GHC.Types.I# y1 ->
                            case GHC.Types.HEq_sc
                                   @ *
                                   @ *
                                   @ (Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty)
                                   @ a
                                   (GHC.Classes.$p4(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%))
                                     `cast`
                                   (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                       (Control.Monad.Primitive.PrimState
                                                                          m)
                                                                       ty>_N <a>_N) of cobox4 { DEFAULT ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.moveArray1
                                      @ a) of wild5 { GHC.Types.I# y2 ->
                            case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                            -> GHC.Prim.Addr#
                                                            -> GHC.Prim.Word#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Addr# #)}
                                   (GHC.Prim.plusAddr#
                                      (GHC.Prim.plusAddr# dt 40#)
                                      (GHC.Prim.*# dt1 y))
                                   (GHC.Prim.plusAddr#
                                      (GHC.Prim.plusAddr# dt4 40#)
                                      (GHC.Prim.*# dt5 y1))
                                   (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y2))
                                   s1 of wild6 { (#,#) ds4 ds5 ->
                            (# ds4, GHC.Tuple.() #) } } } } })
                             `cast`
                           (Trans
                                ((GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                         <()>_R)_R)
                                ((GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.PrimState
                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                         <()>_R)_R)) } } } } } }) }) -}
4691342fb361656b7cba155c5ddfa4ef
  new ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,1*U(1*U,A),A,U(U))><L,U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 \ (n :: GHC.Types.Int) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (eta1 :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case GHC.Classes.geInt n (GHC.Types.I# 0#) of wild1 {
                         GHC.Types.False
                         -> case n of wild2 { GHC.Types.I# n# ->
                            Data.Vector.Internal.Check.checkError
                              @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a))
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "./Data/Vector/Generic/Mutable.hs"#))
                              (GHC.Types.I# 585#)
                              Data.Vector.Internal.Check.Bounds
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                              (Data.Vector.Internal.Check.checkLength_msg# n#) }
                         GHC.Types.True
                         -> GHC.Base.>>=
                              @ m
                              $dMonad1
                              @ (Data.Vector.SEXP.Mutable.Internal.W
                                   s ty (Control.Monad.Primitive.PrimState m) a)
                              @ (Data.Vector.SEXP.Mutable.Internal.W
                                   s ty (Control.Monad.Primitive.PrimState m) a)
                              (case GHC.Types.HEq_sc
                                      @ *
                                      @ *
                                      @ (Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty)
                                      @ a
                                      (GHC.Classes.$p4(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ ((Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty :: *)
                                            Data.Type.Equality.~
                                            (a :: *))
                                         $d(%,,,%))
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                    (Control.Monad.Primitive.PrimState m)
                                                    ty>_N <a>_N) of cobox1 { DEFAULT ->
                               let {
                                 $d(%,%) :: Foreign.R.Type.IsVector ty
                                 = GHC.Classes.$p2(%,,,%)
                                     @ (Foreign.Storable.Storable a)
                                     @ (Foreign.R.Type.IsVector ty)
                                     @ (Data.Singletons.SingI ty)
                                     @ ((Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty :: *)
                                        Data.Type.Equality.~
                                        (a :: *))
                                     $d(%,,,%)
                               } in
                               let {
                                 $dSingI :: Data.Singletons.SingI ty
                                 = GHC.Classes.$p1(%,%)
                                     @ (Data.Singletons.SingI ty)
                                     @ (ty
                                        Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                                   'Foreign.R.Type.Logical,
                                                                   'Foreign.R.Type.Int,
                                                                   'Foreign.R.Type.Real,
                                                                   'Foreign.R.Type.Complex,
                                                                   'Foreign.R.Type.String,
                                                                   'Foreign.R.Type.Vector,
                                                                   'Foreign.R.Type.Expr,
                                                                   'Foreign.R.Type.WeakRef,
                                                                   'Foreign.R.Type.Raw])
                                     $d(%,%)
                               } in
                               let {
                                 $dMonad2 :: GHC.Base.Monad m
                                 = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                               } in
                               case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                       @ ty
                                       $dSingI
                                         `cast`
                                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                      `cast`
                                    (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                               case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                                 DEFAULT
                                 -> GHC.Base.>>=
                                      @ m
                                      $dMonad2
                                      @ (Foreign.R.Internal.SEXP
                                           (Control.Monad.Primitive.PrimState m) ty)
                                      @ (Data.Vector.SEXP.Mutable.Internal.W
                                           s ty (Control.Monad.Primitive.PrimState m) a)
                                      (Control.Monad.Primitive.primitive
                                         @ m
                                         $dPrimMonad
                                         @ (Foreign.R.Internal.SEXP
                                              (Control.Monad.Primitive.PrimState m) ty)
                                         (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                          case Foreign.R.allocVector1
                                                 @ ty
                                                 $d(%,%)
                                                 $dSingI
                                                   `cast`
                                                 (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                                 n
                                                 s1 of ds1 { (#,#) ipv ipv1 ->
                                          (($dReifies
                                              `cast`
                                            (Data.Reflection.N:Reifies[0]
                                                 <*>_N
                                                 <s>_N
                                                 <Control.Monad.R.Internal.AcquireIO
                                                    (Control.Monad.Primitive.PrimState m)>_N)
                                              @ Data.Proxy.Proxy
                                              (Data.Proxy.Proxy @ * @ s))
                                             `cast`
                                           (Control.Monad.R.Internal.N:AcquireIO[0]
                                                <Control.Monad.Primitive.PrimState m>_P)
                                             @ ty
                                             ipv1)
                                            `cast`
                                          (GHC.Types.N:IO[0]
                                               <Foreign.R.Internal.SEXP
                                                  (Control.Monad.Primitive.PrimState m) ty>_R)
                                            ipv })
                                           `cast`
                                         (Trans
                                              ((GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                               ->_R ((#,#)
                                                       <'GHC.Types.TupleRep '[]>_R
                                                       <'GHC.Types.LiftedRep>_R
                                                       (GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                       <Foreign.R.Internal.SEXP
                                                          (Control.Monad.Primitive.PrimState m)
                                                          ty>_R)_R)
                                              ((GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState
                                                     (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                               ->_R ((#,#)
                                                       <'GHC.Types.TupleRep '[]>_R
                                                       <'GHC.Types.LiftedRep>_R
                                                       (GHC.Prim.State#
                                                          (Control.Monad.Primitive.PrimState
                                                             (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                       <Foreign.R.Internal.SEXP
                                                          (Control.Monad.Primitive.PrimState m)
                                                          ty>_R)_R)))
                                      (\ (sx :: Foreign.R.Internal.SEXP
                                                  (Control.Monad.Primitive.PrimState m) ty) ->
                                       GHC.Base.return
                                         @ m
                                         $dMonad2
                                         @ (Data.Vector.SEXP.Mutable.Internal.W
                                              s ty (Control.Monad.Primitive.PrimState m) a)
                                         (case n of wild { GHC.Types.I# x# ->
                                          (Data.Vector.SEXP.Mutable.Internal.$WMVector
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ ty
                                             @ a
                                             sx
                                             (GHC.Int.I32# 0#)
                                             (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                                            `cast`
                                          (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                    <s>_P
                                                    <ty>_P
                                                    <Control.Monad.Primitive.PrimState
                                                       m>_P) <a>_N) }))
                                 9#
                                 -> Internal.Error.failure1
                                      @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                              s ty (Control.Monad.Primitive.PrimState m) a))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.SEXP.Mutable.new"#)) } } })
                              (\ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                                          s ty (Control.Monad.Primitive.PrimState m) a) ->
                               GHC.Base.>>
                                 @ m
                                 $dMonad1
                                 @ ()
                                 @ (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a)
                                 (case GHC.Types.HEq_sc
                                         @ *
                                         @ *
                                         @ (Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty)
                                         @ a
                                         (GHC.Classes.$p4(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ ((Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty :: *)
                                               Data.Type.Equality.~
                                               (a :: *))
                                            $d(%,,,%))
                                           `cast`
                                         (Data.Type.Equality.N:~[0]
                                              <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                       (Control.Monad.Primitive.PrimState m)
                                                       ty>_N <a>_N) of cobox1 { DEFAULT ->
                                  GHC.Base.return
                                    @ m
                                    (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                    @ ()
                                    GHC.Tuple.() })
                                 (GHC.Base.return
                                    @ m
                                    $dMonad1
                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a)
                                    v1)) })) }) -}
0ad9838127efbc4bf7792c56d9448745
  null ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  GHC.Classes.eqInt (GHC.Types.I# dt2) (GHC.Types.I# 0#) } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Bool) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> GHC.Types.Bool)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
4f09be8c051a98bdc99aaaff446e81ed
  overlaps ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                    @ s1
                    @ s
                    @ ty
                    @ a
                    $dReifies
                    $d(%,,,%)
                    @ s
                    eta
                      `cast`
                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s1>_P <ty>_P <s>_P) <a>_N)
                    eta1
                      `cast`
                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s1>_P <ty>_P <s>_P) <a>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Bool) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> GHC.Types.Bool)))
                   (Data.Vector.SEXP.Mutable.overlaps1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
f088f5c7e9608b3e776bfcfc80930f56
  overlaps1 ::
    GHC.Types.Any
    -> forall (ty :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty
       -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ @ s (ds :: GHC.Types.Any) ->
                 Data.Vector.SEXP.Mutable.overlaps2 @ s) -}
77a7d68187dd0f6c7ded65018dff7084
  overlaps2 ::
    Foreign.R.Internal.SEXP Control.Memory.Region.V ty
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Strictness: x -}
9839bc487a7507f39f7a457fbcdfb564
  read ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(U)),A,A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,U)><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (i :: GHC.Types.Int) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ a
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    let {
                      file :: GHC.Base.String
                      = GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b ->
                           GHC.CString.unpackFoldrCString#
                             @ b
                             "./Data/Vector/Generic/Mutable.hs"#)
                    } in
                    let {
                      n :: GHC.Types.Int
                      = case GHC.Types.HEq_sc
                               @ *
                               @ *
                               @ (Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty)
                               @ a
                               (GHC.Classes.$p4(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ ((Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty :: *)
                                     Data.Type.Equality.~
                                     (a :: *))
                                  $d(%,,,%))
                                 `cast`
                               (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   ty>_N <a>_N) of cobox1 { DEFAULT ->
                        case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                        GHC.Types.I# dt2 } }
                    } in
                    case GHC.Classes.geInt i (GHC.Types.I# 0#) of wild1 {
                      GHC.Types.False
                      -> case i of wild2 { GHC.Types.I# i# ->
                         case n of wild3 { GHC.Types.I# n# ->
                         Data.Vector.Internal.Check.checkError
                           @ (m a)
                           file
                           (GHC.Types.I# 691#)
                           Data.Vector.Internal.Check.Bounds
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "read"#))
                           (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                      GHC.Types.True
                      -> case GHC.Classes.ltInt i n of wild2 {
                           GHC.Types.False
                           -> case i of wild3 { GHC.Types.I# i# ->
                              case n of wild4 { GHC.Types.I# n# ->
                              Data.Vector.Internal.Check.checkError
                                @ (m a)
                                file
                                (GHC.Types.I# 691#)
                                Data.Vector.Internal.Check.Bounds
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "read"#))
                                (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                           GHC.Types.True
                           -> case GHC.Types.HEq_sc
                                     @ *
                                     @ *
                                     @ (Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty)
                                     @ a
                                     (GHC.Classes.$p4(%,,,%)
                                        @ (Foreign.Storable.Storable a)
                                        @ (Foreign.R.Type.IsVector ty)
                                        @ (Data.Singletons.SingI ty)
                                        @ ((Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty :: *)
                                           Data.Type.Equality.~
                                           (a :: *))
                                        $d(%,,,%))
                                       `cast`
                                     (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                         (Control.Monad.Primitive.PrimState
                                                                            m)
                                                                         ty>_N <a>_N) of cobox1 { DEFAULT ->
                              let {
                                $dStorable :: Foreign.Storable.Storable a
                                = GHC.Classes.$p1(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%)
                              } in
                              Control.Monad.Primitive.primitive
                                @ m
                                $dPrimMonad
                                @ a
                                (Foreign.Storable.peekElemOff
                                   @ a
                                   $dStorable
                                   (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                    case Foreign.Storable.sizeOf
                                           @ a
                                           $dStorable
                                           (Foreign.Marshal.Array.advancePtr1
                                              @ a) of wild4 { GHC.Types.I# y ->
                                    GHC.Ptr.Ptr
                                      @ a
                                      (GHC.Prim.plusAddr#
                                         (GHC.Prim.plusAddr# dt 40#)
                                         (GHC.Prim.*# dt1 y)) } })
                                   i)
                                  `cast`
                                (Trans
                                     (GHC.Types.N:IO[0] <a>_R)
                                     (Trans
                                          ((GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                   <a>_R)_R)
                                          ((GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState
                                                 (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                   <a>_R)_R))) } } }) }) -}
7130d8987f9413859e8f2dee06c8ba99
  replicate ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(U))),A,A,A,A),1*U(1*U,A),A,U(U))><L,1*U(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 \ (n :: GHC.Types.Int) (x :: a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (eta1 :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       let {
                         n1 :: GHC.Types.Int
                         = Data.Vector.Fusion.Util.delay_inline
                             @ GHC.Types.Int
                             @ (GHC.Types.Int -> GHC.Types.Int)
                             GHC.Classes.$fOrdInt_$cmax
                             (GHC.Types.I# 0#)
                             n
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          let {
                            $d(%,%) :: Foreign.R.Type.IsVector ty
                            = GHC.Classes.$p2(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%)
                          } in
                          let {
                            $dSingI :: Data.Singletons.SingI ty
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Singletons.SingI ty)
                                @ (ty
                                   Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                              'Foreign.R.Type.Logical,
                                                              'Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw])
                                $d(%,%)
                          } in
                          let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                  @ ty
                                  $dSingI
                                    `cast`
                                  (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                 `cast`
                               (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                          case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                            DEFAULT
                            -> GHC.Base.>>=
                                 @ m
                                 $dMonad2
                                 @ (Foreign.R.Internal.SEXP
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a)
                                 (Control.Monad.Primitive.primitive
                                    @ m
                                    $dPrimMonad
                                    @ (Foreign.R.Internal.SEXP
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case Foreign.R.allocVector1
                                            @ ty
                                            $d(%,%)
                                            $dSingI
                                              `cast`
                                            (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                            n1
                                            s1 of ds1 { (#,#) ipv ipv1 ->
                                     (($dReifies
                                         `cast`
                                       (Data.Reflection.N:Reifies[0]
                                            <*>_N
                                            <s>_N
                                            <Control.Monad.R.Internal.AcquireIO
                                               (Control.Monad.Primitive.PrimState m)>_N)
                                         @ Data.Proxy.Proxy
                                         (Data.Proxy.Proxy @ * @ s))
                                        `cast`
                                      (Control.Monad.R.Internal.N:AcquireIO[0]
                                           <Control.Monad.Primitive.PrimState m>_P)
                                        @ ty
                                        ipv1)
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Foreign.R.Internal.SEXP
                                             (Control.Monad.Primitive.PrimState m) ty>_R)
                                       ipv })
                                      `cast`
                                    (Trans
                                         ((GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                  <Foreign.R.Internal.SEXP
                                                     (Control.Monad.Primitive.PrimState m) ty>_R)_R)
                                         ((GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState
                                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState
                                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                  <Foreign.R.Internal.SEXP
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_R)_R)))
                                 (\ (sx :: Foreign.R.Internal.SEXP
                                             (Control.Monad.Primitive.PrimState m) ty) ->
                                  GHC.Base.return
                                    @ m
                                    $dMonad2
                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a)
                                    (case n1 of wild { GHC.Types.I# x# ->
                                     (Data.Vector.SEXP.Mutable.Internal.$WMVector
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        @ a
                                        sx
                                        (GHC.Int.I32# 0#)
                                        (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N) }))
                            9#
                            -> Internal.Error.failure1
                                 @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Data.Vector.SEXP.Mutable.new"#)) } } })
                         (\ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                                     s ty (Control.Monad.Primitive.PrimState m) a) ->
                          GHC.Base.>>
                            @ m
                            $dMonad1
                            @ ()
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a)
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                             let {
                               $dMonad2 :: GHC.Base.Monad m
                               = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                             } in
                             case v1
                                    `cast`
                                  (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                       <s>_P
                                       <ty>_P
                                       <Control.Monad.Primitive.PrimState
                                          m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox3 { DEFAULT ->
                             let {
                               n2 :: GHC.Types.Int = GHC.Types.I# ipv2
                             } in
                             letrec {
                               do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                               = \ (i :: GHC.Types.Int) ->
                                 case i of wild1 { GHC.Types.I# y ->
                                 case GHC.Classes.ltInt
                                        (GHC.Types.I# (GHC.Prim.*# 2# y))
                                        n2 of wild {
                                   GHC.Types.False
                                   -> case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ ((Data.Vector.SEXP.Base.ElemRep
                                                      (Control.Monad.Primitive.PrimState m) ty :: *)
                                                   Data.Type.Equality.~
                                                   (a :: *))
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox4 { DEFAULT ->
                                      let {
                                        $dStorable :: Foreign.Storable.Storable a
                                        = GHC.Classes.$p1(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ ((Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty :: *)
                                               Data.Type.Equality.~
                                               (a :: *))
                                            $d(%,,,%)
                                      } in
                                      Control.Monad.Primitive.primitive
                                        @ m
                                        $dPrimMonad
                                        @ ()
                                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                         case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m)
                                                         ty :: *)
                                                      Data.Type.Equality.~
                                                      (a :: *))
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox5 { DEFAULT ->
                                         case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ ty
                                                @ a
                                                (GHC.Ptr.Ptr
                                                   @ (Language.R.HExp.HExp
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   ipv)
                                                  `cast`
                                                (Sym (Foreign.R.Internal.N:SEXP[0]
                                                          <Control.Monad.Primitive.PrimState m>_P
                                                          <ty>_P))
                                                (GHC.Int.I32#
                                                   (GHC.Prim.narrow32Int#
                                                      (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                                (GHC.Int.I32#
                                                   (GHC.Prim.narrow32Int#
                                                      (GHC.Prim.-#
                                                         ipv2
                                                         y))) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                         case Foreign.Storable.sizeOf
                                                @ a
                                                $dStorable
                                                (Foreign.Marshal.Array.advancePtr1
                                                   @ a) of wild3 { GHC.Types.I# y1 ->
                                         case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m)
                                                         ty :: *)
                                                      Data.Type.Equality.~
                                                      (a :: *))
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox6 { DEFAULT ->
                                         case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ ty
                                                @ a
                                                (GHC.Ptr.Ptr
                                                   @ (Language.R.HExp.HExp
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   ipv)
                                                  `cast`
                                                (Sym (Foreign.R.Internal.N:SEXP[0]
                                                          <Control.Monad.Primitive.PrimState m>_P
                                                          <ty>_P))
                                                (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                                (GHC.Int.I32#
                                                   (GHC.Prim.narrow32Int#
                                                      (GHC.Prim.-#
                                                         ipv2
                                                         y))) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                         case Foreign.Storable.sizeOf
                                                @ a
                                                $dStorable
                                                (Foreign.Marshal.Array.advancePtr1
                                                   @ a) of wild5 { GHC.Types.I# y2 ->
                                         case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m)
                                                         ty :: *)
                                                      Data.Type.Equality.~
                                                      (a :: *))
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox7 { DEFAULT ->
                                         case Foreign.Storable.sizeOf
                                                @ a
                                                $dStorable
                                                (Foreign.Marshal.Array.copyArray1
                                                   @ a) of wild6 { GHC.Types.I# y3 ->
                                         case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                         -> GHC.Prim.Addr#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Addr# #)}
                                                (GHC.Prim.plusAddr#
                                                   (GHC.Prim.plusAddr# dt 40#)
                                                   (GHC.Prim.*# dt1 y1))
                                                (GHC.Prim.plusAddr#
                                                   (GHC.Prim.plusAddr# dt3 40#)
                                                   (GHC.Prim.*# dt4 y2))
                                                (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                                s1 of wild7 { (#,#) ds4 ds5 ->
                                         (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                          `cast`
                                        (Trans
                                             ((GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      (GHC.Prim.State#
                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                      <()>_R)_R)
                                             ((GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState
                                                    (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      (GHC.Prim.State#
                                                         (Control.Monad.Primitive.PrimState
                                                            (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                      <()>_R)_R)) }
                                   GHC.Types.True
                                   -> GHC.Base.>>
                                        @ m
                                        $dMonad2
                                        @ ()
                                        @ ()
                                        (case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m)
                                                         ty :: *)
                                                      Data.Type.Equality.~
                                                      (a :: *))
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox4 { DEFAULT ->
                                         let {
                                           $dStorable :: Foreign.Storable.Storable a
                                           = GHC.Classes.$p1(%,,,%)
                                               @ (Foreign.Storable.Storable a)
                                               @ (Foreign.R.Type.IsVector ty)
                                               @ (Data.Singletons.SingI ty)
                                               @ ((Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty :: *)
                                                  Data.Type.Equality.~
                                                  (a :: *))
                                               $d(%,,,%)
                                         } in
                                         Control.Monad.Primitive.primitive
                                           @ m
                                           $dPrimMonad
                                           @ ()
                                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                            case GHC.Types.HEq_sc
                                                   @ *
                                                   @ *
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   @ a
                                                   (GHC.Classes.$p4(%,,,%)
                                                      @ (Foreign.Storable.Storable a)
                                                      @ (Foreign.R.Type.IsVector ty)
                                                      @ (Data.Singletons.SingI ty)
                                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.Primitive.PrimState m)
                                                            ty :: *)
                                                         Data.Type.Equality.~
                                                         (a :: *))
                                                      $d(%,,,%))
                                                     `cast`
                                                   (Data.Type.Equality.N:~[0]
                                                        <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty>_N <a>_N) of cobox5 { DEFAULT ->
                                            case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   @ ty
                                                   @ a
                                                   (GHC.Ptr.Ptr
                                                      @ (Language.R.HExp.HExp
                                                           (Control.Monad.Primitive.PrimState m) ty)
                                                      ipv)
                                                     `cast`
                                                   (Sym (Foreign.R.Internal.N:SEXP[0]
                                                             <Control.Monad.Primitive.PrimState m>_P
                                                             <ty>_P))
                                                   (GHC.Int.I32#
                                                      (GHC.Prim.narrow32Int#
                                                         (GHC.Prim.+#
                                                            ipv1
                                                            (GHC.Prim.narrow32Int# y))))
                                                   (GHC.Int.I32#
                                                      (GHC.Prim.narrow32Int#
                                                         y)) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                            case Foreign.Storable.sizeOf
                                                   @ a
                                                   $dStorable
                                                   (Foreign.Marshal.Array.advancePtr1
                                                      @ a) of wild3 { GHC.Types.I# y1 ->
                                            case GHC.Types.HEq_sc
                                                   @ *
                                                   @ *
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   @ a
                                                   (GHC.Classes.$p4(%,,,%)
                                                      @ (Foreign.Storable.Storable a)
                                                      @ (Foreign.R.Type.IsVector ty)
                                                      @ (Data.Singletons.SingI ty)
                                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.Primitive.PrimState m)
                                                            ty :: *)
                                                         Data.Type.Equality.~
                                                         (a :: *))
                                                      $d(%,,,%))
                                                     `cast`
                                                   (Data.Type.Equality.N:~[0]
                                                        <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty>_N <a>_N) of cobox6 { DEFAULT ->
                                            case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   @ ty
                                                   @ a
                                                   (GHC.Ptr.Ptr
                                                      @ (Language.R.HExp.HExp
                                                           (Control.Monad.Primitive.PrimState m) ty)
                                                      ipv)
                                                     `cast`
                                                   (Sym (Foreign.R.Internal.N:SEXP[0]
                                                             <Control.Monad.Primitive.PrimState m>_P
                                                             <ty>_P))
                                                   (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                                   (GHC.Int.I32#
                                                      (GHC.Prim.narrow32Int#
                                                         y)) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                            case Foreign.Storable.sizeOf
                                                   @ a
                                                   $dStorable
                                                   (Foreign.Marshal.Array.advancePtr1
                                                      @ a) of wild5 { GHC.Types.I# y2 ->
                                            case GHC.Types.HEq_sc
                                                   @ *
                                                   @ *
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   @ a
                                                   (GHC.Classes.$p4(%,,,%)
                                                      @ (Foreign.Storable.Storable a)
                                                      @ (Foreign.R.Type.IsVector ty)
                                                      @ (Data.Singletons.SingI ty)
                                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.Primitive.PrimState m)
                                                            ty :: *)
                                                         Data.Type.Equality.~
                                                         (a :: *))
                                                      $d(%,,,%))
                                                     `cast`
                                                   (Data.Type.Equality.N:~[0]
                                                        <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty>_N <a>_N) of cobox7 { DEFAULT ->
                                            case Foreign.Storable.sizeOf
                                                   @ a
                                                   $dStorable
                                                   (Foreign.Marshal.Array.copyArray1
                                                      @ a) of wild6 { GHC.Types.I# y3 ->
                                            case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                            -> GHC.Prim.Addr#
                                                                            -> GHC.Prim.Word#
                                                                            -> GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld
                                                                            -> (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Prim.Addr# #)}
                                                   (GHC.Prim.plusAddr#
                                                      (GHC.Prim.plusAddr# dt 40#)
                                                      (GHC.Prim.*# dt1 y1))
                                                   (GHC.Prim.plusAddr#
                                                      (GHC.Prim.plusAddr# dt3 40#)
                                                      (GHC.Prim.*# dt4 y2))
                                                   (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                                   s1 of wild7 { (#,#) ds4 ds5 ->
                                            (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                             `cast`
                                           (Trans
                                                ((GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                         <()>_R)_R)
                                                ((GHC.Prim.State#
                                                    (Control.Monad.Primitive.PrimState
                                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                 ->_R ((#,#)
                                                         <'GHC.Types.TupleRep '[]>_R
                                                         <'GHC.Types.LiftedRep>_R
                                                         (GHC.Prim.State#
                                                            (Control.Monad.Primitive.PrimState
                                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                         <()>_R)_R)) })
                                        (do_set (GHC.Types.I# (GHC.Prim.*# 2# y))) } }
                             } in
                             case GHC.Classes.eqInt n2 (GHC.Types.I# 0#) of wild {
                               GHC.Types.False
                               -> GHC.Base.>>
                                    @ m
                                    $dMonad2
                                    @ ()
                                    @ ()
                                    (case GHC.Types.HEq_sc
                                            @ *
                                            @ *
                                            @ (Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty)
                                            @ a
                                            (GHC.Classes.$p4(%,,,%)
                                               @ (Foreign.Storable.Storable a)
                                               @ (Foreign.R.Type.IsVector ty)
                                               @ (Data.Singletons.SingI ty)
                                               @ ((Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty :: *)
                                                  Data.Type.Equality.~
                                                  (a :: *))
                                               $d(%,,,%))
                                              `cast`
                                            (Data.Type.Equality.N:~[0]
                                                 <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                          (Control.Monad.Primitive.PrimState m)
                                                          ty>_N <a>_N) of cobox4 { DEFAULT ->
                                     let {
                                       $dStorable :: Foreign.Storable.Storable a
                                       = GHC.Classes.$p1(%,,,%)
                                           @ (Foreign.Storable.Storable a)
                                           @ (Foreign.R.Type.IsVector ty)
                                           @ (Data.Singletons.SingI ty)
                                           @ ((Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty :: *)
                                              Data.Type.Equality.~
                                              (a :: *))
                                           $d(%,,,%)
                                     } in
                                     Control.Monad.Primitive.primitive
                                       @ m
                                       $dPrimMonad
                                       @ ()
                                       (Foreign.Storable.pokeElemOff
                                          @ a
                                          $dStorable
                                          (case Foreign.Storable.sizeOf
                                                  @ a
                                                  $dStorable
                                                  (Foreign.Marshal.Array.advancePtr1
                                                     @ a) of wild2 { GHC.Types.I# y ->
                                           GHC.Ptr.Ptr
                                             @ a
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ipv 40#)
                                                (GHC.Prim.*# ipv1 y)) })
                                          (GHC.Types.I# 0#)
                                          x)
                                         `cast`
                                       (Trans
                                            (GHC.Types.N:IO[0] <()>_R)
                                            (Trans
                                                 ((GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                  ->_R ((#,#)
                                                          <'GHC.Types.TupleRep '[]>_R
                                                          <'GHC.Types.LiftedRep>_R
                                                          (GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                          <()>_R)_R)
                                                 ((GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState
                                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                  ->_R ((#,#)
                                                          <'GHC.Types.TupleRep '[]>_R
                                                          <'GHC.Types.LiftedRep>_R
                                                          (GHC.Prim.State#
                                                             (Control.Monad.Primitive.PrimState
                                                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                          <()>_R)_R))) })
                                    (do_set (GHC.Types.I# 1#))
                               GHC.Types.True
                               -> GHC.Base.return @ m $dMonad2 @ () GHC.Tuple.() } } } })
                            (GHC.Base.return
                               @ m
                               $dMonad1
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a)
                               v1)) })) }) -}
1af1e894637879a669e1a9456f7e66ff
  replicateM ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> m a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(U))),A,A,A,A),1*U(1*U,A),A,U(U))><L,U(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 \ (n :: GHC.Types.Int) (m1 :: m a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (eta1 :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (Data.Vector.Generic.Mutable.munstream
                         @ m
                         @ (Data.Vector.SEXP.Mutable.Internal.W s ty)
                         @ a
                         @ GHC.Types.Any
                         $dPrimMonad
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%))
                         (Data.Vector.Fusion.Bundle.Monadic.replicateM
                            @ m
                            @ a
                            @ GHC.Types.Any
                            (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                            n
                            m1))) }) -}
d625dcdf219d3aba8e07cdd06d3d89cb
  set ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> a -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,A,C(C1(U)),1*C1(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,A,1*C1(C1(C1(U))),A,A,A,A),A,A,U(U))><L,1*U(U,U,1*U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (x :: a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    case v of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox2 { DEFAULT ->
                    let {
                      n :: GHC.Types.Int = GHC.Types.I# ipv2
                    } in
                    letrec {
                      do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                      = \ (i :: GHC.Types.Int) ->
                        case i of wild1 { GHC.Types.I# y ->
                        case GHC.Classes.ltInt
                               (GHC.Types.I# (GHC.Prim.*# 2# y))
                               n of wild {
                          GHC.Types.False
                          -> case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox3 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%)
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox4 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ ty
                                       @ a
                                       (GHC.Ptr.Ptr
                                          @ (Language.R.HExp.HExp
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          ipv)
                                         `cast`
                                       (Sym (Foreign.R.Internal.N:SEXP[0]
                                                 <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int#
                                             (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int#
                                             (GHC.Prim.-#
                                                ipv2
                                                y))) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild3 { GHC.Types.I# y1 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox5 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ ty
                                       @ a
                                       (GHC.Ptr.Ptr
                                          @ (Language.R.HExp.HExp
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          ipv)
                                         `cast`
                                       (Sym (Foreign.R.Internal.N:SEXP[0]
                                                 <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int#
                                             (GHC.Prim.-#
                                                ipv2
                                                y))) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild5 { GHC.Types.I# y2 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox6 { DEFAULT ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.copyArray1
                                          @ a) of wild6 { GHC.Types.I# y3 ->
                                case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                -> GHC.Prim.Addr#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Addr# #)}
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# dt 40#)
                                          (GHC.Prim.*# dt1 y1))
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# dt3 40#)
                                          (GHC.Prim.*# dt4 y2))
                                       (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                       s1 of wild7 { (#,#) ds4 ds5 ->
                                (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                 `cast`
                               (Trans
                                    ((GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                             <()>_R)_R)
                                    ((GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState
                                           (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.PrimState
                                                   (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                             <()>_R)_R)) }
                          GHC.Types.True
                          -> GHC.Base.>>
                               @ m
                               $dMonad
                               @ ()
                               @ ()
                               (case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox3 { DEFAULT ->
                                let {
                                  $dStorable :: Foreign.Storable.Storable a
                                  = GHC.Classes.$p1(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%)
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep
                                                   (Control.Monad.Primitive.PrimState m) ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox4 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ ty
                                          @ a
                                          (GHC.Ptr.Ptr
                                             @ (Language.R.HExp.HExp
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             ipv)
                                            `cast`
                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                    <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                          (GHC.Int.I32#
                                             (GHC.Prim.narrow32Int#
                                                (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                          (GHC.Int.I32#
                                             (GHC.Prim.narrow32Int#
                                                y)) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.advancePtr1
                                             @ a) of wild3 { GHC.Types.I# y1 ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep
                                                   (Control.Monad.Primitive.PrimState m) ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox5 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ ty
                                          @ a
                                          (GHC.Ptr.Ptr
                                             @ (Language.R.HExp.HExp
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             ipv)
                                            `cast`
                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                    <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                          (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                          (GHC.Int.I32#
                                             (GHC.Prim.narrow32Int#
                                                y)) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.advancePtr1
                                             @ a) of wild5 { GHC.Types.I# y2 ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep
                                                   (Control.Monad.Primitive.PrimState m) ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox6 { DEFAULT ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.copyArray1
                                             @ a) of wild6 { GHC.Types.I# y3 ->
                                   case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                   -> GHC.Prim.Addr#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Addr# #)}
                                          (GHC.Prim.plusAddr#
                                             (GHC.Prim.plusAddr# dt 40#)
                                             (GHC.Prim.*# dt1 y1))
                                          (GHC.Prim.plusAddr#
                                             (GHC.Prim.plusAddr# dt3 40#)
                                             (GHC.Prim.*# dt4 y2))
                                          (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                          s1 of wild7 { (#,#) ds4 ds5 ->
                                   (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                    `cast`
                                  (Trans
                                       ((GHC.Prim.State#
                                           (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                        ->_R ((#,#)
                                                <'GHC.Types.TupleRep '[]>_R
                                                <'GHC.Types.LiftedRep>_R
                                                (GHC.Prim.State#
                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                <()>_R)_R)
                                       ((GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState
                                              (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                        ->_R ((#,#)
                                                <'GHC.Types.TupleRep '[]>_R
                                                <'GHC.Types.LiftedRep>_R
                                                (GHC.Prim.State#
                                                   (Control.Monad.Primitive.PrimState
                                                      (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                <()>_R)_R)) })
                               (do_set (GHC.Types.I# (GHC.Prim.*# 2# y))) } }
                    } in
                    case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> GHC.Base.>>
                           @ m
                           $dMonad
                           @ ()
                           @ ()
                           (case GHC.Types.HEq_sc
                                   @ *
                                   @ *
                                   @ (Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty)
                                   @ a
                                   (GHC.Classes.$p4(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%))
                                     `cast`
                                   (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                       (Control.Monad.Primitive.PrimState
                                                                          m)
                                                                       ty>_N <a>_N) of cobox3 { DEFAULT ->
                            let {
                              $dStorable :: Foreign.Storable.Storable a
                              = GHC.Classes.$p1(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ ((Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty :: *)
                                     Data.Type.Equality.~
                                     (a :: *))
                                  $d(%,,,%)
                            } in
                            Control.Monad.Primitive.primitive
                              @ m
                              $dPrimMonad
                              @ ()
                              (Foreign.Storable.pokeElemOff
                                 @ a
                                 $dStorable
                                 (case Foreign.Storable.sizeOf
                                         @ a
                                         $dStorable
                                         (Foreign.Marshal.Array.advancePtr1
                                            @ a) of wild2 { GHC.Types.I# y ->
                                  GHC.Ptr.Ptr
                                    @ a
                                    (GHC.Prim.plusAddr#
                                       (GHC.Prim.plusAddr# ipv 40#)
                                       (GHC.Prim.*# ipv1 y)) })
                                 (GHC.Types.I# 0#)
                                 x)
                                `cast`
                              (Trans
                                   (GHC.Types.N:IO[0] <()>_R)
                                   (Trans
                                        ((GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                         ->_R ((#,#)
                                                 <'GHC.Types.TupleRep '[]>_R
                                                 <'GHC.Types.LiftedRep>_R
                                                 (GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                 <()>_R)_R)
                                        ((GHC.Prim.State#
                                            (Control.Monad.Primitive.PrimState
                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                         ->_R ((#,#)
                                                 <'GHC.Types.TupleRep '[]>_R
                                                 <'GHC.Types.LiftedRep>_R
                                                 (GHC.Prim.State#
                                                    (Control.Monad.Primitive.PrimState
                                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                 <()>_R)_R))) })
                           (do_set (GHC.Types.I# 1#))
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } } }) }) -}
22fca7669061341c33c56ef11040c100
  slice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  let {
                    n1 :: GHC.Types.Int
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox2 { DEFAULT ->
                      case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                      GHC.Types.I# dt2 } }
                  } in
                  let {
                    $j :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a <join 0>
                    = case i of wild1 { GHC.Types.I# i# ->
                      case j of wild2 { GHC.Types.I# m# ->
                      case n1 of wild3 { GHC.Types.I# n# ->
                      (Data.Vector.Internal.Check.checkError
                         @ (Data.Vector.SEXP.Mutable.Internal.W s1 ty s a)
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 513#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "slice"#))
                         (Data.Vector.Internal.Check.checkSlice_msg# i# m# n#))
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <s1>_P <ty>_P <s>_P <a>_N) } } }
                  } in
                  case GHC.Classes.geInt i (GHC.Types.I# 0#) of wild1 {
                    GHC.Types.False -> $j
                    GHC.Types.True
                    -> case GHC.Classes.geInt j (GHC.Types.I# 0#) of wild2 {
                         GHC.Types.False -> $j
                         GHC.Types.True
                         -> case i of wild3 { GHC.Types.I# x1 ->
                            case j of wild4 { GHC.Types.I# y ->
                            case GHC.Classes.leInt
                                   (GHC.Types.I# (GHC.Prim.+# x1 y))
                                   n1 of wild5 {
                              GHC.Types.False -> $j
                              GHC.Types.True
                              -> case GHC.Types.HEq_sc
                                        @ *
                                        @ *
                                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                        @ a
                                        (GHC.Classes.$p4(%,,,%)
                                           @ (Foreign.Storable.Storable a)
                                           @ (Foreign.R.Type.IsVector ty)
                                           @ (Data.Singletons.SingI ty)
                                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                              Data.Type.Equality.~
                                              (a :: *))
                                           $d(%,,,%))
                                          `cast`
                                        (Data.Type.Equality.N:~[0]
                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                      s ty>_N <a>_N) of cobox2 { DEFAULT ->
                                 case eta of wild7 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                 Data.Vector.SEXP.Mutable.Internal.$WMVector
                                   @ s
                                   @ ty
                                   @ a
                                   (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                     `cast`
                                   (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                                   (GHC.Int.I32#
                                      (GHC.Prim.narrow32Int#
                                         (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x1))))
                                   (GHC.Int.I32# (GHC.Prim.narrow32Int# y)) } } } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
31512f30893176855a42d41b82b16027
  splitAt ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> (Data.Vector.SEXP.Mutable.Internal.MVector s ty a,
        Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,1*U(U)><L,U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  let {
                    len :: GHC.Types.Int
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox2 { DEFAULT ->
                      case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                      GHC.Types.I# dt2 } }
                  } in
                  let {
                    n' :: GHC.Types.Int
                    = case n of wild1 { GHC.Types.I# x1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# x1 0#) of wild2 {
                        GHC.Types.False -> wild1 GHC.Types.True -> GHC.Types.I# 0# } }
                  } in
                  let {
                    m :: GHC.Types.Int
                    = case n' of wild1 { GHC.Types.I# x1 ->
                      case len of wild2 { GHC.Types.I# y1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# x1 y1) of wild3 {
                        GHC.Types.False -> wild2 GHC.Types.True -> wild1 } } }
                  } in
                  (case GHC.Types.HEq_sc
                          @ *
                          @ *
                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                          @ a
                          (GHC.Classes.$p4(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                Data.Type.Equality.~
                                (a :: *))
                             $d(%,,,%))
                            `cast`
                          (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              s ty>_N <a>_N) of cobox2 { DEFAULT ->
                   case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                   case m of wild2 { GHC.Types.I# x#1 ->
                   Data.Vector.SEXP.Mutable.Internal.$WMVector
                     @ s
                     @ ty
                     @ a
                     (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                       `cast`
                     (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                     (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                     (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1)) } } },
                   case GHC.Types.HEq_sc
                          @ *
                          @ *
                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                          @ a
                          (GHC.Classes.$p4(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                Data.Type.Equality.~
                                (a :: *))
                             $d(%,,,%))
                            `cast`
                          (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              s ty>_N <a>_N) of cobox2 { DEFAULT ->
                   case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                   case m of wild2 { GHC.Types.I# x# ->
                   case len of wild3 { GHC.Types.I# x ->
                   case n' of wild4 { GHC.Types.I# y ->
                   let {
                     y1 :: GHC.Prim.Int# = GHC.Prim.-# x y
                   } in
                   case GHC.Prim.tagToEnum#
                          @ GHC.Types.Bool
                          (GHC.Prim.<=# 0# y1) of wild5 {
                     GHC.Types.False
                     -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                          @ s
                          @ ty
                          @ a
                          (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                            `cast`
                          (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                          (GHC.Int.I32#
                             (GHC.Prim.narrow32Int#
                                (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x#))))
                          (GHC.Int.I32# 0#)
                     GHC.Types.True
                     -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                          @ s
                          @ ty
                          @ a
                          (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                            `cast`
                          (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                          (GHC.Int.I32#
                             (GHC.Prim.narrow32Int#
                                (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x#))))
                          (GHC.Int.I32# (GHC.Prim.narrow32Int# y1)) } } } } } }) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <(Data.Vector.SEXP.Mutable.Internal.MVector s ty a,
                                  Data.Vector.SEXP.Mutable.Internal.MVector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a,
                                                     Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> (Data.Vector.SEXP.Mutable.Internal.MVector
                                                                       s ty a,
                                                                     Data.Vector.SEXP.Mutable.Internal.MVector
                                                                       s ty a))))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
e1819b122c77ba2121d6a978d8b94ffa
  swap ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> GHC.Types.Int -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),A,A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),A,A,U(U))><L,1*U(U,U,U)><L,1*U(U)><L,1*U(U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    let {
                      file :: GHC.Base.String
                      = GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b ->
                           GHC.CString.unpackFoldrCString#
                             @ b
                             "./Data/Vector/Generic/Mutable.hs"#)
                    } in
                    let {
                      n :: GHC.Types.Int
                      = case GHC.Types.HEq_sc
                               @ *
                               @ *
                               @ (Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty)
                               @ a
                               (GHC.Classes.$p4(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ ((Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty :: *)
                                     Data.Type.Equality.~
                                     (a :: *))
                                  $d(%,,,%))
                                 `cast`
                               (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   ty>_N <a>_N) of cobox1 { DEFAULT ->
                        case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                        GHC.Types.I# dt2 } }
                    } in
                    case GHC.Classes.geInt i (GHC.Types.I# 0#) of wild1 {
                      GHC.Types.False
                      -> case i of wild2 { GHC.Types.I# i# ->
                         case n of wild3 { GHC.Types.I# n# ->
                         Data.Vector.Internal.Check.checkError
                           @ (m ())
                           file
                           (GHC.Types.I# 709#)
                           Data.Vector.Internal.Check.Bounds
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "swap"#))
                           (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                      GHC.Types.True
                      -> case GHC.Classes.ltInt i n of wild2 {
                           GHC.Types.False
                           -> case i of wild3 { GHC.Types.I# i# ->
                              case n of wild4 { GHC.Types.I# n# ->
                              Data.Vector.Internal.Check.checkError
                                @ (m ())
                                file
                                (GHC.Types.I# 709#)
                                Data.Vector.Internal.Check.Bounds
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "swap"#))
                                (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                           GHC.Types.True
                           -> let {
                                file1 :: GHC.Base.String
                                = GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "./Data/Vector/Generic/Mutable.hs"#)
                              } in
                              let {
                                n1 :: GHC.Types.Int
                                = case GHC.Types.HEq_sc
                                         @ *
                                         @ *
                                         @ (Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty)
                                         @ a
                                         (GHC.Classes.$p4(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ ((Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty :: *)
                                               Data.Type.Equality.~
                                               (a :: *))
                                            $d(%,,,%))
                                           `cast`
                                         (Data.Type.Equality.N:~[0]
                                              <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                       (Control.Monad.Primitive.PrimState m)
                                                       ty>_N <a>_N) of cobox1 { DEFAULT ->
                                  case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                  GHC.Types.I# dt2 } }
                              } in
                              case GHC.Classes.geInt j (GHC.Types.I# 0#) of wild4 {
                                GHC.Types.False
                                -> case j of wild5 { GHC.Types.I# i# ->
                                   case n1 of wild3 { GHC.Types.I# n# ->
                                   Data.Vector.Internal.Check.checkError
                                     @ (m ())
                                     file1
                                     (GHC.Types.I# 710#)
                                     Data.Vector.Internal.Check.Bounds
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b -> GHC.CString.unpackFoldrCString# @ b "swap"#))
                                     (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                                GHC.Types.True
                                -> case GHC.Classes.ltInt j n1 of wild5 {
                                     GHC.Types.False
                                     -> case j of wild3 { GHC.Types.I# i# ->
                                        case n1 of wild6 { GHC.Types.I# n# ->
                                        Data.Vector.Internal.Check.checkError
                                          @ (m ())
                                          file1
                                          (GHC.Types.I# 710#)
                                          Data.Vector.Internal.Check.Bounds
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b -> GHC.CString.unpackFoldrCString# @ b "swap"#))
                                          (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                                     GHC.Types.True
                                     -> let {
                                          $dMonad :: GHC.Base.Monad m
                                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                                        } in
                                        GHC.Base.>>=
                                          @ m
                                          $dMonad
                                          @ a
                                          @ ()
                                          (case GHC.Types.HEq_sc
                                                  @ *
                                                  @ *
                                                  @ (Data.Vector.SEXP.Base.ElemRep
                                                       (Control.Monad.Primitive.PrimState m) ty)
                                                  @ a
                                                  (GHC.Classes.$p4(%,,,%)
                                                     @ (Foreign.Storable.Storable a)
                                                     @ (Foreign.R.Type.IsVector ty)
                                                     @ (Data.Singletons.SingI ty)
                                                     @ ((Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty :: *)
                                                        Data.Type.Equality.~
                                                        (a :: *))
                                                     $d(%,,,%))
                                                    `cast`
                                                  (Data.Type.Equality.N:~[0]
                                                       <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                (Control.Monad.Primitive.PrimState
                                                                   m)
                                                                ty>_N <a>_N) of cobox1 { DEFAULT ->
                                           let {
                                             $dStorable :: Foreign.Storable.Storable a
                                             = GHC.Classes.$p1(%,,,%)
                                                 @ (Foreign.Storable.Storable a)
                                                 @ (Foreign.R.Type.IsVector ty)
                                                 @ (Data.Singletons.SingI ty)
                                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                                       (Control.Monad.Primitive.PrimState m)
                                                       ty :: *)
                                                    Data.Type.Equality.~
                                                    (a :: *))
                                                 $d(%,,,%)
                                           } in
                                           Control.Monad.Primitive.primitive
                                             @ m
                                             $dPrimMonad
                                             @ a
                                             (Foreign.Storable.peekElemOff
                                                @ a
                                                $dStorable
                                                (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                                 case Foreign.Storable.sizeOf
                                                        @ a
                                                        $dStorable
                                                        (Foreign.Marshal.Array.advancePtr1
                                                           @ a) of wild7 { GHC.Types.I# y ->
                                                 GHC.Ptr.Ptr
                                                   @ a
                                                   (GHC.Prim.plusAddr#
                                                      (GHC.Prim.plusAddr# dt 40#)
                                                      (GHC.Prim.*# dt1 y)) } })
                                                i)
                                               `cast`
                                             (Trans
                                                  (GHC.Types.N:IO[0] <a>_R)
                                                  (Trans
                                                       ((GHC.Prim.State#
                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                (GHC.Prim.State#
                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                                <a>_R)_R)
                                                       ((GHC.Prim.State#
                                                           (Control.Monad.Primitive.PrimState
                                                              (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                (GHC.Prim.State#
                                                                   (Control.Monad.Primitive.PrimState
                                                                      (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                                <a>_R)_R))) })
                                          (\ (x :: a) ->
                                           GHC.Base.>>=
                                             @ m
                                             $dMonad
                                             @ a
                                             @ ()
                                             (case GHC.Types.HEq_sc
                                                     @ *
                                                     @ *
                                                     @ (Data.Vector.SEXP.Base.ElemRep
                                                          (Control.Monad.Primitive.PrimState m) ty)
                                                     @ a
                                                     (GHC.Classes.$p4(%,,,%)
                                                        @ (Foreign.Storable.Storable a)
                                                        @ (Foreign.R.Type.IsVector ty)
                                                        @ (Data.Singletons.SingI ty)
                                                        @ ((Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty :: *)
                                                           Data.Type.Equality.~
                                                           (a :: *))
                                                        $d(%,,,%))
                                                       `cast`
                                                     (Data.Type.Equality.N:~[0]
                                                          <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   ty>_N <a>_N) of cobox1 { DEFAULT ->
                                              let {
                                                $dStorable :: Foreign.Storable.Storable a
                                                = GHC.Classes.$p1(%,,,%)
                                                    @ (Foreign.Storable.Storable a)
                                                    @ (Foreign.R.Type.IsVector ty)
                                                    @ (Data.Singletons.SingI ty)
                                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                                          (Control.Monad.Primitive.PrimState m)
                                                          ty :: *)
                                                       Data.Type.Equality.~
                                                       (a :: *))
                                                    $d(%,,,%)
                                              } in
                                              Control.Monad.Primitive.primitive
                                                @ m
                                                $dPrimMonad
                                                @ a
                                                (Foreign.Storable.peekElemOff
                                                   @ a
                                                   $dStorable
                                                   (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                                    case Foreign.Storable.sizeOf
                                                           @ a
                                                           $dStorable
                                                           (Foreign.Marshal.Array.advancePtr1
                                                              @ a) of wild7 { GHC.Types.I# y ->
                                                    GHC.Ptr.Ptr
                                                      @ a
                                                      (GHC.Prim.plusAddr#
                                                         (GHC.Prim.plusAddr# dt 40#)
                                                         (GHC.Prim.*# dt1 y)) } })
                                                   j)
                                                  `cast`
                                                (Trans
                                                     (GHC.Types.N:IO[0] <a>_R)
                                                     (Trans
                                                          ((GHC.Prim.State#
                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                                   <a>_R)_R)
                                                          ((GHC.Prim.State#
                                                              (Control.Monad.Primitive.PrimState
                                                                 (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                           ->_R ((#,#)
                                                                   <'GHC.Types.TupleRep '[]>_R
                                                                   <'GHC.Types.LiftedRep>_R
                                                                   (GHC.Prim.State#
                                                                      (Control.Monad.Primitive.PrimState
                                                                         (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                                   <a>_R)_R))) })
                                             (\ (y :: a) ->
                                              GHC.Base.>>
                                                @ m
                                                $dMonad
                                                @ ()
                                                @ ()
                                                (case GHC.Types.HEq_sc
                                                        @ *
                                                        @ *
                                                        @ (Data.Vector.SEXP.Base.ElemRep
                                                             (Control.Monad.Primitive.PrimState m)
                                                             ty)
                                                        @ a
                                                        (GHC.Classes.$p4(%,,,%)
                                                           @ (Foreign.Storable.Storable a)
                                                           @ (Foreign.R.Type.IsVector ty)
                                                           @ (Data.Singletons.SingI ty)
                                                           @ ((Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty :: *)
                                                              Data.Type.Equality.~
                                                              (a :: *))
                                                           $d(%,,,%))
                                                          `cast`
                                                        (Data.Type.Equality.N:~[0]
                                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m)
                                                                      ty>_N <a>_N) of cobox1 { DEFAULT ->
                                                 let {
                                                   $dStorable :: Foreign.Storable.Storable a
                                                   = GHC.Classes.$p1(%,,,%)
                                                       @ (Foreign.Storable.Storable a)
                                                       @ (Foreign.R.Type.IsVector ty)
                                                       @ (Data.Singletons.SingI ty)
                                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                                             (Control.Monad.Primitive.PrimState m)
                                                             ty :: *)
                                                          Data.Type.Equality.~
                                                          (a :: *))
                                                       $d(%,,,%)
                                                 } in
                                                 Control.Monad.Primitive.primitive
                                                   @ m
                                                   $dPrimMonad
                                                   @ ()
                                                   (Foreign.Storable.pokeElemOff
                                                      @ a
                                                      $dStorable
                                                      (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                                       case Foreign.Storable.sizeOf
                                                              @ a
                                                              $dStorable
                                                              (Foreign.Marshal.Array.advancePtr1
                                                                 @ a) of wild7 { GHC.Types.I# y1 ->
                                                       GHC.Ptr.Ptr
                                                         @ a
                                                         (GHC.Prim.plusAddr#
                                                            (GHC.Prim.plusAddr# dt 40#)
                                                            (GHC.Prim.*# dt1 y1)) } })
                                                      i
                                                      y)
                                                     `cast`
                                                   (Trans
                                                        (GHC.Types.N:IO[0] <()>_R)
                                                        (Trans
                                                             ((GHC.Prim.State#
                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                                      <()>_R)_R)
                                                             ((GHC.Prim.State#
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Control.Monad.Primitive.PrimState
                                                                            (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                                      <()>_R)_R))) })
                                                (case GHC.Types.HEq_sc
                                                        @ *
                                                        @ *
                                                        @ (Data.Vector.SEXP.Base.ElemRep
                                                             (Control.Monad.Primitive.PrimState m)
                                                             ty)
                                                        @ a
                                                        (GHC.Classes.$p4(%,,,%)
                                                           @ (Foreign.Storable.Storable a)
                                                           @ (Foreign.R.Type.IsVector ty)
                                                           @ (Data.Singletons.SingI ty)
                                                           @ ((Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty :: *)
                                                              Data.Type.Equality.~
                                                              (a :: *))
                                                           $d(%,,,%))
                                                          `cast`
                                                        (Data.Type.Equality.N:~[0]
                                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m)
                                                                      ty>_N <a>_N) of cobox1 { DEFAULT ->
                                                 let {
                                                   $dStorable :: Foreign.Storable.Storable a
                                                   = GHC.Classes.$p1(%,,,%)
                                                       @ (Foreign.Storable.Storable a)
                                                       @ (Foreign.R.Type.IsVector ty)
                                                       @ (Data.Singletons.SingI ty)
                                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                                             (Control.Monad.Primitive.PrimState m)
                                                             ty :: *)
                                                          Data.Type.Equality.~
                                                          (a :: *))
                                                       $d(%,,,%)
                                                 } in
                                                 Control.Monad.Primitive.primitive
                                                   @ m
                                                   $dPrimMonad
                                                   @ ()
                                                   (Foreign.Storable.pokeElemOff
                                                      @ a
                                                      $dStorable
                                                      (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                                       case Foreign.Storable.sizeOf
                                                              @ a
                                                              $dStorable
                                                              (Foreign.Marshal.Array.advancePtr1
                                                                 @ a) of wild7 { GHC.Types.I# y1 ->
                                                       GHC.Ptr.Ptr
                                                         @ a
                                                         (GHC.Prim.plusAddr#
                                                            (GHC.Prim.plusAddr# dt 40#)
                                                            (GHC.Prim.*# dt1 y1)) } })
                                                      j
                                                      x)
                                                     `cast`
                                                   (Trans
                                                        (GHC.Types.N:IO[0] <()>_R)
                                                        (Trans
                                                             ((GHC.Prim.State#
                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                                      <()>_R)_R)
                                                             ((GHC.Prim.State#
                                                                 (Control.Monad.Primitive.PrimState
                                                                    (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Control.Monad.Primitive.PrimState
                                                                            (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                                      <()>_R)_R))) }))) } } } }) }) -}
e94300334b1240c5b32069b30e69d8c9
  tail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  let {
                    n :: GHC.Types.Int
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox2 { DEFAULT ->
                      case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                      GHC.Types.I# (GHC.Prim.-# dt2 1#) } }
                  } in
                  let {
                    n1 :: GHC.Types.Int
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox2 { DEFAULT ->
                      case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                      GHC.Types.I# dt2 } }
                  } in
                  let {
                    $j :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a <join 0>
                    = case n of wild1 { GHC.Types.I# m# ->
                      case n1 of wild2 { GHC.Types.I# n# ->
                      (Data.Vector.Internal.Check.checkError
                         @ (Data.Vector.SEXP.Mutable.Internal.W s1 ty s a)
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 513#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "slice"#))
                         (Data.Vector.Internal.Check.checkSlice_msg# 1# m# n#))
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <s1>_P <ty>_P <s>_P <a>_N) } }
                  } in
                  case GHC.Classes.geInt
                         (GHC.Types.I# 1#)
                         (GHC.Types.I# 0#) of wild1 {
                    GHC.Types.False -> $j
                    GHC.Types.True
                    -> case GHC.Classes.geInt n (GHC.Types.I# 0#) of wild2 {
                         GHC.Types.False -> $j
                         GHC.Types.True
                         -> case n of wild4 { GHC.Types.I# y ->
                            case GHC.Classes.leInt
                                   (GHC.Types.I# (GHC.Prim.+# 1# y))
                                   n1 of wild5 {
                              GHC.Types.False -> $j
                              GHC.Types.True
                              -> case GHC.Types.HEq_sc
                                        @ *
                                        @ *
                                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                        @ a
                                        (GHC.Classes.$p4(%,,,%)
                                           @ (Foreign.Storable.Storable a)
                                           @ (Foreign.R.Type.IsVector ty)
                                           @ (Data.Singletons.SingI ty)
                                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                              Data.Type.Equality.~
                                              (a :: *))
                                           $d(%,,,%))
                                          `cast`
                                        (Data.Type.Equality.N:~[0]
                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                      s ty>_N <a>_N) of cobox2 { DEFAULT ->
                                 case eta of wild7 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                 Data.Vector.SEXP.Mutable.Internal.$WMVector
                                   @ s
                                   @ ty
                                   @ a
                                   (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                     `cast`
                                   (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                                   (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.+# dt1 1#)))
                                   (GHC.Int.I32# (GHC.Prim.narrow32Int# y)) } } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
c49ebafb0ff0181f810cbbbb6e8e1225
  take ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  case n of wild2 { GHC.Types.I# x1 ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.<=# x1 0#) of wild3 {
                    GHC.Types.False
                    -> case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  s
                                                                  ty>_N <a>_N) of cobox3 { DEFAULT ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x1 dt2) of wild4 {
                         GHC.Types.False
                         -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                              @ s
                              @ ty
                              @ a
                              (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                `cast`
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# dt2))
                         GHC.Types.True
                         -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                              @ s
                              @ ty
                              @ a
                              (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                `cast`
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# x1)) } }
                    GHC.Types.True
                    -> case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  s
                                                                  ty>_N <a>_N) of cobox3 { DEFAULT ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# 0# dt2) of wild4 {
                         GHC.Types.False
                         -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                              @ s
                              @ ty
                              @ a
                              (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                `cast`
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# dt2))
                         GHC.Types.True
                         -> Data.Vector.SEXP.Mutable.Internal.$WMVector
                              @ s
                              @ ty
                              @ a
                              (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                                `cast`
                              (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                              (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                              (GHC.Int.I32# 0#) } } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
55c17bdcbc7455befad4d9ebf56417c4
  toSEXP ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Foreign.R.Internal.SEXP (Control.Monad.R.Class.Region m) ty)
  {- Arity: 3,
     Strictness: <L,U(A,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),A),A,A,U(U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><S(SSS),1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Control.Monad.R.Class.MonadR m)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR
                            (Control.Monad.R.Class.Region m) ty a)
                   (w2 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 case w2 of ww { Data.Vector.SEXP.Mutable.Internal.MVector ww1 ww2 ww3 ->
                 Data.Vector.SEXP.Mutable.$wtoSEXP
                   @ m
                   @ ty
                   @ a
                   w
                   w1
                   ww1
                   ww2
                   ww3 }) -}
93bee5ffa88124039c318811cd2ce5e6
  unsafeCopy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><L,U(U,U,U)><L,U(U,U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a)
                   (v2 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case v1 of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                    case v2 of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dStorable :: Foreign.Storable.Storable a
                      = GHC.Classes.$p1(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild2 { GHC.Types.I# y ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild3 { GHC.Types.I# y1 ->
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox2 { DEFAULT ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.copyArray1
                                 @ a) of wild4 { GHC.Types.I# y2 ->
                       case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.Word#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv 40#)
                                 (GHC.Prim.*# ipv1 y))
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv3 40#)
                                 (GHC.Prim.*# ipv4 y1))
                              (GHC.Prim.int2Word# (GHC.Prim.*# ipv2 y2))
                              s1 of wild5 { (#,#) ds4 ds5 ->
                       (# ds4, GHC.Tuple.() #) } } } } })
                        `cast`
                      (Trans
                           ((GHC.Prim.State#
                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                            ->_R ((#,#)
                                    <'GHC.Types.TupleRep '[]>_R
                                    <'GHC.Types.LiftedRep>_R
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                    <()>_R)_R)
                           ((GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState
                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                            ->_R ((#,#)
                                    <'GHC.Types.TupleRep '[]>_R
                                    <'GHC.Types.LiftedRep>_R
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState
                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                    <()>_R)_R)) } } }) }) -}
51cdbe38579d65e65ec12b453cfeeb13
  unsafeDrop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  case n of wild2 { GHC.Types.I# x# ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox3 { DEFAULT ->
                  Data.Vector.SEXP.Mutable.Internal.$WMVector
                    @ s
                    @ ty
                    @ a
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                    (GHC.Int.I32#
                       (GHC.Prim.narrow32Int#
                          (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x#))))
                    (GHC.Int.I32#
                       (GHC.Prim.narrow32Int# (GHC.Prim.-# dt2 x#))) } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
8f257b36bbfab899b3773bd0a99695c9
  unsafeInit ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox3 { DEFAULT ->
                  Data.Vector.SEXP.Mutable.Internal.$WMVector
                    @ s
                    @ ty
                    @ a
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                    (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                    (GHC.Int.I32#
                       (GHC.Prim.narrow32Int# (GHC.Prim.-# dt2 1#))) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
b5e5aa147436f488cb67b4eae1e54848
  unsafeMove ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><L,U(U,U,U)><L,U(U,U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a)
                   (v2 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case v1 of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                    case v2 of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dStorable :: Foreign.Storable.Storable a
                      = GHC.Classes.$p1(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild2 { GHC.Types.I# y ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild3 { GHC.Types.I# y1 ->
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox2 { DEFAULT ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.moveArray1
                                 @ a) of wild4 { GHC.Types.I# y2 ->
                       case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.Word#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv 40#)
                                 (GHC.Prim.*# ipv1 y))
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv3 40#)
                                 (GHC.Prim.*# ipv4 y1))
                              (GHC.Prim.int2Word# (GHC.Prim.*# ipv2 y2))
                              s1 of wild5 { (#,#) ds4 ds5 ->
                       (# ds4, GHC.Tuple.() #) } } } } })
                        `cast`
                      (Trans
                           ((GHC.Prim.State#
                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                            ->_R ((#,#)
                                    <'GHC.Types.TupleRep '[]>_R
                                    <'GHC.Types.LiftedRep>_R
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                    <()>_R)_R)
                           ((GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState
                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                            ->_R ((#,#)
                                    <'GHC.Types.TupleRep '[]>_R
                                    <'GHC.Types.LiftedRep>_R
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState
                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                    <()>_R)_R)) } } }) }) -}
1619f4f382422dcf95b0af1ea2783336
  unsafeNew ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),A,C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,1*U(1*U,A),A,U(U))><L,U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 \ (n :: GHC.Types.Int) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (eta1 :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $d(%,%) :: Foreign.R.Type.IsVector ty
                         = GHC.Classes.$p2(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ ((Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty :: *)
                                Data.Type.Equality.~
                                (a :: *))
                             $d(%,,,%)
                       } in
                       let {
                         $dSingI :: Data.Singletons.SingI ty
                         = GHC.Classes.$p1(%,%)
                             @ (Data.Singletons.SingI ty)
                             @ (ty
                                Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                           'Foreign.R.Type.Logical,
                                                           'Foreign.R.Type.Int,
                                                           'Foreign.R.Type.Real,
                                                           'Foreign.R.Type.Complex,
                                                           'Foreign.R.Type.String,
                                                           'Foreign.R.Type.Vector,
                                                           'Foreign.R.Type.Expr,
                                                           'Foreign.R.Type.WeakRef,
                                                           'Foreign.R.Type.Raw])
                             $d(%,%)
                       } in
                       let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                               @ ty
                               $dSingI
                                 `cast`
                               (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                              `cast`
                            (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                       case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                         DEFAULT
                         -> GHC.Base.>>=
                              @ m
                              $dMonad1
                              @ (Foreign.R.Internal.SEXP
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ (Data.Vector.SEXP.Mutable.Internal.W
                                   s ty (Control.Monad.Primitive.PrimState m) a)
                              (Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ (Foreign.R.Internal.SEXP
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                  case Foreign.R.allocVector1
                                         @ ty
                                         $d(%,%)
                                         $dSingI
                                           `cast`
                                         (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                         n
                                         s1 of ds1 { (#,#) ipv ipv1 ->
                                  (($dReifies
                                      `cast`
                                    (Data.Reflection.N:Reifies[0]
                                         <*>_N
                                         <s>_N
                                         <Control.Monad.R.Internal.AcquireIO
                                            (Control.Monad.Primitive.PrimState m)>_N)
                                      @ Data.Proxy.Proxy
                                      (Data.Proxy.Proxy @ * @ s))
                                     `cast`
                                   (Control.Monad.R.Internal.N:AcquireIO[0]
                                        <Control.Monad.Primitive.PrimState m>_P)
                                     @ ty
                                     ipv1)
                                    `cast`
                                  (GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          (Control.Monad.Primitive.PrimState m) ty>_R)
                                    ipv })
                                   `cast`
                                 (Trans
                                      ((GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                       ->_R ((#,#)
                                               <'GHC.Types.TupleRep '[]>_R
                                               <'GHC.Types.LiftedRep>_R
                                               (GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                               <Foreign.R.Internal.SEXP
                                                  (Control.Monad.Primitive.PrimState m) ty>_R)_R)
                                      ((GHC.Prim.State#
                                          (Control.Monad.Primitive.PrimState
                                             (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                       ->_R ((#,#)
                                               <'GHC.Types.TupleRep '[]>_R
                                               <'GHC.Types.LiftedRep>_R
                                               (GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState
                                                     (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                               <Foreign.R.Internal.SEXP
                                                  (Control.Monad.Primitive.PrimState m) ty>_R)_R)))
                              (\ (sx :: Foreign.R.Internal.SEXP
                                          (Control.Monad.Primitive.PrimState m) ty) ->
                               GHC.Base.return
                                 @ m
                                 $dMonad1
                                 @ (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a)
                                 (case n of wild { GHC.Types.I# x# ->
                                  (Data.Vector.SEXP.Mutable.Internal.$WMVector
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     @ a
                                     sx
                                     (GHC.Int.I32# 0#)
                                     (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                                    `cast`
                                  (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                            <s>_P
                                            <ty>_P
                                            <Control.Monad.Primitive.PrimState m>_P) <a>_N) }))
                         9#
                         -> Internal.Error.failure1
                              @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a))
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Data.Vector.SEXP.Mutable.new"#)) } } })) }) -}
53e38c02b0e6fc27bb0a7086e67afeaa
  unsafeRead ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(U)),A,A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,A)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (i :: GHC.Types.Int) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ a
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dStorable :: Foreign.Storable.Storable a
                      = GHC.Classes.$p1(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ a
                      (Foreign.Storable.peekElemOff
                         @ a
                         $dStorable
                         (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          case Foreign.Storable.sizeOf
                                 @ a
                                 $dStorable
                                 (Foreign.Marshal.Array.advancePtr1
                                    @ a) of wild2 { GHC.Types.I# y ->
                          GHC.Ptr.Ptr
                            @ a
                            (GHC.Prim.plusAddr#
                               (GHC.Prim.plusAddr# dt 40#)
                               (GHC.Prim.*# dt1 y)) } })
                         i)
                        `cast`
                      (Trans
                           (GHC.Types.N:IO[0] <a>_R)
                           (Trans
                                ((GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                         <a>_R)_R)
                                ((GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.PrimState
                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                         <a>_R)_R))) }) }) -}
22613914b5b795fb47f22294c7681781
  unsafeSlice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(S),1*U(U)><S(SSL),1*U(U,U,A)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeSlice
                     @ s1
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%)
                     @ s
                     i
                     j
                     eta
                       `cast`
                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                               <s1>_P <ty>_P <s>_P) <a>_N))
                    `cast`
                  (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                       <s1>_P <ty>_P <s>_P <a>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
c44d101c341a46f3c13726eef19b177f
  unsafeSwap ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> GHC.Types.Int -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),A,A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),A,A,U(U))><L,U(U,U,A)><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ a
                      @ ()
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dStorable :: Foreign.Storable.Storable a
                         = GHC.Classes.$p1(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ ((Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty :: *)
                                Data.Type.Equality.~
                                (a :: *))
                             $d(%,,,%)
                       } in
                       Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ a
                         (Foreign.Storable.peekElemOff
                            @ a
                            $dStorable
                            (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             case Foreign.Storable.sizeOf
                                    @ a
                                    $dStorable
                                    (Foreign.Marshal.Array.advancePtr1
                                       @ a) of wild2 { GHC.Types.I# y ->
                             GHC.Ptr.Ptr
                               @ a
                               (GHC.Prim.plusAddr#
                                  (GHC.Prim.plusAddr# dt 40#)
                                  (GHC.Prim.*# dt1 y)) } })
                            i)
                           `cast`
                         (Trans
                              (GHC.Types.N:IO[0] <a>_R)
                              (Trans
                                   ((GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                    ->_R ((#,#)
                                            <'GHC.Types.TupleRep '[]>_R
                                            <'GHC.Types.LiftedRep>_R
                                            (GHC.Prim.State#
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                            <a>_R)_R)
                                   ((GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState
                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                    ->_R ((#,#)
                                            <'GHC.Types.TupleRep '[]>_R
                                            <'GHC.Types.LiftedRep>_R
                                            (GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState
                                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                            <a>_R)_R))) })
                      (\ (x :: a) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ a
                         @ ()
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%)
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ a
                            (Foreign.Storable.peekElemOff
                               @ a
                               $dStorable
                               (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild2 { GHC.Types.I# y ->
                                GHC.Ptr.Ptr
                                  @ a
                                  (GHC.Prim.plusAddr#
                                     (GHC.Prim.plusAddr# dt 40#)
                                     (GHC.Prim.*# dt1 y)) } })
                               j)
                              `cast`
                            (Trans
                                 (GHC.Types.N:IO[0] <a>_R)
                                 (Trans
                                      ((GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                       ->_R ((#,#)
                                               <'GHC.Types.TupleRep '[]>_R
                                               <'GHC.Types.LiftedRep>_R
                                               (GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                               <a>_R)_R)
                                      ((GHC.Prim.State#
                                          (Control.Monad.Primitive.PrimState
                                             (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                       ->_R ((#,#)
                                               <'GHC.Types.TupleRep '[]>_R
                                               <'GHC.Types.LiftedRep>_R
                                               (GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState
                                                     (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                               <a>_R)_R))) })
                         (\ (y :: a) ->
                          GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%)
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (Foreign.Storable.pokeElemOff
                                  @ a
                                  $dStorable
                                  (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.advancePtr1
                                             @ a) of wild2 { GHC.Types.I# y1 ->
                                   GHC.Ptr.Ptr
                                     @ a
                                     (GHC.Prim.plusAddr#
                                        (GHC.Prim.plusAddr# dt 40#)
                                        (GHC.Prim.*# dt1 y1)) } })
                                  i
                                  y)
                                 `cast`
                               (Trans
                                    (GHC.Types.N:IO[0] <()>_R)
                                    (Trans
                                         ((GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                  <()>_R)_R)
                                         ((GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState
                                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState
                                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                  <()>_R)_R))) })
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%)
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (Foreign.Storable.pokeElemOff
                                  @ a
                                  $dStorable
                                  (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.advancePtr1
                                             @ a) of wild2 { GHC.Types.I# y1 ->
                                   GHC.Ptr.Ptr
                                     @ a
                                     (GHC.Prim.plusAddr#
                                        (GHC.Prim.plusAddr# dt 40#)
                                        (GHC.Prim.*# dt1 y1)) } })
                                  j
                                  x)
                                 `cast`
                               (Trans
                                    (GHC.Types.N:IO[0] <()>_R)
                                    (Trans
                                         ((GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                  <()>_R)_R)
                                         ((GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState
                                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.TupleRep '[]>_R
                                                  <'GHC.Types.LiftedRep>_R
                                                  (GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState
                                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                  <()>_R)_R))) })))) }) -}
94450c9d923ad7a918627ef843707454
  unsafeTail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SSS),1*U(U,U,U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox3 { DEFAULT ->
                  Data.Vector.SEXP.Mutable.Internal.$WMVector
                    @ s
                    @ ty
                    @ a
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                    (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.+# dt1 1#)))
                    (GHC.Int.I32#
                       (GHC.Prim.narrow32Int# (GHC.Prim.-# dt2 1#))) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
281e7e478cb6ed049f69f4a23a21c6ba
  unsafeTake ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SSL),1*U(U,U,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case eta of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                  case n of wild2 { GHC.Types.I# x#1 ->
                  Data.Vector.SEXP.Mutable.Internal.$WMVector
                    @ s
                    @ ty
                    @ a
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))
                    (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                    (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1)) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Mutable.Internal.MVector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Mutable.Internal.MVector
                                                                      s ty a)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
9fb878912bac402dd6e35ae3e1b9779b
  unsafeWrite ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> a -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,A,1*C1(C1(C1(U))),A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,A)><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (i :: GHC.Types.Int)
                   (x :: a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dStorable :: Foreign.Storable.Storable a
                      = GHC.Classes.$p1(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (Foreign.Storable.pokeElemOff
                         @ a
                         $dStorable
                         (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          case Foreign.Storable.sizeOf
                                 @ a
                                 $dStorable
                                 (Foreign.Marshal.Array.advancePtr1
                                    @ a) of wild2 { GHC.Types.I# y ->
                          GHC.Ptr.Ptr
                            @ a
                            (GHC.Prim.plusAddr#
                               (GHC.Prim.plusAddr# dt 40#)
                               (GHC.Prim.*# dt1 y)) } })
                         i
                         x)
                        `cast`
                      (Trans
                           (GHC.Types.N:IO[0] <()>_R)
                           (Trans
                                ((GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                         <()>_R)_R)
                                ((GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.PrimState
                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                         <()>_R)_R))) }) }) -}
0a3e24c6b76b078c06b977f629f47230
  write ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> a -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,A,1*C1(C1(C1(U))),A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,U)><L,1*U(U)><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (v :: Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                   (i :: GHC.Types.Int)
                   (x :: a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    let {
                      file :: GHC.Base.String
                      = GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b ->
                           GHC.CString.unpackFoldrCString#
                             @ b
                             "./Data/Vector/Generic/Mutable.hs"#)
                    } in
                    let {
                      n :: GHC.Types.Int
                      = case GHC.Types.HEq_sc
                               @ *
                               @ *
                               @ (Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty)
                               @ a
                               (GHC.Classes.$p4(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ ((Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty :: *)
                                     Data.Type.Equality.~
                                     (a :: *))
                                  $d(%,,,%))
                                 `cast`
                               (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   ty>_N <a>_N) of cobox1 { DEFAULT ->
                        case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                        GHC.Types.I# dt2 } }
                    } in
                    case GHC.Classes.geInt i (GHC.Types.I# 0#) of wild1 {
                      GHC.Types.False
                      -> case i of wild2 { GHC.Types.I# i# ->
                         case n of wild3 { GHC.Types.I# n# ->
                         Data.Vector.Internal.Check.checkError
                           @ (m ())
                           file
                           (GHC.Types.I# 697#)
                           Data.Vector.Internal.Check.Bounds
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "write"#))
                           (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                      GHC.Types.True
                      -> case GHC.Classes.ltInt i n of wild2 {
                           GHC.Types.False
                           -> case i of wild3 { GHC.Types.I# i# ->
                              case n of wild4 { GHC.Types.I# n# ->
                              Data.Vector.Internal.Check.checkError
                                @ (m ())
                                file
                                (GHC.Types.I# 697#)
                                Data.Vector.Internal.Check.Bounds
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "write"#))
                                (Data.Vector.Internal.Check.checkIndex_msg# i# n#) } }
                           GHC.Types.True
                           -> case GHC.Types.HEq_sc
                                     @ *
                                     @ *
                                     @ (Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty)
                                     @ a
                                     (GHC.Classes.$p4(%,,,%)
                                        @ (Foreign.Storable.Storable a)
                                        @ (Foreign.R.Type.IsVector ty)
                                        @ (Data.Singletons.SingI ty)
                                        @ ((Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty :: *)
                                           Data.Type.Equality.~
                                           (a :: *))
                                        $d(%,,,%))
                                       `cast`
                                     (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                         (Control.Monad.Primitive.PrimState
                                                                            m)
                                                                         ty>_N <a>_N) of cobox1 { DEFAULT ->
                              let {
                                $dStorable :: Foreign.Storable.Storable a
                                = GHC.Classes.$p1(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%)
                              } in
                              Control.Monad.Primitive.primitive
                                @ m
                                $dPrimMonad
                                @ ()
                                (Foreign.Storable.pokeElemOff
                                   @ a
                                   $dStorable
                                   (case v of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                    case Foreign.Storable.sizeOf
                                           @ a
                                           $dStorable
                                           (Foreign.Marshal.Array.advancePtr1
                                              @ a) of wild4 { GHC.Types.I# y ->
                                    GHC.Ptr.Ptr
                                      @ a
                                      (GHC.Prim.plusAddr#
                                         (GHC.Prim.plusAddr# dt 40#)
                                         (GHC.Prim.*# dt1 y)) } })
                                   i
                                   x)
                                  `cast`
                                (Trans
                                     (GHC.Types.N:IO[0] <()>_R)
                                     (Trans
                                          ((GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                   <()>_R)_R)
                                          ((GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState
                                                 (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                   <()>_R)_R))) } } }) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

