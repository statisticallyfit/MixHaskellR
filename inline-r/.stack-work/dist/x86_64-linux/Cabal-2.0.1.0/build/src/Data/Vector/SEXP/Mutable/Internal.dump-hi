
==================== FINAL INTERFACE ====================
2017-12-28 08:49:09.888 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Data.Vector.SEXP.Mutable.Internal 8022
  interface hash: 83be396866d12ff0d7486ef97e410c61
  ABI hash: 2ce42555caaa41eef4158ba025e8960c
  export-list hash: 4779780d75ff69f9cf4aa828db53af07
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b19159c19dde4b2cb724c9b7540124b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Vector.SEXP.Mutable.Internal.proxyW
  Data.Vector.SEXP.Mutable.Internal.release
  Data.Vector.SEXP.Mutable.Internal.unsafeRelease
  Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
  Data.Vector.SEXP.Mutable.Internal.withW
  Data.Vector.SEXP.Mutable.Internal.MVector{Data.Vector.SEXP.Mutable.Internal.MVector mvectorBase mvectorLength mvectorOffset}
  Data.Vector.SEXP.Mutable.Internal.W{Data.Vector.SEXP.Mutable.Internal.W unW}
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP.Base Foreign.R
                     Foreign.R.Constraints Foreign.R.Internal Foreign.R.Type
                     Internal.Error Language.R.HExp [boot]
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.1 pretty-1.1.3.3 primitive-0.6.2.0
                      reflection-2.1.2 safe-0.3.15 singletons-2.3.1 stm-2.4.4.1 syb-0.7
                      template-haskell-2.12.0.0 text-1.2.2.2 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: stm-2.4.4.1:Control.Monad.STM
         reflection-2.1.2:Data.Reflection
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Control.Memory.Region
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Data.Int e234a0a6d2a21ac9385a90eec01cbcae
import  -/  base-4.10.1.0:Data.Proxy da449059b879cc23dde5f0d9cfa646e9
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:Foreign.Marshal.Array a92cd8977f9b41078050a347c926171a
import  -/  base-4.10.1.0:Foreign.Storable c463817097bdd1b4c7f7c325680a9964
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Control.Memory.Region bd2f465c2e25d1f80c1a2e359d1309ef
  exports: d60c5e1550fee34b0484ba752c6d17b8
  <= 1ba7814c92b0c18077a114946a184b95
import  -/  Control.Monad.R.Internal 7e2ecbd29d45230b86889dd7cfc2de14
  exports: 084c7ee60e1e0a888ea9879c8f37011c
  AcquireIO def7db1ddf0366b192098f6d6e5684ea
  AcquireIO c8b72b02cf4a158565287a5422af958e
import  -/  Data.Vector.SEXP.Base 45a38cf91fe2cf94fe8625a751ba7f0f
  exports: d0b6c580d2d1031904153012b70cf3a9
  VECTOR 206ef0809e9e9bd525db9efc5a1a282d
import  -/  Foreign.R 51460710da704a1aff942901939ab83a
  exports: 66604cef250b707139e6d39041287043
  allocVector 20a503e6845850e58f85d6da9508c6db
import  -/  Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
  SEXP 8e71af79acc64eda5f9cb7291bf461df
  unsafeRelease 947c5de2985d3c51da4d5b3a8811624f
  unsafeSEXPToVectorPtr 793ad2fe9d7f56fdd17d73e58572c323
import  -/  Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
  exports: 5754d5cde3f2758aa360e9e8b66ebc71
  Char 1eeae3bbb682357f0ba159402f19e108
  SSEXPTYPE 01bde09c1432a58c48c6a6c3ae653c47
import  -/  Internal.Error 740162e156c3d9ec6fcb98a35435f6ce
  exports: 13dcfd343f68bd642398afc1dc7f61a0
  failure 1195b0f2e62fb52c3773907c4a230d1e
import  -/  primitive-0.6.2.0:Control.Monad.Primitive 51a1d708ce9627dfc5884be7480b4b76
import  -/  reflection-2.1.2:Data.Reflection 6c398a27ead1631e1e6ccc4b00487094
import  -/  singletons-2.3.1:Data.Singletons 9da68ca382f47f0899b26cbacf532ec5
import  -/  vector-0.12.0.1:Data.Vector.Generic.Mutable 2f826eb33b222a49aa71d222d259d320
import  -/  vector-0.12.0.1:Data.Vector.Generic.Mutable.Base 551d90786aa2d36087438173bcbc62e5
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.Generic.Mutable.Base.MVector
      (Data.Vector.SEXP.Mutable.Internal.W t ty) a
  DFunId
  {- Arity: 2,
     Strictness: <L,C(C1(C1(U(U,U))))><L,U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))>,
     Inline: CONLIKE,
     Unfolding: DFun: @ t
                      @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      @ a
                      (v :: Data.Reflection.Reifies
                              t (Control.Monad.R.Internal.AcquireIO s))
                      (v1 :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Mutable.Internal.W t ty)
                  @ a
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeSlice
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeNew
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicInitialize
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeReplicate
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeRead
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeWrite
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicClear
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicSet
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeCopy
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeMove
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeGrow
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicClear ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a) ->
                 GHC.Base.return @ m $dMonad @ () GHC.Tuple.() }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicInitialize ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   @ m :: * -> *
                   (eta :: Control.Monad.Primitive.PrimMonad m)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.W
                              t ty (Control.Monad.Primitive.PrimState m) a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m eta)
                   @ ()
                   GHC.Tuple.() }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicLength ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall s1.
    Data.Vector.SEXP.Mutable.Internal.W t ty s1 a -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LLS),1*U(A,A,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ s1 (ds :: Data.Vector.SEXP.Mutable.Internal.W t ty s1 a) ->
                 case ds
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <t>_P
                           <ty>_P
                           <s1>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt2 } }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicOverlaps ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall s1.
    Data.Vector.SEXP.Mutable.Internal.W t ty s1 a
    -> Data.Vector.SEXP.Mutable.Internal.W t ty s1 a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ s1
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W t ty s1 a)
                   (ds1 :: Data.Vector.SEXP.Mutable.Internal.W t ty s1 a) ->
                 case ds
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <t>_P
                           <ty>_P
                           <s1>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <t>_P
                           <ty>_P
                           <s1>_P <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqAddr# dt dt3) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Int.ltInt32
                             (GHC.Int.I32# dt4)
                             (GHC.Int.I32#
                                (GHC.Prim.narrow32Int# (GHC.Prim.+# dt1 dt2))) of wild3 {
                        GHC.Types.False
                        -> GHC.Int.ltInt32
                             (GHC.Int.I32# dt1)
                             (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.+# dt4 dt5)))
                        GHC.Types.True -> GHC.Types.True } } } } }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicSet ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> a -> m ()
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(U(C(U(U)),A,A,1*C1(C1(C1(U))),A,A,A,A),A,A,U(U))><S(SL),U(1*U(A,A,C(C1(U)),1*C1(U),A),C(U))><S(LLS),1*U(U,U,1*U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a)
                   (x :: a) ->
                 case v1
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <t>_P
                           <ty>_P
                           <Control.Monad.Primitive.PrimState
                              m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 let {
                   n :: GHC.Types.Int = GHC.Types.I# ipv2
                 } in
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case i of wild1 { GHC.Types.I# y ->
                     case GHC.Classes.ltInt
                            (GHC.Types.I# (GHC.Prim.*# 2# y))
                            n of wild {
                       GHC.Types.False
                       -> case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%)
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox3 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ ty
                                    @ a
                                    (GHC.Ptr.Ptr
                                       @ (Language.R.HExp.HExp
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       ipv)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0]
                                              <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int#
                                          (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int#
                                          (GHC.Prim.-#
                                             ipv2
                                             y))) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             case Foreign.Storable.sizeOf
                                    @ a
                                    $dStorable
                                    (Foreign.Marshal.Array.advancePtr1
                                       @ a) of wild3 { GHC.Types.I# y1 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox4 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ ty
                                    @ a
                                    (GHC.Ptr.Ptr
                                       @ (Language.R.HExp.HExp
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       ipv)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0]
                                              <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                    (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int#
                                          (GHC.Prim.-#
                                             ipv2
                                             y))) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                             case Foreign.Storable.sizeOf
                                    @ a
                                    $dStorable
                                    (Foreign.Marshal.Array.advancePtr1
                                       @ a) of wild5 { GHC.Types.I# y2 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox5 { DEFAULT ->
                             case Foreign.Storable.sizeOf
                                    @ a
                                    $dStorable
                                    (Foreign.Marshal.Array.copyArray1
                                       @ a) of wild6 { GHC.Types.I# y3 ->
                             case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                             -> GHC.Prim.Addr#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Addr# #)}
                                    (GHC.Prim.plusAddr#
                                       (GHC.Prim.plusAddr# dt 40#)
                                       (GHC.Prim.*# dt1 y1))
                                    (GHC.Prim.plusAddr#
                                       (GHC.Prim.plusAddr# dt3 40#)
                                       (GHC.Prim.*# dt4 y2))
                                    (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                    s1 of wild7 { (#,#) ds4 ds5 ->
                             (# ds4, GHC.Tuple.() #) } } } } } } } } })
                              `cast`
                            (Trans
                                 ((GHC.Prim.State#
                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                  ->_R ((#,#)
                                          <'GHC.Types.TupleRep '[]>_R
                                          <'GHC.Types.LiftedRep>_R
                                          (GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                          <()>_R)_R)
                                 ((GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState
                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                  ->_R ((#,#)
                                          <'GHC.Types.TupleRep '[]>_R
                                          <'GHC.Types.LiftedRep>_R
                                          (GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState
                                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                          <()>_R)_R)) }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                          Data.Type.Equality.~
                                          (a :: *))
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%)
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     s ty>_N <a>_N) of cobox3 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ ty
                                       @ a
                                       (GHC.Ptr.Ptr
                                          @ (Language.R.HExp.HExp
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          ipv)
                                         `cast`
                                       (Sym (Foreign.R.Internal.N:SEXP[0]
                                                 <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int#
                                             (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int#
                                             y)) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild3 { GHC.Types.I# y1 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     s ty>_N <a>_N) of cobox4 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ ty
                                       @ a
                                       (GHC.Ptr.Ptr
                                          @ (Language.R.HExp.HExp
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          ipv)
                                         `cast`
                                       (Sym (Foreign.R.Internal.N:SEXP[0]
                                                 <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int#
                                             y)) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.advancePtr1
                                          @ a) of wild5 { GHC.Types.I# y2 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     s ty>_N <a>_N) of cobox5 { DEFAULT ->
                                case Foreign.Storable.sizeOf
                                       @ a
                                       $dStorable
                                       (Foreign.Marshal.Array.copyArray1
                                          @ a) of wild6 { GHC.Types.I# y3 ->
                                case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                -> GHC.Prim.Addr#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Addr# #)}
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# dt 40#)
                                          (GHC.Prim.*# dt1 y1))
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# dt3 40#)
                                          (GHC.Prim.*# dt4 y2))
                                       (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                       s1 of wild7 { (#,#) ds4 ds5 ->
                                (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                 `cast`
                               (Trans
                                    ((GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                             <()>_R)_R)
                                    ((GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState
                                           (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.PrimState
                                                   (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                             <()>_R)_R)) })
                            (do_set (GHC.Types.I# (GHC.Prim.*# 2# y))) } }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Types.HEq_sc
                                @ *
                                @ *
                                @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                @ a
                                (GHC.Classes.$p4(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%))
                                  `cast`
                                (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                    s
                                                                    ty>_N <a>_N) of cobox2 { DEFAULT ->
                         let {
                           $dStorable :: Foreign.Storable.Storable a
                           = GHC.Classes.$p1(%,,,%)
                               @ (Foreign.Storable.Storable a)
                               @ (Foreign.R.Type.IsVector ty)
                               @ (Data.Singletons.SingI ty)
                               @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                  Data.Type.Equality.~
                                  (a :: *))
                               $d(%,,,%)
                         } in
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (Foreign.Storable.pokeElemOff
                              @ a
                              $dStorable
                              (case Foreign.Storable.sizeOf
                                      @ a
                                      $dStorable
                                      (Foreign.Marshal.Array.advancePtr1
                                         @ a) of wild2 { GHC.Types.I# y ->
                               GHC.Ptr.Ptr
                                 @ a
                                 (GHC.Prim.plusAddr#
                                    (GHC.Prim.plusAddr# ipv 40#)
                                    (GHC.Prim.*# ipv1 y)) })
                              (GHC.Types.I# 0#)
                              x)
                             `cast`
                           (Trans
                                (GHC.Types.N:IO[0] <()>_R)
                                (Trans
                                     ((GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              <()>_R)_R)
                                     ((GHC.Prim.State#
                                         (Control.Monad.Primitive.PrimState
                                            (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                      ->_R ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState
                                                    (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                              <()>_R)_R))) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } } }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeCopy ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> Data.Vector.SEXP.Mutable.Internal.W
         t ty (Control.Monad.Primitive.PrimState m) a
    -> m ()
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><L,U(U,U,U)><L,U(U,U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a)
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case w1
                           `cast`
                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <t>_P
                              <ty>_P
                              <Control.Monad.Primitive.PrimState
                                 m>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.advancePtr1
                              @ a) of wild2 { GHC.Types.I# y ->
                    case ds
                           `cast`
                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <t>_P
                              <ty>_P
                              <Control.Monad.Primitive.PrimState
                                 m>_P <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.advancePtr1
                              @ a) of wild3 { GHC.Types.I# y1 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.copyArray1
                              @ a) of wild4 { GHC.Types.I# y2 ->
                    case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                    -> GHC.Prim.Addr#
                                                    -> GHC.Prim.Word#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Addr# #)}
                           (GHC.Prim.plusAddr#
                              (GHC.Prim.plusAddr# dt 40#)
                              (GHC.Prim.*# dt1 y))
                           (GHC.Prim.plusAddr#
                              (GHC.Prim.plusAddr# dt3 40#)
                              (GHC.Prim.*# dt4 y1))
                           (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y2))
                           s1 of wild5 { (#,#) ds4 ds5 ->
                    (# ds4, GHC.Tuple.() #) } } } } } } })
                     `cast`
                   (Trans
                        ((GHC.Prim.State#
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 <()>_R)_R)
                        ((GHC.Prim.State#
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 <()>_R)_R)) }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeGrow ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> GHC.Types.Int
    -> m (Data.Vector.SEXP.Mutable.Internal.W
            t ty (Control.Monad.Primitive.PrimState m) a)
  {- Arity: 5,
     Strictness: <L,C(C1(C1(U(U,U))))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,U(U))><S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a)
                   (by :: GHC.Types.Int) ->
                 let {
                   n :: GHC.Types.Int
                   = case GHC.Types.HEq_sc
                            @ *
                            @ *
                            @ (Data.Vector.SEXP.Base.ElemRep s ty)
                            @ a
                            (GHC.Classes.$p4(%,,,%)
                               @ (Foreign.Storable.Storable a)
                               @ (Foreign.R.Type.IsVector ty)
                               @ (Data.Singletons.SingI ty)
                               @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                  Data.Type.Equality.~
                                  (a :: *))
                               $d(%,,,%))
                              `cast`
                            (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                s
                                                                ty>_N <a>_N) of cobox1 { DEFAULT ->
                     case v1
                            `cast`
                          (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                               <t>_P
                               <ty>_P
                               <Control.Monad.Primitive.PrimState
                                  m>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                     GHC.Types.I# dt2 } }
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.SEXP.Mutable.Internal.W
                        t ty (Control.Monad.Primitive.PrimState m) a)
                   @ (Data.Vector.SEXP.Mutable.Internal.W
                        t ty (Control.Monad.Primitive.PrimState m) a)
                   (case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $d(%,%) :: Foreign.R.Type.IsVector ty
                      = GHC.Classes.$p2(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    let {
                      $dSingI :: Data.Singletons.SingI ty
                      = GHC.Classes.$p1(%,%)
                          @ (Data.Singletons.SingI ty)
                          @ (ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])
                          $d(%,%)
                    } in
                    let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n1 :: GHC.Types.Int
                      = case n of wild { GHC.Types.I# x ->
                        case by of wild1 { GHC.Types.I# y ->
                        GHC.Types.I# (GHC.Prim.+# x y) } }
                    } in
                    case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                            @ ty
                            $dSingI
                              `cast`
                            (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                           `cast`
                         (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                    case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                      DEFAULT
                      -> GHC.Base.>>=
                           @ m
                           $dMonad1
                           @ (Foreign.R.Internal.SEXP s ty)
                           @ (Data.Vector.SEXP.Mutable.Internal.W
                                t ty (Control.Monad.Primitive.PrimState m) a)
                           (Control.Monad.Primitive.primitive
                              @ m
                              $dPrimMonad
                              @ (Foreign.R.Internal.SEXP s ty)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                               case Foreign.R.allocVector1
                                      @ ty
                                      $d(%,%)
                                      $dSingI
                                        `cast`
                                      (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                      n1
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               (($dReifies
                                   `cast`
                                 (Data.Reflection.N:Reifies[0]
                                      <*>_N <t>_N <Control.Monad.R.Internal.AcquireIO s>_N)
                                   @ Data.Proxy.Proxy
                                   (Data.Proxy.Proxy @ * @ t))
                                  `cast`
                                (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)
                                  @ ty
                                  ipv1)
                                 `cast`
                               (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R)
                                 ipv })
                                `cast`
                              (Trans
                                   ((GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                    ->_R ((#,#)
                                            <'GHC.Types.TupleRep '[]>_R
                                            <'GHC.Types.LiftedRep>_R
                                            (GHC.Prim.State#
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                            <Foreign.R.Internal.SEXP s ty>_R)_R)
                                   ((GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState
                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                    ->_R ((#,#)
                                            <'GHC.Types.TupleRep '[]>_R
                                            <'GHC.Types.LiftedRep>_R
                                            (GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState
                                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                            <Foreign.R.Internal.SEXP s ty>_R)_R)))
                           (\ (sx :: Foreign.R.Internal.SEXP s ty) ->
                            GHC.Base.return
                              @ m
                              $dMonad1
                              @ (Data.Vector.SEXP.Mutable.Internal.W
                                   t ty (Control.Monad.Primitive.PrimState m) a)
                              (case n1 of wild { GHC.Types.I# x# ->
                               (Data.Vector.SEXP.Mutable.Internal.$WMVector
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  sx
                                    `cast`
                                  (Trans
                                       (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)
                                       (Trans
                                            (GHC.Ptr.Ptr
                                               <Language.R.HExp.HExp s ty, Language.R.HExp.HExp
                                                                             (Control.Monad.Primitive.PrimState
                                                                                m)
                                                                             ty>)_R
                                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                                      <Control.Monad.Primitive.PrimState m>_P
                                                      <ty>_P))))
                                  (GHC.Int.I32# 0#)
                                  (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                                 `cast`
                               (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                         <t>_P
                                         <ty>_P
                                         <Control.Monad.Primitive.PrimState m>_P) <a>_N) }))
                      9#
                      -> Internal.Error.failure1
                           @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                   t ty (Control.Monad.Primitive.PrimState m) a))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Data.Vector.SEXP.Mutable.new"#)) } } })
                   (\ (v' :: Data.Vector.SEXP.Mutable.Internal.W
                               t ty (Control.Monad.Primitive.PrimState m) a) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           t ty (Control.Monad.Primitive.PrimState m) a)
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  s
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dStorable :: Foreign.Storable.Storable a
                         = GHC.Classes.$p1(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                Data.Type.Equality.~
                                (a :: *))
                             $d(%,,,%)
                       } in
                       Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ ()
                         (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          case v'
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <t>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          case n of wild1 { GHC.Types.I# x# ->
                          case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ ty
                                 @ a
                                 (GHC.Ptr.Ptr
                                    @ (Language.R.HExp.HExp
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    dt)
                                   `cast`
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                 (GHC.Int.I32# (GHC.Prim.narrow32Int# dt1))
                                 (GHC.Int.I32#
                                    (GHC.Prim.narrow32Int#
                                       x#)) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                          case Foreign.Storable.sizeOf
                                 @ a
                                 $dStorable
                                 (Foreign.Marshal.Array.advancePtr1
                                    @ a) of wild3 { GHC.Types.I# y ->
                          case v1
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <t>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt6 dt7 dt8 ->
                          case Foreign.Storable.sizeOf
                                 @ a
                                 $dStorable
                                 (Foreign.Marshal.Array.advancePtr1
                                    @ a) of wild5 { GHC.Types.I# y1 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox3 { DEFAULT ->
                          case Foreign.Storable.sizeOf
                                 @ a
                                 $dStorable
                                 (Foreign.Marshal.Array.copyArray1
                                    @ a) of wild6 { GHC.Types.I# y2 ->
                          case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Addr# #)}
                                 (GHC.Prim.plusAddr#
                                    (GHC.Prim.plusAddr# dt3 40#)
                                    (GHC.Prim.*# dt4 y))
                                 (GHC.Prim.plusAddr#
                                    (GHC.Prim.plusAddr# dt6 40#)
                                    (GHC.Prim.*# dt7 y1))
                                 (GHC.Prim.int2Word# (GHC.Prim.*# dt5 y2))
                                 s1 of wild7 { (#,#) ds4 ds5 ->
                          (# ds4, GHC.Tuple.() #) } } } } } } } } } })
                           `cast`
                         (Trans
                              ((GHC.Prim.State#
                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                               ->_R ((#,#)
                                       <'GHC.Types.TupleRep '[]>_R
                                       <'GHC.Types.LiftedRep>_R
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                       <()>_R)_R)
                              ((GHC.Prim.State#
                                  (Control.Monad.Primitive.PrimState
                                     (UnsafeCo nominal GHC.Types.IO m))_N)_R
                               ->_R ((#,#)
                                       <'GHC.Types.TupleRep '[]>_R
                                       <'GHC.Types.LiftedRep>_R
                                       (GHC.Prim.State#
                                          (Control.Monad.Primitive.PrimState
                                             (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                       <()>_R)_R)) })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              t ty (Control.Monad.Primitive.PrimState m) a)
                         v')) }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeMove ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> Data.Vector.SEXP.Mutable.Internal.W
         t ty (Control.Monad.Primitive.PrimState m) a
    -> m ()
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><L,U(U,U,U)><L,U(U,U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a)
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case w1
                           `cast`
                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <t>_P
                              <ty>_P
                              <Control.Monad.Primitive.PrimState
                                 m>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.advancePtr1
                              @ a) of wild2 { GHC.Types.I# y ->
                    case ds
                           `cast`
                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <t>_P
                              <ty>_P
                              <Control.Monad.Primitive.PrimState
                                 m>_P <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.advancePtr1
                              @ a) of wild3 { GHC.Types.I# y1 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.moveArray1
                              @ a) of wild4 { GHC.Types.I# y2 ->
                    case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                    -> GHC.Prim.Addr#
                                                    -> GHC.Prim.Word#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Addr# #)}
                           (GHC.Prim.plusAddr#
                              (GHC.Prim.plusAddr# dt 40#)
                              (GHC.Prim.*# dt1 y))
                           (GHC.Prim.plusAddr#
                              (GHC.Prim.plusAddr# dt3 40#)
                              (GHC.Prim.*# dt4 y1))
                           (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y2))
                           s1 of wild5 { (#,#) ds4 ds5 ->
                    (# ds4, GHC.Tuple.() #) } } } } } } })
                     `cast`
                   (Trans
                        ((GHC.Prim.State#
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 <()>_R)_R)
                        ((GHC.Prim.State#
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 <()>_R)_R)) }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeNew ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.SEXP.Mutable.Internal.W
            t ty (Control.Monad.Primitive.PrimState m) a)
  {- Arity: 4,
     Strictness: <L,C(C1(C1(U(U,U))))><S(LS(SL)LS(S)),U(A,1*U(1*U,A),A,1*U(1*U))><S(S(LC(C(S))LLL)L),U(1*U(A,1*C1(C1(U)),A,C(U),A),1*C1(U))><L,U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $d(%,%) :: Foreign.R.Type.IsVector ty
                   = GHC.Classes.$p2(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 let {
                   $dSingI :: Data.Singletons.SingI ty
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Singletons.SingI ty)
                       @ (ty
                          Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                     'Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                     'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                     'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                     'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                     'Foreign.R.Type.Raw])
                       $d(%,%)
                 } in
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (n :: GHC.Types.Int) ->
                 case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                         @ ty
                         $dSingI
                           `cast`
                         (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                        `cast`
                      (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                   DEFAULT
                   -> GHC.Base.>>=
                        @ m
                        $dMonad
                        @ (Foreign.R.Internal.SEXP s ty)
                        @ (Data.Vector.SEXP.Mutable.Internal.W
                             t ty (Control.Monad.Primitive.PrimState m) a)
                        (Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ (Foreign.R.Internal.SEXP s ty)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case Foreign.R.allocVector1
                                   @ ty
                                   $d(%,%)
                                   $dSingI
                                     `cast`
                                   (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                   n
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            (($dReifies
                                `cast`
                              (Data.Reflection.N:Reifies[0]
                                   <*>_N <t>_N <Control.Monad.R.Internal.AcquireIO s>_N)
                                @ Data.Proxy.Proxy
                                (Data.Proxy.Proxy @ * @ t))
                               `cast`
                             (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)
                               @ ty
                               ipv1)
                              `cast`
                            (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R)
                              ipv })
                             `cast`
                           (Trans
                                ((GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                         <Foreign.R.Internal.SEXP s ty>_R)_R)
                                ((GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.PrimState
                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                         <Foreign.R.Internal.SEXP s ty>_R)_R)))
                        (\ (sx :: Foreign.R.Internal.SEXP s ty) ->
                         GHC.Base.return
                           @ m
                           $dMonad
                           @ (Data.Vector.SEXP.Mutable.Internal.W
                                t ty (Control.Monad.Primitive.PrimState m) a)
                           (case n of wild { GHC.Types.I# x# ->
                            (Data.Vector.SEXP.Mutable.Internal.$WMVector
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               sx
                                 `cast`
                               (Trans
                                    (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)
                                    (Trans
                                         (GHC.Ptr.Ptr
                                            <Language.R.HExp.HExp s ty, Language.R.HExp.HExp
                                                                          (Control.Monad.Primitive.PrimState
                                                                             m)
                                                                          ty>)_R
                                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                                   <Control.Monad.Primitive.PrimState m>_P
                                                   <ty>_P))))
                               (GHC.Int.I32# 0#)
                               (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                              `cast`
                            (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                      <t>_P
                                      <ty>_P
                                      <Control.Monad.Primitive.PrimState m>_P) <a>_N) }))
                   9#
                   -> Internal.Error.failure1
                        @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                t ty (Control.Monad.Primitive.PrimState m) a))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "Data.Vector.SEXP.Mutable.new"#)) } } }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeRead ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> GHC.Types.Int -> m a
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(U)),A,A,A,A,A),A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><L,1*U(U,U,A)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a)
                   (i :: GHC.Types.Int) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ a
                   (Foreign.Storable.peekElemOff
                      @ a
                      $dStorable
                      (case ds
                              `cast`
                            (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                 <t>_P
                                 <ty>_P
                                 <Control.Monad.Primitive.PrimState
                                    m>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild2 { GHC.Types.I# y ->
                       GHC.Ptr.Ptr
                         @ a
                         (GHC.Prim.plusAddr#
                            (GHC.Prim.plusAddr# dt 40#)
                            (GHC.Prim.*# dt1 y)) } })
                      i)
                     `cast`
                   (Trans
                        (GHC.Types.N:IO[0] <a>_R)
                        (Trans
                             ((GHC.Prim.State#
                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                              ->_R ((#,#)
                                      <'GHC.Types.TupleRep '[]>_R
                                      <'GHC.Types.LiftedRep>_R
                                      (GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      <a>_R)_R)
                             ((GHC.Prim.State#
                                 (Control.Monad.Primitive.PrimState
                                    (UnsafeCo nominal GHC.Types.IO m))_N)_R
                              ->_R ((#,#)
                                      <'GHC.Types.TupleRep '[]>_R
                                      <'GHC.Types.LiftedRep>_R
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.PrimState
                                            (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                      <a>_R)_R))) }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeReplicate ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> a
    -> m (Data.Vector.SEXP.Mutable.Internal.W
            t ty (Control.Monad.Primitive.PrimState m) a)
  {- Arity: 5,
     Strictness: <L,C(C1(C1(U(U,U))))><S(LLLS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(U))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))><L,U(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (n :: GHC.Types.Int) (x :: a) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.SEXP.Mutable.Internal.W
                        t ty (Control.Monad.Primitive.PrimState m) a)
                   @ (Data.Vector.SEXP.Mutable.Internal.W
                        t ty (Control.Monad.Primitive.PrimState m) a)
                   (case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $d(%,%) :: Foreign.R.Type.IsVector ty
                      = GHC.Classes.$p2(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    let {
                      $dSingI :: Data.Singletons.SingI ty
                      = GHC.Classes.$p1(%,%)
                          @ (Data.Singletons.SingI ty)
                          @ (ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])
                          $d(%,%)
                    } in
                    let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                            @ ty
                            $dSingI
                              `cast`
                            (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                           `cast`
                         (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of x1 { DEFAULT ->
                    case GHC.Prim.dataToTag# @ Foreign.R.Type.SEXPTYPE x1 of a# {
                      DEFAULT
                      -> GHC.Base.>>=
                           @ m
                           $dMonad1
                           @ (Foreign.R.Internal.SEXP s ty)
                           @ (Data.Vector.SEXP.Mutable.Internal.W
                                t ty (Control.Monad.Primitive.PrimState m) a)
                           (Control.Monad.Primitive.primitive
                              @ m
                              $dPrimMonad
                              @ (Foreign.R.Internal.SEXP s ty)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                               case Foreign.R.allocVector1
                                      @ ty
                                      $d(%,%)
                                      $dSingI
                                        `cast`
                                      (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                      n
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               (($dReifies
                                   `cast`
                                 (Data.Reflection.N:Reifies[0]
                                      <*>_N <t>_N <Control.Monad.R.Internal.AcquireIO s>_N)
                                   @ Data.Proxy.Proxy
                                   (Data.Proxy.Proxy @ * @ t))
                                  `cast`
                                (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)
                                  @ ty
                                  ipv1)
                                 `cast`
                               (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R)
                                 ipv })
                                `cast`
                              (Trans
                                   ((GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                    ->_R ((#,#)
                                            <'GHC.Types.TupleRep '[]>_R
                                            <'GHC.Types.LiftedRep>_R
                                            (GHC.Prim.State#
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                            <Foreign.R.Internal.SEXP s ty>_R)_R)
                                   ((GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState
                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                    ->_R ((#,#)
                                            <'GHC.Types.TupleRep '[]>_R
                                            <'GHC.Types.LiftedRep>_R
                                            (GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState
                                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                            <Foreign.R.Internal.SEXP s ty>_R)_R)))
                           (\ (sx :: Foreign.R.Internal.SEXP s ty) ->
                            GHC.Base.return
                              @ m
                              $dMonad1
                              @ (Data.Vector.SEXP.Mutable.Internal.W
                                   t ty (Control.Monad.Primitive.PrimState m) a)
                              (case n of wild { GHC.Types.I# x# ->
                               (Data.Vector.SEXP.Mutable.Internal.$WMVector
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  sx
                                    `cast`
                                  (Trans
                                       (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)
                                       (Trans
                                            (GHC.Ptr.Ptr
                                               <Language.R.HExp.HExp s ty, Language.R.HExp.HExp
                                                                             (Control.Monad.Primitive.PrimState
                                                                                m)
                                                                             ty>)_R
                                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                                      <Control.Monad.Primitive.PrimState m>_P
                                                      <ty>_P))))
                                  (GHC.Int.I32# 0#)
                                  (GHC.Int.I32# (GHC.Prim.narrow32Int# x#)))
                                 `cast`
                               (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                         <t>_P
                                         <ty>_P
                                         <Control.Monad.Primitive.PrimState m>_P) <a>_N) }))
                      9#
                      -> Internal.Error.failure1
                           @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                   t ty (Control.Monad.Primitive.PrimState m) a))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "R character vectors are immutable and globally cached. Use 'mkChar' instead."#))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Data.Vector.SEXP.Mutable.new"#)) } } })
                   (\ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                               t ty (Control.Monad.Primitive.PrimState m) a) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           t ty (Control.Monad.Primitive.PrimState m) a)
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  s
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                 <t>_P
                                 <ty>_P
                                 <Control.Monad.Primitive.PrimState
                                    m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  s
                                                                  ty>_N <a>_N) of cobox2 { DEFAULT ->
                       let {
                         n1 :: GHC.Types.Int = GHC.Types.I# ipv2
                       } in
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case i of wild1 { GHC.Types.I# y ->
                           case GHC.Classes.ltInt
                                  (GHC.Types.I# (GHC.Prim.*# 2# y))
                                  n1 of wild {
                             GHC.Types.False
                             -> case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                             Data.Type.Equality.~
                                             (a :: *))
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     s ty>_N <a>_N) of cobox3 { DEFAULT ->
                                let {
                                  $dStorable :: Foreign.Storable.Storable a
                                  = GHC.Classes.$p1(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%)
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        s ty>_N <a>_N) of cobox4 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ ty
                                          @ a
                                          (GHC.Ptr.Ptr
                                             @ (Language.R.HExp.HExp
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             ipv)
                                            `cast`
                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                    <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                          (GHC.Int.I32#
                                             (GHC.Prim.narrow32Int#
                                                (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                          (GHC.Int.I32#
                                             (GHC.Prim.narrow32Int#
                                                (GHC.Prim.-#
                                                   ipv2
                                                   y))) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.advancePtr1
                                             @ a) of wild3 { GHC.Types.I# y1 ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        s ty>_N <a>_N) of cobox5 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ ty
                                          @ a
                                          (GHC.Ptr.Ptr
                                             @ (Language.R.HExp.HExp
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             ipv)
                                            `cast`
                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                    <Control.Monad.Primitive.PrimState m>_P <ty>_P))
                                          (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                          (GHC.Int.I32#
                                             (GHC.Prim.narrow32Int#
                                                (GHC.Prim.-#
                                                   ipv2
                                                   y))) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.advancePtr1
                                             @ a) of wild5 { GHC.Types.I# y2 ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        s ty>_N <a>_N) of cobox6 { DEFAULT ->
                                   case Foreign.Storable.sizeOf
                                          @ a
                                          $dStorable
                                          (Foreign.Marshal.Array.copyArray1
                                             @ a) of wild6 { GHC.Types.I# y3 ->
                                   case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                   -> GHC.Prim.Addr#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Addr# #)}
                                          (GHC.Prim.plusAddr#
                                             (GHC.Prim.plusAddr# dt 40#)
                                             (GHC.Prim.*# dt1 y1))
                                          (GHC.Prim.plusAddr#
                                             (GHC.Prim.plusAddr# dt3 40#)
                                             (GHC.Prim.*# dt4 y2))
                                          (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                          s1 of wild7 { (#,#) ds4 ds5 ->
                                   (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                    `cast`
                                  (Trans
                                       ((GHC.Prim.State#
                                           (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                        ->_R ((#,#)
                                                <'GHC.Types.TupleRep '[]>_R
                                                <'GHC.Types.LiftedRep>_R
                                                (GHC.Prim.State#
                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                <()>_R)_R)
                                       ((GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState
                                              (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                        ->_R ((#,#)
                                                <'GHC.Types.TupleRep '[]>_R
                                                <'GHC.Types.LiftedRep>_R
                                                (GHC.Prim.State#
                                                   (Control.Monad.Primitive.PrimState
                                                      (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                <()>_R)_R)) }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                Data.Type.Equality.~
                                                (a :: *))
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        s ty>_N <a>_N) of cobox3 { DEFAULT ->
                                   let {
                                     $dStorable :: Foreign.Storable.Storable a
                                     = GHC.Classes.$p1(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                            Data.Type.Equality.~
                                            (a :: *))
                                         $d(%,,,%)
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                   Data.Type.Equality.~
                                                   (a :: *))
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           s ty>_N <a>_N) of cobox4 { DEFAULT ->
                                      case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ ty
                                             @ a
                                             (GHC.Ptr.Ptr
                                                @ (Language.R.HExp.HExp
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                ipv)
                                               `cast`
                                             (Sym (Foreign.R.Internal.N:SEXP[0]
                                                       <Control.Monad.Primitive.PrimState m>_P
                                                       <ty>_P))
                                             (GHC.Int.I32#
                                                (GHC.Prim.narrow32Int#
                                                   (GHC.Prim.+# ipv1 (GHC.Prim.narrow32Int# y))))
                                             (GHC.Int.I32#
                                                (GHC.Prim.narrow32Int#
                                                   y)) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                      case Foreign.Storable.sizeOf
                                             @ a
                                             $dStorable
                                             (Foreign.Marshal.Array.advancePtr1
                                                @ a) of wild3 { GHC.Types.I# y1 ->
                                      case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                   Data.Type.Equality.~
                                                   (a :: *))
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           s ty>_N <a>_N) of cobox5 { DEFAULT ->
                                      case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ ty
                                             @ a
                                             (GHC.Ptr.Ptr
                                                @ (Language.R.HExp.HExp
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                ipv)
                                               `cast`
                                             (Sym (Foreign.R.Internal.N:SEXP[0]
                                                       <Control.Monad.Primitive.PrimState m>_P
                                                       <ty>_P))
                                             (GHC.Int.I32# (GHC.Prim.narrow32Int# ipv1))
                                             (GHC.Int.I32#
                                                (GHC.Prim.narrow32Int#
                                                   y)) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                      case Foreign.Storable.sizeOf
                                             @ a
                                             $dStorable
                                             (Foreign.Marshal.Array.advancePtr1
                                                @ a) of wild5 { GHC.Types.I# y2 ->
                                      case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                                   Data.Type.Equality.~
                                                   (a :: *))
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           s ty>_N <a>_N) of cobox6 { DEFAULT ->
                                      case Foreign.Storable.sizeOf
                                             @ a
                                             $dStorable
                                             (Foreign.Marshal.Array.copyArray1
                                                @ a) of wild6 { GHC.Types.I# y3 ->
                                      case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                                      -> GHC.Prim.Addr#
                                                                      -> GHC.Prim.Word#
                                                                      -> GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                      -> (# GHC.Prim.State#
                                                                              GHC.Prim.RealWorld,
                                                                            GHC.Prim.Addr# #)}
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# dt 40#)
                                                (GHC.Prim.*# dt1 y1))
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# dt3 40#)
                                                (GHC.Prim.*# dt4 y2))
                                             (GHC.Prim.int2Word# (GHC.Prim.*# dt2 y3))
                                             s1 of wild7 { (#,#) ds4 ds5 ->
                                      (# ds4, GHC.Tuple.() #) } } } } } } } } })
                                       `cast`
                                     (Trans
                                          ((GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                   <()>_R)_R)
                                          ((GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState
                                                 (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                   <()>_R)_R)) })
                                  (do_set (GHC.Types.I# (GHC.Prim.*# 2# y))) } }
                       } in
                       case GHC.Classes.eqInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Types.HEq_sc
                                      @ *
                                      @ *
                                      @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                      @ a
                                      (GHC.Classes.$p4(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                            Data.Type.Equality.~
                                            (a :: *))
                                         $d(%,,,%))
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                    s ty>_N <a>_N) of cobox3 { DEFAULT ->
                               let {
                                 $dStorable :: Foreign.Storable.Storable a
                                 = GHC.Classes.$p1(%,,,%)
                                     @ (Foreign.Storable.Storable a)
                                     @ (Foreign.R.Type.IsVector ty)
                                     @ (Data.Singletons.SingI ty)
                                     @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                        Data.Type.Equality.~
                                        (a :: *))
                                     $d(%,,,%)
                               } in
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (Foreign.Storable.pokeElemOff
                                    @ a
                                    $dStorable
                                    (case Foreign.Storable.sizeOf
                                            @ a
                                            $dStorable
                                            (Foreign.Marshal.Array.advancePtr1
                                               @ a) of wild2 { GHC.Types.I# y ->
                                     GHC.Ptr.Ptr
                                       @ a
                                       (GHC.Prim.plusAddr#
                                          (GHC.Prim.plusAddr# ipv 40#)
                                          (GHC.Prim.*# ipv1 y)) })
                                    (GHC.Types.I# 0#)
                                    x)
                                   `cast`
                                 (Trans
                                      (GHC.Types.N:IO[0] <()>_R)
                                      (Trans
                                           ((GHC.Prim.State#
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                            ->_R ((#,#)
                                                    <'GHC.Types.TupleRep '[]>_R
                                                    <'GHC.Types.LiftedRep>_R
                                                    (GHC.Prim.State#
                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                    <()>_R)_R)
                                           ((GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState
                                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                            ->_R ((#,#)
                                                    <'GHC.Types.TupleRep '[]>_R
                                                    <'GHC.Types.LiftedRep>_R
                                                    (GHC.Prim.State#
                                                       (Control.Monad.Primitive.PrimState
                                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                                    <()>_R)_R))) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              t ty (Control.Monad.Primitive.PrimState m) a)
                         v1)) }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeSlice ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall s1.
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.W t ty s1 a
    -> Data.Vector.SEXP.Mutable.Internal.W t ty s1 a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(S),1*U(U)><S(SSL),1*U(U,U,A)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ s1
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W t ty s1 a) ->
                 case ds
                        `cast`
                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <t>_P
                           <ty>_P
                           <s1>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# x# ->
                 case m of wild2 { GHC.Types.I# x#1 ->
                 (Data.Vector.SEXP.Mutable.Internal.$WMVector
                    @ s1
                    @ ty
                    @ a
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s1 ty) dt)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0] <s1>_P <ty>_P))
                    (GHC.Int.I32#
                       (GHC.Prim.narrow32Int#
                          (GHC.Prim.+# dt1 (GHC.Prim.narrow32Int# x#))))
                    (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1)))
                   `cast`
                 (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                           <t>_P <ty>_P <s1>_P) <a>_N) } } } }) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  $fMVectorWa_$cbasicUnsafeWrite ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.Mutable.Internal.W
      t ty (Control.Monad.Primitive.PrimState m) a
    -> GHC.Types.Int -> a -> m ()
  {- Arity: 6,
     Strictness: <L,A><S(LLLS(S)),U(1*U(1*C1(U(U)),A,A,1*C1(C1(C1(U))),A,A,A,A),A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><L,1*U(U,U,A)><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W
                            t ty (Control.Monad.Primitive.PrimState m) a)
                   (i :: GHC.Types.Int)
                   (x :: a) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (Foreign.Storable.pokeElemOff
                      @ a
                      $dStorable
                      (case ds
                              `cast`
                            (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                 <t>_P
                                 <ty>_P
                                 <Control.Monad.Primitive.PrimState
                                    m>_P <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild2 { GHC.Types.I# y ->
                       GHC.Ptr.Ptr
                         @ a
                         (GHC.Prim.plusAddr#
                            (GHC.Prim.plusAddr# dt 40#)
                            (GHC.Prim.*# dt1 y)) } })
                      i
                      x)
                     `cast`
                   (Trans
                        (GHC.Types.N:IO[0] <()>_R)
                        (Trans
                             ((GHC.Prim.State#
                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                              ->_R ((#,#)
                                      <'GHC.Types.TupleRep '[]>_R
                                      <'GHC.Types.LiftedRep>_R
                                      (GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                      <()>_R)_R)
                             ((GHC.Prim.State#
                                 (Control.Monad.Primitive.PrimState
                                    (UnsafeCo nominal GHC.Types.IO m))_N)_R
                              ->_R ((#,#)
                                      <'GHC.Types.TupleRep '[]>_R
                                      <'GHC.Types.LiftedRep>_R
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.PrimState
                                            (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                      <()>_R)_R))) }) -}
054dcdc55ade86b7313b161407a43a91
  $tc'MVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2970922875501819756##
                   2248718147610419191##
                   Data.Vector.SEXP.Mutable.Internal.$trModule
                   Data.Vector.SEXP.Mutable.Internal.$tc'MVector2
                   3#
                   Data.Vector.SEXP.Mutable.Internal.$tc'MVector1) -}
b250f2e1618a4a2ecea409d666fc13d4
  $tc'MVector1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d91aebf4a7e99e1d564d435082da7890
  $tc'MVector2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.Internal.$tc'MVector3) -}
aa85bfb0b71ff810e49d47c03b8006a4
  $tc'MVector3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MVector"#) -}
4b0fc72f77c1bf605aa8e91f71465efd
  $tc'W :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2082469110657602906##
                   428060587663095523##
                   Data.Vector.SEXP.Mutable.Internal.$trModule
                   Data.Vector.SEXP.Mutable.Internal.$tc'W2
                   4#
                   Data.Vector.SEXP.Mutable.Internal.$tc'W1) -}
3e9c05748ed10aa3950d41ff67c1e2ea
  $tc'W1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
10ad988d1106344113604ae63df79cd8
  $tc'W2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.Internal.$tc'W3) -}
1f4ff163298c11f553de212adb5c675e
  $tc'W3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'W"#) -}
b691559a02f7594d8b04a2c298fbe18d
  $tcMVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16619853400581233854##
                   3548015611681636607##
                   Data.Vector.SEXP.Mutable.Internal.$trModule
                   Data.Vector.SEXP.Mutable.Internal.$tcMVector2
                   0#
                   Data.Vector.SEXP.Mutable.Internal.$tcMVector1) -}
41afb513980110fe3fcd0973f16f2632
  $tcMVector1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
efc2b8282a84ee07bf9d5e558ae2abe5
  $tcMVector2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.Internal.$tcMVector3) -}
eaebd4ce4a8f4035900542cdf79aa6bd
  $tcMVector3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MVector"#) -}
5d4f3c1df04613bff033e6afb3d63f4f
  $tcW :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18419638097848582384##
                   12531092011304019902##
                   Data.Vector.SEXP.Mutable.Internal.$trModule
                   Data.Vector.SEXP.Mutable.Internal.$tcW2
                   0#
                   Data.Vector.SEXP.Mutable.Internal.$tcW1) -}
f88f66c553d482f64e93f30fa716a5ef
  $tcW1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
de6187262be813c739e799a62b16aad0
  $tcW2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.Internal.$tcW3) -}
a873817eccb85f4a23a35e79ab500d13
  $tcW3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("W"#) -}
b1d716d613d6641de94a276e1b2cbfd3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Vector.SEXP.Mutable.Internal.$trModule3
                   Data.Vector.SEXP.Mutable.Internal.$trModule1) -}
433b52e3db0f154c90a38aff7c1a6285
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.Internal.$trModule2) -}
dd756b1d8769816d5d401f9ad2ffb9bb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Data.Vector.SEXP.Mutable.Internal"#) -}
8265dfcd6af64a7fb39364ff068d8180
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Vector.SEXP.Mutable.Internal.$trModule4) -}
f6fc1a2b6ab5f2b2b2483f15628cc4a1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
65227b433ce3b999cef5e7dedfaea8e6
  type role MVector phantom phantom phantom
  data MVector s (ty :: Foreign.R.Type.SEXPTYPE) a
    = MVector {mvectorBase :: ! {-# UNPACK #-}(Foreign.R.Internal.N:SEXP[0]
                                                   <s>_P <ty>_P)Foreign.R.Internal.SEXP s ty,
               mvectorOffset :: {-# UNPACK #-}GHC.Int.Int32,
               mvectorLength :: {-# UNPACK #-}GHC.Int.Int32}
d6d594f37ed0e9805ca87e2c4fb3a6df
  type role W phantom phantom phantom phantom
  newtype W t (ty :: Foreign.R.Type.SEXPTYPE) s a
    = W {unW :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a}
65227b433ce3b999cef5e7dedfaea8e6
  mvectorBase ::
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Foreign.R.Internal.SEXP s ty
  RecSel Left Data.Vector.SEXP.Mutable.Internal.MVector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s ty) dt)
                   `cast`
                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)) }) -}
65227b433ce3b999cef5e7dedfaea8e6
  mvectorLength ::
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Int.Int32
  RecSel Left Data.Vector.SEXP.Mutable.Internal.MVector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 GHC.Int.I32# dt2 }) -}
65227b433ce3b999cef5e7dedfaea8e6
  mvectorOffset ::
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Int.Int32
  RecSel Left Data.Vector.SEXP.Mutable.Internal.MVector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 GHC.Int.I32# dt1 }) -}
2e839adb05ae524a7f8b9215c3bab093
  proxyW ::
    GHC.Base.Monad m =>
    m (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
    -> proxy t -> m (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><L,U><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ t
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ s
                   @ a
                   @ proxy :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: m (Data.Vector.SEXP.Mutable.Internal.W t ty s a))
                   (eta1 :: proxy t) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                   @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   (Data.Vector.SEXP.Mutable.Internal.proxyW1 @ t @ ty @ s @ a)
                     `cast`
                   (<Data.Vector.SEXP.Mutable.Internal.W t ty s a>_R
                    ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                             <t>_P <ty>_P <s>_P <a>_N)
                   eta) -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  proxyW1 ::
    Data.Vector.SEXP.Mutable.Internal.W t ty s a
    -> Data.Vector.SEXP.Mutable.Internal.W t ty s a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ s
                   @ a
                   (ds :: Data.Vector.SEXP.Mutable.Internal.W t ty s a) ->
                 ds) -}
c2299d71aa4f221f1149052946dc9fdf
  release ::
    (s' Control.Memory.Region.<= s) =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s' ty a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ s'
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (irred :: s' Control.Memory.Region.<= s) ->
                 Data.Vector.SEXP.Mutable.Internal.unsafeRelease
                   @ s
                   @ ty
                   @ a
                   @ s') -}
d6d594f37ed0e9805ca87e2c4fb3a6df
  unW ::
    Data.Vector.SEXP.Mutable.Internal.W t ty s a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  RecSel Left Data.Vector.SEXP.Mutable.Internal.W
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.Mutable.Internal.proxyW1
                  `cast`
                (forall (t :: <*>_N) (ty :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <*>_N) (a :: <*>_N).
                 <Data.Vector.SEXP.Mutable.Internal.W t ty s a>_R
                 ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                          <t>_P <ty>_P <s>_P <a>_N) -}
735161a458a7ee6f3eca1022bce3e3f7
  unsafeRelease ::
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s' ty a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ s'
                   (ds :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 Data.Vector.SEXP.Mutable.Internal.MVector
                   @ s'
                   @ ty
                   @ a
                   dt
                   dt1
                   dt2 }) -}
bb22d811c687a8e4f1026ed90f5838b3
  unsafeToPtr ::
    Foreign.Storable.Storable a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Ptr.Ptr a
  {- Arity: 2,
     Strictness: <S(C(S(S))LLLLLLL),1*U(1*C1(U(U)),A,A,A,A,A,A,A)><S(SSL),1*U(U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dStorable :: Foreign.Storable.Storable a)
                   (ds :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 case Foreign.Storable.sizeOf
                        @ a
                        $dStorable
                        (Foreign.Marshal.Array.advancePtr1
                           @ a) of wild2 { GHC.Types.I# y ->
                 GHC.Ptr.Ptr
                   @ a
                   (GHC.Prim.plusAddr#
                      (GHC.Prim.plusAddr# dt 40#)
                      (GHC.Prim.*# dt1 y)) } }) -}
245b61808944994e76f50e949c581046
  withW ::
    proxy t
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.W t ty s a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.Mutable.Internal.withW1
                  `cast`
                (forall (proxy :: <*
                                   -> *>_N) (t :: <*>_N) (s :: <*>_N) (ty :: <Foreign.R.Type.SEXPTYPE>_N) (a :: <*>_N).
                 <proxy t>_R
                 ->_R <Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                 ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                               <t>_P <ty>_P <s>_P) <a>_N) -}
ee48f9e9097296ae77e7efb0085e423b
  withW1 ::
    proxy t
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ proxy :: * -> *
                   @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: proxy t)
                   (v :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 v) -}
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.SEXP.Mutable.Internal.W,
                                                   .]
  = Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

