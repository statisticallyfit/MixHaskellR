
==================== FINAL INTERFACE ====================
2017-12-28 08:49:29.774643 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Data.Vector.SEXP [family instance module] 8022
  interface hash: c57049d0de47af8b438515de670ccdc6
  ABI hash: 1ba3b4d0f52c5e1239a58edb94ac6587
  export-list hash: ba6781c44342a369931119b5db2f7524
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 48334d6b80bb8504a73d610f5ebbee22
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Vector.SEXP.!
  Data.Vector.SEXP.!?
  Data.Vector.SEXP.++
  Data.Vector.SEXP.//
  Data.Vector.SEXP.accum
  Data.Vector.SEXP.all
  Data.Vector.SEXP.any
  Data.Vector.SEXP.break
  Data.Vector.SEXP.concat
  Data.Vector.SEXP.concatMap
  Data.Vector.SEXP.cons
  Data.Vector.SEXP.constructN
  Data.Vector.SEXP.constructrN
  Data.Vector.SEXP.copy
  Data.Vector.SEXP.create
  Data.Vector.SEXP.drop
  Data.Vector.SEXP.dropWhile
  Data.Vector.SEXP.elem
  Data.Vector.SEXP.elemIndex
  Data.Vector.SEXP.empty
  Data.Vector.SEXP.enumFromN
  Data.Vector.SEXP.enumFromStepN
  Data.Vector.SEXP.enumFromThenTo
  Data.Vector.SEXP.enumFromTo
  Data.Vector.SEXP.filter
  Data.Vector.SEXP.filterM
  Data.Vector.SEXP.find
  Data.Vector.SEXP.findIndex
  Data.Vector.SEXP.fold1M
  Data.Vector.SEXP.fold1M'
  Data.Vector.SEXP.fold1M'_
  Data.Vector.SEXP.fold1M_
  Data.Vector.SEXP.foldM
  Data.Vector.SEXP.foldM'
  Data.Vector.SEXP.foldM'_
  Data.Vector.SEXP.foldM_
  Data.Vector.SEXP.foldl
  Data.Vector.SEXP.foldl'
  Data.Vector.SEXP.foldl1
  Data.Vector.SEXP.foldl1'
  Data.Vector.SEXP.foldr
  Data.Vector.SEXP.foldr'
  Data.Vector.SEXP.foldr1
  Data.Vector.SEXP.foldr1'
  Data.Vector.SEXP.forM
  Data.Vector.SEXP.forM_
  Data.Vector.SEXP.force
  Data.Vector.SEXP.freeze
  Data.Vector.SEXP.fromList
  Data.Vector.SEXP.fromListN
  Data.Vector.SEXP.fromSEXP
  Data.Vector.SEXP.generate
  Data.Vector.SEXP.generateM
  Data.Vector.SEXP.head
  Data.Vector.SEXP.headM
  Data.Vector.SEXP.ifilter
  Data.Vector.SEXP.ifoldl
  Data.Vector.SEXP.ifoldl'
  Data.Vector.SEXP.ifoldr
  Data.Vector.SEXP.ifoldr'
  Data.Vector.SEXP.imap
  Data.Vector.SEXP.indexM
  Data.Vector.SEXP.init
  Data.Vector.SEXP.iterateN
  Data.Vector.SEXP.izipWith
  Data.Vector.SEXP.izipWith3
  Data.Vector.SEXP.izipWith4
  Data.Vector.SEXP.izipWith5
  Data.Vector.SEXP.izipWith6
  Data.Vector.SEXP.last
  Data.Vector.SEXP.lastM
  Data.Vector.SEXP.length
  Data.Vector.SEXP.map
  Data.Vector.SEXP.mapM
  Data.Vector.SEXP.mapM_
  Data.Vector.SEXP.maxIndex
  Data.Vector.SEXP.maxIndexBy
  Data.Vector.SEXP.maximum
  Data.Vector.SEXP.maximumBy
  Data.Vector.SEXP.minIndex
  Data.Vector.SEXP.minIndexBy
  Data.Vector.SEXP.minimum
  Data.Vector.SEXP.minimumBy
  Data.Vector.SEXP.notElem
  Data.Vector.SEXP.null
  Data.Vector.SEXP.partition
  Data.Vector.SEXP.postscanl
  Data.Vector.SEXP.postscanl'
  Data.Vector.SEXP.postscanr
  Data.Vector.SEXP.postscanr'
  Data.Vector.SEXP.prescanl
  Data.Vector.SEXP.prescanl'
  Data.Vector.SEXP.prescanr
  Data.Vector.SEXP.prescanr'
  Data.Vector.SEXP.product
  Data.Vector.SEXP.replicate
  Data.Vector.SEXP.replicateM
  Data.Vector.SEXP.reverse
  Data.Vector.SEXP.scanl
  Data.Vector.SEXP.scanl'
  Data.Vector.SEXP.scanl1
  Data.Vector.SEXP.scanl1'
  Data.Vector.SEXP.scanr
  Data.Vector.SEXP.scanr'
  Data.Vector.SEXP.scanr1
  Data.Vector.SEXP.scanr1'
  Data.Vector.SEXP.singleton
  Data.Vector.SEXP.slice
  Data.Vector.SEXP.snoc
  Data.Vector.SEXP.span
  Data.Vector.SEXP.splitAt
  Data.Vector.SEXP.sum
  Data.Vector.SEXP.tail
  Data.Vector.SEXP.take
  Data.Vector.SEXP.takeWhile
  Data.Vector.SEXP.thaw
  Data.Vector.SEXP.toByteString
  Data.Vector.SEXP.toList
  Data.Vector.SEXP.toSEXP
  Data.Vector.SEXP.toString
  Data.Vector.SEXP.unfoldr
  Data.Vector.SEXP.unfoldrN
  Data.Vector.SEXP.unsafeAccum
  Data.Vector.SEXP.unsafeCopy
  Data.Vector.SEXP.unsafeDrop
  Data.Vector.SEXP.unsafeFreeze
  Data.Vector.SEXP.unsafeFromSEXP
  Data.Vector.SEXP.unsafeHead
  Data.Vector.SEXP.unsafeHeadM
  Data.Vector.SEXP.unsafeIndex
  Data.Vector.SEXP.unsafeIndexM
  Data.Vector.SEXP.unsafeInit
  Data.Vector.SEXP.unsafeLast
  Data.Vector.SEXP.unsafeLastM
  Data.Vector.SEXP.unsafeSlice
  Data.Vector.SEXP.unsafeTail
  Data.Vector.SEXP.unsafeTake
  Data.Vector.SEXP.unsafeThaw
  Data.Vector.SEXP.unsafeToSEXP
  Data.Vector.SEXP.unsafeUpd
  Data.Vector.SEXP.unstablePartition
  Data.Vector.SEXP.zipWith
  Data.Vector.SEXP.zipWith3
  Data.Vector.SEXP.zipWith4
  Data.Vector.SEXP.zipWith5
  Data.Vector.SEXP.zipWith6
  Data.Vector.SEXP.zipWithM
  Data.Vector.SEXP.zipWithM_
  Data.Vector.SEXP.Vector{Data.Vector.SEXP.Vector vectorBase vectorLength vectorOffset}
  Data.Vector.SEXP.Base.ElemRep
  Data.Vector.SEXP.Base.VECTOR
  Data.Vector.SEXP.Mutable.Internal.MVector{Data.Vector.SEXP.Mutable.Internal.MVector mvectorBase mvectorLength mvectorOffset}
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP.Base
                     Data.Vector.SEXP.Mutable Data.Vector.SEXP.Mutable.Internal
                     Foreign.R Foreign.R.Constraints Foreign.R.Internal Foreign.R.Type
                     Internal.Error Language.R.HExp [boot]
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.1 pretty-1.1.3.3 primitive-0.6.2.0
                      reflection-2.1.2 safe-0.3.15 singletons-2.3.1 stm-2.4.4.1 syb-0.7
                      template-haskell-2.12.0.0 text-1.2.2.2 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: stm-2.4.4.1:Control.Monad.STM
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         syb-0.7:Data.Generics.Instances reflection-2.1.2:Data.Reflection
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Control.Memory.Region
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Control.Monad.ST 0d98ab1a431197bd867eedb89cc69670
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Int e234a0a6d2a21ac9385a90eec01cbcae
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.Proxy da449059b879cc23dde5f0d9cfa646e9
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:Data.Word c4e948c409792d945106eb5269810128
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:Foreign.ForeignPtr 63e92ad0ab9d449280d12705f0d0ee84
import  -/  base-4.10.1.0:Foreign.ForeignPtr.Imp df6f4c8361788f86a7a1bbb68ab43ab8
import  -/  base-4.10.1.0:Foreign.Marshal.Array a92cd8977f9b41078050a347c926171a
import  -/  base-4.10.1.0:Foreign.Storable c463817097bdd1b4c7f7c325680a9964
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Enum 5a1ba50c23f92f669e01f8955f202337
import  -/  base-4.10.1.0:GHC.Exts 7dc7a2be934e058493541437800afa50
import  -/  base-4.10.1.0:GHC.Foreign fa59c0b32fe445840d1211c9ecd6d691
import  -/  base-4.10.1.0:GHC.ForeignPtr a99df7536002ec378727be8f9ffc2ab8
import  -/  base-4.10.1.0:GHC.IO.Encoding.UTF8 cbd41ec820909f295fa9543d5dba3734
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.ST 2e8332d76addf7ae877da4ed6476bff5
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO.Unsafe 00b3b8853d06169d9bfd9af46118ba88
import  -/  bytestring-0.10.8.2:Data.ByteString 85ba2d590aae1a6d189ceb9a0f58e145
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal e154f5ecf6a3cd0a27df93e86ed481d7
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Control.Memory.Region bd2f465c2e25d1f80c1a2e359d1309ef
  exports: d60c5e1550fee34b0484ba752c6d17b8
  V 541302cd07c279e1266bc49e9f25f5fc
import  -/  Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
  exports: ebb323240982ac39e80db1d6fb39a690
  MonadR 3b2bb150f2b80e2d32d08e5e9fb3cdc6
  Region 49abf5cb38f3f6f39f201ac2b8615c87
import  -/  Control.Monad.R.Internal 7e2ecbd29d45230b86889dd7cfc2de14
  exports: 084c7ee60e1e0a888ea9879c8f37011c
  AcquireIO def7db1ddf0366b192098f6d6e5684ea
  AcquireIO c8b72b02cf4a158565287a5422af958e
  withAcquire 11d36a6b5d214213546187014e6c58b6
import  -/  Data.Vector.SEXP.Base 45a38cf91fe2cf94fe8625a751ba7f0f
  exports: d0b6c580d2d1031904153012b70cf3a9
  ElemRep 2b851d09f4d303100201309c9c4ed4f7
  VECTOR 206ef0809e9e9bd525db9efc5a1a282d
import  -/  Data.Vector.SEXP.Mutable 099966697135647881a6d1b4beb0bf6d
  exports: 0f2c8059872224e98e761b2b6e1eb9f3
import  -/  Data.Vector.SEXP.Mutable.Internal 2ce42555caaa41eef4158ba025e8960c
  exports: 4779780d75ff69f9cf4aa828db53af07
  MVector dfc8199367261377902d960e92ead89f
  MVector 65227b433ce3b999cef5e7dedfaea8e6
  W d6d594f37ed0e9805ca87e2c4fb3a6df
  mvectorBase 65227b433ce3b999cef5e7dedfaea8e6
  mvectorLength 65227b433ce3b999cef5e7dedfaea8e6
  mvectorOffset 65227b433ce3b999cef5e7dedfaea8e6
  unW d6d594f37ed0e9805ca87e2c4fb3a6df
  unsafeToPtr bb22d811c687a8e4f1026ed90f5838b3
  withW 245b61808944994e76f50e949c581046
import  -/  Foreign.R 51460710da704a1aff942901939ab83a
  exports: 66604cef250b707139e6d39041287043
  preserveObject 34e41626d593a0da0620f1015c4639f6
  releaseObject 52382e257f200bc9836022da38a6820d
import  -/  Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
  SEXP b92a1b967edd9e3e71e3bf97a52c270d
  SEXP 8e71af79acc64eda5f9cb7291bf461df
  length d97165116b64357a957efbb7daa72d55
  release 47626d4fe9a76c8454cdf7c4f29723b0
  sexp a96c72508b040bb5e852a135425663e6
  unsafeRelease 947c5de2985d3c51da4d5b3a8811624f
import  -/  Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
  exports: 5754d5cde3f2758aa360e9e8b66ebc71
  Char 1eeae3bbb682357f0ba159402f19e108
  SEXPTYPE 155aac0ce58f46653dea12e588ab4eb0
import  -/  primitive-0.6.2.0:Control.Monad.Primitive 51a1d708ce9627dfc5884be7480b4b76
import  -/  reflection-2.1.2:Data.Reflection 6c398a27ead1631e1e6ccc4b00487094
import  -/  vector-0.12.0.1:Data.Vector.Fusion.Bundle a0b9e7f955f66470df3b2df4e11e5a05
import  -/  vector-0.12.0.1:Data.Vector.Fusion.Bundle.Monadic d6fe2e12c181356ed231432000e12809
import  -/  vector-0.12.0.1:Data.Vector.Fusion.Bundle.Size 799681a232dd73f3db56e416dfe47706
import  -/  vector-0.12.0.1:Data.Vector.Fusion.Stream.Monadic 81cb17da046411f7cb8500bb7b02bb7d
import  -/  vector-0.12.0.1:Data.Vector.Generic 05691bc99ea42aa13aa7c2cbd13d0e19
import  -/  vector-0.12.0.1:Data.Vector.Generic.Base 169ae4b9eb9dd4f92d15f8359457bb83
import  -/  vector-0.12.0.1:Data.Vector.Generic.New d1f74dc5a0b8d32b21b95cbe191289c1
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
fixities infixr 5 ++, infix 4 elem, infix 4 notElem
7c176c6594cb896aad5a8cf58d0091fd
  (!) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLS),1*U(U,U,U,U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (i :: GHC.Types.Int) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.!
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                    i)
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
18ec33c5ef82655c1577cf8e5fd1e21f
  (!?) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> GHC.Base.Maybe a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,U,U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (i :: GHC.Types.Int) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.!?
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                    i)
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Base.Maybe a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (GHC.Base.Maybe a)) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               s)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Base.Maybe a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fEqVector ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Classes.Eq (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),A)><L,U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (v :: GHC.Classes.Eq a)
                      (v1 :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Data.Vector.SEXP.$fEqVector_$c== @ a @ s @ ty v v1)
                  (Data.Vector.SEXP.$fEqVector_$c/= @ a @ s @ ty v v1) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fEqVector_$c/= ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(SLSS),1*U(U,U,U,U)><S(SLSS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dEq :: GHC.Classes.Eq a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (x :: Data.Vector.SEXP.Vector s ty a)
                   (y :: Data.Vector.SEXP.Vector s ty a) ->
                 case Data.Vector.SEXP.$fEqVector_$c==
                        @ a
                        @ s
                        @ ty
                        $dEq
                        $d(%,,,%)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fEqVector_$c== ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(SLSS),1*U(U,U,U,U)><S(SLSS),1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w2 :: Data.Vector.SEXP.Vector s ty a)
                   (w3 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w2 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case w3 of ww5 { Data.Vector.SEXP.Vector ww6 ww7 ww8 ww9 ->
                 Data.Vector.SEXP.$w$c==
                   @ a
                   @ s
                   @ ty
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fIsListVector ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Exts.IsList (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      @ a
                      (v :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Data.Vector.SEXP.$fIsListVector_$cfromList @ s @ ty @ a v)
                  (Data.Vector.SEXP.$fIsListVector_$cfromListN @ s @ ty @ a v)
                  (Data.Vector.SEXP.$fIsListVector_$ctoList @ s @ ty @ a v) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fIsListVector_$cfromList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 Data.Vector.SEXP.fromList
                   @ s
                   @ ty
                   @ a
                   $d(%,,,%)
                   eta
                     `cast`
                   ([Sub (Data.Vector.SEXP.D:R:ItemVector[0]
                              <s>_N <ty>_N <a>_N)])_R }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fIsListVector_$cfromListN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><S(S),1*U(U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 Data.Vector.SEXP.fromListN
                   @ s
                   @ ty
                   @ a
                   $d(%,,,%)
                   eta
                   eta1
                     `cast`
                   ([Sub (Data.Vector.SEXP.D:R:ItemVector[0]
                              <s>_N <ty>_N <a>_N)])_R }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fIsListVector_$ctoList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 (Data.Vector.SEXP.toList @ s @ ty @ a $d(%,,,%) eta)
                   `cast`
                 ([Sub (Sym (Data.Vector.SEXP.D:R:ItemVector[0]
                                 <s>_N <ty>_N <a>_N))])_R }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fShowVector ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Show.Show (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(A,A,C(C1(U)))><L,U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (v :: GHC.Show.Show a)
                      (v1 :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Data.Vector.SEXP.$fShowVector_$cshowsPrec @ a @ s @ ty v v1)
                  (Data.Vector.SEXP.$fShowVector_$cshow @ a @ s @ ty v v1)
                  (Data.Vector.SEXP.$fShowVector_$cshowList @ a @ s @ ty v v1) -}
dffb47c64ffd068363173abed312ad1f
  $fShowVector1 ::
    GHC.Types.Any
    -> forall (ty :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP s ty #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (ds :: GHC.Types.Any)
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } }) -}
bff69795381c5ddce5286b3ba777a215
  $fShowVector2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fromList "#) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fShowVector_$cshow ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*C1(C1(U)))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,1*U(U,U,U,U)>,
     Unfolding: (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dShow :: GHC.Show.Show a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 GHC.CString.unpackAppendCString#
                   Data.Vector.SEXP.$fShowVector2
                   (GHC.Show.showList
                      @ a
                      $dShow
                      ((\ @ s1
                          ($dReifies :: Data.Reflection.Reifies
                                          s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                          (p :: Data.Proxy.Proxy s1)[OneShot] ->
                        case eta of nt { Data.Vector.SEXP.Vector ipv ipv1 ipv2 ipv3 ->
                        let {
                          $dStorable :: Foreign.Storable.Storable a
                          = GHC.Classes.$p1(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%)
                        } in
                        let {
                          lvl75 :: GHC.Ptr.Ptr a
                          = case GHC.Prim.touch#
                                   @ 'GHC.Types.LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   ipv1
                                   GHC.Prim.realWorld# of s' { DEFAULT ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.advancePtr1
                                      @ a) of wild2 { GHC.Types.I# y ->
                            GHC.Ptr.Ptr
                              @ a
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv 40#)
                                 (GHC.Prim.*# ipv2 y)) } }
                        } in
                        let {
                          lvl76 :: (Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *)
                          = GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%)
                        } in
                        letrec {
                          $wgo :: GHC.Prim.Int# -> [a]
                            {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                          = \ (ww :: GHC.Prim.Int#) ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.>=# ww ipv3) of wild {
                              GHC.Types.False
                              -> case GHC.Types.HEq_sc
                                        @ *
                                        @ *
                                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                        @ a
                                        lvl76
                                          `cast`
                                        (Data.Type.Equality.N:~[0]
                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                      s ty>_N <a>_N) of cobox1 { DEFAULT ->
                                 GHC.Types.:
                                   @ a
                                   (case (Foreign.Storable.peekElemOff
                                            @ a
                                            $dStorable
                                            lvl75
                                            (GHC.Types.I# ww))
                                           `cast`
                                         (Trans
                                              (GHC.Types.N:IO[0] <a>_R)
                                              ((GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                               ->_R ((#,#)
                                                       <'GHC.Types.TupleRep '[]>_R
                                                       <'GHC.Types.LiftedRep>_R
                                                       (GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                       <a>_R)_R))
                                           GHC.Prim.realWorld#
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds { (#,#) ipv4 ipv5 ->
                                    ipv5 })
                                   ($wgo (GHC.Prim.+# ww 1#)) }
                              GHC.Types.True -> GHC.Types.[] @ a }
                        } in
                        $wgo 0# })
                         `cast`
                       (Trans
                            (Sym (Data.Reflection.N:Magic[0]
                                      <Control.Monad.R.Internal.AcquireIO s>_N <[a]>_R))
                            (UnsafeCo representational (Data.Reflection.Magic
                                                          (Control.Monad.R.Internal.AcquireIO s)
                                                          [a]) ((GHC.Types.Any
                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                      s)
                                                                -> Data.Proxy.Proxy GHC.Types.Any
                                                                -> [a])))
                         (Data.Vector.SEXP.$fShowVector1 @ s)
                           `cast`
                         (<GHC.Types.Any>_R
                          ->_R Trans
                                   (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                    <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                                   (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                         (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fShowVector_$cshowList ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    [Data.Vector.SEXP.Vector s ty a] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S,1*U><L,U>,
     Unfolding: (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dShow :: GHC.Show.Show a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: [Data.Vector.SEXP.Vector s ty a])
                   (eta1 :: GHC.Base.String) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   lvl75 :: (Data.Vector.SEXP.Base.ElemRep s ty :: *)
                            Data.Type.Equality.~
                            (a :: *)
                   = GHC.Classes.$p4(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 GHC.Show.showList__
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (\ (eta2 :: Data.Vector.SEXP.Vector s ty a)
                      (eta3 :: GHC.Base.String)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           lvl75
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Data.Vector.SEXP.$fShowVector_$cshow
                         @ a
                         @ s
                         @ ty
                         $dShow
                         $d(%,,,%)
                         eta2)
                      eta3 })
                   eta
                   eta1 }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fShowVector_$cshowsPrec ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(A,A,1*C1(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,A><L,1*U(U,U,U,U)><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dShow :: GHC.Show.Show a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a)
                   (eta2 :: GHC.Base.String) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.Vector.SEXP.$fShowVector_$cshow
                         @ a
                         @ s
                         @ ty
                         $dShow
                         $d(%,,,%)
                         eta1))
                   eta2 }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
  DFunId
  {- Arity: 2,
     Strictness: <L,C(C1(C1(U(U,U(U)))))><L,U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t
                      @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      @ a
                      (v :: Data.Reflection.Reifies
                              t (Control.Monad.R.Internal.AcquireIO s))
                      (v1 :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.W t ty s)
                  @ a
                  (Data.Vector.SEXP.$fVectorWa_$cp1Vector @ t @ s @ ty @ a v v1)
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeFreeze
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeThaw
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.$fVectorWa_$cbasicLength @ t @ s @ ty @ a v v1)
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeSlice
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeIndexM
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeCopy
                     @ t
                     @ s
                     @ ty
                     @ a
                     v
                     v1)
                  (Data.Vector.SEXP.$fVectorWa_$celemseq @ t @ s @ ty @ a v v1) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cbasicLength ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.W t ty s a -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LLLS),1*U(A,A,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.W t ty s a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 case eta
                        `cast`
                      (Data.Vector.SEXP.N:W[0]
                           <t>_P
                           <ty>_P
                           <s>_P <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Types.I# dt3 } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cbasicUnsafeCopy ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      (Data.Vector.SEXP.W t ty s) (Control.Monad.Primitive.PrimState m) a
    -> Data.Vector.SEXP.W t ty s a -> m ()
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><L,U(U,U,A)><L,U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (mv :: Data.Vector.Generic.Base.Mutable
                            (Data.Vector.SEXP.W t ty s)
                            (Control.Monad.Primitive.PrimState m)
                            a)
                   (v :: Data.Vector.SEXP.W t ty s a) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case mv
                           `cast`
                         (Trans
                              (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                        <t>_N <ty>_N <s>_N) <Control.Monad.Primitive.PrimState m>_N)
                              (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                   <t>_P
                                   <ty>_P
                                   <Control.Monad.Primitive.PrimState
                                      m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.advancePtr1
                              @ a) of wild2 { GHC.Types.I# y ->
                    case v `cast`
                         (Data.Vector.SEXP.N:W[0]
                              <t>_P
                              <ty>_P
                              <s>_P <a>_N) of wild1 { Data.Vector.SEXP.Vector dt4 dt5 dt6 dt7 ->
                    case GHC.Prim.touch#
                           @ 'GHC.Types.LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt5
                           GHC.Prim.realWorld# of s' { DEFAULT ->
                    case Data.Vector.SEXP.Mutable.Internal.$WMVector
                           @ GHC.Types.Any
                           @ ty
                           @ a
                           (GHC.Ptr.Ptr @ () dt4)
                             `cast`
                           (Trans
                                (GHC.Ptr.Ptr <(), Language.R.HExp.HExp GHC.Types.Any ty>)_R
                                (Sym (Foreign.R.Internal.N:SEXP[0] <GHC.Types.Any>_P <ty>_P)))
                           (GHC.Int.I32# dt6)
                           (GHC.Int.I32#
                              dt7) of wild3 { Data.Vector.SEXP.Mutable.Internal.MVector dt8 dt9 dt10 ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.advancePtr1
                              @ a) of wild4 { GHC.Types.I# y1 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    case Foreign.Storable.sizeOf
                           @ a
                           $dStorable
                           (Foreign.Marshal.Array.copyArray1
                              @ a) of wild5 { GHC.Types.I# y2 ->
                    case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                    -> GHC.Prim.Addr#
                                                    -> GHC.Prim.Word#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Addr# #)}
                           (GHC.Prim.plusAddr#
                              (GHC.Prim.plusAddr# dt 40#)
                              (GHC.Prim.*# dt1 y))
                           (GHC.Prim.plusAddr#
                              (GHC.Prim.plusAddr# dt8 40#)
                              (GHC.Prim.*# dt9 y1))
                           (GHC.Prim.int2Word# (GHC.Prim.*# dt7 y2))
                           s1 of wild6 { (#,#) ds4 ds5 ->
                    (# ds4, GHC.Tuple.() #) } } } } } } } } })
                     `cast`
                   (Trans
                        ((GHC.Prim.State#
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 <()>_R)_R)
                        ((GHC.Prim.State#
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 <()>_R)_R)) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cbasicUnsafeFreeze ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      (Data.Vector.SEXP.W t ty s) (Control.Monad.Primitive.PrimState m) a
    -> m (Data.Vector.SEXP.W t ty s a)
  {- Arity: 4,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S(LC(C(S))LLL)L),U(1*U(A,1*C1(C1(U)),A,C(U),A),1*C1(U))><S,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Generic.Base.Mutable
                            (Data.Vector.SEXP.W t ty s)
                            (Control.Monad.Primitive.PrimState m)
                            a) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                     <t>_N <ty>_N <s>_N) <Control.Monad.Primitive.PrimState m>_N)
                           (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <t>_P
                                <ty>_P
                                <Control.Monad.Primitive.PrimState
                                   m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 let {
                   off :: GHC.Int.Int32 = GHC.Int.I32# dt1
                 } in
                 let {
                   len :: GHC.Int.Int32 = GHC.Int.I32# dt2
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.SEXP.ForeignSEXP ty)
                   @ (Data.Vector.SEXP.W t ty s a)
                   (Data.Vector.SEXP.foreignSEXP
                      @ m
                      @ (Control.Monad.Primitive.PrimState m)
                      @ ty
                      $dPrimMonad
                      (GHC.Ptr.Ptr
                         @ (Language.R.HExp.HExp (Control.Monad.Primitive.PrimState m) ty)
                         dt)
                        `cast`
                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                <Control.Monad.Primitive.PrimState m>_P <ty>_P)))
                   (\ (fp :: Data.Vector.SEXP.ForeignSEXP ty) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Vector.SEXP.W t ty s a)
                      (Data.Vector.SEXP.$WVector @ s @ ty @ a fp off len)
                        `cast`
                      (Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N)) } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cbasicUnsafeIndexM ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    Data.Vector.SEXP.W t ty s a -> GHC.Types.Int -> m a
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(U,U,U,A)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                          Data.Type.Equality.~
                          (a :: *))
                       $d(%,,,%)
                 } in
                 \ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (v :: Data.Vector.SEXP.W t ty s a)
                   (i :: GHC.Types.Int) ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ a
                   (case (Foreign.Storable.peekElemOff
                            @ a
                            $dStorable
                            (case v `cast`
                                  (Data.Vector.SEXP.N:W[0]
                                       <t>_P
                                       <ty>_P
                                       <s>_P <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    GHC.Prim.realWorld# of s' { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                    @ GHC.Types.Any
                                    @ ty
                                    @ a
                                    (GHC.Ptr.Ptr @ () dt)
                                      `cast`
                                    (Trans
                                         (GHC.Ptr.Ptr <(), Language.R.HExp.HExp GHC.Types.Any ty>)_R
                                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                                   <GHC.Types.Any>_P <ty>_P)))
                                    (GHC.Int.I32# dt2)
                                    (GHC.Int.I32#
                                       dt3) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                             case Foreign.Storable.sizeOf
                                    @ a
                                    $dStorable
                                    (Foreign.Marshal.Array.advancePtr1
                                       @ a) of wild2 { GHC.Types.I# y ->
                             GHC.Ptr.Ptr
                               @ a
                               (GHC.Prim.plusAddr#
                                  (GHC.Prim.plusAddr# dt4 40#)
                                  (GHC.Prim.*# dt5 y)) } } } })
                            i)
                           `cast`
                         (Trans
                              (GHC.Types.N:IO[0] <a>_R)
                              ((GHC.Prim.State#
                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                               ->_R ((#,#)
                                       <'GHC.Types.TupleRep '[]>_R
                                       <'GHC.Types.LiftedRep>_R
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                       <a>_R)_R))
                           GHC.Prim.realWorld#
                             `cast`
                           (GHC.Prim.State#
                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds { (#,#) ipv ipv1 ->
                    ipv1 }) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cbasicUnsafeSlice ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.W t ty s a
    -> Data.Vector.SEXP.W t ty s a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(S),1*U(U)><S(SLSL),1*U(U,U,U,A)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (ds :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int)
                   (ds2 :: Data.Vector.SEXP.W t ty s a) ->
                 case ds2
                        `cast`
                      (Data.Vector.SEXP.N:W[0]
                           <t>_P
                           <ty>_P
                           <s>_P <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 case ds of wild1 { GHC.Types.I# x# ->
                 case ds1 of wild2 { GHC.Types.I# x#1 ->
                 (Data.Vector.SEXP.$WVector
                    @ s
                    @ ty
                    @ a
                    (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                      `cast`
                    (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P))
                    (GHC.Int.I32#
                       (GHC.Prim.narrow32Int#
                          (GHC.Prim.+# dt2 (GHC.Prim.narrow32Int# x#))))
                    (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1)))
                   `cast`
                 (Sym (Data.Vector.SEXP.N:W[0]
                           <t>_P <ty>_P <s>_P) <a>_N) } } } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cbasicUnsafeThaw ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.W t ty s a
    -> m (Data.Vector.Generic.Base.Mutable
            (Data.Vector.SEXP.W t ty s)
            (Control.Monad.Primitive.PrimState m)
            a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(U(U,1*U(U)))))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.SEXP.W t ty s a) ->
                 case ds
                        `cast`
                      (Data.Vector.SEXP.N:W[0]
                           <t>_P
                           <ty>_P
                           <s>_P <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 (Control.Monad.Primitive.primitive
                    @ m
                    $dPrimMonad
                    @ (Data.Vector.SEXP.Mutable.Internal.W
                         t ty (Control.Monad.Primitive.PrimState m) a)
                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case (($dReifies
                              `cast`
                            (Data.Reflection.N:Reifies[0]
                                 <*>_N <t>_N <Control.Monad.R.Internal.AcquireIO s>_N)
                              @ Data.Proxy.Proxy
                              (Data.Proxy.Proxy @ * @ t))
                             `cast`
                           (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)
                             @ ty
                             (GHC.Ptr.Ptr @ () dt)
                               `cast`
                             (Trans
                                  (GHC.Ptr.Ptr
                                     <(), Language.R.HExp.HExp Control.Memory.Region.V ty>)_R
                                  (Sym (Foreign.R.Internal.N:SEXP[0]
                                            <Control.Memory.Region.V>_P <ty>_P))))
                            `cast`
                          (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R)
                            s1 of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Prim.touch#
                            @ 'GHC.Types.LiftedRep
                            @ GHC.ForeignPtr.ForeignPtrContents
                            dt1
                            ipv of s' { DEFAULT ->
                     (# s',
                        (Data.Vector.SEXP.Mutable.Internal.$WMVector
                           @ (Control.Monad.Primitive.PrimState m)
                           @ ty
                           @ a
                           ipv1
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)
                                (Trans
                                     (GHC.Ptr.Ptr
                                        <Language.R.HExp.HExp s ty, Language.R.HExp.HExp
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m)
                                                                      ty>)_R
                                     (Sym (Foreign.R.Internal.N:SEXP[0]
                                               <Control.Monad.Primitive.PrimState m>_P <ty>_P))))
                           (GHC.Int.I32# dt2)
                           (GHC.Int.I32# dt3))
                          `cast`
                        (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                  <t>_P
                                  <ty>_P
                                  <Control.Monad.Primitive.PrimState m>_P) <a>_N) #) } })
                      `cast`
                    (Trans
                         ((GHC.Prim.State#
                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                          ->_R ((#,#)
                                  <'GHC.Types.TupleRep '[]>_R
                                  <'GHC.Types.LiftedRep>_R
                                  (GHC.Prim.State#
                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                  <Data.Vector.SEXP.Mutable.Internal.W
                                     t ty (Control.Monad.Primitive.PrimState m) a>_R)_R)
                         ((GHC.Prim.State#
                             (Control.Monad.Primitive.PrimState
                                (UnsafeCo nominal GHC.Types.IO m))_N)_R
                          ->_R ((#,#)
                                  <'GHC.Types.TupleRep '[]>_R
                                  <'GHC.Types.LiftedRep>_R
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState
                                        (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                  <Data.Vector.SEXP.Mutable.Internal.W
                                     t ty (Control.Monad.Primitive.PrimState m) a>_R)_R)))
                   `cast`
                 (<m>_R (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                  <t>_N <ty>_N <s>_N) <Control.Monad.Primitive.PrimState
                                                         m>_N <a>_N)) } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$celemseq ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall b. Data.Vector.SEXP.W t ty s a -> a -> b -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,A><S,1*U><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ @ b (ds :: Data.Vector.SEXP.W t ty s a) (v :: a) (v1 :: b) ->
                 case v of v2 { DEFAULT -> v1 } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  $fVectorWa_$cp1Vector ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.Generic.Mutable.Base.MVector
      (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s)) a
  {- Arity: 2,
     Strictness: <L,C(C1(C1(U(U,U))))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                    @ t
                    @ s
                    @ ty
                    @ a
                    $dReifies
                    $d(%,,,%))
                   `cast`
                 (Data.Vector.Generic.Mutable.Base.MVector
                    (Sym (Data.Vector.SEXP.D:R:MutableW[0] <t>_N <ty>_N <s>_N))
                    <a>_N)_R }) -}
9f9de4e3a43afa099ca56268f9d34956
  $tc'ForeignSEXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1401364114999035323##
                   3108739064731568553##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tc'ForeignSEXP2
                   1#
                   Data.Vector.SEXP.$tc'ForeignSEXP1) -}
768e111e660a2feed7a56bd02784b6ba
  $tc'ForeignSEXP1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dcccb240623ef512fda2c12d60d3b011
  $tc'ForeignSEXP2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$tc'ForeignSEXP3) -}
b6551c0644c7af25fbe524bd6542dc64
  $tc'ForeignSEXP3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ForeignSEXP"#) -}
616b80d5b82538a5fe0732eb863c1fa4
  $tc'Vector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2817047305877951113##
                   9031632138193861693##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tc'Vector2
                   3#
                   Data.Vector.SEXP.$tc'Vector1) -}
32e5e5370580d943c80775e1c36d2d9c
  $tc'Vector1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6b3b5883749148ee47288e82c10c7001
  $tc'Vector2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$tc'Vector3) -}
6cac0f4385ef5bd64c3ae1f1c0c87d9a
  $tc'Vector3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Vector"#) -}
decb1cbe6f5377bd8e04f0691afa0880
  $tc'W :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7588600873951146668##
                   2310093066002746284##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tc'W2
                   4#
                   Data.Vector.SEXP.$tc'W1) -}
c24cefb8d6b29b6a4b3cb9c8cbbfe185
  $tc'W1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
87fab3f0f4750b3eb1b659074a8db8d5
  $tc'W2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$tc'W3) -}
31fc476b9eed80196762fc7738e46bea
  $tc'W3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'W"#) -}
887da7cb3ffe8630e6decb6a706f0ff9
  $tcForeignSEXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8942653369434690002##
                   3444558452465800728##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tcForeignSEXP2
                   0#
                   Data.Vector.SEXP.$tcForeignSEXP1) -}
a67008456e205c10748ce6995ae4a952
  $tcForeignSEXP1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7b3604d57c565f6a2a95a0c1f41e8f72
  $tcForeignSEXP2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$tcForeignSEXP3) -}
ef7a84b3f7ad25942d02458e096caa5e
  $tcForeignSEXP3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ForeignSEXP"#) -}
ad76851c3f561acc363bb959a1a47501
  $tcVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7887032559083298654##
                   9543739242044215307##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tcVector2
                   0#
                   Data.Vector.SEXP.$tcVector1) -}
9953dc3de9e87513910a29c978a443cb
  $tcVector1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b1ce1dae83d6a6d850f20ff8d2720b7d
  $tcVector2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$tcVector3) -}
e71893f8ea098d95f4125412183aa032
  $tcVector3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Vector"#) -}
4ed84ea14b9b11d96cfa76da68fe5e23
  $tcW :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16265079089780425219##
                   18254913826728900832##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tcW2
                   0#
                   Data.Vector.SEXP.$tcW1) -}
8a7820c3ee2affafa7c311451d0dc47c
  $tcW1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd471d2648355f93731b00c126912e3f
  $tcW2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$tcW3) -}
c342ae4038700ff83636783d6e979a4b
  $tcW3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("W"#) -}
4664287ed0e08a5c26bc2d4fed31ea26
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Vector.SEXP.$trModule3
                   Data.Vector.SEXP.$trModule1) -}
a15c838f54e8ea7b38f2dfbd3a470c65
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$trModule2) -}
f8a24225256f9d1180f472724593aeda
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Vector.SEXP"#) -}
696de21b516a0071c2941e951e8966e0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Vector.SEXP.$trModule4) -}
798de523d03e7759654a25095f964a7e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
779aceb75a0a63f04dad83486a54f22b
  $w$c== ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A)><S(LLLS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U><L,U><L,U><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
6ff5a3b74c7966799a49f242073254a3
  $wfromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Prim.Addr# -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,1*U(1*U))><S,U>,
     Inline: [0] -}
d7d143f758feb62c46aee5f3c36929ee
  $wtoSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Foreign.R.Internal.SEXP s ty
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,U(U))><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
3defd190177b62885b027352e102a0ef
  $wunsafeToSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> Foreign.R.Internal.SEXP s ty
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Foreign.R.Internal.SEXP s ty #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate#
                                @ GHC.Prim.RealWorld
                                s1 of s' { DEFAULT ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                ww1
                                s' of s'1 { DEFAULT ->
                         (# s'1,
                            (GHC.Ptr.Ptr @ () ww)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr <(), Language.R.HExp.HExp s ty>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <ty>_P))) #) } }) of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
7068210b06dca465a8b21d4a82653817
  (++) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS),1*U(U,U,U,U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v1 :: Data.Vector.SEXP.Vector s ty a)
                   (v2 :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     f
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        f
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              f
                              v1
                                `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              f
                              v2
                                `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
22c5c4918c1a88833dc1cbcd1ba89239
  (//) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, a)] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a)
                   (l :: [(GHC.Types.Int, a)]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.modifyWithBundle
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        @ GHC.Types.Any
                        @ (GHC.Types.Int, a)
                        (\ @ s2 ->
                         Data.Vector.Generic.Mutable.update
                           @ (GHC.ST.ST s2)
                           @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W s1 ty s))
                           @ a
                           @ GHC.Types.Any
                           (Control.Monad.Primitive.$fPrimMonadST @ s2)
                           (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                              @ s1
                              @ s
                              @ ty
                              @ a
                              $dReifies
                              $d(%,,,%)))
                          `cast`
                        (forall (s2 :: <*>_N).
                         (Data.Vector.Generic.Base.Mutable
                            <Data.Vector.SEXP.W s1 ty s>_N
                            (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N)
                            <a>_N)_R
                         ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                 Data.Vector.Fusion.Util.Id GHC.Types.Any (GHC.Types.Int, a)
                               -> GHC.ST.ST s2 ()>_R)
                        (Data.Vector.Generic.clone
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           $dVector
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                        (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                           @ Data.Vector.Fusion.Util.Id
                           @ (GHC.Types.Int, a)
                           @ GHC.Types.Any
                           Data.Vector.Fusion.Util.$fMonadId
                           Data.Vector.Fusion.Bundle.Size.Unknown
                           l)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  axiom Data.Vector.SEXP.D:R:ItemVector::
    [s, (ty :: Foreign.R.Type.SEXPTYPE), a]
      GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a) = a
3476d9bcd1360fdfad479ca1a02d99fb
  axiom Data.Vector.SEXP.D:R:MutableW::
    [t, (ty :: Foreign.R.Type.SEXPTYPE), s]
      Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s)
        = Data.Vector.SEXP.Mutable.Internal.W t ty
728da09612a0d3c74dbbff5aa30136b9
  type role ForeignSEXP phantom
  newtype ForeignSEXP (ty :: Foreign.R.Type.SEXPTYPE)
    = ForeignSEXP (GHC.ForeignPtr.ForeignPtr ())
3476d9bcd1360fdfad479ca1a02d99fb
  type role Vector phantom phantom phantom
  data Vector s (ty :: Foreign.R.Type.SEXPTYPE) a
    = Vector {vectorBase :: ! {-# UNPACK #-}(Data.Vector.SEXP.N:ForeignSEXP[0]
                                                 <ty>_P)Data.Vector.SEXP.ForeignSEXP ty,
              vectorOffset :: {-# UNPACK #-}GHC.Int.Int32,
              vectorLength :: {-# UNPACK #-}GHC.Int.Int32}
3476d9bcd1360fdfad479ca1a02d99fb
  type role W phantom phantom phantom phantom
  newtype W t (ty :: Foreign.R.Type.SEXPTYPE) s a
    = W {unW :: Data.Vector.SEXP.Vector s ty a}
0bc7918ad77b514bbf45b5f224c68264
  accum ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> a)
    -> Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, b)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(U,U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (v :: Data.Vector.SEXP.Vector s ty a)
                   (l :: [(GHC.Types.Int, b)]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.modifyWithBundle
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        @ GHC.Types.Any
                        @ (GHC.Types.Int, b)
                        (\ @ s2 ->
                         Data.Vector.Generic.Mutable.accum
                           @ (GHC.ST.ST s2)
                           @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W s1 ty s))
                           @ a
                           @ b
                           @ GHC.Types.Any
                           (Control.Monad.Primitive.$fPrimMonadST @ s2)
                           (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                              @ s1
                              @ s
                              @ ty
                              @ a
                              $dReifies
                              $d(%,,,%))
                           f)
                          `cast`
                        (forall (s2 :: <*>_N).
                         (Data.Vector.Generic.Base.Mutable
                            <Data.Vector.SEXP.W s1 ty s>_N
                            (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N)
                            <a>_N)_R
                         ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                 Data.Vector.Fusion.Util.Id GHC.Types.Any (GHC.Types.Int, b)
                               -> GHC.ST.ST s2 ()>_R)
                        (Data.Vector.Generic.clone
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           $dVector
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                        (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                           @ Data.Vector.Fusion.Util.Id
                           @ (GHC.Types.Int, b)
                           @ GHC.Types.Any
                           Data.Vector.Fusion.Util.$fMonadId
                           Data.Vector.Fusion.Bundle.Size.Unknown
                           l)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3e8527db526d2e53882180c35d100ccc
  all ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.and
                    @ Data.Vector.Fusion.Util.Id
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (Data.Vector.Fusion.Bundle.Monadic.mapM
                       @ Data.Vector.Fusion.Util.Id
                       @ a
                       @ GHC.Types.Bool
                       @ (Data.Vector.SEXP.W s1 ty s)
                       Data.Vector.Fusion.Util.$fMonadId
                       (\ (x :: a) -> f x)
                         `cast`
                       (<a>_R
                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         GHC.Types.Bool) ((GHC.Types.Any
                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                s)
                                                                          -> Data.Proxy.Proxy
                                                                               GHC.Types.Any
                                                                          -> GHC.Types.Bool))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
39ebcd29e4a7622448880ec8e4fc5dc4
  any ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.or
                    @ Data.Vector.Fusion.Util.Id
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (Data.Vector.Fusion.Bundle.Monadic.mapM
                       @ Data.Vector.Fusion.Util.Id
                       @ a
                       @ GHC.Types.Bool
                       @ (Data.Vector.SEXP.W s1 ty s)
                       Data.Vector.Fusion.Util.$fMonadId
                       (\ (x :: a) -> f x)
                         `cast`
                       (<a>_R
                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         GHC.Types.Bool) ((GHC.Types.Any
                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                s)
                                                                          -> Data.Proxy.Proxy
                                                                               GHC.Types.Any
                                                                          -> GHC.Types.Bool))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
4d782770819f0f7c0fff308dcabb6280
  break ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),U(U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f1 :: Data.Vector.Generic.Base.Vector
                            (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case (Data.Vector.Fusion.Bundle.Monadic.findIndex
                          @ Data.Vector.Fusion.Util.Id
                          @ a
                          @ (Data.Vector.SEXP.W s1 ty s)
                          Data.Vector.Fusion.Util.$fMonadId
                          f
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             f1
                             v `cast`
                             (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0]
                            <GHC.Base.Maybe GHC.Types.Int>_R) of wild {
                    GHC.Base.Nothing
                    -> (v,
                        (Data.Vector.Generic.new
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           f1
                           (Data.Vector.Generic.New.unstream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              f1
                              (Data.Vector.Fusion.Bundle.empty
                                 @ (Data.Vector.SEXP.W s1 ty s)
                                 @ a)))
                          `cast`
                        (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                    GHC.Base.Just i
                    -> ((Data.Vector.Generic.unsafeSlice
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           f1
                           (GHC.Types.I# 0#)
                           i
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                          `cast`
                        (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N),
                        (Data.Vector.Generic.unsafeSlice
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           f1
                           i
                           (case (Data.Vector.Fusion.Bundle.Monadic.length
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W s1 ty s)
                                    @ a
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W s1 ty s)
                                       @ a
                                       Data.Vector.Fusion.Util.$fMonadId
                                       f1
                                       v `cast`
                                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                                   `cast`
                                 (Data.Vector.Fusion.Util.N:Id[0]
                                      <GHC.Types.Int>_R) of wild1 { GHC.Types.I# x ->
                            case i of wild2 { GHC.Types.I# y ->
                            GHC.Types.I# (GHC.Prim.-# x y) } })
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                          `cast`
                        (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <(Data.Vector.SEXP.Vector s ty a,
                                  Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector s ty a,
                                                     Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> (Data.Vector.SEXP.Vector s ty a,
                                                                     Data.Vector.SEXP.Vector
                                                                       s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
2fa9efbec8ccd4bfc8b9e848954ba686
  concat ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    [Data.Vector.SEXP.Vector s ty a] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,U(U))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (vs :: [Data.Vector.SEXP.Vector s ty a]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.fromVectors
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           $dVector
                           (GHC.Base.build
                              @ (Data.Vector.SEXP.W s1 ty s a)
                              (\ @ b1
                                 (c :: Data.Vector.SEXP.W s1 ty s a -> b1 -> b1)[OneShot]
                                 (n :: b1)[OneShot] ->
                               GHC.Base.foldr
                                 @ (Data.Vector.SEXP.Vector s ty a)
                                 @ b1
                                 (GHC.Base.mapFB
                                    @ (Data.Vector.SEXP.W s1 ty s a)
                                    @ b1
                                    @ (Data.Vector.SEXP.Vector s ty a)
                                    c
                                    (\ (v :: Data.Vector.SEXP.Vector s ty a) -> v)
                                      `cast`
                                    (<Data.Vector.SEXP.Vector s ty a>_R
                                     ->_R Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                                 n
                                 vs)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
88bbc0092059721710ea7516a685383f
  concatMap ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b) =>
    (a -> Data.Vector.SEXP.Vector s tyb b)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U(U,U,U,U))><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> Data.Vector.SEXP.Vector s tyb b)
                   (v :: Data.Vector.SEXP.Vector s tya a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyb s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyb
                        @ b
                        $dReifies
                        $d(%,,,%)1
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         v `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Fusion.Stream.Monadic.concatMapM
                         @ Data.Vector.Fusion.Util.Id
                         @ a
                         @ b
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (x :: a) ->
                          case Data.Vector.Generic.stream
                                 @ (Data.Vector.SEXP.W s1 tyb s)
                                 @ b
                                 $dVector
                                 (f x)
                                   `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0]
                                           <s1>_P
                                           <tyb>_P
                                           <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                          ds7 })
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                        <Data.Vector.Fusion.Stream.Monadic.Stream
                                           Data.Vector.Fusion.Util.Id b>_R))
                         ds1 of wild1 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyb s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyb s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyb s)
                           @ b
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ b
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyb s) b)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 b>_R) of wild2 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyb s) b)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyb s)
                                         @ b
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyb s) b) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyb s))
                                                           b
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyb s)
                                                @ b
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyb s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     b) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyb s))
                                            @ b
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyb s) b)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyb s) b) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyb s) b)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyb s b))
                           Data.Vector.Fusion.Bundle.Size.Unknown)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyb>_P <s>_P <b>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyb b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyb b)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyb b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
539f680585326ee877d1aa710a65b593
  cons ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    a
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (a1 :: a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox1 { DEFAULT ->
                  case a1 of v1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     f
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        f
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Fusion.Bundle.Monadic.singleton
                              @ Data.Vector.Fusion.Util.Id
                              @ a
                              @ (Data.Vector.SEXP.W s1 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              v1)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              f
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
a5ceb17ea3349c2f7f6723790a8b130f
  constructN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (Data.Vector.SEXP.Vector s ty a -> a)
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><L,C(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (g :: Data.Vector.SEXP.Vector s ty a -> a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  let {
                    $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                   (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W s1 ty s)) a
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox1 { DEFAULT ->
                      (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                         @ s1
                         @ s
                         @ ty
                         @ a
                         $dReifies
                         $d(%,,,%))
                        `cast`
                      (Data.Vector.Generic.Mutable.Base.MVector
                         (Sym (Data.Vector.SEXP.D:R:MutableW[0] <s1>_N <ty>_N <s>_N))
                         <a>_N)_R }
                  } in
                  case n of n1 { GHC.Types.I# ipv ->
                  letrec {
                    fill :: forall s2.
                            Data.Vector.SEXP.W s1 ty s a
                            -> GHC.Types.Int -> GHC.ST.ST s2 (Data.Vector.SEXP.W s1 ty s a)
                      {- Arity: 2 -}
                    = \ @ s2
                        (v1 :: Data.Vector.SEXP.W s1 ty s a)
                        (i :: GHC.Types.Int) ->
                      case v1
                             `cast`
                           (Data.Vector.SEXP.N:W[0]
                                <s1>_P
                                <ty>_P
                                <s>_P <a>_N) of nt { Data.Vector.SEXP.Vector ipv1 ipv2 ipv3 ipv4 ->
                      case GHC.Classes.ltInt i n1 of wild {
                        GHC.Types.False
                        -> (\ (s3 :: GHC.Prim.State# s2) ->
                            (# s3,
                               nt
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N) #))
                             `cast`
                           (Sym (GHC.ST.N:ST[0] <s2>_N <Data.Vector.SEXP.W s1 ty s a>_R))
                        GHC.Types.True
                        -> case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                  @ a
                                  (GHC.Classes.$p4(%,,,%)
                                     @ (Foreign.Storable.Storable a)
                                     @ (Foreign.R.Type.IsVector ty)
                                     @ (Data.Singletons.SingI ty)
                                     @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                        Data.Type.Equality.~
                                        (a :: *))
                                     $d(%,,,%))
                                    `cast`
                                  (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                      s
                                                                      ty>_N <a>_N) of cobox1 { DEFAULT ->
                           case g (Data.Vector.Generic.unsafeSlice
                                     @ (Data.Vector.SEXP.W s1 ty s)
                                     @ a
                                     $dVector
                                     (GHC.Types.I# 0#)
                                     i
                                     nt
                                       `cast`
                                     (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                                    `cast`
                                  (Data.Vector.SEXP.N:W[0]
                                       <s1>_P <ty>_P <s>_P <a>_N) of v { DEFAULT ->
                           (\ (s3 :: GHC.Prim.State# s2) ->
                            case (Data.Vector.Generic.unsafeThaw
                                    @ (GHC.ST.ST s2)
                                    @ (Data.Vector.SEXP.W s1 ty s)
                                    @ a
                                    (Control.Monad.Primitive.$fPrimMonadST @ s2)
                                    $dVector
                                    nt
                                      `cast`
                                    (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                                   `cast`
                                 (GHC.ST.N:ST[0]
                                      <s2>_N
                                      (Data.Vector.Generic.Base.Mutable
                                         <Data.Vector.SEXP.W s1 ty s>_N
                                         (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N)
                                         <a>_N)_R)
                                   s3 of ds1 { (#,#) ipv5 ipv6 ->
                            case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                    @ (Data.Vector.Generic.Base.Mutable
                                         (Data.Vector.SEXP.W s1 ty s))
                                    @ a
                                    $dMVector
                                    @ (GHC.ST.ST s2)
                                    (Control.Monad.Primitive.$fPrimMonadST @ s2)
                                    ipv6
                                      `cast`
                                    (Data.Vector.Generic.Base.Mutable
                                       <Data.Vector.SEXP.W s1 ty s>_N
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N))
                                       <a>_N)_R
                                    i
                                    v)
                                   `cast`
                                 (GHC.ST.N:ST[0] <s2>_N <()>_R)
                                   ipv5 of ds { (#,#) ipv7 ipv8 ->
                            case GHC.Types.HEq_sc
                                   @ *
                                   @ *
                                   @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                   @ a
                                   (GHC.Classes.$p4(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%))
                                     `cast`
                                   (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                       s
                                                                       ty>_N <a>_N) of cobox2 { DEFAULT ->
                            case ipv6
                                   `cast`
                                 (Trans
                                      (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                <s1>_N
                                                <ty>_N
                                                <s>_N) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <s2>_N)))
                                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                           <s1>_P
                                           <ty>_P
                                           <Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST
                                                 s2)>_P) <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                            case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld #)}
                                   dt
                                   ipv7
                                     `cast`
                                   (Nth:2
                                        (Trans
                                             (Nth:2
                                                  (Trans
                                                       (<GHC.ST.STRep
                                                           s2 (Data.Vector.SEXP.ForeignSEXP ty)>_R
                                                        ->_R Sym (GHC.ST.N:ST[0]
                                                                      <s2>_N
                                                                      <Data.Vector.SEXP.ForeignSEXP
                                                                         ty>_R))
                                                       (((GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <s2>_N)))_R
                                                         ->_R ((#,#)
                                                                 <'GHC.Types.TupleRep '[]>_R
                                                                 <'GHC.Types.LiftedRep>_R
                                                                 (GHC.Prim.State#
                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <s2>_N)))_R
                                                                 <Data.Vector.SEXP.ForeignSEXP
                                                                    ty>_R)_R)
                                                        ->_R <GHC.ST.ST
                                                                s2
                                                                (Data.Vector.SEXP.ForeignSEXP
                                                                   ty)>_R)))
                                             (Trans
                                                  ((GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal (GHC.ST.ST
                                                                              s2) GHC.Types.IO))_N)_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           (GHC.Prim.State#
                                                              (Control.Monad.Primitive.PrimState
                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                      s2) GHC.Types.IO))_N)_R
                                                           <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                                                  ((GHC.Prim.State#
                                                      (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           (GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                                                           <Data.Vector.SEXP.ForeignSEXP
                                                              ty>_R)_R)))) of wild2 { Unit# ds2 ->
                            case GHC.ForeignPtr.newConcForeignPtr1
                                   @ ()
                                   (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC dt)
                                     `cast`
                                   (GHC.Ptr.Ptr <Foreign.R.Internal.SEXPREC, ()>)_R
                                   (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld #)}
                                           dt
                                           s4 of wild3 { Unit# ds4 ->
                                    (# ds4, GHC.Tuple.() #) })
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R))
                                   ds2 of ds4 { (#,#) ipv9 ipv10 ->
                            (fill
                               @ s2
                               (Data.Vector.SEXP.$WVector
                                  @ s
                                  @ ty
                                  @ a
                                  ipv10
                                    `cast`
                                  (Trans
                                       (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P))
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      ((GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                       ->_R ((#,#)
                                                               <'GHC.Types.TupleRep '[]>_R
                                                               <'GHC.Types.LiftedRep>_R
                                                               (GHC.Prim.State#
                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                               <Data.Vector.SEXP.ForeignSEXP
                                                                  ty>_R)_R)
                                                      (Trans
                                                           ((GHC.Prim.State#
                                                               (Control.Monad.Primitive.PrimState
                                                                  (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                    s2)))_N)_R
                                                            ->_R ((#,#)
                                                                    <'GHC.Types.TupleRep '[]>_R
                                                                    <'GHC.Types.LiftedRep>_R
                                                                    (GHC.Prim.State#
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                            s2)))_N)_R
                                                                    <Data.Vector.SEXP.ForeignSEXP
                                                                       ty>_R)_R)
                                                           (Nth:2
                                                                (Trans
                                                                     (((GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <s2>_N))_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               (GHC.Prim.State#
                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <s2>_N))_R
                                                                               <Data.Vector.SEXP.ForeignSEXP
                                                                                  ty>_R)_R)
                                                                      ->_R <GHC.ST.ST
                                                                              s2
                                                                              (Data.Vector.SEXP.ForeignSEXP
                                                                                 ty)>_R)
                                                                     (<GHC.ST.STRep
                                                                         s2
                                                                         (Data.Vector.SEXP.ForeignSEXP
                                                                            ty)>_R
                                                                      ->_R GHC.ST.N:ST[0]
                                                                               <s2>_N
                                                                               <Data.Vector.SEXP.ForeignSEXP
                                                                                  ty>_R))))))))
                                  (GHC.Int.I32# dt1)
                                  (GHC.Int.I32# dt2))
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                               (case i of wild3 { GHC.Types.I# x1 ->
                                GHC.Types.I# (GHC.Prim.+# x1 1#) }))
                              `cast`
                            (GHC.ST.N:ST[0] <s2>_N <Data.Vector.SEXP.W s1 ty s a>_R)
                              ipv9
                                `cast`
                              (Nth:2
                                   (Nth:3
                                        (Trans
                                             ((GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      (GHC.Prim.State#
                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                      <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                                             (Trans
                                                  ((GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                           s2)))_N)_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           (GHC.Prim.State#
                                                              (Control.Monad.Primitive.PrimState
                                                                 (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                   s2)))_N)_R
                                                           <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                                                  (Nth:2
                                                       (Trans
                                                            (((GHC.Prim.State#
                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <s2>_N))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <s2>_N))_R
                                                                      <Data.Vector.SEXP.ForeignSEXP
                                                                         ty>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     s2
                                                                     (Data.Vector.SEXP.ForeignSEXP
                                                                        ty)>_R)
                                                            (<GHC.ST.STRep
                                                                s2
                                                                (Data.Vector.SEXP.ForeignSEXP ty)>_R
                                                             ->_R GHC.ST.N:ST[0]
                                                                      <s2>_N
                                                                      <Data.Vector.SEXP.ForeignSEXP
                                                                         ty>_R))))))) } } } } } })
                             `cast`
                           (Sym (GHC.ST.N:ST[0]
                                     <s2>_N <Data.Vector.SEXP.W s1 ty s a>_R)) } } } }
                  } in
                  case GHC.Magic.runRW#
                         @ ('GHC.Types.TupleRep
                              '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                              Data.Vector.SEXP.W s1 ty s a #)
                         (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case GHC.Classes.geInt n1 (GHC.Types.I# 0#) of wild1 {
                            GHC.Types.False
                            -> case Data.Vector.Internal.Check.checkError
                                      @ (GHC.ST.ST
                                           GHC.Prim.RealWorld
                                           (Data.Vector.Generic.Base.Mutable
                                              (Data.Vector.SEXP.W s1 ty s)
                                              (Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                              a))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Generic/Mutable.hs"#))
                                      (GHC.Types.I# 585#)
                                      Data.Vector.Internal.Check.Bounds
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                                      (Data.Vector.Internal.Check.checkLength_msg# ipv)
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Vector.SEXP.W s1 ty s a #)
                               of {}
                            GHC.Types.True
                            -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                       @ (Data.Vector.Generic.Base.Mutable
                                            (Data.Vector.SEXP.W s1 ty s))
                                       @ a
                                       $dMVector
                                       @ (GHC.ST.ST GHC.Prim.RealWorld)
                                       (Control.Monad.Primitive.$fPrimMonadST @ GHC.Prim.RealWorld)
                                       n1)
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N
                                         <Data.Vector.Generic.Base.Mutable
                                            (Data.Vector.SEXP.W s1 ty s)
                                            (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                            a>_R)
                                      s2 of ds1 { (#,#) ipv1 ipv2 ->
                               case (Data.Vector.Generic.Mutable.Base.basicInitialize
                                       @ (Data.Vector.Generic.Base.Mutable
                                            (Data.Vector.SEXP.W s1 ty s))
                                       @ a
                                       $dMVector
                                       @ (GHC.ST.ST GHC.Prim.RealWorld)
                                       (Control.Monad.Primitive.$fPrimMonadST @ GHC.Prim.RealWorld)
                                       ipv2)
                                      `cast`
                                    (GHC.ST.N:ST[0] <GHC.Prim.RealWorld>_N <()>_R)
                                      ipv1 of ds { (#,#) ipv3 ipv4 ->
                               case GHC.Types.HEq_sc
                                      @ *
                                      @ *
                                      @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                      @ a
                                      (GHC.Classes.$p4(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                            Data.Type.Equality.~
                                            (a :: *))
                                         $d(%,,,%))
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                    s ty>_N <a>_N) of cobox1 { DEFAULT ->
                               case ipv2
                                      `cast`
                                    (Trans
                                         (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                   <s1>_N
                                                   <ty>_N
                                                   <s>_N) <Control.Monad.Primitive.PrimState
                                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N)
                                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                              <s1>_P
                                              <ty>_P
                                              <Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST
                                                    GHC.Prim.RealWorld)>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                               case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld #)}
                                      dt
                                      ipv3 of wild2 { Unit# ds2 ->
                               case GHC.ForeignPtr.newConcForeignPtr1
                                      @ ()
                                      (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC dt)
                                        `cast`
                                      (GHC.Ptr.Ptr <Foreign.R.Internal.SEXPREC, ()>)_R
                                      (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld
                                                                                                    -> (# GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld #)}
                                              dt
                                              s3 of wild3 { Unit# ds4 ->
                                       (# ds4, GHC.Tuple.() #) })
                                        `cast`
                                      (Sym (GHC.Types.N:IO[0] <()>_R))
                                      ds2 of ds4 { (#,#) ipv7 ipv8 ->
                               (fill
                                  @ GHC.Prim.RealWorld
                                  (Data.Vector.SEXP.$WVector
                                     @ s
                                     @ ty
                                     @ a
                                     ipv8 `cast` (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P))
                                     (GHC.Int.I32# dt1)
                                     (GHC.Int.I32# dt2))
                                    `cast`
                                  (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                                  (GHC.Types.I# 0#))
                                 `cast`
                               (GHC.ST.N:ST[0]
                                    <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.W s1 ty s a>_R)
                                 ipv7 } } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                  ipv2
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
b4bf10403a53b4ef889545c7e1d24c5c
  constructrN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (Data.Vector.SEXP.Vector s ty a -> a)
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><L,C(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (g :: Data.Vector.SEXP.Vector s ty a -> a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  let {
                    $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                   (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W s1 ty s)) a
                    = case GHC.Types.HEq_sc
                             @ *
                             @ *
                             @ (Data.Vector.SEXP.Base.ElemRep s ty)
                             @ a
                             (GHC.Classes.$p4(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                   Data.Type.Equality.~
                                   (a :: *))
                                $d(%,,,%))
                               `cast`
                             (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 s
                                                                 ty>_N <a>_N) of cobox1 { DEFAULT ->
                      (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                         @ s1
                         @ s
                         @ ty
                         @ a
                         $dReifies
                         $d(%,,,%))
                        `cast`
                      (Data.Vector.Generic.Mutable.Base.MVector
                         (Sym (Data.Vector.SEXP.D:R:MutableW[0] <s1>_N <ty>_N <s>_N))
                         <a>_N)_R }
                  } in
                  case n of n1 { GHC.Types.I# ipv ->
                  letrec {
                    fill :: forall s2.
                            Data.Vector.SEXP.W s1 ty s a
                            -> GHC.Types.Int -> GHC.ST.ST s2 (Data.Vector.SEXP.W s1 ty s a)
                      {- Arity: 2 -}
                    = \ @ s2
                        (v1 :: Data.Vector.SEXP.W s1 ty s a)
                        (i :: GHC.Types.Int) ->
                      case v1
                             `cast`
                           (Data.Vector.SEXP.N:W[0]
                                <s1>_P
                                <ty>_P
                                <s>_P <a>_N) of nt { Data.Vector.SEXP.Vector ipv1 ipv2 ipv3 ipv4 ->
                      case GHC.Classes.ltInt i n1 of wild {
                        GHC.Types.False
                        -> (\ (s3 :: GHC.Prim.State# s2) ->
                            (# s3,
                               nt
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N) #))
                             `cast`
                           (Sym (GHC.ST.N:ST[0] <s2>_N <Data.Vector.SEXP.W s1 ty s a>_R))
                        GHC.Types.True
                        -> case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                  @ a
                                  (GHC.Classes.$p4(%,,,%)
                                     @ (Foreign.Storable.Storable a)
                                     @ (Foreign.R.Type.IsVector ty)
                                     @ (Data.Singletons.SingI ty)
                                     @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                        Data.Type.Equality.~
                                        (a :: *))
                                     $d(%,,,%))
                                    `cast`
                                  (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                      s
                                                                      ty>_N <a>_N) of cobox1 { DEFAULT ->
                           case g (Data.Vector.Generic.unsafeSlice
                                     @ (Data.Vector.SEXP.W s1 ty s)
                                     @ a
                                     $dVector
                                     (case i of wild1 { GHC.Types.I# y ->
                                      GHC.Types.I# (GHC.Prim.-# ipv y) })
                                     i
                                     nt
                                       `cast`
                                     (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                                    `cast`
                                  (Data.Vector.SEXP.N:W[0]
                                       <s1>_P <ty>_P <s>_P <a>_N) of v { DEFAULT ->
                           (\ (s3 :: GHC.Prim.State# s2) ->
                            case (Data.Vector.Generic.unsafeThaw
                                    @ (GHC.ST.ST s2)
                                    @ (Data.Vector.SEXP.W s1 ty s)
                                    @ a
                                    (Control.Monad.Primitive.$fPrimMonadST @ s2)
                                    $dVector
                                    nt
                                      `cast`
                                    (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                                   `cast`
                                 (GHC.ST.N:ST[0]
                                      <s2>_N
                                      (Data.Vector.Generic.Base.Mutable
                                         <Data.Vector.SEXP.W s1 ty s>_N
                                         (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N)
                                         <a>_N)_R)
                                   s3 of ds1 { (#,#) ipv5 ipv6 ->
                            case (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                    @ (Data.Vector.Generic.Base.Mutable
                                         (Data.Vector.SEXP.W s1 ty s))
                                    @ a
                                    $dMVector
                                    @ (GHC.ST.ST s2)
                                    (Control.Monad.Primitive.$fPrimMonadST @ s2)
                                    ipv6
                                      `cast`
                                    (Data.Vector.Generic.Base.Mutable
                                       <Data.Vector.SEXP.W s1 ty s>_N
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N))
                                       <a>_N)_R
                                    (case i of wild1 { GHC.Types.I# y ->
                                     GHC.Types.I# (GHC.Prim.-# (GHC.Prim.-# ipv y) 1#) })
                                    v)
                                   `cast`
                                 (GHC.ST.N:ST[0] <s2>_N <()>_R)
                                   ipv5 of ds { (#,#) ipv7 ipv8 ->
                            case GHC.Types.HEq_sc
                                   @ *
                                   @ *
                                   @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                   @ a
                                   (GHC.Classes.$p4(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%))
                                     `cast`
                                   (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                       s
                                                                       ty>_N <a>_N) of cobox2 { DEFAULT ->
                            case ipv6
                                   `cast`
                                 (Trans
                                      (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                <s1>_N
                                                <ty>_N
                                                <s>_N) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <s2>_N)))
                                      (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                           <s1>_P
                                           <ty>_P
                                           <Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST
                                                 s2)>_P) <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                            case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld #)}
                                   dt
                                   ipv7
                                     `cast`
                                   (Nth:2
                                        (Trans
                                             (Nth:2
                                                  (Trans
                                                       (<GHC.ST.STRep
                                                           s2 (Data.Vector.SEXP.ForeignSEXP ty)>_R
                                                        ->_R Sym (GHC.ST.N:ST[0]
                                                                      <s2>_N
                                                                      <Data.Vector.SEXP.ForeignSEXP
                                                                         ty>_R))
                                                       (((GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <s2>_N)))_R
                                                         ->_R ((#,#)
                                                                 <'GHC.Types.TupleRep '[]>_R
                                                                 <'GHC.Types.LiftedRep>_R
                                                                 (GHC.Prim.State#
                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <s2>_N)))_R
                                                                 <Data.Vector.SEXP.ForeignSEXP
                                                                    ty>_R)_R)
                                                        ->_R <GHC.ST.ST
                                                                s2
                                                                (Data.Vector.SEXP.ForeignSEXP
                                                                   ty)>_R)))
                                             (Trans
                                                  ((GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal (GHC.ST.ST
                                                                              s2) GHC.Types.IO))_N)_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           (GHC.Prim.State#
                                                              (Control.Monad.Primitive.PrimState
                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                      s2) GHC.Types.IO))_N)_R
                                                           <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                                                  ((GHC.Prim.State#
                                                      (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           (GHC.Prim.State#
                                                              (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                                                           <Data.Vector.SEXP.ForeignSEXP
                                                              ty>_R)_R)))) of wild2 { Unit# ds2 ->
                            case GHC.ForeignPtr.newConcForeignPtr1
                                   @ ()
                                   (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC dt)
                                     `cast`
                                   (GHC.Ptr.Ptr <Foreign.R.Internal.SEXPREC, ()>)_R
                                   (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld #)}
                                           dt
                                           s4 of wild3 { Unit# ds4 ->
                                    (# ds4, GHC.Tuple.() #) })
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R))
                                   ds2 of ds4 { (#,#) ipv9 ipv10 ->
                            (fill
                               @ s2
                               (Data.Vector.SEXP.$WVector
                                  @ s
                                  @ ty
                                  @ a
                                  ipv10
                                    `cast`
                                  (Trans
                                       (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P))
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      ((GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                       ->_R ((#,#)
                                                               <'GHC.Types.TupleRep '[]>_R
                                                               <'GHC.Types.LiftedRep>_R
                                                               (GHC.Prim.State#
                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                               <Data.Vector.SEXP.ForeignSEXP
                                                                  ty>_R)_R)
                                                      (Trans
                                                           ((GHC.Prim.State#
                                                               (Control.Monad.Primitive.PrimState
                                                                  (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                    s2)))_N)_R
                                                            ->_R ((#,#)
                                                                    <'GHC.Types.TupleRep '[]>_R
                                                                    <'GHC.Types.LiftedRep>_R
                                                                    (GHC.Prim.State#
                                                                       (Control.Monad.Primitive.PrimState
                                                                          (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                            s2)))_N)_R
                                                                    <Data.Vector.SEXP.ForeignSEXP
                                                                       ty>_R)_R)
                                                           (Nth:2
                                                                (Trans
                                                                     (((GHC.Prim.State#
                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                               <s2>_N))_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               (GHC.Prim.State#
                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                       <s2>_N))_R
                                                                               <Data.Vector.SEXP.ForeignSEXP
                                                                                  ty>_R)_R)
                                                                      ->_R <GHC.ST.ST
                                                                              s2
                                                                              (Data.Vector.SEXP.ForeignSEXP
                                                                                 ty)>_R)
                                                                     (<GHC.ST.STRep
                                                                         s2
                                                                         (Data.Vector.SEXP.ForeignSEXP
                                                                            ty)>_R
                                                                      ->_R GHC.ST.N:ST[0]
                                                                               <s2>_N
                                                                               <Data.Vector.SEXP.ForeignSEXP
                                                                                  ty>_R))))))))
                                  (GHC.Int.I32# dt1)
                                  (GHC.Int.I32# dt2))
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                               (case i of wild3 { GHC.Types.I# x1 ->
                                GHC.Types.I# (GHC.Prim.+# x1 1#) }))
                              `cast`
                            (GHC.ST.N:ST[0] <s2>_N <Data.Vector.SEXP.W s1 ty s a>_R)
                              ipv9
                                `cast`
                              (Nth:2
                                   (Nth:3
                                        (Trans
                                             ((GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      (GHC.Prim.State#
                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                      <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                                             (Trans
                                                  ((GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState
                                                         (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                           s2)))_N)_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           (GHC.Prim.State#
                                                              (Control.Monad.Primitive.PrimState
                                                                 (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                   s2)))_N)_R
                                                           <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                                                  (Nth:2
                                                       (Trans
                                                            (((GHC.Prim.State#
                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <s2>_N))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <s2>_N))_R
                                                                      <Data.Vector.SEXP.ForeignSEXP
                                                                         ty>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     s2
                                                                     (Data.Vector.SEXP.ForeignSEXP
                                                                        ty)>_R)
                                                            (<GHC.ST.STRep
                                                                s2
                                                                (Data.Vector.SEXP.ForeignSEXP ty)>_R
                                                             ->_R GHC.ST.N:ST[0]
                                                                      <s2>_N
                                                                      <Data.Vector.SEXP.ForeignSEXP
                                                                         ty>_R))))))) } } } } } })
                             `cast`
                           (Sym (GHC.ST.N:ST[0]
                                     <s2>_N <Data.Vector.SEXP.W s1 ty s a>_R)) } } } }
                  } in
                  case GHC.Magic.runRW#
                         @ ('GHC.Types.TupleRep
                              '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                              Data.Vector.SEXP.W s1 ty s a #)
                         (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case GHC.Classes.geInt n1 (GHC.Types.I# 0#) of wild1 {
                            GHC.Types.False
                            -> case Data.Vector.Internal.Check.checkError
                                      @ (GHC.ST.ST
                                           GHC.Prim.RealWorld
                                           (Data.Vector.Generic.Base.Mutable
                                              (Data.Vector.SEXP.W s1 ty s)
                                              (Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                              a))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Generic/Mutable.hs"#))
                                      (GHC.Types.I# 585#)
                                      Data.Vector.Internal.Check.Bounds
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                                      (Data.Vector.Internal.Check.checkLength_msg# ipv)
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Vector.SEXP.W s1 ty s a #)
                               of {}
                            GHC.Types.True
                            -> case (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                       @ (Data.Vector.Generic.Base.Mutable
                                            (Data.Vector.SEXP.W s1 ty s))
                                       @ a
                                       $dMVector
                                       @ (GHC.ST.ST GHC.Prim.RealWorld)
                                       (Control.Monad.Primitive.$fPrimMonadST @ GHC.Prim.RealWorld)
                                       n1)
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N
                                         <Data.Vector.Generic.Base.Mutable
                                            (Data.Vector.SEXP.W s1 ty s)
                                            (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                            a>_R)
                                      s2 of ds1 { (#,#) ipv1 ipv2 ->
                               case (Data.Vector.Generic.Mutable.Base.basicInitialize
                                       @ (Data.Vector.Generic.Base.Mutable
                                            (Data.Vector.SEXP.W s1 ty s))
                                       @ a
                                       $dMVector
                                       @ (GHC.ST.ST GHC.Prim.RealWorld)
                                       (Control.Monad.Primitive.$fPrimMonadST @ GHC.Prim.RealWorld)
                                       ipv2)
                                      `cast`
                                    (GHC.ST.N:ST[0] <GHC.Prim.RealWorld>_N <()>_R)
                                      ipv1 of ds { (#,#) ipv3 ipv4 ->
                               case GHC.Types.HEq_sc
                                      @ *
                                      @ *
                                      @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                      @ a
                                      (GHC.Classes.$p4(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                                            Data.Type.Equality.~
                                            (a :: *))
                                         $d(%,,,%))
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                    s ty>_N <a>_N) of cobox1 { DEFAULT ->
                               case ipv2
                                      `cast`
                                    (Trans
                                         (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                   <s1>_N
                                                   <ty>_N
                                                   <s>_N) <Control.Monad.Primitive.PrimState
                                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N)
                                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                              <s1>_P
                                              <ty>_P
                                              <Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST
                                                    GHC.Prim.RealWorld)>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                               case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld #)}
                                      dt
                                      ipv3 of wild2 { Unit# ds2 ->
                               case GHC.ForeignPtr.newConcForeignPtr1
                                      @ ()
                                      (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC dt)
                                        `cast`
                                      (GHC.Ptr.Ptr <Foreign.R.Internal.SEXPREC, ()>)_R
                                      (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld
                                                                                                    -> (# GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld #)}
                                              dt
                                              s3 of wild3 { Unit# ds4 ->
                                       (# ds4, GHC.Tuple.() #) })
                                        `cast`
                                      (Sym (GHC.Types.N:IO[0] <()>_R))
                                      ds2 of ds4 { (#,#) ipv7 ipv8 ->
                               (fill
                                  @ GHC.Prim.RealWorld
                                  (Data.Vector.SEXP.$WVector
                                     @ s
                                     @ ty
                                     @ a
                                     ipv8 `cast` (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P))
                                     (GHC.Int.I32# dt1)
                                     (GHC.Int.I32# dt2))
                                    `cast`
                                  (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                                  (GHC.Types.I# 0#))
                                 `cast`
                               (GHC.ST.N:ST[0]
                                    <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.W s1 ty s a>_R)
                                 ipv7 } } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                  ipv2
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
d3f8f17067ac23d1ff404c81ea39f341
  copy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,U(U))><L,U(U,U,U)><L,U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (m1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a)
                   (v2 :: Data.Vector.SEXP.Vector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox2 { DEFAULT ->
                    case m1 of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case GHC.Classes.eqInt
                           (GHC.Types.I# dt2)
                           (Data.Vector.Fusion.Bundle.Monadic.length
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                              @ a
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                 @ a
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (Data.Vector.SEXP.$fVectorWa
                                    @ s
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ ty
                                    @ a
                                    $dReifies
                                    $d(%,,,%))
                                 v2
                                   `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0]
                                           <s>_P
                                           <ty>_P
                                           <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R) of wild1 {
                      GHC.Types.False
                      -> Data.Vector.Internal.Check.checkError
                           @ (m ())
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                           (GHC.Types.I# 1979#)
                           Data.Vector.Internal.Check.Bounds
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "copy"#))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                      GHC.Types.True
                      -> case v2 of nt { Data.Vector.SEXP.Vector ipv ipv1 ipv2 ipv3 ->
                         case GHC.Types.HEq_sc
                                @ *
                                @ *
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty)
                                @ a
                                (GHC.Classes.$p4(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ ((Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty :: *)
                                      Data.Type.Equality.~
                                      (a :: *))
                                   $d(%,,,%))
                                  `cast`
                                (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                    (Control.Monad.Primitive.PrimState
                                                                       m)
                                                                    ty>_N <a>_N) of cobox3 { DEFAULT ->
                         let {
                           $dStorable :: Foreign.Storable.Storable a
                           = GHC.Classes.$p1(%,,,%)
                               @ (Foreign.Storable.Storable a)
                               @ (Foreign.R.Type.IsVector ty)
                               @ (Data.Singletons.SingI ty)
                               @ ((Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty :: *)
                                  Data.Type.Equality.~
                                  (a :: *))
                               $d(%,,,%)
                         } in
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.advancePtr1
                                      @ a) of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.touch#
                                   @ 'GHC.Types.LiftedRep
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   ipv1
                                   GHC.Prim.realWorld# of s' { DEFAULT ->
                            case Data.Vector.SEXP.Mutable.Internal.$WMVector
                                   @ GHC.Types.Any
                                   @ ty
                                   @ a
                                   (GHC.Ptr.Ptr @ () ipv)
                                     `cast`
                                   (Trans
                                        (GHC.Ptr.Ptr <(), Language.R.HExp.HExp GHC.Types.Any ty>)_R
                                        (Sym (Foreign.R.Internal.N:SEXP[0]
                                                  <GHC.Types.Any>_P <ty>_P)))
                                   (GHC.Int.I32# ipv2)
                                   (GHC.Int.I32#
                                      ipv3) of wild4 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.advancePtr1
                                      @ a) of wild5 { GHC.Types.I# y1 ->
                            case GHC.Types.HEq_sc
                                   @ *
                                   @ *
                                   @ (Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty)
                                   @ a
                                   (GHC.Classes.$p4(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ ((Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty :: *)
                                         Data.Type.Equality.~
                                         (a :: *))
                                      $d(%,,,%))
                                     `cast`
                                   (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                       (Control.Monad.Primitive.PrimState
                                                                          m)
                                                                       ty>_N <a>_N) of cobox4 { DEFAULT ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.copyArray1
                                      @ a) of wild6 { GHC.Types.I# y2 ->
                            case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                            -> GHC.Prim.Addr#
                                                            -> GHC.Prim.Word#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Addr# #)}
                                   (GHC.Prim.plusAddr#
                                      (GHC.Prim.plusAddr# dt 40#)
                                      (GHC.Prim.*# dt1 y))
                                   (GHC.Prim.plusAddr#
                                      (GHC.Prim.plusAddr# dt4 40#)
                                      (GHC.Prim.*# dt5 y1))
                                   (GHC.Prim.int2Word# (GHC.Prim.*# ipv3 y2))
                                   s1 of wild7 { (#,#) ds4 ds5 ->
                            (# ds4, GHC.Tuple.() #) } } } } } } })
                             `cast`
                           (Trans
                                ((GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                         <()>_R)_R)
                                ((GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 ->_R ((#,#)
                                         <'GHC.Types.TupleRep '[]>_R
                                         <'GHC.Types.LiftedRep>_R
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.PrimState
                                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                         <()>_R)_R)) } } } } } }) }) -}
57c133eec9a531d0b25156adc1f3d4c4
  create ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (forall r.
     GHC.ST.ST r (Data.Vector.SEXP.Mutable.Internal.MVector r ty a))
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><C(S(SS(SLL))),1*C1(U(U,1*U(U,U,U)))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: forall r.
                         GHC.ST.ST r (Data.Vector.SEXP.Mutable.Internal.MVector r ty a)) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.new
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    (Data.Vector.Generic.New.New
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (\ @ s2 (s3 :: GHC.Prim.State# s2) ->
                        case (f @ s2)
                               `cast`
                             (GHC.ST.N:ST[0]
                                  <s2>_N <Data.Vector.SEXP.Mutable.Internal.MVector s2 ty a>_R)
                               s3 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv,
                           ipv1
                             `cast`
                           (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                     <s1>_P <ty>_P <s2>_P) <a>_N) #) })
                         `cast`
                       (forall (s2 :: <*>_N).
                        Sym (GHC.ST.N:ST[0]
                                 <s2>_N
                                 (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                           <s1>_N <ty>_N <s>_N) <s2>_N <a>_N)))))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
532a13e8a7b51cf24b571617633a8f99
  drop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.drop
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    i
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
6b540939cd6f9edd096899f59a4677ca
  dropWhile ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.dropWhileM
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           (\ (x :: a) -> f x)
                             `cast`
                           (<a>_R
                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
433c7bdcdc8e02294da61812ea6abbcd
  elem ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Eq a) =>
    a -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U(C(C1(U)),A)><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (a1 :: a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.elem
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    $dEq
                    a1
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         GHC.Types.Bool) ((GHC.Types.Any
                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                s)
                                                                          -> Data.Proxy.Proxy
                                                                               GHC.Types.Any
                                                                          -> GHC.Types.Bool))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
9a660bb061c881cc06fadbe30349004e
  elemIndex ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Eq a) =>
    a -> Data.Vector.SEXP.Vector s ty a -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,1*U(1*C1(C(U)),A)><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (a1 :: a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.findIndex
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (GHC.Classes.== @ a $dEq a1)
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0]
                                <GHC.Base.Maybe GHC.Types.Int>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <GHC.Base.Maybe GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (GHC.Base.Maybe
                                                            GHC.Types.Int)) ((GHC.Types.Any
                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                   s)
                                                                             -> Data.Proxy.Proxy
                                                                                  GHC.Types.Any
                                                                             -> GHC.Base.Maybe
                                                                                  GHC.Types.Int))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
de9ad6a15e76c0b22caf3617c49115df
  empty ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
  {- Arity: 1,
     Strictness: <S(LS(SL)LS(S)),U(A,1*U(1*U,A),A,1*U(1*U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.empty
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
4c8b069bea3d9386ce77b1ab8c719dc5
  enumFromN ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    a -> GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLLLLC(S)),U(C(C1(U)),A,A,A,A,A,1*C1(U))><S,1*U><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (a1 :: a) (i :: GHC.Types.Int) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox1 { DEFAULT ->
                  case a1 of v { DEFAULT ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case GHC.Num.fromInteger @ a $dNum 1 of v1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.enumFromStepN
                           @ a
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 ty s)
                           $dNum
                           Data.Vector.Fusion.Util.$fMonadId
                           v
                           v1
                           i)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
c1e8327df8a2288d911a2630de210990
  enumFromStepN ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    a -> a -> GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,U(C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U><S(S),1*U(U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a) (t :: a) (s1 :: GHC.Types.Int) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox1 { DEFAULT ->
                  case f of v { DEFAULT ->
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox2 { DEFAULT ->
                  case t of v1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.enumFromStepN
                           @ a
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           $dNum
                           Data.Vector.Fusion.Util.$fMonadId
                           v
                           v1
                           s1)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
7b2d00154fdc5f4795f4bbab93c482f8
  enumFromThenTo ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Enum.Enum a) =>
    a -> a -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,1*U(A,A,A,A,A,A,A,1*C1(C1(C1(U))))><L,U><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEnum :: GHC.Enum.Enum a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a) (t :: a) (s1 :: a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.enumFromThenTo
                           @ a
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           $dEnum
                           Data.Vector.Fusion.Util.$fMonadId
                           f
                           t
                           s1)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
258376d7f2a1af195dc326ba3e57914c
  enumFromTo ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Enum.Enum a) =>
    a -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,1*U(A,A,A,A,A,A,1*C1(C1(U)),A)><L,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEnum :: GHC.Enum.Enum a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a) (t :: a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.enumFromTo
                           @ a
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 ty s)
                           $dEnum
                           Data.Vector.Fusion.Util.$fMonadId
                           f
                           t)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
35b49ece226fe9371bc5bf1bfb994859
  filter ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.filter @ m @ a $dMonad f)
                           Data.Vector.Fusion.Bundle.Size.toMax
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
717bb954e7e87ed7fba9cf0226ed4f73
  filterM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> m GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> m (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 4,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(U)><L,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (f :: a -> m GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  GHC.Base.fmap
                    @ m
                    $dFunctor
                    @ (Data.Vector.SEXP.W s1 ty s a)
                    @ (Data.Vector.SEXP.Vector s ty a)
                    (Data.Vector.SEXP.filterM1 @ s1 @ ty @ s @ a)
                      `cast`
                    (<Data.Vector.SEXP.W s1 ty s a>_R
                     ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                    (Data.Vector.Generic.unstreamM
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       @ (Data.Vector.SEXP.W s1 ty s)
                       $dMonad
                       $dVector
                       (Data.Vector.Fusion.Bundle.Monadic.filterM
                          @ m
                          @ a
                          @ (Data.Vector.SEXP.W s1 ty s)
                          $dMonad
                          f
                          (Data.Vector.Fusion.Bundle.lift
                             @ m
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             $dMonad
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                $dVector
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <m (Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m (Data.Vector.SEXP.Vector
                                                          s ty a))) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> m (Data.Vector.SEXP.Vector
                                                                             s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  filterM1 ::
    Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ s
                   @ a
                   (ds :: Data.Vector.SEXP.W t ty s a) ->
                 ds) -}
49f727cd982225eb96b2351f195f4f66
  find ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Base.Maybe a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.findM
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (x :: a) -> f x)
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Base.Maybe a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Base.Maybe a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (GHC.Base.Maybe a)) ((GHC.Types.Any
                                                                               -> Control.Monad.R.Internal.AcquireIO
                                                                                    s)
                                                                              -> Data.Proxy.Proxy
                                                                                   GHC.Types.Any
                                                                              -> GHC.Base.Maybe
                                                                                   a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
0c721c7cf13dae0f73b4c27db03d8b83
  findIndex ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.findIndex
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    f
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0]
                                <GHC.Base.Maybe GHC.Types.Int>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <GHC.Base.Maybe GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (GHC.Base.Maybe
                                                            GHC.Types.Int)) ((GHC.Types.Any
                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                   s)
                                                                             -> Data.Proxy.Proxy
                                                                                  GHC.Types.Any
                                                                             -> GHC.Base.Maybe
                                                                                  GHC.Types.Int))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
571d0a186a4fcd40f3ac2c7bf069cc65
  fold1M ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> m a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M
                    @ m
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    $dMonad
                    f
                    (Data.Vector.Fusion.Bundle.lift
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       $dMonad
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
1f1936b9267835004c386fdb651ef2eb
  fold1M' ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> m a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                    @ m
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    $dMonad
                    f
                    (Data.Vector.Fusion.Bundle.lift
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       $dMonad
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
b6588f6abef6ef3e8aee160c0cfa7058
  fold1M'_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m ()
  {- Arity: 4,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> m a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  GHC.Base.>>
                    @ m
                    $dMonad
                    @ a
                    @ ()
                    (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                       @ m
                       @ a
                       @ (Data.Vector.SEXP.W s1 ty s)
                       $dMonad
                       f
                       (Data.Vector.Fusion.Bundle.lift
                          @ m
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          $dMonad
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                             v `cast`
                             (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                    (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
2c3395ac32f7343768f9b858b39aafb5
  fold1M_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m ()
  {- Arity: 4,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> m a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  GHC.Base.>>
                    @ m
                    $dMonad
                    @ a
                    @ ()
                    (Data.Vector.Fusion.Bundle.Monadic.foldl1M
                       @ m
                       @ a
                       @ (Data.Vector.SEXP.W s1 ty s)
                       $dMonad
                       f
                       (Data.Vector.Fusion.Bundle.lift
                          @ m
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          $dMonad
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                             v `cast`
                             (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                    (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
ddc6a3b8c2c29fc950ae2fbc13cdf1b4
  foldM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m a
  {- Arity: 5,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,U><S,1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> m a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM
                    @ m
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s2 ty s)
                    $dMonad
                    f
                    s1
                    (Data.Vector.Fusion.Bundle.lift
                       @ m
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ b
                       $dMonad
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ b
                          (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
6b2c7005d993ded37a4ced0142f45cda
  foldM' ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m a
  {- Arity: 5,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S,1*U><S,1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> m a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ m
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s2 ty s)
                    $dMonad
                    f
                    s1
                    (Data.Vector.Fusion.Bundle.lift
                       @ m
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ b
                       $dMonad
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ b
                          (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
6956e2ca94bdcb85426fd0a76a027d2f
  foldM'_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m ()
  {- Arity: 5,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,1*U><L,1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> m a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  GHC.Base.>>
                    @ m
                    $dMonad
                    @ a
                    @ ()
                    (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                       @ m
                       @ a
                       @ b
                       @ (Data.Vector.SEXP.W s2 ty s)
                       $dMonad
                       f
                       s1
                       (Data.Vector.Fusion.Bundle.lift
                          @ m
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ b
                          $dMonad
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W s2 ty s)
                             @ b
                             (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                             v `cast`
                             (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))
                    (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
d6e7df483a5e3caff49578ba6de2ba33
  foldM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m ()
  {- Arity: 5,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,U><L,1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> m a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  GHC.Base.>>
                    @ m
                    $dMonad
                    @ a
                    @ ()
                    (Data.Vector.Fusion.Bundle.Monadic.foldlM
                       @ m
                       @ a
                       @ b
                       @ (Data.Vector.SEXP.W s2 ty s)
                       $dMonad
                       f
                       s1
                       (Data.Vector.Fusion.Bundle.lift
                          @ m
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ b
                          $dMonad
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W s2 ty s)
                             @ b
                             (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                             v `cast`
                             (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))
                    (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e6447a2965dbd8f317bd679cd11f33b5
  foldl ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> b -> a) -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s2 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b1 :: b)[OneShot] -> f a1 b1)
                      `cast`
                    (<a>_R ->_R <b>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    s1
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ b
                       (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N)))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
c97018789f2f7e8c37ffaaea2b270734
  foldl' ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> b -> a) -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s2 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b1 :: b)[OneShot] -> f a1 b1)
                      `cast`
                    (<a>_R ->_R <b>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    s1
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ b
                       (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N)))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
4aac4d735b80b5d6ceece11c8c3c4a19
  foldl1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b :: a)[OneShot] -> f a1 b)
                      `cast`
                    (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
1a979fe16499a9e53d69ccef3492010a
  foldl1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b :: a)[OneShot] -> f a1 b)
                      `cast`
                    (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
165e9fbdf1e2aa665486014a28e631ca
  foldr ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> b) -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldrM
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s2 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b1 :: b) -> f a1 b1)
                      `cast`
                    (<a>_R ->_R <b>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                    s1
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <b>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <b>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         b) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> b))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3a34d686fc4450089f661b26d10bc11c
  foldr' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> b) -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,1*U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ b
                    @ a
                    @ GHC.Types.Any
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: b) (b1 :: a)[OneShot] -> f b1 a1)
                      `cast`
                    (<b>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                    s1
                    (Data.Vector.Generic.streamR
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ a
                       @ GHC.Types.Any
                       (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <b>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <b>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         b) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> b))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
9e1a6d8e825cb352065e128a78d19d71
  foldr1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldr1M
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b :: a) -> f a1 b)
                      `cast`
                    (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
6b0d678805946c108d08c1bffe0040b5
  foldr1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ GHC.Types.Any
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b :: a)[OneShot] -> f b a1)
                      `cast`
                    (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    (Data.Vector.Generic.streamR
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       @ GHC.Types.Any
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
54eec65be556a0504d099ebe8f176d35
  forM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    Data.Vector.SEXP.Vector s ty a
    -> (a -> m b) -> m (Data.Vector.SEXP.Vector s ty b)
  {- Arity: 5,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,1*U(U,U,U,U)><L,C(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (f :: a -> m b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  GHC.Base.fmap
                    @ m
                    $dFunctor
                    @ (Data.Vector.SEXP.W s1 ty s b)
                    @ (Data.Vector.SEXP.Vector s ty b)
                    (Data.Vector.SEXP.filterM1 @ s1 @ ty @ s @ b)
                      `cast`
                    (<Data.Vector.SEXP.W s1 ty s b>_R
                     ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <b>_N)
                    (Data.Vector.Generic.unstreamM
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ b
                       @ (Data.Vector.SEXP.W s1 ty s)
                       $dMonad
                       $dVector
                       (Data.Vector.Fusion.Bundle.Monadic.mapM
                          @ m
                          @ a
                          @ b
                          @ (Data.Vector.SEXP.W s1 ty s)
                          $dMonad
                          f
                          (Data.Vector.Fusion.Bundle.lift
                             @ m
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             $dMonad
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                $dVector
                                  `cast`
                                (Data.Vector.Generic.Base.Vector
                                   <Data.Vector.SEXP.W s1 ty s>_N (Trans (Sym cobox) cobox1))_R
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <m (Data.Vector.SEXP.Vector s ty b)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m (Data.Vector.SEXP.Vector
                                                          s ty b))) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> m (Data.Vector.SEXP.Vector
                                                                             s ty b))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
3d45ebf664262091ae85c67030e85a6b
  forM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a -> (a -> m b) -> m ()
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S,1*U(U,U,U,U)><L,C(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (f :: a -> m b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.mapM_
                    @ m
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s1 ty s)
                    $dMonad
                    f
                    (Data.Vector.Fusion.Bundle.lift
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       $dMonad
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
35eee5c22ba3db55885857eb2cd7e5ac
  force ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,1*U(1*U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.force
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
06d56325f7eef6b4cfbb9110fb79ca01
  foreignSEXP ::
    Control.Monad.Primitive.PrimMonad m =>
    Foreign.R.Internal.SEXP s ty -> m (Data.Vector.SEXP.ForeignSEXP ty)
  {- Arity: 2, Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U(U)>,
     Unfolding: (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (sx :: Foreign.R.Internal.SEXP s ty) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.Vector.SEXP.ForeignSEXP ty)
                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case sx
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    s ty, Foreign.R.Internal.SEXPREC>)_R) of ds { GHC.Ptr.Ptr ds1 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds1
                           s1 of wild { Unit# ds2 ->
                    case GHC.ForeignPtr.$wnewConcForeignPtr
                           @ ()
                           ds1
                           (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld #)}
                                   ds1
                                   s2 of wild1 { Unit# ds4 ->
                            (# ds4, GHC.Tuple.() #) })
                             `cast`
                           (Sym (GHC.Types.N:IO[0] <()>_R))
                           ds2 of ds4 { (#,#) ipv ipv1 ->
                    (# ipv,
                       ipv1
                         `cast`
                       (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)) #) } } })
                     `cast`
                   (Trans
                        ((GHC.Prim.State#
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                 <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)
                        ((GHC.Prim.State#
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N)_R
                         ->_R ((#,#)
                                 <'GHC.Types.TupleRep '[]>_R
                                 <'GHC.Types.LiftedRep>_R
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                 <Data.Vector.SEXP.ForeignSEXP ty>_R)_R))) -}
b737b39f0733ddf3af8c104ebe1835da
  freeze ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Vector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(U(U,U,U,U,U),U),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (m1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Vector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      $dFunctor
                      @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Vector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.filterM1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (let {
                         $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                        (Data.Vector.Generic.Base.Mutable
                                           (Data.Vector.SEXP.W
                                              s ty (Control.Monad.Primitive.PrimState m)))
                                        a
                         = case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty)
                                  @ a
                                  (GHC.Classes.$p4(%,,,%)
                                     @ (Foreign.Storable.Storable a)
                                     @ (Foreign.R.Type.IsVector ty)
                                     @ (Data.Singletons.SingI ty)
                                     @ ((Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty :: *)
                                        Data.Type.Equality.~
                                        (a :: *))
                                     $d(%,,,%))
                                    `cast`
                                  (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m)
                                                                      ty>_N <a>_N) of cobox1 { DEFAULT ->
                           (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                              @ s
                              @ (Control.Monad.Primitive.PrimState m)
                              @ ty
                              @ a
                              $dReifies
                              $d(%,,,%))
                             `cast`
                           (Data.Vector.Generic.Mutable.Base.MVector
                              (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                        <s>_N <ty>_N <Control.Monad.Primitive.PrimState m>_N))
                              <a>_N)_R }
                       } in
                       GHC.Base.>>=
                         @ m
                         (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                         @ (Data.Vector.Generic.Base.Mutable
                              (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                              (Control.Monad.Primitive.PrimState m)
                              a)
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                         (let {
                            $dMonad1 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          GHC.Base.>>=
                            @ m
                            $dMonad1
                            @ (Data.Vector.Generic.Base.Mutable
                                 (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                 (Control.Monad.Primitive.PrimState m)
                                 a)
                            @ (Data.Vector.Generic.Base.Mutable
                                 (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                 (Control.Monad.Primitive.PrimState m)
                                 a)
                            (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                               @ (Data.Vector.Generic.Base.Mutable
                                    (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m)))
                               @ a
                               $dMVector
                               @ m
                               $dPrimMonad
                               (Data.Vector.Generic.Mutable.Base.basicLength
                                  @ (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m)))
                                  @ a
                                  $dMVector
                                  @ (Control.Monad.Primitive.PrimState m)
                                  m1
                                    `cast`
                                  (Trans
                                       (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState m>_P))
                                       (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                      <s>_N
                                                      <ty>_N
                                                      <Control.Monad.Primitive.PrimState
                                                         m>_N)) <Control.Monad.Primitive.PrimState
                                                                   m>_N) <a>_N)))
                            (\ (v' :: Data.Vector.Generic.Base.Mutable
                                        (Data.Vector.SEXP.W
                                           s ty (Control.Monad.Primitive.PrimState m))
                                        (Control.Monad.Primitive.PrimState m)
                                        a) ->
                             GHC.Base.>>
                               @ m
                               $dMonad1
                               @ ()
                               @ (Data.Vector.Generic.Base.Mutable
                                    (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                    (Control.Monad.Primitive.PrimState m)
                                    a)
                               (case v'
                                       `cast`
                                     (Trans
                                          (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                    <s>_N
                                                    <ty>_N
                                                    <Control.Monad.Primitive.PrimState
                                                       m>_N) <Control.Monad.Primitive.PrimState
                                                                m>_N)
                                          (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState
                                                  m>_P) <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                                case m1 of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                                Data.Vector.Generic.Mutable.Base.basicUnsafeCopy
                                  @ (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m)))
                                  @ a
                                  $dMVector
                                  @ m
                                  $dPrimMonad
                                  nt
                                    `cast`
                                  (Trans
                                       (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState m>_P))
                                       (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                      <s>_N
                                                      <ty>_N
                                                      <Control.Monad.Primitive.PrimState
                                                         m>_N)) <Control.Monad.Primitive.PrimState
                                                                   m>_N) <a>_N)
                                  nt1
                                    `cast`
                                  (Trans
                                       (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState m>_P))
                                       (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                      <s>_N
                                                      <ty>_N
                                                      <Control.Monad.Primitive.PrimState
                                                         m>_N)) <Control.Monad.Primitive.PrimState
                                                                   m>_N) <a>_N) } })
                               (GHC.Base.return
                                  @ m
                                  $dMonad1
                                  @ (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m))
                                       (Control.Monad.Primitive.PrimState m)
                                       a)
                                  v')))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ ((Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty :: *)
                                       Data.Type.Equality.~
                                       (a :: *))
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dMonad :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          \ (ds :: Data.Vector.Generic.Base.Mutable
                                     (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                     (Control.Monad.Primitive.PrimState m)
                                     a) ->
                          case ds
                                 `cast`
                               (Trans
                                    (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                              <s>_N
                                              <ty>_N
                                              <Control.Monad.Primitive.PrimState
                                                 m>_N) <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                         <s>_P
                                         <ty>_P
                                         <Control.Monad.Primitive.PrimState
                                            m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          let {
                            off :: GHC.Int.Int32 = GHC.Int.I32# dt1
                          } in
                          let {
                            len :: GHC.Int.Int32 = GHC.Int.I32# dt2
                          } in
                          GHC.Base.>>=
                            @ m
                            $dMonad
                            @ (Data.Vector.SEXP.ForeignSEXP ty)
                            @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                            (Data.Vector.SEXP.foreignSEXP
                               @ m
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dPrimMonad
                               (GHC.Ptr.Ptr
                                  @ (Language.R.HExp.HExp (Control.Monad.Primitive.PrimState m) ty)
                                  dt)
                                 `cast`
                               (Sym (Foreign.R.Internal.N:SEXP[0]
                                         <Control.Monad.Primitive.PrimState m>_P <ty>_P)))
                            (\ (fp :: Data.Vector.SEXP.ForeignSEXP ty) ->
                             GHC.Base.return
                               @ m
                               $dMonad
                               @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                               (Data.Vector.SEXP.$WVector
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  fp
                                  off
                                  len)
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:W[0]
                                         <s>_P
                                         <ty>_P
                                         <Control.Monad.Primitive.PrimState
                                            m>_P) <a>_N)) } }))) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  fromList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    [a] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (xs :: [a]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.fromListN
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           (GHC.Base.foldr
                              @ a
                              @ (GHC.Types.Int -> GHC.Types.Int)
                              (GHC.List.lengthFB @ a)
                              GHC.List.idLength
                              xs
                              (GHC.Types.I# 0#))
                           xs)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  fromListN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int -> [a] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (l :: [a]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.fromListN
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           i
                           l)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
a7852ed91bd612055285079f6dd5721b
  fromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Foreign.R.Internal.SEXP s ty -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Data.Vector.SEXP.$wfromSEXP @ s @ ty @ a w ww1 }) -}
68c595dbbc4f69ef0d6f2cce9424b455
  generate ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (GHC.Types.Int -> a) -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><L,C(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (f :: GHC.Types.Int -> a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.generateM
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           i
                           (\ (x :: GHC.Types.Int) -> f x)
                             `cast`
                           (<GHC.Types.Int>_R
                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
4e0b73ce7489628c2a106d150e6ba7db
  generateM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int
    -> (GHC.Types.Int -> m a) -> m (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 4,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,1*U(U)><L,C(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (n :: GHC.Types.Int) (f :: GHC.Types.Int -> m a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  GHC.Base.fmap
                    @ m
                    $dFunctor
                    @ (Data.Vector.SEXP.W s1 ty s a)
                    @ (Data.Vector.SEXP.Vector s ty a)
                    (\ (v :: Data.Vector.SEXP.W s1 ty s a) -> v)
                      `cast`
                    (<Data.Vector.SEXP.W s1 ty s a>_R
                     ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                    (Data.Vector.Generic.unstreamM
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       @ GHC.Types.Any
                       $dMonad
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       (Data.Vector.Fusion.Bundle.Monadic.generateM
                          @ m
                          @ a
                          @ GHC.Types.Any
                          $dMonad
                          n
                          f)))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <m (Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m (Data.Vector.SEXP.Vector
                                                          s ty a))) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> m (Data.Vector.SEXP.Vector
                                                                             s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e7ffc6550c0bdb49e598d177cbb4f42b
  head ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.head
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
9bdd41eb0b002a9d14b0da42c74e39c6
  headM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ m :: * -> *
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.headM
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    @ m
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    $dMonad
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
ef45c2a8f591be01d96d453772d3477a
  ifilter ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (GHC.Types.Int -> a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            let {
                              f2 :: a -> m a = GHC.Base.return @ m $dMonad @ a
                            } in
                            let {
                              f4 :: GHC.Types.Bool -> m GHC.Types.Bool
                              = GHC.Base.return @ m $dMonad @ GHC.Types.Bool
                            } in
                            \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream m a)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.mapM
                              @ m
                              @ (GHC.Types.Int, a)
                              @ a
                              $dMonad
                              (\ (x1 :: (GHC.Types.Int, a)) ->
                               f2 (Data.Tuple.snd @ GHC.Types.Int @ a x1))
                              (Data.Vector.Fusion.Stream.Monadic.filterM
                                 @ m
                                 @ (GHC.Types.Int, a)
                                 $dMonad
                                 (\ (x1 :: (GHC.Types.Int, a)) ->
                                  f4 (Data.Tuple.uncurry @ GHC.Types.Int @ a @ GHC.Types.Bool f x1))
                                 (Data.Vector.Fusion.Stream.Monadic.indexed @ m @ a $dMonad x)))
                           Data.Vector.Fusion.Bundle.Size.toMax
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e81dcc1c9a0b344534d46dd084a97c39
  ifoldl ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> GHC.Types.Int -> b -> a)
    -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(C1(U)))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Int -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (GHC.Types.Int, b)
                    @ (Data.Vector.SEXP.W s2 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b1 :: (GHC.Types.Int, b))[OneShot] ->
                     f a1
                       (case b1 of wild { (,) x ds -> x })
                       (case b1 of wild { (,) ds y -> y }))
                      `cast`
                    (<a>_R
                     ->_R <(GHC.Types.Int, b)>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    s1
                    (Data.Vector.Fusion.Bundle.Monadic.indexed
                       @ Data.Vector.Fusion.Util.Id
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ b
                       Data.Vector.Fusion.Util.$fMonadId
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ b
                          (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
fa85d4fe815869d9abe624ad00a0dd44
  ifoldl' ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> GHC.Types.Int -> b -> a)
    -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(C1(U)))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Int -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (GHC.Types.Int, b)
                    @ (Data.Vector.SEXP.W s2 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b1 :: (GHC.Types.Int, b))[OneShot] ->
                     f a1
                       (case b1 of wild { (,) x ds -> x })
                       (case b1 of wild { (,) ds y -> y }))
                      `cast`
                    (<a>_R
                     ->_R <(GHC.Types.Int, b)>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    s1
                    (Data.Vector.Fusion.Bundle.Monadic.indexed
                       @ Data.Vector.Fusion.Util.Id
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ b
                       Data.Vector.Fusion.Util.$fMonadId
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ b
                          (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ b $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
748deb79d5fb2553bf41a4d15629740e
  ifoldr ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (GHC.Types.Int -> a -> b -> b)
    -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(C1(U)))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldrM
                    @ Data.Vector.Fusion.Util.Id
                    @ (GHC.Types.Int, a)
                    @ b
                    @ (Data.Vector.SEXP.W s2 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: (GHC.Types.Int, a)) (b1 :: b) ->
                     f (case a1 of wild { (,) x ds -> x })
                       (case a1 of wild { (,) ds y -> y })
                       b1)
                      `cast`
                    (<(GHC.Types.Int, a)>_R
                     ->_R <b>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                    s1
                    (Data.Vector.Fusion.Bundle.Monadic.indexed
                       @ Data.Vector.Fusion.Util.Id
                       @ (Data.Vector.SEXP.W s2 ty s)
                       @ a
                       Data.Vector.Fusion.Util.$fMonadId
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s2 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (forall (s2 :: <*>_N).
                       <Data.Reflection.Reifies
                          s2 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s2>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <b>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <b>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         b) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> b))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
075e764267b0ba28ad8be6c5db4fe9e3
  ifoldr' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (GHC.Types.Int -> a -> b -> b)
    -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(C1(U)))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    f1 :: Data.Vector.Generic.Base.Vector
                            (Data.Vector.SEXP.W s2 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s2 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                     @ Data.Vector.Fusion.Util.Id
                     @ b
                     @ (GHC.Types.Int, a)
                     @ GHC.Types.Any
                     Data.Vector.Fusion.Util.$fMonadId
                     (\ (a1 :: b) (b1 :: (GHC.Types.Int, a))[OneShot] ->
                      f (case b1 of wild { (,) x ds -> x })
                        (case b1 of wild { (,) ds y -> y })
                        a1)
                       `cast`
                     (<b>_R
                      ->_R <(GHC.Types.Int, a)>_R
                      ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                     s1
                     (Data.Vector.Fusion.Bundle.indexedR
                        @ GHC.Types.Any
                        @ a
                        (Data.Vector.Fusion.Bundle.Monadic.length
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Fusion.Bundle.Monadic.fromVector
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ a
                              Data.Vector.Fusion.Util.$fMonadId
                              f1
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))
                          `cast`
                        (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R)
                        (Data.Vector.Generic.streamR
                           @ (Data.Vector.SEXP.W s2 ty s)
                           @ a
                           @ GHC.Types.Any
                           f1
                           v `cast`
                           (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N))))
                    `cast`
                  (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    b) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
4323405977a9878248a8d069b69c3e7c
  imap ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (GHC.Types.Int -> a -> b)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ b
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            let {
                              f2 :: b -> m b = GHC.Base.return @ m $dMonad @ b
                            } in
                            \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream m a)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.mapM
                              @ m
                              @ (GHC.Types.Int, a)
                              @ b
                              $dMonad
                              (\ (x1 :: (GHC.Types.Int, a)) ->
                               f2 (Data.Tuple.uncurry @ GHC.Types.Int @ a @ b f x1))
                              (Data.Vector.Fusion.Stream.Monadic.indexed @ m @ a $dMonad x))
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                                `cast`
                              (Data.Vector.Generic.Base.Vector
                                 <Data.Vector.SEXP.W s1 ty s>_N (Trans (Sym cobox) cobox1))_R
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
b9e2d5f25c503d17265fab32bb146eb2
  indexM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLLS),1*U(U,U,U,U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ m :: * -> *
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (i :: GHC.Types.Int) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.indexM
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    @ m
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    $dMonad
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                    i)
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
1dafd1e5b286456edb22923e57d5dcdf
  init ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.init
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
23052dd2965819f4764c568a4ef58432
  iterateN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int -> (a -> a) -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><L,C(U)><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (f :: a -> a) (a1 :: a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.iterateN
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           i
                           f
                           a1)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
d624f6f744df04f74f437038ca8f227b
  izipWith ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c) =>
    (GHC.Types.Int -> a -> b -> c)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
  {- Arity: 6,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(C1(U)))><S(LLLS),1*U(U,U,U,U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (6, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox2 { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> b -> c)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyc s) c
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyc
                        @ c
                        $dReifies
                        $d(%,,,%)2
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ (GHC.Types.Int, a)
                         @ b
                         @ c
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: (GHC.Types.Int, a)) (b1 :: b)[OneShot] ->
                          f (case a1 of wild2 { (,) x ds -> x })
                            (case a1 of wild2 { (,) ds y -> y })
                            b1)
                           `cast`
                         (<(GHC.Types.Int, a)>_R
                          ->_R <b>_R
                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <c>_R))
                         (Data.Vector.Fusion.Stream.Monadic.indexed
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            Data.Vector.Fusion.Util.$fMonadId
                            ds1)
                         ds7 of wild2 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyc s)
                     @ c
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyc s)
                        @ c
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyc s)
                           @ c
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ c
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyc s) c)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 c>_R) of wild3 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyc s) c)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyc s)
                                         @ c
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyc s) c) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyc s))
                                                           c
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyc s)
                                                @ c
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyc s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     c) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyc s))
                                            @ c
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyc s) c)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyc s) c) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyc s) c)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyc s c))
                           (case ds4 of wild3 {
                              Data.Vector.Fusion.Bundle.Size.Exact m
                              -> case ds10 of wild4 {
                                   Data.Vector.Fusion.Bundle.Size.Exact n
                                   -> Data.Vector.Fusion.Bundle.Size.Exact
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Max n
                                   -> Data.Vector.Fusion.Bundle.Size.Max
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> Data.Vector.Fusion.Bundle.Size.Max m }
                              Data.Vector.Fusion.Bundle.Size.Max m
                              -> case ds10 of wild4 {
                                   Data.Vector.Fusion.Bundle.Size.Exact n
                                   -> Data.Vector.Fusion.Bundle.Size.Max
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Max n
                                   -> Data.Vector.Fusion.Bundle.Size.Max
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> Data.Vector.Fusion.Bundle.Size.Max m }
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              -> case ds10 of wild4 {
                                   Data.Vector.Fusion.Bundle.Size.Exact n
                                   -> Data.Vector.Fusion.Bundle.Size.Max n
                                   Data.Vector.Fusion.Bundle.Size.Max n
                                   -> Data.Vector.Fusion.Bundle.Size.Max n
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> Data.Vector.Fusion.Bundle.Size.Unknown } }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyc>_P <s>_P <c>_N) } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyc c>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyc c)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyc c)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } }) -}
49b324f1e69f9ea298259bf32e7ef642
  izipWith1 ::
    Data.Vector.Fusion.Bundle.Size.Size
    -> (Data.Vector.Fusion.Bundle.Size.Size
        -> Data.Vector.Fusion.Bundle.Size.Size)
    -> Data.Vector.Fusion.Bundle.Size.Size
    -> Data.Vector.Fusion.Bundle.Size.Size
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><C(S),1*C1(U)><S,1*U>,
     Unfolding: (\ (ds :: Data.Vector.Fusion.Bundle.Size.Size)
                   (ds1 :: Data.Vector.Fusion.Bundle.Size.Size
                           -> Data.Vector.Fusion.Bundle.Size.Size)[OneShot]
                   (v :: Data.Vector.Fusion.Bundle.Size.Size)[OneShot] ->
                 case v of z { DEFAULT ->
                 ds1
                   (case z of wild {
                      Data.Vector.Fusion.Bundle.Size.Exact m
                      -> case ds of wild1 {
                           Data.Vector.Fusion.Bundle.Size.Exact n
                           -> Data.Vector.Fusion.Bundle.Size.Exact
                                (GHC.Classes.$fOrdInt_$cmin m n)
                           Data.Vector.Fusion.Bundle.Size.Max n
                           -> Data.Vector.Fusion.Bundle.Size.Max
                                (GHC.Classes.$fOrdInt_$cmin m n)
                           Data.Vector.Fusion.Bundle.Size.Unknown
                           -> Data.Vector.Fusion.Bundle.Size.Max m }
                      Data.Vector.Fusion.Bundle.Size.Max m
                      -> case ds of wild1 {
                           Data.Vector.Fusion.Bundle.Size.Exact n
                           -> Data.Vector.Fusion.Bundle.Size.Max
                                (GHC.Classes.$fOrdInt_$cmin m n)
                           Data.Vector.Fusion.Bundle.Size.Max n
                           -> Data.Vector.Fusion.Bundle.Size.Max
                                (GHC.Classes.$fOrdInt_$cmin m n)
                           Data.Vector.Fusion.Bundle.Size.Unknown -> wild }
                      Data.Vector.Fusion.Bundle.Size.Unknown
                      -> case ds of wild1 {
                           Data.Vector.Fusion.Bundle.Size.Exact n
                           -> Data.Vector.Fusion.Bundle.Size.Max n
                           Data.Vector.Fusion.Bundle.Size.Max n -> wild1
                           Data.Vector.Fusion.Bundle.Size.Unknown
                           -> Data.Vector.Fusion.Bundle.Size.Unknown } }) }) -}
d91ffd59dc23fc5f211cc73f8816039c
  izipWith3 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d) =>
    (GHC.Types.Int -> a -> b -> c -> d)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
  {- Arity: 8,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(U))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (8, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox3 { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> b -> c -> d)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyd s) d
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyd
                        @ d
                        $dReifies
                        $d(%,,,%)3
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWith3M
                         @ Data.Vector.Fusion.Util.Id
                         @ (GHC.Types.Int, a)
                         @ b
                         @ c
                         @ d
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: (GHC.Types.Int, a))
                            (b1 :: b)[OneShot]
                            (c1 :: c)[OneShot] ->
                          f (case a1 of wild3 { (,) x ds -> x })
                            (case a1 of wild3 { (,) ds y -> y })
                            b1
                            c1)
                           `cast`
                         (<(GHC.Types.Int, a)>_R
                          ->_R <b>_R
                          ->_R <c>_R
                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <d>_R))
                         (Data.Vector.Fusion.Stream.Monadic.indexed
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            Data.Vector.Fusion.Util.$fMonadId
                            ds1)
                         ds7
                         ds11 of wild3 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyd s)
                     @ d
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyd s)
                        @ d
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyd s)
                           @ d
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ d
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyd s) d)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 d>_R) of wild4 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyd s) d)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyd s)
                                         @ d
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyd s) d) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyd s))
                                                           d
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyd s)
                                                @ d
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyd s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     d) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyd s))
                                            @ d
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyd s) d)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyd s) d) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyd s) d)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyd s d))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1 ds4 (c1 ds10 (c1 ds14 n))) of wild4 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyd>_P <s>_P <d>_N) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyd d>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyd d)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyd d)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } } }) -}
75ed8eea0600c1fc475f314c32471342
  izipWith4 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e) =>
    (GHC.Types.Int -> a -> b -> c -> d -> e)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
  {- Arity: 10,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(C1(U)))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=5),
     Unfolding: InlineRule (10, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   @ tye :: Foreign.R.Type.SEXPTYPE
                   @ e
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tye :: *)
                              Data.Type.Equality.~
                              (e :: *))
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox4 { DEFAULT ->
                 \ (f :: GHC.Types.Int -> a -> b -> c -> d -> e)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c)
                   (ds :: Data.Vector.SEXP.Vector s tyd d) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tye s) e
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tye
                        @ e
                        $dReifies
                        $d(%,,,%)4
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyd s)
                         @ d
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyd
                            @ d
                            $dReifies
                            $d(%,,,%)3)
                         ds
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyd>_P
                                   <s>_P) <d>_N) of wild3 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds15 ds16 ds17 ds18 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ ((GHC.Types.Int, a), b)
                         @ (c, d)
                         @ e
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (ds19 :: ((GHC.Types.Int, a), b)) (ds20 :: (c, d))[OneShot] ->
                          case ds19 of wild4 { (,) a1 b1 ->
                          case ds20 of wild5 { (,) c1 d1 ->
                          (f (case a1 of wild6 { (,) x ds21 -> x })
                             (case a1 of wild6 { (,) ds21 y -> y })
                             b1
                             c1
                             d1)
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <e>_R)) } })
                         (Data.Vector.Fusion.Stream.Monadic.zipWithM
                            @ Data.Vector.Fusion.Util.Id
                            @ (GHC.Types.Int, a)
                            @ b
                            @ ((GHC.Types.Int, a), b)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,) @ (GHC.Types.Int, a) @ b)
                              `cast`
                            (<(GHC.Types.Int, a)>_R
                             ->_R <b>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                           <((GHC.Types.Int, a), b)>_R))
                            (Data.Vector.Fusion.Stream.Monadic.indexed
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               Data.Vector.Fusion.Util.$fMonadId
                               ds1)
                            ds7)
                         (Data.Vector.Fusion.Stream.Monadic.zipWithM
                            @ Data.Vector.Fusion.Util.Id
                            @ c
                            @ d
                            @ (c, d)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,) @ c @ d)
                              `cast`
                            (<c>_R
                             ->_R <d>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(c, d)>_R))
                            ds11
                            ds15) of wild4 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tye s)
                     @ e
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tye s)
                        @ e
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tye s)
                           @ e
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ e
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tye s) e)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 e>_R) of wild5 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tye s) e)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tye s)
                                         @ e
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tye s) e) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tye s))
                                                           e
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tye s)
                                                @ e
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tye s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     e) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tye s))
                                            @ e
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tye s) e)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tye s) e) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tye s) e)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tye s e))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1 ds4 (c1 ds10 (c1 ds14 (c1 ds18 n)))) of wild5 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tye>_P <s>_P <e>_N) } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tye e>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tye e)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tye e)))
                   (\ (ds1 :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds3
                           eta1 of wild { Unit# ds4 ->
                    (# ds4,
                       ds2
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } } } }) -}
8f0968b97afa752625a28073de7d96bd
  izipWith5 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f) =>
    (GHC.Types.Int -> a -> b -> c -> d -> e -> f)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
  {- Arity: 12,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(C1(C1(U))))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=6),
     Unfolding: InlineRule (12, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   @ tye :: Foreign.R.Type.SEXPTYPE
                   @ e
                   @ tyf :: Foreign.R.Type.SEXPTYPE
                   @ f
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyf :: *)
                              Data.Type.Equality.~
                              (f :: *))
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tye :: *)
                              Data.Type.Equality.~
                              (e :: *))
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox5 { DEFAULT ->
                 \ (f1 :: GHC.Types.Int -> a -> b -> c -> d -> e -> f)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c)
                   (ds :: Data.Vector.SEXP.Vector s tyd d)
                   (es :: Data.Vector.SEXP.Vector s tye e) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyf s) f
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyf
                        @ f
                        $dReifies
                        $d(%,,,%)5
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyd s)
                         @ d
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyd
                            @ d
                            $dReifies
                            $d(%,,,%)3)
                         ds
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyd>_P
                                   <s>_P) <d>_N) of wild3 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds15 ds16 ds17 ds18 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tye s)
                         @ e
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tye
                            @ e
                            $dReifies
                            $d(%,,,%)4)
                         es
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tye>_P
                                   <s>_P) <e>_N) of wild4 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds19 ds20 ds21 ds22 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ ((GHC.Types.Int, a), b, c)
                         @ (d, e)
                         @ f
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (ds23 :: ((GHC.Types.Int, a), b, c))
                            (ds24 :: (d, e))[OneShot] ->
                          case ds23 of wild5 { (,,) a1 b1 c1 ->
                          case ds24 of wild6 { (,) d1 e1 ->
                          (f1
                             (case a1 of wild7 { (,) x ds25 -> x })
                             (case a1 of wild7 { (,) ds25 y -> y })
                             b1
                             c1
                             d1
                             e1)
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <f>_R)) } })
                         (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                            @ Data.Vector.Fusion.Util.Id
                            @ (GHC.Types.Int, a)
                            @ b
                            @ c
                            @ ((GHC.Types.Int, a), b, c)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,,) @ (GHC.Types.Int, a) @ b @ c)
                              `cast`
                            (<(GHC.Types.Int, a)>_R
                             ->_R <b>_R
                             ->_R <c>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                           <((GHC.Types.Int, a), b, c)>_R))
                            (Data.Vector.Fusion.Stream.Monadic.indexed
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               Data.Vector.Fusion.Util.$fMonadId
                               ds1)
                            ds7
                            ds11)
                         (Data.Vector.Fusion.Stream.Monadic.zipWithM
                            @ Data.Vector.Fusion.Util.Id
                            @ d
                            @ e
                            @ (d, e)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,) @ d @ e)
                              `cast`
                            (<d>_R
                             ->_R <e>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(d, e)>_R))
                            ds15
                            ds19) of wild5 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyf s)
                     @ f
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyf s)
                        @ f
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyf s)
                           @ f
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ f
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyf s) f)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 f>_R) of wild6 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyf s) f)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyf s)
                                         @ f
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyf s) f) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyf s))
                                                           f
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyf s)
                                                @ f
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyf s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     f) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyf s))
                                            @ f
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyf s) f)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyf s) f) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyf s) f)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyf s f))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1 ds4 (c1 ds10 (c1 ds14 (c1 ds18 (c1 ds22 n))))) of wild6 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyf>_P <s>_P <f>_N) } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyf f>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyf f)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyf f)))
                   (\ (ds1 :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds3
                           eta1 of wild { Unit# ds4 ->
                    (# ds4,
                       ds2
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } } } } }) -}
9208b268b84ab7bae565a6f3cbd1b5a3
  izipWith6 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f,
     Data.Vector.SEXP.Base.VECTOR s tyg g) =>
    (GHC.Types.Int -> a -> b -> c -> d -> e -> f -> g)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
    -> Data.Vector.SEXP.Vector s tyg g
  {- Arity: 14,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(C1(C1(C1(U)))))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=7),
     Unfolding: InlineRule (14, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   @ tye :: Foreign.R.Type.SEXPTYPE
                   @ e
                   @ tyf :: Foreign.R.Type.SEXPTYPE
                   @ f
                   @ tyg :: Foreign.R.Type.SEXPTYPE
                   @ g
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f)
                   ($d(%,,,%)6 :: Data.Vector.SEXP.Base.VECTOR s tyg g) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyg)
                        @ g
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable g)
                           @ (Foreign.R.Type.IsVector tyg)
                           @ (Data.Singletons.SingI tyg)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyg :: *)
                              Data.Type.Equality.~
                              (g :: *))
                           $d(%,,,%)6)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyg>_N <g>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyf :: *)
                              Data.Type.Equality.~
                              (f :: *))
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tye :: *)
                              Data.Type.Equality.~
                              (e :: *))
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox5 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox6 { DEFAULT ->
                 \ (f1 :: GHC.Types.Int -> a -> b -> c -> d -> e -> f -> g)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c)
                   (ds :: Data.Vector.SEXP.Vector s tyd d)
                   (es :: Data.Vector.SEXP.Vector s tye e)
                   (fs :: Data.Vector.SEXP.Vector s tyf f) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyg s) g
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyg
                        @ g
                        $dReifies
                        $d(%,,,%)6
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyd s)
                         @ d
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyd
                            @ d
                            $dReifies
                            $d(%,,,%)3)
                         ds
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyd>_P
                                   <s>_P) <d>_N) of wild3 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds15 ds16 ds17 ds18 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tye s)
                         @ e
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tye
                            @ e
                            $dReifies
                            $d(%,,,%)4)
                         es
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tye>_P
                                   <s>_P) <e>_N) of wild4 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds19 ds20 ds21 ds22 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyf s)
                         @ f
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyf
                            @ f
                            $dReifies
                            $d(%,,,%)5)
                         fs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyf>_P
                                   <s>_P) <f>_N) of wild5 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds23 ds24 ds25 ds26 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ ((GHC.Types.Int, a), b, c)
                         @ (d, e, f)
                         @ g
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (ds27 :: ((GHC.Types.Int, a), b, c))
                            (ds28 :: (d, e, f))[OneShot] ->
                          case ds27 of wild6 { (,,) a1 b1 c1 ->
                          case ds28 of wild7 { (,,) d1 e1 f2 ->
                          (f1
                             (case a1 of wild8 { (,) x ds29 -> x })
                             (case a1 of wild8 { (,) ds29 y -> y })
                             b1
                             c1
                             d1
                             e1
                             f2)
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <g>_R)) } })
                         (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                            @ Data.Vector.Fusion.Util.Id
                            @ (GHC.Types.Int, a)
                            @ b
                            @ c
                            @ ((GHC.Types.Int, a), b, c)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,,) @ (GHC.Types.Int, a) @ b @ c)
                              `cast`
                            (<(GHC.Types.Int, a)>_R
                             ->_R <b>_R
                             ->_R <c>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                           <((GHC.Types.Int, a), b, c)>_R))
                            (Data.Vector.Fusion.Stream.Monadic.indexed
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               Data.Vector.Fusion.Util.$fMonadId
                               ds1)
                            ds7
                            ds11)
                         (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                            @ Data.Vector.Fusion.Util.Id
                            @ d
                            @ e
                            @ f
                            @ (d, e, f)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,,) @ d @ e @ f)
                              `cast`
                            (<d>_R
                             ->_R <e>_R
                             ->_R <f>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(d, e, f)>_R))
                            ds15
                            ds19
                            ds23) of wild6 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyg s)
                     @ g
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyg s)
                        @ g
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyg s)
                           @ g
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ g
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyg s) g)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 g>_R) of wild7 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyg s) g)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyg s)
                                         @ g
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyg s) g) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyg s))
                                                           g
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyg s)
                                                @ g
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyg s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     g) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyg s))
                                            @ g
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyg s) g)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyg s) g) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyg s) g)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyg s g))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1
                                      ds4
                                      (c1
                                         ds10
                                         (c1 ds14 (c1 ds18 (c1 ds22 (c1 ds26 n)))))) of wild7 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyg>_P <s>_P <g>_N) } } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyg g>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyg g)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyg g)))
                   (\ (ds1 :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds3
                           eta1 of wild { Unit# ds4 ->
                    (# ds4,
                       ds2
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy
                      @ GHC.Types.Any
                      @ GHC.Types.Any) } } } } } } }) -}
450a98913550b79499fd466cc4f56c3d
  last ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.last
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
0f6e3e93c0a53e6e2f438996d2c46d99
  lastM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ m :: * -> *
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.lastM
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    @ m
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    $dMonad
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
b8908ba507c0de57d580d11eced256e0
  length ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LLLS),1*U(A,A,A,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.length
                    @ Data.Vector.Fusion.Util.Id
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    Data.Vector.Fusion.Util.$fMonadId
                    (Data.Vector.Fusion.Bundle.Monadic.fromVector
                       @ Data.Vector.Fusion.Util.Id
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       Data.Vector.Fusion.Util.$fMonadId
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               s)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
bebaaafea4dcc85ae864b9e5e0c62fc6
  map ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ b
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.map @ m @ a @ b $dMonad f)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                                `cast`
                              (Data.Vector.Generic.Base.Vector
                                 <Data.Vector.SEXP.W s1 ty s>_N (Trans (Sym cobox) cobox1))_R
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
f5726a13fcc565521b1713638ee8b228
  mapM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> m b)
    -> Data.Vector.SEXP.Vector s ty a
    -> m (Data.Vector.SEXP.Vector s ty b)
  {- Arity: 5,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(U)><L,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (5, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (f :: a -> m b) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  GHC.Base.fmap
                    @ m
                    $dFunctor
                    @ (Data.Vector.SEXP.W s1 ty s b)
                    @ (Data.Vector.SEXP.Vector s ty b)
                    (Data.Vector.SEXP.filterM1 @ s1 @ ty @ s @ b)
                      `cast`
                    (<Data.Vector.SEXP.W s1 ty s b>_R
                     ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <b>_N)
                    (Data.Vector.Generic.unstreamM
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ b
                       @ (Data.Vector.SEXP.W s1 ty s)
                       $dMonad
                       $dVector
                       (Data.Vector.Fusion.Bundle.Monadic.mapM
                          @ m
                          @ a
                          @ b
                          @ (Data.Vector.SEXP.W s1 ty s)
                          $dMonad
                          f
                          (Data.Vector.Fusion.Bundle.lift
                             @ m
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             $dMonad
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                $dVector
                                  `cast`
                                (Data.Vector.Generic.Base.Vector
                                   <Data.Vector.SEXP.W s1 ty s>_N (Trans (Sym cobox) cobox1))_R
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <m (Data.Vector.SEXP.Vector s ty b)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m (Data.Vector.SEXP.Vector
                                                          s ty b))) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> m (Data.Vector.SEXP.Vector
                                                                             s ty b))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
bb473d501697dec888c6fbf057ff5511
  mapM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> m b) -> Data.Vector.SEXP.Vector s ty a -> m ()
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> m b) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.mapM_
                    @ m
                    @ a
                    @ b
                    @ (Data.Vector.SEXP.W s1 ty s)
                    $dMonad
                    f
                    (Data.Vector.Fusion.Bundle.lift
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       $dMonad
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
9238aa4a2e8d4ffc4e50ac88913ae746
  maxIndex ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U(A,C(C1(U)),A,A,A,A,A,A)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    cmpr :: a -> a -> GHC.Types.Ordering
                    = GHC.Classes.compare @ a $dOrd
                  } in
                  case (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                          @ Data.Vector.Fusion.Util.Id
                          @ (GHC.Types.Int, a)
                          @ (Data.Vector.SEXP.W s1 ty s)
                          Data.Vector.Fusion.Util.$fMonadId
                          (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                           case a1 of wild { (,) i x ->
                           case b of wild1 { (,) j y ->
                           case i of i1 { GHC.Types.I# ipv ->
                           case j of j1 { GHC.Types.I# ipv1 ->
                           case cmpr x y of wild2 {
                             DEFAULT -> (i1, x) GHC.Types.LT -> (j1, y) } } } } })
                            `cast`
                          (<(GHC.Types.Int, a)>_R
                           ->_R <(GHC.Types.Int, a)>_R
                           ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(GHC.Types.Int, a)>_R))
                          (Data.Vector.Fusion.Bundle.Monadic.indexed
                             @ Data.Vector.Fusion.Util.Id
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             Data.Vector.Fusion.Util.$fMonadId
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0]
                            <(GHC.Types.Int, a)>_R) of wild { (,) x1 ds1 ->
                  x1 })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Int) ((GHC.Types.Any
                                                                     -> Control.Monad.R.Internal.AcquireIO
                                                                          s)
                                                                    -> Data.Proxy.Proxy
                                                                         GHC.Types.Any
                                                                    -> GHC.Types.Int)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
255c9ed74f5b32d5cc20f9a59b1f99e8
  maxIndexBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> GHC.Types.Ordering)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                          @ Data.Vector.Fusion.Util.Id
                          @ (GHC.Types.Int, a)
                          @ (Data.Vector.SEXP.W s1 ty s)
                          Data.Vector.Fusion.Util.$fMonadId
                          (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                           case a1 of wild { (,) i x ->
                           case b of wild1 { (,) j y ->
                           case i of i1 { GHC.Types.I# ipv ->
                           case j of j1 { GHC.Types.I# ipv1 ->
                           case f x y of wild2 {
                             DEFAULT -> (i1, x) GHC.Types.LT -> (j1, y) } } } } })
                            `cast`
                          (<(GHC.Types.Int, a)>_R
                           ->_R <(GHC.Types.Int, a)>_R
                           ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(GHC.Types.Int, a)>_R))
                          (Data.Vector.Fusion.Bundle.Monadic.indexed
                             @ Data.Vector.Fusion.Util.Id
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             Data.Vector.Fusion.Util.$fMonadId
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0]
                            <(GHC.Types.Int, a)>_R) of wild { (,) x1 ds1 ->
                  x1 })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Int) ((GHC.Types.Any
                                                                     -> Control.Monad.R.Internal.AcquireIO
                                                                          s)
                                                                    -> Data.Proxy.Proxy
                                                                         GHC.Types.Any
                                                                    -> GHC.Types.Int)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
5444cfc86b66447602f52a6fb506a53b
  maximum ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U(A,A,A,A,A,A,C(C1(U)),A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: a -> a -> a = GHC.Classes.max @ a $dOrd
                  } in
                  (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                     @ Data.Vector.Fusion.Util.Id
                     @ a
                     @ (Data.Vector.SEXP.W s1 ty s)
                     Data.Vector.Fusion.Util.$fMonadId
                     (\ (a1 :: a) (b :: a)[OneShot] -> f a1 b)
                       `cast`
                     (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                     (Data.Vector.Generic.stream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                        v `cast`
                        (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                    `cast`
                  (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
a69efea0e42a7ca14ee9ddbc0439f208
  maximumBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> GHC.Types.Ordering)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b :: a)[OneShot] ->
                     case f a1 b of wild { DEFAULT -> a1 GHC.Types.LT -> b })
                      `cast`
                    (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e555e72e5974c08f446d5dcf2d0fd4d8
  minIndex ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U(A,C(C1(U)),A,A,A,A,A,A)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    cmpr :: a -> a -> GHC.Types.Ordering
                    = GHC.Classes.compare @ a $dOrd
                  } in
                  case (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                          @ Data.Vector.Fusion.Util.Id
                          @ (GHC.Types.Int, a)
                          @ (Data.Vector.SEXP.W s1 ty s)
                          Data.Vector.Fusion.Util.$fMonadId
                          (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                           case a1 of wild { (,) i x ->
                           case b of wild1 { (,) j y ->
                           case i of i1 { GHC.Types.I# ipv ->
                           case j of j1 { GHC.Types.I# ipv1 ->
                           case cmpr x y of wild2 {
                             DEFAULT -> (i1, x) GHC.Types.GT -> (j1, y) } } } } })
                            `cast`
                          (<(GHC.Types.Int, a)>_R
                           ->_R <(GHC.Types.Int, a)>_R
                           ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(GHC.Types.Int, a)>_R))
                          (Data.Vector.Fusion.Bundle.Monadic.indexed
                             @ Data.Vector.Fusion.Util.Id
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             Data.Vector.Fusion.Util.$fMonadId
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0]
                            <(GHC.Types.Int, a)>_R) of wild { (,) x1 ds1 ->
                  x1 })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Int) ((GHC.Types.Any
                                                                     -> Control.Monad.R.Internal.AcquireIO
                                                                          s)
                                                                    -> Data.Proxy.Proxy
                                                                         GHC.Types.Any
                                                                    -> GHC.Types.Int)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e6741b71edabbfcbe3e90ffe96004d4a
  minIndexBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> GHC.Types.Ordering)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                          @ Data.Vector.Fusion.Util.Id
                          @ (GHC.Types.Int, a)
                          @ (Data.Vector.SEXP.W s1 ty s)
                          Data.Vector.Fusion.Util.$fMonadId
                          (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                           case a1 of wild { (,) i x ->
                           case b of wild1 { (,) j y ->
                           case i of i1 { GHC.Types.I# ipv ->
                           case j of j1 { GHC.Types.I# ipv1 ->
                           case f x y of wild2 {
                             DEFAULT -> (i1, x) GHC.Types.GT -> (j1, y) } } } } })
                            `cast`
                          (<(GHC.Types.Int, a)>_R
                           ->_R <(GHC.Types.Int, a)>_R
                           ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(GHC.Types.Int, a)>_R))
                          (Data.Vector.Fusion.Bundle.Monadic.indexed
                             @ Data.Vector.Fusion.Util.Id
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             Data.Vector.Fusion.Util.$fMonadId
                             (Data.Vector.Generic.stream
                                @ (Data.Vector.SEXP.W s1 ty s)
                                @ a
                                (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                                v `cast`
                                (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0]
                            <(GHC.Types.Int, a)>_R) of wild { (,) x1 ds1 ->
                  x1 })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Int) ((GHC.Types.Any
                                                                     -> Control.Monad.R.Internal.AcquireIO
                                                                          s)
                                                                    -> Data.Proxy.Proxy
                                                                         GHC.Types.Any
                                                                    -> GHC.Types.Int)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
001002f6315a704db804905f21baf325
  minimum ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U(A,A,A,A,A,A,A,C(C1(U)))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: a -> a -> a = GHC.Classes.min @ a $dOrd
                  } in
                  (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                     @ Data.Vector.Fusion.Util.Id
                     @ a
                     @ (Data.Vector.SEXP.W s1 ty s)
                     Data.Vector.Fusion.Util.$fMonadId
                     (\ (a1 :: a) (b :: a)[OneShot] -> f a1 b)
                       `cast`
                     (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                     (Data.Vector.Generic.stream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                        v `cast`
                        (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                    `cast`
                  (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
8ce320f9ffabfdee555dfd19ef275aaa
  minimumBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> GHC.Types.Ordering)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Data.Vector.SEXP.W s1 ty s)
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a) (b :: a)[OneShot] ->
                     case f a1 b of wild { DEFAULT -> a1 GHC.Types.GT -> b })
                      `cast`
                    (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <a>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         a) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
cceaa539b74b0b9dfdfd738b768a6d6b
  notElem ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Eq a) =>
    a -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U(C(C1(U)),A)><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (a1 :: a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 ty s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                         v `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <ty>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds ds1 ds2 ds3 ->
                  case (Data.Vector.Fusion.Stream.Monadic.elem
                          @ Data.Vector.Fusion.Util.Id
                          @ a
                          Data.Vector.Fusion.Util.$fMonadId
                          $dEq
                          a1
                          ds)
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild1 {
                    GHC.Types.False -> GHC.Types.True
                    GHC.Types.True -> GHC.Types.False } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    GHC.Types.Bool) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> GHC.Types.Bool)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e7bf26a2b2bf465c72fa9ff02aaca87c
  null ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LLLS),1*U(A,A,A,1*U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Fusion.Bundle.Monadic.null
                    @ Data.Vector.Fusion.Util.Id
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    Data.Vector.Fusion.Util.$fMonadId
                    (Data.Vector.Generic.stream
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       v `cast`
                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Bool>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         GHC.Types.Bool) ((GHC.Types.Any
                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                s)
                                                                          -> Data.Proxy.Proxy
                                                                               GHC.Types.Any
                                                                          -> GHC.Types.Bool))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
1d0acc8f72fd840612f493ef5b706d6f
  partition ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(U,U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case Data.Vector.Generic.partition_stream
                         @ (Data.Vector.SEXP.W s1 ty s)
                         @ a
                         @ (Data.Vector.SEXP.W s1 ty s)
                         $dVector
                         f
                         (Data.Vector.Generic.stream
                            @ (Data.Vector.SEXP.W s1 ty s)
                            @ a
                            $dVector
                            v `cast`
                            (Sym (Data.Vector.SEXP.N:W[0]
                                      <s1>_P <ty>_P <s>_P) <a>_N)) of wild { (,) a1 b ->
                  (a1 `cast` (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N),
                   b `cast` (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <(Data.Vector.SEXP.Vector s ty a,
                                  Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector s ty a,
                                                     Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> (Data.Vector.SEXP.Vector s ty a,
                                                                     Data.Vector.SEXP.Vector
                                                                       s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
d4f84d93e070ef0d5cde2db1c3b5f1ec
  postscanl ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                       `cast`
                     (Data.Vector.Generic.Base.Vector
                        <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                          `cast`
                        (Data.Vector.Generic.Base.Vector
                           <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                        (Data.Vector.Fusion.Bundle.inplace
                           @ b
                           @ a
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.postscanlM
                              @ m
                              @ a
                              @ b
                              $dMonad
                              (\ (a1 :: a) (b1 :: b)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ a (f a1 b1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ b
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
401151b154104ced071eb3c71bafca31
  postscanl' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                       `cast`
                     (Data.Vector.Generic.Base.Vector
                        <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                          `cast`
                        (Data.Vector.Generic.Base.Vector
                           <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                        (Data.Vector.Fusion.Bundle.inplace
                           @ b
                           @ a
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.postscanlM'
                              @ m
                              @ a
                              @ b
                              $dMonad
                              (\ (a1 :: a) (b1 :: b)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ a (f a1 b1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ b
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
17ab6ded8c07492cf423f3c4ddd820b9
  postscanr ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ b
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.postscanlM
                              @ m
                              @ b
                              @ a
                              $dMonad
                              (\ (a1 :: b) (b1 :: a)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ b (f b1 a1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.streamR
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              $dVector
                                `cast`
                              (Data.Vector.Generic.Base.Vector
                                 <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
1454facbc29f5911aab8bf14cc5bcf25
  postscanr' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ b
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.postscanlM'
                              @ m
                              @ b
                              @ a
                              $dMonad
                              (\ (a1 :: b) (b1 :: a)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ b (f b1 a1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.streamR
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              $dVector
                                `cast`
                              (Data.Vector.Generic.Base.Vector
                                 <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
1643d759868c175b2636497090a08285
  prescanl ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                       `cast`
                     (Data.Vector.Generic.Base.Vector
                        <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                          `cast`
                        (Data.Vector.Generic.Base.Vector
                           <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                        (Data.Vector.Fusion.Bundle.inplace
                           @ b
                           @ a
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.prescanlM
                              @ m
                              @ a
                              @ b
                              $dMonad
                              (\ (a1 :: a) (b1 :: b)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ a (f a1 b1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ b
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
ed56d8de6a9619f3566fdbe28319e746
  prescanl' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                       `cast`
                     (Data.Vector.Generic.Base.Vector
                        <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                          `cast`
                        (Data.Vector.Generic.Base.Vector
                           <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                        (Data.Vector.Fusion.Bundle.inplace
                           @ b
                           @ a
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.prescanlM'
                              @ m
                              @ a
                              @ b
                              $dMonad
                              (\ (a1 :: a) (b1 :: b)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ a (f a1 b1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ b
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
0d400a4a73feac9bd47cb9c2479f5cd7
  prescanr ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ b
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.prescanlM
                              @ m
                              @ b
                              @ a
                              $dMonad
                              (\ (a1 :: b) (b1 :: a)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ b (f b1 a1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.streamR
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              $dVector
                                `cast`
                              (Data.Vector.Generic.Base.Vector
                                 <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
3bcdb5f3bc2d6f633283eccce536fa71
  prescanr' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ b
                           @ (Data.Vector.SEXP.W s2 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.prescanlM'
                              @ m
                              @ b
                              @ a
                              $dMonad
                              (\ (a1 :: b) (b1 :: a)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ b (f b1 a1))
                              s1)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.streamR
                              @ (Data.Vector.SEXP.W s2 ty s)
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              $dVector
                                `cast`
                              (Data.Vector.Generic.Base.Vector
                                 <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
ee477b086a0a48858e4390375a0f43aa
  product ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLLLLC(S)),U(A,A,C(C1(U)),A,A,A,1*C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: a -> a -> a = GHC.Num.* @ a $dNum
                  } in
                  (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                     @ Data.Vector.Fusion.Util.Id
                     @ a
                     @ a
                     @ (Data.Vector.SEXP.W s1 ty s)
                     Data.Vector.Fusion.Util.$fMonadId
                     (\ (a1 :: a) (b1 :: a)[OneShot] -> f a1 b1)
                       `cast`
                     (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                     (GHC.Num.fromInteger @ a $dNum 1)
                     (Data.Vector.Generic.stream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                        v `cast`
                        (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                    `cast`
                  (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
34b7efaeece55fb994650f0c089d4530
  replicate ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (v :: a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox1 { DEFAULT ->
                  case v of v1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.replicate
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           i
                           v1)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
eb4b6a65044fedb715955ba32ada16ef
  replicateM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int -> m a -> m (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 4,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,U(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (n :: GHC.Types.Int) (f :: m a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  GHC.Base.fmap
                    @ m
                    $dFunctor
                    @ (Data.Vector.SEXP.W s1 ty s a)
                    @ (Data.Vector.SEXP.Vector s ty a)
                    (\ (v :: Data.Vector.SEXP.W s1 ty s a) -> v)
                      `cast`
                    (<Data.Vector.SEXP.W s1 ty s a>_R
                     ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                    (Data.Vector.Generic.unstreamM
                       @ m
                       @ (Data.Vector.SEXP.W s1 ty s)
                       @ a
                       @ GHC.Types.Any
                       $dMonad
                       (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                       (Data.Vector.Fusion.Bundle.Monadic.replicateM
                          @ m
                          @ a
                          @ GHC.Types.Any
                          $dMonad
                          n
                          f)))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <m (Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m (Data.Vector.SEXP.Vector
                                                          s ty a))) ((GHC.Types.Any
                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                           s)
                                                                     -> Data.Proxy.Proxy
                                                                          GHC.Types.Any
                                                                     -> m (Data.Vector.SEXP.Vector
                                                                             s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
89e9ac5991f5da4dd301c58832e38d17
  reverse ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Generic.streamR
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           $dVector
                           v `cast`
                           (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
6665255af71e8c8b13c026004de46b84
  scanl ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                       `cast`
                     (Data.Vector.Generic.Base.Vector
                        <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                          `cast`
                        (Data.Vector.Generic.Base.Vector
                           <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Fusion.Bundle.Monadic.singleton
                              @ Data.Vector.Fusion.Util.Id
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              s1)
                           (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                              @ Data.Vector.Fusion.Util.Id
                              @ a
                              @ b
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              (\ (a1 :: a) (b1 :: b)[OneShot] -> f a1 b1)
                                `cast`
                              (<a>_R ->_R <b>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                              s1
                              (Data.Vector.Generic.stream
                                 @ (Data.Vector.SEXP.W s2 ty s)
                                 @ b
                                 $dVector
                                 v `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
4c2ab7921641f5b1a011eb2ee5b24b65
  scanl' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (s1 :: a)
                   (v :: Data.Vector.SEXP.Vector s ty b) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  case s1 of z1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ a
                     $dVector
                       `cast`
                     (Data.Vector.Generic.Base.Vector
                        <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ a
                        $dVector
                          `cast`
                        (Data.Vector.Generic.Base.Vector
                           <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Fusion.Bundle.Monadic.singleton
                              @ Data.Vector.Fusion.Util.Id
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              z1)
                           (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                              @ Data.Vector.Fusion.Util.Id
                              @ a
                              @ b
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              (\ (a1 :: a) (b1 :: b)[OneShot] -> f a1 b1)
                                `cast`
                              (<a>_R ->_R <b>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                              z1
                              (Data.Vector.Generic.stream
                                 @ (Data.Vector.SEXP.W s2 ty s)
                                 @ b
                                 $dVector
                                 v `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <b>_N))))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <a>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
6b4723ceb4dfe4319664d6296c4031a7
  scanl1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.scanl1 @ m @ a $dMonad f)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
7a13118fb5f405375aea6388572f3f08
  scanl1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.scanl1' @ m @ a $dMonad f)
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
f6dcf13f45e32cf564500dcaafb55dfd
  scanr ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           @ b
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Fusion.Bundle.Monadic.singleton
                              @ Data.Vector.Fusion.Util.Id
                              @ b
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              s1)
                           (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                              @ Data.Vector.Fusion.Util.Id
                              @ b
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              (\ (a1 :: b) (b1 :: a)[OneShot] -> f b1 a1)
                                `cast`
                              (<b>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                              s1
                              (Data.Vector.Generic.streamR
                                 @ (Data.Vector.SEXP.W s2 ty s)
                                 @ a
                                 @ (Data.Vector.SEXP.W s2 ty s)
                                 $dVector
                                   `cast`
                                 (Data.Vector.Generic.Base.Vector
                                    <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                                 v `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N))))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <b>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
15d32b6ce995fb3670e5a755b13fe3f5
  scanr' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> b)
                   (s1 :: b)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s2
                    ($dReifies :: Data.Reflection.Reifies
                                    s2 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s2)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s2 ty s) b
                    = Data.Vector.SEXP.$fVectorWa
                        @ s2
                        @ s
                        @ ty
                        @ b
                        $dReifies
                        $d(%,,,%)
                          `cast`
                        (GHC.Classes.(%,,,%)
                           (Foreign.Storable.Storable (Trans (Sym cobox1) cobox))_N
                           <(Data.Singletons.SingI ty,
                             ty
                             Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                        'Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw])>_N
                           <Data.Singletons.SingI ty>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              <Data.Vector.SEXP.Base.ElemRep s ty>_N
                              (Trans (Sym cobox1) cobox))_N)_R
                  } in
                  case s1 of z1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s2 ty s)
                     @ b
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s2 ty s)
                        @ b
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s2 ty s)
                           @ b
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Fusion.Bundle.Monadic.singleton
                              @ Data.Vector.Fusion.Util.Id
                              @ b
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              z1)
                           (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                              @ Data.Vector.Fusion.Util.Id
                              @ b
                              @ a
                              @ (Data.Vector.SEXP.W s2 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              (\ (a1 :: b) (b1 :: a)[OneShot] -> f b1 a1)
                                `cast`
                              (<b>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <b>_R))
                              z1
                              (Data.Vector.Generic.streamR
                                 @ (Data.Vector.SEXP.W s2 ty s)
                                 @ a
                                 @ (Data.Vector.SEXP.W s2 ty s)
                                 $dVector
                                   `cast`
                                 (Data.Vector.Generic.Base.Vector
                                    <Data.Vector.SEXP.W s2 ty s>_N (Trans (Sym cobox) cobox1))_R
                                 v `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P) <a>_N))))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s2>_P <ty>_P <s>_P <b>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty b)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty b)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
cc806c1b5d2bc54c3f1748a3740409d6
  scanr1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.scanl1M
                              @ m
                              @ a
                              $dMonad
                              (\ (x :: a) (y :: a)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ a (f y x)))
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.streamR
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              @ (Data.Vector.SEXP.W s1 ty s)
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
9a1d4a57412bbdcd92c224c083705852
  scanr1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> a -> a) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstreamR
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.inplace
                           @ a
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                            Data.Vector.Fusion.Stream.Monadic.scanl1M'
                              @ m
                              @ a
                              $dMonad
                              (\ (x :: a) (y :: a)[OneShot] ->
                               GHC.Base.return @ m $dMonad @ a (f y x)))
                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                           (Data.Vector.Generic.streamR
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              @ (Data.Vector.SEXP.W s1 ty s)
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
f5cf47f98fc43d48eedbf63d159b797d
  singleton ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (a1 :: a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox1 { DEFAULT ->
                  case a1 of v { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.singleton
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           v)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
7fdc6a8e32cb275fbd49aca17b6e581d
  slice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.slice
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    i
                    n
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
7ad260e74d484a76849af36699f2d302
  snoc ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS),1*U(U,U,U,U)><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (a1 :: a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case GHC.Types.HEq_sc
                         @ *
                         @ *
                         @ (Data.Vector.SEXP.Base.ElemRep s ty)
                         @ a
                         (GHC.Classes.$p4(%,,,%)
                            @ (Foreign.Storable.Storable a)
                            @ (Foreign.R.Type.IsVector ty)
                            @ (Data.Singletons.SingI ty)
                            @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                               Data.Type.Equality.~
                               (a :: *))
                            $d(%,,,%))
                           `cast`
                         (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                             s ty>_N <a>_N) of cobox1 { DEFAULT ->
                  case a1 of v1 { DEFAULT ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.++
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           Data.Vector.Fusion.Util.$fMonadId
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                           (Data.Vector.Fusion.Bundle.Monadic.singleton
                              @ Data.Vector.Fusion.Util.Id
                              @ a
                              @ (Data.Vector.SEXP.W s1 ty s)
                              Data.Vector.Fusion.Util.$fMonadId
                              v1))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
558aa70a5d9f6a0ab0766f44e2c8c1aa
  span ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),U(U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f1 :: Data.Vector.Generic.Base.Vector
                            (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case (Data.Vector.Fusion.Bundle.Monadic.findIndex
                          @ Data.Vector.Fusion.Util.Id
                          @ a
                          @ (Data.Vector.SEXP.W s1 ty s)
                          Data.Vector.Fusion.Util.$fMonadId
                          (\ (x :: a) ->
                           case f x of wild {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False })
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W s1 ty s)
                             @ a
                             f1
                             v `cast`
                             (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                         `cast`
                       (Data.Vector.Fusion.Util.N:Id[0]
                            <GHC.Base.Maybe GHC.Types.Int>_R) of wild {
                    GHC.Base.Nothing
                    -> (v,
                        (Data.Vector.Generic.new
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           f1
                           (Data.Vector.Generic.New.unstream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              f1
                              (Data.Vector.Fusion.Bundle.empty
                                 @ (Data.Vector.SEXP.W s1 ty s)
                                 @ a)))
                          `cast`
                        (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                    GHC.Base.Just i
                    -> ((Data.Vector.Generic.unsafeSlice
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           f1
                           (GHC.Types.I# 0#)
                           i
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                          `cast`
                        (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N),
                        (Data.Vector.Generic.unsafeSlice
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           f1
                           i
                           (case (Data.Vector.Fusion.Bundle.Monadic.length
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W s1 ty s)
                                    @ a
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W s1 ty s)
                                       @ a
                                       Data.Vector.Fusion.Util.$fMonadId
                                       f1
                                       v `cast`
                                       (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                                   `cast`
                                 (Data.Vector.Fusion.Util.N:Id[0]
                                      <GHC.Types.Int>_R) of wild1 { GHC.Types.I# x ->
                            case i of wild2 { GHC.Types.I# y ->
                            GHC.Types.I# (GHC.Prim.-# x y) } })
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                          `cast`
                        (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <(Data.Vector.SEXP.Vector s ty a,
                                  Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector s ty a,
                                                     Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> (Data.Vector.SEXP.Vector s ty a,
                                                                     Data.Vector.SEXP.Vector
                                                                       s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
e65d9e2d0ee6de20ab53c8dd961084a2
  splitAt ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,1*U(U)><L,U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case Data.Vector.Generic.splitAt
                         @ (Data.Vector.SEXP.W s1 ty s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                         i
                         v `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P <ty>_P <s>_P) <a>_N) of wild { (,) a1 b ->
                  (a1 `cast` (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N),
                   b `cast` (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <(Data.Vector.SEXP.Vector s ty a,
                                  Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector s ty a,
                                                     Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> (Data.Vector.SEXP.Vector s ty a,
                                                                     Data.Vector.SEXP.Vector
                                                                       s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
bee854c38354376ef4594ecc783acaa1
  sum ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLLLLC(S)),U(C(C1(U)),A,A,A,A,A,1*C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: a -> a -> a = GHC.Num.+ @ a $dNum
                  } in
                  (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                     @ Data.Vector.Fusion.Util.Id
                     @ a
                     @ a
                     @ (Data.Vector.SEXP.W s1 ty s)
                     Data.Vector.Fusion.Util.$fMonadId
                     (\ (a1 :: a) (b1 :: a)[OneShot] -> f a1 b1)
                       `cast`
                     (<a>_R ->_R <a>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                     (GHC.Num.fromInteger @ a $dNum 0)
                     (Data.Vector.Generic.stream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                        v `cast`
                        (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                    `cast`
                  (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
0740b273eb3611aae6421da541239c81
  tail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.tail
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
12809087dca99a1e8832e0812ddfb8b8
  take ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.take
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    i
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
35e0fd0fb240f42223986a6600f8131b
  takeWhile ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.takeWhileM
                           @ Data.Vector.Fusion.Util.Id
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           (\ (x :: a) -> f x)
                             `cast`
                           (<a>_R
                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                           (Data.Vector.Generic.stream
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              $dVector
                              v `cast`
                              (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
223f97aec7ce5461e258b93fde7c4bf8
  thaw ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),1*U(1*U,A),A,U(U))><L,U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (v1 :: Data.Vector.SEXP.Vector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      $dFunctor
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (Data.Vector.Generic.thaw
                         @ m
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                         @ a
                         $dPrimMonad
                         (Data.Vector.SEXP.$fVectorWa
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%))
                         v1
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P) <a>_N))
                        `cast`
                      (<m>_R (Data.Vector.SEXP.D:R:MutableW[0]
                                  <s>_N
                                  <ty>_N
                                  <Control.Monad.Primitive.PrimState
                                     m>_N <Control.Monad.Primitive.PrimState m>_N <a>_N))) }) -}
886b02a980dd10ef87ab9e845161ded6
  toByteString ::
    Data.Vector.SEXP.Vector s 'Foreign.R.Type.Char GHC.Word.Word8
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (w :: Data.Vector.SEXP.Vector
                           s 'Foreign.R.Type.Char GHC.Word.Word8) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        GHC.Prim.realWorld# of s' { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww4 0#) of wild {
                   GHC.Types.False
                   -> case Data.ByteString.packCString3 ww4 GHC.Prim.realWorld#
                      ret_ty Data.ByteString.Internal.ByteString
                      of {}
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ww4 0#) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.newPinnedByteArray#
                                  @ GHC.Prim.RealWorld
                                  ww4
                                  GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                           let {
                             ipv2 :: GHC.Prim.Addr#
                             = GHC.Prim.byteArrayContents#
                                 ipv1
                                   `cast`
                                 (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                               GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                           } in
                           case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                                 -> GHC.Prim.Addr#
                                                                 -> GHC.Prim.Word#
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       GHC.Prim.Addr# #)}
                                  ipv2
                                  (GHC.Prim.plusAddr# (GHC.Prim.plusAddr# ww1 40#) ww3)
                                  (GHC.Prim.int2Word# ww4)
                                  ipv of wild2 { (#,#) ds4 ds5 ->
                           let {
                             ipv3 :: GHC.ForeignPtr.ForeignPtrContents
                             = GHC.ForeignPtr.PlainPtr ipv1
                           } in
                           case GHC.Prim.touch#
                                  @ 'GHC.Types.LiftedRep
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  ipv3
                                  ds4 of s'1 { DEFAULT ->
                           Data.ByteString.Internal.PS ipv2 ipv3 0# ww4 } } }
                        GHC.Types.True
                        -> case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                           ret_ty Data.ByteString.Internal.ByteString
                           of {} } } } }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  toList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> [a]
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  GHC.Base.build
                    @ a
                    (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                     Data.Vector.Fusion.Bundle.toListFB
                       @ a
                       @ b
                       @ (Data.Vector.SEXP.W s1 ty s)
                       c
                       n
                       (Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W s1 ty s)
                          @ a
                          (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                          v `cast`
                          (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <[a]>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    [a]) ((GHC.Types.Any
                                                           -> Control.Monad.R.Internal.AcquireIO s)
                                                          -> Data.Proxy.Proxy GHC.Types.Any
                                                          -> [a])))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
45144a53d69700caab0267da0da2e899
  toSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Foreign.R.Internal.SEXP s ty
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><S(SLSS),1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w1 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Data.Vector.SEXP.$wtoSEXP @ s @ ty @ a w ww1 ww2 ww3 ww4 }) -}
89db6b8b39a587c28a1fdeb77939331d
  toString ::
    Data.Vector.SEXP.Vector s 'Foreign.R.Type.Char GHC.Word.Word8
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)> -}
3476d9bcd1360fdfad479ca1a02d99fb
  unW ::
    Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.Vector s ty a
  RecSel Left Data.Vector.SEXP.W
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.filterM1
                  `cast`
                (forall (t :: <*>_N) (ty :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <*>_N) (a :: <*>_N).
                 <Data.Vector.SEXP.W t ty s a>_R
                 ->_R Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P <a>_N) -}
57b43827cd9a6226f37f4001c4f37750
  unfoldr ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (b -> GHC.Base.Maybe (a, b)) -> b -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (g :: b -> GHC.Base.Maybe (a, b)) (a1 :: b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.unfoldr
                           @ Data.Vector.Fusion.Util.Id
                           @ b
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           g
                           a1)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
38f129bb458cb488a258b589c58fc7cc
  unfoldrN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (b -> GHC.Base.Maybe (a, b))
    -> b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(S),1*U(U)><L,C(U)><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (n :: GHC.Types.Int)
                   (g :: b -> GHC.Base.Maybe (a, b))
                   (a1 :: b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.unfoldrN
                           @ Data.Vector.Fusion.Util.Id
                           @ b
                           @ a
                           @ (Data.Vector.SEXP.W s1 ty s)
                           Data.Vector.Fusion.Util.$fMonadId
                           n
                           g
                           a1)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
aa5aec572c6ae72016ede5d1b6d585b3
  unsafeAccum ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> a)
    -> Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, b)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(U,U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> b -> a)
                   (v :: Data.Vector.SEXP.Vector s ty a)
                   (l :: [(GHC.Types.Int, b)]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.modifyWithBundle
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        @ GHC.Types.Any
                        @ (GHC.Types.Int, b)
                        (\ @ s2 ->
                         Data.Vector.Generic.Mutable.unsafeAccum
                           @ (GHC.ST.ST s2)
                           @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W s1 ty s))
                           @ a
                           @ b
                           @ GHC.Types.Any
                           (Control.Monad.Primitive.$fPrimMonadST @ s2)
                           (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                              @ s1
                              @ s
                              @ ty
                              @ a
                              $dReifies
                              $d(%,,,%))
                           f)
                          `cast`
                        (forall (s2 :: <*>_N).
                         (Data.Vector.Generic.Base.Mutable
                            <Data.Vector.SEXP.W s1 ty s>_N
                            (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N)
                            <a>_N)_R
                         ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                 Data.Vector.Fusion.Util.Id GHC.Types.Any (GHC.Types.Int, b)
                               -> GHC.ST.ST s2 ()>_R)
                        (Data.Vector.Generic.clone
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           $dVector
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                        (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                           @ Data.Vector.Fusion.Util.Id
                           @ (GHC.Types.Int, b)
                           @ GHC.Types.Any
                           Data.Vector.Fusion.Util.$fMonadId
                           Data.Vector.Fusion.Bundle.Size.Unknown
                           l)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
f98e440931ae9d63a12f8c13e033f29c
  unsafeCopy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,1*C1(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,A,A,A,A,A,A),A,A,1*U(1*U))><L,U(U,U,A)><L,U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 \ (m1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a)
                   (v2 :: Data.Vector.SEXP.Vector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ ()
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    case m1 of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                    case v2 of nt1 { Data.Vector.SEXP.Vector ipv3 ipv4 ipv5 ipv6 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ ((Data.Vector.SEXP.Base.ElemRep
                                    (Control.Monad.Primitive.PrimState m) ty :: *)
                                 Data.Type.Equality.~
                                 (a :: *))
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dStorable :: Foreign.Storable.Storable a
                      = GHC.Classes.$p1(%,,,%)
                          @ (Foreign.Storable.Storable a)
                          @ (Foreign.R.Type.IsVector ty)
                          @ (Data.Singletons.SingI ty)
                          @ ((Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty :: *)
                             Data.Type.Equality.~
                             (a :: *))
                          $d(%,,,%)
                    } in
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild2 { GHC.Types.I# y ->
                       case GHC.Prim.touch#
                              @ 'GHC.Types.LiftedRep
                              @ GHC.ForeignPtr.ForeignPtrContents
                              ipv4
                              GHC.Prim.realWorld# of s' { DEFAULT ->
                       case Data.Vector.SEXP.Mutable.Internal.$WMVector
                              @ GHC.Types.Any
                              @ ty
                              @ a
                              (GHC.Ptr.Ptr @ () ipv3)
                                `cast`
                              (Trans
                                   (GHC.Ptr.Ptr <(), Language.R.HExp.HExp GHC.Types.Any ty>)_R
                                   (Sym (Foreign.R.Internal.N:SEXP[0] <GHC.Types.Any>_P <ty>_P)))
                              (GHC.Int.I32# ipv5)
                              (GHC.Int.I32#
                                 ipv6) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.advancePtr1
                                 @ a) of wild1 { GHC.Types.I# y1 ->
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox2 { DEFAULT ->
                       case Foreign.Storable.sizeOf
                              @ a
                              $dStorable
                              (Foreign.Marshal.Array.copyArray1
                                 @ a) of wild3 { GHC.Types.I# y2 ->
                       case {__pkg_ccall base-4.10.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.Word#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv 40#)
                                 (GHC.Prim.*# ipv1 y))
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# dt 40#)
                                 (GHC.Prim.*# dt1 y1))
                              (GHC.Prim.int2Word# (GHC.Prim.*# ipv6 y2))
                              s1 of wild4 { (#,#) ds4 ds5 ->
                       (# ds4, GHC.Tuple.() #) } } } } } } })
                        `cast`
                      (Trans
                           ((GHC.Prim.State#
                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                            ->_R ((#,#)
                                    <'GHC.Types.TupleRep '[]>_R
                                    <'GHC.Types.LiftedRep>_R
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                    <()>_R)_R)
                           ((GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState
                                  (UnsafeCo nominal GHC.Types.IO m))_N)_R
                            ->_R ((#,#)
                                    <'GHC.Types.TupleRep '[]>_R
                                    <'GHC.Types.LiftedRep>_R
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState
                                          (UnsafeCo nominal GHC.Types.IO m))_N)_R
                                    <()>_R)_R)) } } }) }) -}
726b13822554db86a2b01544c7b01053
  unsafeDrop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    f :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.unsafeSlice
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     f
                     i
                     (case (Data.Vector.Fusion.Bundle.Monadic.length
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.SEXP.W s1 ty s)
                              @ a
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (Data.Vector.SEXP.W s1 ty s)
                                 @ a
                                 Data.Vector.Fusion.Util.$fMonadId
                                 f
                                 v `cast`
                                 (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0]
                                <GHC.Types.Int>_R) of wild { GHC.Types.I# x ->
                      case i of wild1 { GHC.Types.I# y ->
                      GHC.Types.I# (GHC.Prim.-# x y) } })
                     v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
a1f23055168b575df8307abe5571a8eb
  unsafeFreeze ::
    (Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a,
     Control.Monad.R.Class.MonadR m) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Vector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),1*C1(U)),A,C(C1(U)),U,C(C1(U)))><L,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   ($dMonadR :: Control.Monad.R.Class.MonadR m) ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (m1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Vector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      $dFunctor
                      @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Vector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.filterM1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dMonad :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case m1 of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                       let {
                         off :: GHC.Int.Int32 = GHC.Int.I32# dt1
                       } in
                       let {
                         len :: GHC.Int.Int32 = GHC.Int.I32# dt2
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (Data.Vector.SEXP.ForeignSEXP ty)
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                         (Data.Vector.SEXP.foreignSEXP
                            @ m
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            $dPrimMonad
                            (GHC.Ptr.Ptr
                               @ (Language.R.HExp.HExp (Control.Monad.Primitive.PrimState m) ty)
                               dt)
                              `cast`
                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                      <Control.Monad.Primitive.PrimState m>_P <ty>_P)))
                         (\ (fp :: Data.Vector.SEXP.ForeignSEXP ty) ->
                          GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                            (Data.Vector.SEXP.$WVector
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               fp
                               off
                               len)
                              `cast`
                            (Sym (Data.Vector.SEXP.N:W[0]
                                      <s>_P
                                      <ty>_P
                                      <Control.Monad.Primitive.PrimState m>_P) <a>_N)) } })) }) -}
a01d1f186234da584184293dcf0533c0
  unsafeFromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Foreign.R.Internal.SEXP s ty -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld #)}
                        ww1
                        GHC.Prim.realWorld# of wild { Unit# ds2 ->
                 case GHC.ForeignPtr.$wnewConcForeignPtr
                        @ ()
                        ww1
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                      -> GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                      -> (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld #)}
                                ww1
                                s1 of wild1 { Unit# ds1 ->
                         (# ds1, GHC.Tuple.() #) })
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ds2 of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.readInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# ww1 32#)
                        0#
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv1 of dt { GHC.ForeignPtr.ForeignPtr dt1 dt2 ->
                 Data.Vector.SEXP.Vector
                   @ s
                   @ ty
                   @ a
                   dt1
                   dt2
                   0#
                   (GHC.Prim.narrow32Int# ipv3) } } } } } }) -}
ca472b5a760fdea693f34040d87f1898
  unsafeHead ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,U,A)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeHead
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
94d42c791ec4790ee89f2c01e599ff0e
  unsafeHeadM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(U,U,U,A)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ m :: * -> *
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeHeadM
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    @ m
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    $dMonad
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
8a93e31fc2de13f5c517338da2901e3d
  unsafeIndex ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> a
  {- Arity: 3,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><L,1*U(U,U,U,A)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) (i :: GHC.Types.Int) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeIndex
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N)
                    i)
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
42b476fddb7df3d8bea07cc234abf884
  unsafeIndexM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(U,U,U,A)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ m :: * -> *
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeIndexM
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    @ m
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    $dMonad
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <GHC.Types.Int -> m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (GHC.Types.Int -> m a)) ((GHC.Types.Any
                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                   s)
                                                                             -> Data.Proxy.Proxy
                                                                                  GHC.Types.Any
                                                                             -> GHC.Types.Int
                                                                             -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
216d6b9ebdada9909d28f80000b57bfc
  unsafeInit ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeInit
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
044fab5d902a6ce7c1fe151a060fe345
  unsafeLast ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(S(LLC(C(C(S(LS))))LLLLL)LLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><L,U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeLast
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    a) ((GHC.Types.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Types.Any -> a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
dcd3eed609ee6ea94615c7cefa8ce2ac
  unsafeLastM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,1*C1(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ m :: * -> *
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeLastM
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    @ m
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    $dMonad
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m a)) ((GHC.Types.Any
                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                  s)
                                                            -> Data.Proxy.Proxy GHC.Types.Any
                                                            -> m a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
80b8ccd159538938ba2e01ed985e0f1a
  unsafeSlice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(S),1*U(U)><S(SLSL),1*U(U,U,U,A)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeSlice
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    i
                    j
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
10b91d6b47ac54d7af974ada9cae1026
  unsafeTail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeTail
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
640e59b5aa563b8a26c4a618d6e80752
  unsafeTake ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(SLSL),1*U(U,U,U,A)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (i :: GHC.Types.Int) (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  Data.Vector.Generic.unsafeSlice
                    @ (Data.Vector.SEXP.W s1 ty s)
                    @ a
                    (Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%))
                    (GHC.Types.I# 0#)
                    i
                    v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                   `cast`
                 (Trans
                      (forall (s1 :: <*>_N).
                       <Data.Reflection.Reifies
                          s1 (Control.Monad.R.Internal.AcquireIO s)>_R
                       ->_R <Data.Proxy.Proxy s1>_R
                       ->_R Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO s>_N
                                     <Data.Vector.SEXP.Vector s ty a>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO s)
                                                         (Data.Vector.SEXP.Vector
                                                            s ty a)) ((GHC.Types.Any
                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                            s)
                                                                      -> Data.Proxy.Proxy
                                                                           GHC.Types.Any
                                                                      -> Data.Vector.SEXP.Vector
                                                                           s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
46085cd988bd22ba89475243a26148c0
  unsafeThaw ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),U(U(A,C(C1(U)),A,A,A),A),A,A,1*U(A,C(U)),A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,A,A,U(U))><L,U(U,U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (v :: Data.Vector.SEXP.Vector
                           (Control.Monad.R.Class.Region m) ty a) ->
                 Control.Monad.R.Internal.withAcquire
                   @ m
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                        (Control.Monad.Primitive.PrimState m) ty a)
                   $dMonadR
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s)[OneShot] ->
                    GHC.Base.fmap
                      @ m
                      $dFunctor
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      (Data.Vector.SEXP.Mutable.Internal.proxyW1
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                        `cast`
                      (<Data.Vector.SEXP.Mutable.Internal.W
                          s ty (Control.Monad.Primitive.PrimState m) a>_R
                       ->_R Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P <a>_N)
                      (Data.Vector.Generic.unsafeThaw
                         @ m
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                         @ a
                         $dPrimMonad
                         (Data.Vector.SEXP.$fVectorWa
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%))
                         v `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s>_P <ty>_P <Control.Monad.Primitive.PrimState m>_P) <a>_N))
                        `cast`
                      (<m>_R (Data.Vector.SEXP.D:R:MutableW[0]
                                  <s>_N
                                  <ty>_N
                                  <Control.Monad.Primitive.PrimState
                                     m>_N <Control.Monad.Primitive.PrimState m>_N <a>_N))) }) -}
abf4be13e5402fc7759ecfe137de044d
  unsafeToSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Foreign.R.Internal.SEXP s ty
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SLLL),1*U(U,U,A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w1 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Data.Vector.SEXP.$wunsafeToSEXP @ s @ ty @ a w ww1 ww2 }) -}
09fb87541e47f7f19545f1dc0aff31f1
  unsafeUpd ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, a)] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (v :: Data.Vector.SEXP.Vector s ty a)
                   (l :: [(GHC.Types.Int, a)]) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 ty s)
                     @ a
                     $dVector
                     (Data.Vector.Generic.New.modifyWithBundle
                        @ (Data.Vector.SEXP.W s1 ty s)
                        @ a
                        @ GHC.Types.Any
                        @ (GHC.Types.Int, a)
                        (\ @ s2 ->
                         Data.Vector.Generic.Mutable.unsafeUpdate
                           @ (GHC.ST.ST s2)
                           @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W s1 ty s))
                           @ a
                           @ GHC.Types.Any
                           (Control.Monad.Primitive.$fPrimMonadST @ s2)
                           (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                              @ s1
                              @ s
                              @ ty
                              @ a
                              $dReifies
                              $d(%,,,%)))
                          `cast`
                        (forall (s2 :: <*>_N).
                         (Data.Vector.Generic.Base.Mutable
                            <Data.Vector.SEXP.W s1 ty s>_N
                            (Control.Monad.Primitive.D:R:PrimStateST[0] <s2>_N)
                            <a>_N)_R
                         ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                 Data.Vector.Fusion.Util.Id GHC.Types.Any (GHC.Types.Int, a)
                               -> GHC.ST.ST s2 ()>_R)
                        (Data.Vector.Generic.clone
                           @ (Data.Vector.SEXP.W s1 ty s)
                           @ a
                           $dVector
                           v `cast` (Sym (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P) <a>_N))
                        (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                           @ Data.Vector.Fusion.Util.Id
                           @ (GHC.Types.Int, a)
                           @ GHC.Types.Any
                           Data.Vector.Fusion.Util.$fMonadId
                           Data.Vector.Fusion.Bundle.Size.Unknown
                           l)))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s ty a>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> Data.Vector.SEXP.Vector
                                                                      s ty a)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
aec2cf3bccbfc34217977962beb4cd70
  unstablePartition ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LS(SL)LS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 \ (f :: a -> GHC.Types.Bool)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 ty s) a
                    = Data.Vector.SEXP.$fVectorWa @ s1 @ s @ ty @ a $dReifies $d(%,,,%)
                  } in
                  case Data.Vector.Generic.unstablePartition_stream
                         @ (Data.Vector.SEXP.W s1 ty s)
                         @ a
                         @ (Data.Vector.SEXP.W s1 ty s)
                         $dVector
                         f
                         (Data.Vector.Generic.stream
                            @ (Data.Vector.SEXP.W s1 ty s)
                            @ a
                            $dVector
                            v `cast`
                            (Sym (Data.Vector.SEXP.N:W[0]
                                      <s1>_P <ty>_P <s>_P) <a>_N)) of wild { (,) a1 b ->
                  (a1 `cast` (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N),
                   b `cast` (Data.Vector.SEXP.N:W[0] <s1>_P <ty>_P <s>_P <a>_N)) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <(Data.Vector.SEXP.Vector s ty a,
                                  Data.Vector.SEXP.Vector s ty a)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector s ty a,
                                                     Data.Vector.SEXP.Vector
                                                       s ty a)) ((GHC.Types.Any
                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                       s)
                                                                 -> Data.Proxy.Proxy GHC.Types.Any
                                                                 -> (Data.Vector.SEXP.Vector s ty a,
                                                                     Data.Vector.SEXP.Vector
                                                                       s ty a))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty1 :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty1>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty1>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  vectorBase ::
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.ForeignSEXP ty
  RecSel Left Data.Vector.SEXP.Vector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(U,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: Data.Vector.SEXP.Vector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                   `cast`
                 (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)) }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  vectorLength :: Data.Vector.SEXP.Vector s ty a -> GHC.Int.Int32
  RecSel Left Data.Vector.SEXP.Vector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: Data.Vector.SEXP.Vector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Int.I32# dt3 }) -}
3476d9bcd1360fdfad479ca1a02d99fb
  vectorOffset :: Data.Vector.SEXP.Vector s ty a -> GHC.Int.Int32
  RecSel Left Data.Vector.SEXP.Vector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (ds :: Data.Vector.SEXP.Vector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Int.I32# dt2 }) -}
a30677255cb86f90d77c4252f95c0e3c
  zipWith ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c) =>
    (a -> b -> c)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
  {- Arity: 6,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (6, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox2 { DEFAULT ->
                 \ (f :: a -> b -> c)
                   (xs :: Data.Vector.SEXP.Vector s tya a)
                   (ys :: Data.Vector.SEXP.Vector s tyb b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyc s) c
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyc
                        @ c
                        $dReifies
                        $d(%,,,%)2
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         xs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         ys
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ a
                         @ b
                         @ c
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: a) (b1 :: b)[OneShot] -> f a1 b1)
                           `cast`
                         (<a>_R ->_R <b>_R ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <c>_R))
                         ds1
                         ds7 of wild2 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyc s)
                     @ c
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyc s)
                        @ c
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyc s)
                           @ c
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ c
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyc s) c)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 c>_R) of wild3 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyc s) c)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyc s)
                                         @ c
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyc s) c) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyc s))
                                                           c
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyc s)
                                                @ c
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyc s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     c) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyc s))
                                            @ c
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyc s) c)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyc s) c) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyc s) c)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyc s c))
                           (case ds4 of wild3 {
                              Data.Vector.Fusion.Bundle.Size.Exact m
                              -> case ds10 of wild4 {
                                   Data.Vector.Fusion.Bundle.Size.Exact n
                                   -> Data.Vector.Fusion.Bundle.Size.Exact
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Max n
                                   -> Data.Vector.Fusion.Bundle.Size.Max
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> Data.Vector.Fusion.Bundle.Size.Max m }
                              Data.Vector.Fusion.Bundle.Size.Max m
                              -> case ds10 of wild4 {
                                   Data.Vector.Fusion.Bundle.Size.Exact n
                                   -> Data.Vector.Fusion.Bundle.Size.Max
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Max n
                                   -> Data.Vector.Fusion.Bundle.Size.Max
                                        (Data.Vector.Fusion.Util.delay_inline
                                           @ GHC.Types.Int
                                           @ (GHC.Types.Int -> GHC.Types.Int)
                                           GHC.Classes.$fOrdInt_$cmin
                                           m
                                           n)
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> Data.Vector.Fusion.Bundle.Size.Max m }
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              -> case ds10 of wild4 {
                                   Data.Vector.Fusion.Bundle.Size.Exact n
                                   -> Data.Vector.Fusion.Bundle.Size.Max n
                                   Data.Vector.Fusion.Bundle.Size.Max n
                                   -> Data.Vector.Fusion.Bundle.Size.Max n
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> Data.Vector.Fusion.Bundle.Size.Unknown } }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyc>_P <s>_P <c>_N) } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyc c>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyc c)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyc c)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } }) -}
b706e81a30a12a07f3207cd5d6fdf15d
  zipWith3 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d) =>
    (a -> b -> c -> d)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
  {- Arity: 8,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(U)))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (8, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox3 { DEFAULT ->
                 \ (f :: a -> b -> c -> d)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyd s) d
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyd
                        @ d
                        $dReifies
                        $d(%,,,%)3
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWith3M
                         @ Data.Vector.Fusion.Util.Id
                         @ a
                         @ b
                         @ c
                         @ d
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (a1 :: a) (b1 :: b)[OneShot] (c1 :: c)[OneShot] -> f a1 b1 c1)
                           `cast`
                         (<a>_R
                          ->_R <b>_R
                          ->_R <c>_R
                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <d>_R))
                         ds1
                         ds7
                         ds11 of wild3 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyd s)
                     @ d
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyd s)
                        @ d
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyd s)
                           @ d
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ d
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyd s) d)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 d>_R) of wild4 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyd s) d)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyd s)
                                         @ d
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyd s) d) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyd s))
                                                           d
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyd s)
                                                @ d
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyd s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     d) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyd s))
                                            @ d
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyd s) d)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyd s) d) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyd s) d)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyd s d))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1 ds4 (c1 ds10 (c1 ds14 n))) of wild4 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyd>_P <s>_P <d>_N) } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyd d>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyd d)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyd d)))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } } }) -}
6c9f3cb68deddcd0aaa403dc0d58b5f2
  zipWith4 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e) =>
    (a -> b -> c -> d -> e)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
  {- Arity: 10,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(U))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=5),
     Unfolding: InlineRule (10, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   @ tye :: Foreign.R.Type.SEXPTYPE
                   @ e
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tye :: *)
                              Data.Type.Equality.~
                              (e :: *))
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox4 { DEFAULT ->
                 \ (f :: a -> b -> c -> d -> e)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c)
                   (ds :: Data.Vector.SEXP.Vector s tyd d) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tye s) e
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tye
                        @ e
                        $dReifies
                        $d(%,,,%)4
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyd s)
                         @ d
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyd
                            @ d
                            $dReifies
                            $d(%,,,%)3)
                         ds
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyd>_P
                                   <s>_P) <d>_N) of wild3 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds15 ds16 ds17 ds18 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ (a, b)
                         @ (c, d)
                         @ e
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (ds19 :: (a, b)) (ds20 :: (c, d))[OneShot] ->
                          case ds19 of wild4 { (,) a1 b1 ->
                          case ds20 of wild5 { (,) c1 d1 ->
                          (f a1 b1 c1 d1)
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <e>_R)) } })
                         (Data.Vector.Fusion.Stream.Monadic.zipWithM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ b
                            @ (a, b)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,) @ a @ b)
                              `cast`
                            (<a>_R
                             ->_R <b>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(a, b)>_R))
                            ds1
                            ds7)
                         (Data.Vector.Fusion.Stream.Monadic.zipWithM
                            @ Data.Vector.Fusion.Util.Id
                            @ c
                            @ d
                            @ (c, d)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,) @ c @ d)
                              `cast`
                            (<c>_R
                             ->_R <d>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(c, d)>_R))
                            ds11
                            ds15) of wild4 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tye s)
                     @ e
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tye s)
                        @ e
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tye s)
                           @ e
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ e
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tye s) e)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 e>_R) of wild5 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tye s) e)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tye s)
                                         @ e
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tye s) e) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tye s))
                                                           e
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tye s)
                                                @ e
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tye s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     e) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tye s))
                                            @ e
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tye s) e)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tye s) e) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tye s) e)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tye s e))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1 ds4 (c1 ds10 (c1 ds14 (c1 ds18 n)))) of wild5 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tye>_P <s>_P <e>_N) } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tye e>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tye e)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tye e)))
                   (\ (ds1 :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds3
                           eta1 of wild { Unit# ds4 ->
                    (# ds4,
                       ds2
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } } } }) -}
2a7f281e7bcdc6ec84a929f34cf73d2e
  zipWith5 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f) =>
    (a -> b -> c -> d -> e -> f)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
  {- Arity: 12,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(C1(U)))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=6),
     Unfolding: InlineRule (12, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   @ tye :: Foreign.R.Type.SEXPTYPE
                   @ e
                   @ tyf :: Foreign.R.Type.SEXPTYPE
                   @ f
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyf :: *)
                              Data.Type.Equality.~
                              (f :: *))
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tye :: *)
                              Data.Type.Equality.~
                              (e :: *))
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox5 { DEFAULT ->
                 \ (f1 :: a -> b -> c -> d -> e -> f)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c)
                   (ds :: Data.Vector.SEXP.Vector s tyd d)
                   (es :: Data.Vector.SEXP.Vector s tye e) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyf s) f
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyf
                        @ f
                        $dReifies
                        $d(%,,,%)5
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyd s)
                         @ d
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyd
                            @ d
                            $dReifies
                            $d(%,,,%)3)
                         ds
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyd>_P
                                   <s>_P) <d>_N) of wild3 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds15 ds16 ds17 ds18 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tye s)
                         @ e
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tye
                            @ e
                            $dReifies
                            $d(%,,,%)4)
                         es
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tye>_P
                                   <s>_P) <e>_N) of wild4 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds19 ds20 ds21 ds22 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ (a, b, c)
                         @ (d, e)
                         @ f
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (ds23 :: (a, b, c)) (ds24 :: (d, e))[OneShot] ->
                          case ds23 of wild5 { (,,) a1 b1 c1 ->
                          case ds24 of wild6 { (,) d1 e1 ->
                          (f1 a1 b1 c1 d1 e1)
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <f>_R)) } })
                         (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ b
                            @ c
                            @ (a, b, c)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,,) @ a @ b @ c)
                              `cast`
                            (<a>_R
                             ->_R <b>_R
                             ->_R <c>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(a, b, c)>_R))
                            ds1
                            ds7
                            ds11)
                         (Data.Vector.Fusion.Stream.Monadic.zipWithM
                            @ Data.Vector.Fusion.Util.Id
                            @ d
                            @ e
                            @ (d, e)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,) @ d @ e)
                              `cast`
                            (<d>_R
                             ->_R <e>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(d, e)>_R))
                            ds15
                            ds19) of wild5 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyf s)
                     @ f
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyf s)
                        @ f
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyf s)
                           @ f
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ f
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyf s) f)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 f>_R) of wild6 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyf s) f)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyf s)
                                         @ f
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyf s) f) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyf s))
                                                           f
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyf s)
                                                @ f
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyf s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     f) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyf s))
                                            @ f
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyf s) f)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyf s) f) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyf s) f)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyf s f))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1 ds4 (c1 ds10 (c1 ds14 (c1 ds18 (c1 ds22 n))))) of wild6 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyf>_P <s>_P <f>_N) } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyf f>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyf f)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyf f)))
                   (\ (ds1 :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds3
                           eta1 of wild { Unit# ds4 ->
                    (# ds4,
                       ds2
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } } } } }) -}
72da3cd0567275acde3bd8a0c633c827
  zipWith6 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f,
     Data.Vector.SEXP.Base.VECTOR s tyg g) =>
    (a -> b -> c -> d -> e -> f -> g)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
    -> Data.Vector.SEXP.Vector s tyg g
  {- Arity: 14,
     Strictness: <S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LS(SL)LS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(C1(C1(C1(C1(U))))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=7),
     Unfolding: InlineRule (14, False, False)
                (\ @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   @ tyd :: Foreign.R.Type.SEXPTYPE
                   @ d
                   @ tye :: Foreign.R.Type.SEXPTYPE
                   @ e
                   @ tyf :: Foreign.R.Type.SEXPTYPE
                   @ f
                   @ tyg :: Foreign.R.Type.SEXPTYPE
                   @ g
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f)
                   ($d(%,,,%)6 :: Data.Vector.SEXP.Base.VECTOR s tyg g) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyg)
                        @ g
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable g)
                           @ (Foreign.R.Type.IsVector tyg)
                           @ (Data.Singletons.SingI tyg)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyg :: *)
                              Data.Type.Equality.~
                              (g :: *))
                           $d(%,,,%)6)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyg>_N <g>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyf :: *)
                              Data.Type.Equality.~
                              (f :: *))
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tye :: *)
                              Data.Type.Equality.~
                              (e :: *))
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyd :: *)
                              Data.Type.Equality.~
                              (d :: *))
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox5 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox6 { DEFAULT ->
                 \ (f1 :: a -> b -> c -> d -> e -> f -> g)
                   (as :: Data.Vector.SEXP.Vector s tya a)
                   (bs :: Data.Vector.SEXP.Vector s tyb b)
                   (cs :: Data.Vector.SEXP.Vector s tyc c)
                   (ds :: Data.Vector.SEXP.Vector s tyd d)
                   (es :: Data.Vector.SEXP.Vector s tye e)
                   (fs :: Data.Vector.SEXP.Vector s tyf f) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  let {
                    $dVector :: Data.Vector.Generic.Base.Vector
                                  (Data.Vector.SEXP.W s1 tyg s) g
                    = Data.Vector.SEXP.$fVectorWa
                        @ s1
                        @ s
                        @ tyg
                        @ g
                        $dReifies
                        $d(%,,,%)6
                  } in
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tya
                            @ a
                            $dReifies
                            $d(%,,,%))
                         as
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tya>_P
                                   <s>_P) <a>_N) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyb
                            @ b
                            $dReifies
                            $d(%,,,%)1)
                         bs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyb>_P
                                   <s>_P) <b>_N) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyc s)
                         @ c
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyc
                            @ c
                            $dReifies
                            $d(%,,,%)2)
                         cs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyc>_P
                                   <s>_P) <c>_N) of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds11 ds12 ds13 ds14 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyd s)
                         @ d
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyd
                            @ d
                            $dReifies
                            $d(%,,,%)3)
                         ds
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyd>_P
                                   <s>_P) <d>_N) of wild3 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds15 ds16 ds17 ds18 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tye s)
                         @ e
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tye
                            @ e
                            $dReifies
                            $d(%,,,%)4)
                         es
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tye>_P
                                   <s>_P) <e>_N) of wild4 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds19 ds20 ds21 ds22 ->
                  case Data.Vector.Generic.stream
                         @ (Data.Vector.SEXP.W s1 tyf s)
                         @ f
                         (Data.Vector.SEXP.$fVectorWa
                            @ s1
                            @ s
                            @ tyf
                            @ f
                            $dReifies
                            $d(%,,,%)5)
                         fs
                           `cast`
                         (Sym (Data.Vector.SEXP.N:W[0]
                                   <s1>_P
                                   <tyf>_P
                                   <s>_P) <f>_N) of wild5 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds23 ds24 ds25 ds26 ->
                  case Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ Data.Vector.Fusion.Util.Id
                         @ (a, b, c)
                         @ (d, e, f)
                         @ g
                         Data.Vector.Fusion.Util.$fMonadId
                         (\ (ds27 :: (a, b, c)) (ds28 :: (d, e, f))[OneShot] ->
                          case ds27 of wild6 { (,,) a1 b1 c1 ->
                          case ds28 of wild7 { (,,) d1 e1 f2 ->
                          (f1 a1 b1 c1 d1 e1 f2)
                            `cast`
                          (Sym (Data.Vector.Fusion.Util.N:Id[0] <g>_R)) } })
                         (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ b
                            @ c
                            @ (a, b, c)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,,) @ a @ b @ c)
                              `cast`
                            (<a>_R
                             ->_R <b>_R
                             ->_R <c>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(a, b, c)>_R))
                            ds1
                            ds7
                            ds11)
                         (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                            @ Data.Vector.Fusion.Util.Id
                            @ d
                            @ e
                            @ f
                            @ (d, e, f)
                            Data.Vector.Fusion.Util.$fMonadId
                            (GHC.Tuple.(,,) @ d @ e @ f)
                              `cast`
                            (<d>_R
                             ->_R <e>_R
                             ->_R <f>_R
                             ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <(d, e, f)>_R))
                            ds15
                            ds19
                            ds23) of wild6 { Data.Vector.Fusion.Stream.Monadic.Stream s2 step1 t ->
                  (Data.Vector.Generic.new
                     @ (Data.Vector.SEXP.W s1 tyg s)
                     @ g
                     $dVector
                     (Data.Vector.Generic.New.unstream
                        @ (Data.Vector.SEXP.W s1 tyg s)
                        @ g
                        $dVector
                        (Data.Vector.Fusion.Bundle.Monadic.Bundle
                           @ Data.Vector.Fusion.Util.Id
                           @ (Data.Vector.SEXP.W s1 tyg s)
                           @ g
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ g
                              @ s2
                              step1
                              t)
                           (Data.Vector.Fusion.Stream.Monadic.Stream
                              @ Data.Vector.Fusion.Util.Id
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                   (Data.Vector.SEXP.W s1 tyg s) g)
                              @ s2
                              (\ (s3 :: s2) ->
                               case (step1 s3)
                                      `cast`
                                    (Data.Vector.Fusion.Util.N:Id[0]
                                         <Data.Vector.Fusion.Stream.Monadic.Step s2 g>_R) of wild7 {
                                 Data.Vector.Fusion.Stream.Monadic.Yield x s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Yield
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyg s) g)
                                      (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                         @ (Data.Vector.SEXP.W s1 tyg s)
                                         @ g
                                         (GHC.Types.I# 1#)
                                         (\ @ m1 :: * -> *
                                            ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m1)
                                            ($dVector1 :: Data.Vector.Generic.Base.Vector
                                                            (Data.Vector.SEXP.W s1 tyg s) g) ->
                                          let {
                                            $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                                           (Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W s1 tyg s))
                                                           g
                                            = Data.Vector.Generic.Base.$p1Vector
                                                @ (Data.Vector.SEXP.W s1 tyg s)
                                                @ g
                                                $dVector1
                                          } in
                                          \ (v1 :: Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W s1 tyg s)
                                                     (Control.Monad.Primitive.PrimState m1)
                                                     g) ->
                                          Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W s1 tyg s))
                                            @ g
                                            $dMVector
                                            @ m1
                                            $dPrimMonad
                                            v1
                                            (GHC.Types.I# 0#)
                                            x))
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Skip s4
                                 -> Data.Vector.Fusion.Stream.Monadic.Skip
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyg s) g)
                                      s4
                                 Data.Vector.Fusion.Stream.Monadic.Done
                                 -> Data.Vector.Fusion.Stream.Monadic.Done
                                      @ s2
                                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                           (Data.Vector.SEXP.W s1 tyg s) g) })
                                `cast`
                              (<s2>_R
                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                             <Data.Vector.Fusion.Stream.Monadic.Step
                                                s2
                                                (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                   (Data.Vector.SEXP.W s1 tyg s) g)>_R))
                              t)
                           (GHC.Base.Nothing @ (Data.Vector.SEXP.W s1 tyg s g))
                           (case GHC.Base.build
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   (\ @ a1
                                      (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                             -> a1 -> a1)[OneShot]
                                      (n :: a1)[OneShot] ->
                                    c1
                                      ds4
                                      (c1
                                         ds10
                                         (c1 ds14 (c1 ds18 (c1 ds22 (c1 ds26 n)))))) of wild7 {
                              [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                              : x xs
                              -> GHC.Base.foldr
                                   @ Data.Vector.Fusion.Bundle.Size.Size
                                   @ (Data.Vector.Fusion.Bundle.Size.Size
                                      -> Data.Vector.Fusion.Bundle.Size.Size)
                                   Data.Vector.SEXP.izipWith1
                                   (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                   xs
                                   x }))))
                    `cast`
                  (Data.Vector.SEXP.N:W[0] <s1>_P <tyg>_P <s>_P <g>_N) } } } } } } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N
                                <Data.Vector.SEXP.Vector s tyg g>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (Data.Vector.SEXP.Vector
                                                       s tyg g)) ((GHC.Types.Any
                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                        s)
                                                                  -> Data.Proxy.Proxy GHC.Types.Any
                                                                  -> Data.Vector.SEXP.Vector
                                                                       s tyg g)))
                   (\ (ds1 :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds3
                           eta1 of wild { Unit# ds4 ->
                    (# ds4,
                       ds2
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy
                      @ GHC.Types.Any
                      @ GHC.Types.Any) } } } } } } }) -}
75336b9b9d3b450102f644cfe0401de8
  zipWithM ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) tya a,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) tyb b,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) tyc c) =>
    (a -> b -> m c)
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) tya a
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) tyb b
    -> m (Data.Vector.SEXP.Vector
            (Control.Monad.R.Class.Region m) tyc c)
  {- Arity: 7,
     Strictness: <S(S(LLC(C(S))LLL)LLLLLLLL),U(1*U(1*U(C(C1(U)),A),1*C1(U),1*C1(C1(U)),A,A,A),1*U(1*U(A,C(C1(U)),A,C(U),A),A),A,A,A,A,A,A,A)><S(LLLS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(U)),C(C1(C1(U))),A,A,A,A),U(U,A),A,U(U))><L,C(C1(U))><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (7, False, False)
                (\ @ m :: * -> *
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ tyc :: Foreign.R.Type.SEXPTYPE
                   @ c
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR
                                    (Control.Monad.R.Class.Region m) tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR
                                    (Control.Monad.R.Class.Region m) tyc c) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) tyc :: *)
                              Data.Type.Equality.~
                              (c :: *))
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            tyc>_N <c>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            tyb>_N <b>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep
                                 (Control.Monad.R.Class.Region m) tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            tya>_N <a>_N) of cobox2 { DEFAULT ->
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (f :: a -> b -> m c)
                   (xs :: Data.Vector.SEXP.Vector
                            (Control.Monad.R.Class.Region m) tya a)
                   (ys :: Data.Vector.SEXP.Vector
                            (Control.Monad.R.Class.Region m) tyb b) ->
                 (\ @ s
                    ($dReifies :: Data.Reflection.Reifies
                                    s
                                    (Control.Monad.R.Internal.AcquireIO
                                       (Control.Monad.Primitive.PrimState m)))[OneShot]
                    (p :: Data.Proxy.Proxy s)[OneShot] ->
                  let {
                    ys' :: Data.Vector.Fusion.Bundle.Monadic.Bundle
                             m
                             (Data.Vector.SEXP.W s tyb (Control.Monad.Primitive.PrimState m))
                             b
                    = Data.Vector.Fusion.Bundle.lift
                        @ m
                        @ (Data.Vector.SEXP.W s tyb (Control.Monad.Primitive.PrimState m))
                        @ b
                        $dMonad
                        (Data.Vector.Generic.stream
                           @ (Data.Vector.SEXP.W s tyb (Control.Monad.Primitive.PrimState m))
                           @ b
                           (Data.Vector.SEXP.$fVectorWa
                              @ s
                              @ (Control.Monad.Primitive.PrimState m)
                              @ tyb
                              @ b
                              $dReifies
                              $d(%,,,%)1)
                           ys
                             `cast`
                           (Sym (Data.Vector.SEXP.N:W[0]
                                     <s>_P <tyb>_P <Control.Monad.Primitive.PrimState m>_P) <b>_N))
                  } in
                  let {
                    xs' :: Data.Vector.Fusion.Bundle.Monadic.Bundle
                             m
                             (Data.Vector.SEXP.W s tya (Control.Monad.Primitive.PrimState m))
                             a
                    = Data.Vector.Fusion.Bundle.lift
                        @ m
                        @ (Data.Vector.SEXP.W s tya (Control.Monad.Primitive.PrimState m))
                        @ a
                        $dMonad
                        (Data.Vector.Generic.stream
                           @ (Data.Vector.SEXP.W s tya (Control.Monad.Primitive.PrimState m))
                           @ a
                           (Data.Vector.SEXP.$fVectorWa
                              @ s
                              @ (Control.Monad.Primitive.PrimState m)
                              @ tya
                              @ a
                              $dReifies
                              $d(%,,,%))
                           xs
                             `cast`
                           (Sym (Data.Vector.SEXP.N:W[0]
                                     <s>_P <tya>_P <Control.Monad.Primitive.PrimState m>_P) <a>_N))
                  } in
                  GHC.Base.<*>
                    @ m
                    $dApplicative
                    @ (Data.Proxy.Proxy s)
                    @ (Data.Vector.SEXP.Vector
                         (Control.Monad.Primitive.PrimState m) tyc c)
                    (GHC.Base.fmap
                       @ m
                       $dFunctor
                       @ (Data.Vector.SEXP.W
                            s tyc (Control.Monad.Primitive.PrimState m) c)
                       @ (Data.Proxy.Proxy s
                          -> Data.Vector.SEXP.Vector
                               (Control.Monad.Primitive.PrimState m) tyc c)
                       (Data.Vector.SEXP.zipWithM1
                          @ s
                          @ tyc
                          @ (Control.Monad.Primitive.PrimState m)
                          @ c
                          @ Data.Proxy.Proxy)
                         `cast`
                       (<Data.Vector.SEXP.W
                           s tyc (Control.Monad.Primitive.PrimState m) c>_R
                        ->_R <Data.Proxy.Proxy s>_R
                        ->_R Data.Vector.SEXP.N:W[0]
                                 <s>_P <tyc>_P <Control.Monad.Primitive.PrimState m>_P <c>_N)
                       (GHC.Base.fmap
                          @ m
                          $dFunctor
                          @ (Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W s tyc (Control.Monad.Primitive.PrimState m)) c)
                          @ (Data.Vector.SEXP.W
                               s tyc (Control.Monad.Primitive.PrimState m) c)
                          (Data.Vector.Generic.unstream
                             @ (Data.Vector.SEXP.W s tyc (Control.Monad.Primitive.PrimState m))
                             @ c
                             (Data.Vector.SEXP.$fVectorWa
                                @ s
                                @ (Control.Monad.Primitive.PrimState m)
                                @ tyc
                                @ c
                                $dReifies
                                $d(%,,,%)2))
                          (GHC.Base.fmap
                             @ m
                             $dFunctor
                             @ [c]
                             @ (Data.Vector.Fusion.Bundle.Monadic.Bundle
                                  Data.Vector.Fusion.Util.Id
                                  (Data.Vector.SEXP.W s tyc (Control.Monad.Primitive.PrimState m))
                                  c)
                             (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                @ Data.Vector.Fusion.Util.Id
                                @ c
                                @ (Data.Vector.SEXP.W s tyc (Control.Monad.Primitive.PrimState m))
                                Data.Vector.Fusion.Util.$fMonadId
                                (case xs' of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                                 case ds4 of wild1 {
                                   Data.Vector.Fusion.Bundle.Size.Exact m1
                                   -> case ys' of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                                      case ds10 of wild3 {
                                        Data.Vector.Fusion.Bundle.Size.Exact n
                                        -> Data.Vector.Fusion.Bundle.Size.Exact
                                             (Data.Vector.Fusion.Util.delay_inline
                                                @ GHC.Types.Int
                                                @ (GHC.Types.Int -> GHC.Types.Int)
                                                GHC.Classes.$fOrdInt_$cmin
                                                m1
                                                n)
                                        Data.Vector.Fusion.Bundle.Size.Max n
                                        -> Data.Vector.Fusion.Bundle.Size.Max
                                             (Data.Vector.Fusion.Util.delay_inline
                                                @ GHC.Types.Int
                                                @ (GHC.Types.Int -> GHC.Types.Int)
                                                GHC.Classes.$fOrdInt_$cmin
                                                m1
                                                n)
                                        Data.Vector.Fusion.Bundle.Size.Unknown
                                        -> Data.Vector.Fusion.Bundle.Size.Max m1 } }
                                   Data.Vector.Fusion.Bundle.Size.Max m1
                                   -> case ys' of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                                      case ds10 of wild3 {
                                        Data.Vector.Fusion.Bundle.Size.Exact n
                                        -> Data.Vector.Fusion.Bundle.Size.Max
                                             (Data.Vector.Fusion.Util.delay_inline
                                                @ GHC.Types.Int
                                                @ (GHC.Types.Int -> GHC.Types.Int)
                                                GHC.Classes.$fOrdInt_$cmin
                                                m1
                                                n)
                                        Data.Vector.Fusion.Bundle.Size.Max n
                                        -> Data.Vector.Fusion.Bundle.Size.Max
                                             (Data.Vector.Fusion.Util.delay_inline
                                                @ GHC.Types.Int
                                                @ (GHC.Types.Int -> GHC.Types.Int)
                                                GHC.Classes.$fOrdInt_$cmin
                                                m1
                                                n)
                                        Data.Vector.Fusion.Bundle.Size.Unknown
                                        -> Data.Vector.Fusion.Bundle.Size.Max m1 } }
                                   Data.Vector.Fusion.Bundle.Size.Unknown
                                   -> case ys' of wild2 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                                      case ds10 of wild3 {
                                        Data.Vector.Fusion.Bundle.Size.Exact n
                                        -> Data.Vector.Fusion.Bundle.Size.Max n
                                        Data.Vector.Fusion.Bundle.Size.Max n
                                        -> Data.Vector.Fusion.Bundle.Size.Max n
                                        Data.Vector.Fusion.Bundle.Size.Unknown
                                        -> Data.Vector.Fusion.Bundle.Size.Unknown } } } }))
                             (case xs' of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                              case ys' of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                              Data.Vector.Fusion.Stream.Monadic.foldrM
                                @ m
                                @ c
                                @ [c]
                                $dMonad
                                (\ (a1 :: c) (b1 :: [c]) ->
                                 GHC.Base.return @ m $dMonad @ [c] (GHC.Types.: @ c a1 b1))
                                (GHC.Types.[] @ c)
                                (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                   @ m
                                   @ a
                                   @ b
                                   @ c
                                   $dMonad
                                   f
                                   ds1
                                   ds7) } }))))
                    (GHC.Base.pure @ m $dApplicative @ (Data.Proxy.Proxy s) p))
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO
                                   (Control.Monad.Primitive.PrimState m)>_N
                                <m (Data.Vector.SEXP.Vector
                                      (Control.Monad.Primitive.PrimState m) tyc c)>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO
                                                       (Control.Monad.Primitive.PrimState m))
                                                    (m (Data.Vector.SEXP.Vector
                                                          (Control.Monad.Primitive.PrimState m)
                                                          tyc
                                                          c))) ((GHC.Types.Any
                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m))
                                                                -> Data.Proxy.Proxy GHC.Types.Any
                                                                -> m (Data.Vector.SEXP.Vector
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        tyc
                                                                        c))))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                      <Control.Monad.Primitive.PrimState m>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Foreign.R.Internal.SEXP
                                               (Control.Monad.Primitive.PrimState m) ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                       <Control.Monad.Primitive.PrimState m>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } } }) -}
9a2c0fa73c28f99b43907318c3a71ea8
  zipWithM1 ::
    Data.Vector.SEXP.W t ty s a -> p t -> Data.Vector.SEXP.W t ty s a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)><L,A>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   @ s
                   @ a
                   @ p :: * -> *
                   (v :: Data.Vector.SEXP.W t ty s a)
                   (ds :: p t) ->
                 v) -}
bb07a2c43723808182c645fbb37c0b0c
  zipWithM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b) =>
    (a -> b -> m c)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> m ()
  {- Arity: 6,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(LLLS(S)),U(1*U(1*C1(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (6, False, False)
                (\ @ m :: * -> *
                   @ s
                   @ tya :: Foreign.R.Type.SEXPTYPE
                   @ a
                   @ tyb :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ c
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tyb :: *)
                              Data.Type.Equality.~
                              (b :: *))
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ ((Data.Vector.SEXP.Base.ElemRep s tya :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox1 { DEFAULT ->
                 \ (f :: a -> b -> m c)
                   (xs :: Data.Vector.SEXP.Vector s tya a)
                   (ys :: Data.Vector.SEXP.Vector s tyb b) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case Data.Vector.Fusion.Bundle.lift
                         @ m
                         @ (Data.Vector.SEXP.W s1 tya s)
                         @ a
                         $dMonad
                         (Data.Vector.Generic.stream
                            @ (Data.Vector.SEXP.W s1 tya s)
                            @ a
                            (Data.Vector.SEXP.$fVectorWa
                               @ s1
                               @ s
                               @ tya
                               @ a
                               $dReifies
                               $d(%,,,%))
                            xs
                              `cast`
                            (Sym (Data.Vector.SEXP.N:W[0]
                                      <s1>_P
                                      <tya>_P
                                      <s>_P) <a>_N)) of wild { Data.Vector.Fusion.Bundle.Monadic.Bundle ds1 ds2 ds3 ds4 ->
                  case Data.Vector.Fusion.Bundle.lift
                         @ m
                         @ (Data.Vector.SEXP.W s1 tyb s)
                         @ b
                         $dMonad
                         (Data.Vector.Generic.stream
                            @ (Data.Vector.SEXP.W s1 tyb s)
                            @ b
                            (Data.Vector.SEXP.$fVectorWa
                               @ s1
                               @ s
                               @ tyb
                               @ b
                               $dReifies
                               $d(%,,,%)1)
                            ys
                              `cast`
                            (Sym (Data.Vector.SEXP.N:W[0]
                                      <s1>_P
                                      <tyb>_P
                                      <s>_P) <b>_N)) of wild1 { Data.Vector.Fusion.Bundle.Monadic.Bundle ds7 ds8 ds9 ds10 ->
                  Data.Vector.Fusion.Stream.Monadic.consume
                    @ m
                    @ c
                    $dMonad
                    (Data.Vector.Fusion.Stream.Monadic.zipWithM
                       @ m
                       @ a
                       @ b
                       @ c
                       $dMonad
                       f
                       ds1
                       ds7) } })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <m ()>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    (m ())) ((GHC.Types.Any
                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                   s)
                                                             -> Data.Proxy.Proxy GHC.Types.Any
                                                             -> m ())))
                   (\ (ds :: GHC.Types.Any)
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    Control.Memory.Region.V
                                    ty, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                 -> GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld
                                                                                 -> (# GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld #)}
                           ds2
                           eta1 of wild { Unit# ds3 ->
                    (# ds3,
                       ds1
                         `cast`
                       (Trans
                            (GHC.Ptr.Ptr
                               <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } })
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) } }) -}
instance GHC.Classes.Eq [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.$fEqVector
instance GHC.Exts.IsList [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.$fIsListVector
instance GHC.Show.Show [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.$fShowVector
instance Data.Vector.Generic.Base.Vector [Data.Vector.SEXP.W, .]
  = Data.Vector.SEXP.$fVectorWa
family instance GHC.Exts.Item [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.D:R:ItemVector
family instance Data.Vector.Generic.Base.Mutable [Data.Vector.SEXP.W]
  = Data.Vector.SEXP.D:R:MutableW
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

