
==================== FINAL INTERFACE ====================
2017-12-28 08:49:44.250445 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Language.R.Instance [family instance module] 8022
  interface hash: 53e28c656290c3ff1ed4b1ecee70058f
  ABI hash: 7c21de0bbc964770a1fa7d8ec3cc550d
  export-list hash: 0ac609f07d5111ef46783c8e10754d9e
  orphan hash: 3a575856fb798c3b657f95df09da11b8
  flag hash: 0c1753f69b902c2576add60528f083cd
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.R.Instance.defaultConfig
  Language.R.Instance.finalize
  Language.R.Instance.initialize
  Language.R.Instance.runRegion
  Language.R.Instance.unsafeRunRegion
  Language.R.Instance.withEmbeddedR
  Language.R.Instance.Config{Language.R.Instance.Config configArgs configProgName configSignalHandlers}
  Language.R.Instance.R
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Foreign.R Foreign.R.Constraints Foreign.R.Embedded
                     Foreign.R.EventLoop Foreign.R.Internal Foreign.R.Type
                     Internal.Error Language.R.Globals Language.R.HExp [boot]
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.1 pretty-1.1.3.3 primitive-0.6.2.0
                      process-1.6.1.0 safe-0.3.15 setenv-0.1.1.3 singletons-2.3.1
                      stm-2.4.4.1 syb-0.7 template-haskell-2.12.0.0 text-1.2.2.2
                      th-desugar-1.7 th-expand-syns-0.4.3.0 th-lift-0.7.7
                      th-lift-instances-0.1.11 th-orphans-0.13.4 th-reify-many-0.1.8
                      transformers-0.5.2.0 unix-2.7.2.2 vector-0.12.0.1
orphans: singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         syb-0.7:Data.Generics.Instances stm-2.4.4.1:Control.Monad.STM
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Control.Memory.Region
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Control.Concurrent.MVar d59f7bf8c22359a853225b02e3e23e9e
import  -/  base-4.10.1.0:Control.Exception c134ea327d158f2eebf26e12a1d4ad47
import  -/  base-4.10.1.0:Control.Exception.Base a0c09fb1722df56c4c26d548157007ca
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Control.Monad.ST.Unsafe 67e642898bb438d63c5ee17426533dfd
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.IORef 27e590a10ae158b4075a28a9902178b2
import  -/  base-4.10.1.0:Data.Maybe 07738c5485acb328136bb15596f8b845
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Data.Traversable 60ea7c2973e63de7d08d5d0269f96e67
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:Foreign.C.String 77a609cc1f3a7c50c3bbf1134c105acc
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:Foreign.Marshal.Array a92cd8977f9b41078050a347c926171a
import  -/  base-4.10.1.0:Foreign.Storable c463817097bdd1b4c7f7c325680a9964
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Enum 5a1ba50c23f92f669e01f8955f202337
import  -/  base-4.10.1.0:GHC.Exception 471142a05c31a6533c10399f8190de35
import  -/  base-4.10.1.0:GHC.IO e261d8b68ccf81a359626fa520b57d1d
import  -/  base-4.10.1.0:GHC.IO.Handle.FD e06fbff6d2dafa211cd5a82e8b1f2f2d
import  -/  base-4.10.1.0:GHC.IO.Handle.Text f965c72d2e9a995ca335a979dc85c98d
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.IORef fcf9a9efa120217c33e71b5dc4a08e1f
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.MVar b1970e54b4c552d660c9a97d807961dc
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Environment c9f912affeed5beb387a8c5d2b2c6102
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:System.IO.Unsafe 00b3b8853d06169d9bfd9af46118ba88
import  -/  data-default-class-0.1.2.0:Data.Default.Class 278151683eef69e272ea7389d6cf3aaf
import  -/  deepseq-1.4.3.0:Control.DeepSeq 9eeb1cba615a0eb5ceba9a811a507265
import  -/  exceptions-0.8.3:Control.Monad.Catch 0961838cb22f4dca352265cf54d5b70d
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
  exports: ebb323240982ac39e80db1d6fb39a690
  ExecContext 9536cc0956936615f6c1f739b2f2dad8
  MonadR 3b2bb150f2b80e2d32d08e5e9fb3cdc6
import  -/  Foreign.R 51460710da704a1aff942901939ab83a
  exports: 66604cef250b707139e6d39041287043
  protect 9d62708a46a0cadab0ad0a511a77c60d
  unprotect 815b337c705ba5d9ef7902b5da589473
import  -/  Foreign.R.Embedded f306289380d4353a4b65b32a0e758397
  exports: 00406785258d41f8162751f0536e0f7c
  endEmbeddedR ae527075d6b98545b5543de3ba280364
  initEmbeddedR ee8074fff39bc36bea152e4463e3bc06
import  -/  Foreign.R.EventLoop 1af8f70b39dd17b80af9b76062dbb57d
  exports: de8d3302824f74757dc4f756eeeabc84
  inputHandlers 377e0df2fab9d6677c1772791adbef8e
import  -/  Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
  baseEnv a680e9f5f2917624e572c068d7f0d17d
  emptyEnv 59f0269590597d7aae0adcf5644f7a2e
  globalEnv 0d7a6614d93859b5512edc6d6bb3a913
  isRInteractive 6158f6a4992d67bbb74212ee7fd8b3ad
  missingArg 9effa2dfed55b1f6f364219c9041e206
  nilValue dbb0c04998edbde00d03609d085348ba
  release 47626d4fe9a76c8454cdf7c4f29723b0
  signalHandlers 225295c78e820c52044b1187e1bc71fc
  unboundValue 02b9d675538771f828aa41d96e155c9a
import  -/  Language.R.Globals 6466af466952ec50029e279d952209f8
  exports: d382aabb26fa46ceafcdf718d6d966c6
  isRInteractive 7e462b06418f0c08f09d822fcfe124e5
  pokeRVariables 2dcfd891970d525736fdd36ddd8b507c
  signalHandlersPtr 7dc87b92286f6c8924dc9dcae19bc70c
import  -/  mtl-2.2.1:Control.Monad.Reader 34f4d92055a4c97b21db89818a3ac5e3
import  -/  primitive-0.6.2.0:Control.Monad.Primitive 51a1d708ce9627dfc5884be7480b4b76
import  -/  process-1.6.1.0:System.Process a8c75295bfaf5f54dccd3871224e84a9
import  -/  setenv-0.1.1.3:System.SetEnv 739349c5529714aafdd27890fab67298
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Class 4bfa8c2d5ed6a6a465f9f6f92f7ab1d4
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Reader cc12564dc0d2121844a0316ee821dfff
import  -/  unix-2.7.2.2:System.Posix.Resource e7236d19e5b36ec08cb416947bbe4645
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
3e2f29a557a53b0a74725cbddb74bda9
  $fApplicativeR :: GHC.Base.Applicative (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fFunctorR @ s)
                  Language.R.Instance.$fApplicativeR4
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R Trans
                                 (<GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <a>_N)))
                       (<a>_R ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N))
                  (Language.R.Instance.$fApplicativeR_$s$fApplicativeReaderT_$c<*>
                     @ (GHC.IORef.IORef GHC.Types.Int))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.R.Instance.N:R[0] <s>_P) <a -> b>_N
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N)
                  (\ @ a @ b @ c -> Language.R.Instance.$fApplicativeR3 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   Trans
                       (<a -> b -> c>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b>_R
                        ->_R Trans
                                 (<GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <c>_R))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <c>_N)))
                       (<a -> b -> c>_R
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <c>_N))
                  (\ @ a @ b -> Language.R.Instance.$fApplicativeR2 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Reader.ReaderT
                           (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b>_R
                        ->_R Trans
                                 (<GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <b>_N)))
                       (Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N))
                  Language.R.Instance.$fApplicativeR1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Reader.ReaderT
                           (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b>_R
                        ->_R Trans
                                 (<GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <a>_N)))
                       (Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N)) -}
da1e10e38012be589f5eed084fe31942
  $fApplicativeR1 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b)
                   (eta2 :: GHC.IORef.IORef GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 #) } }) -}
97b9471cee1c1f9bb425297caf2c4ba4
  $fApplicativeR2 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b)
                   (eta2 :: GHC.IORef.IORef GHC.Types.Int)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (eta1
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N)
                    eta2)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv }) -}
171fa062c6c67c03e48152d4edc00e8d
  $fApplicativeR3 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ c
                   @ b
                   @ a
                   (eta :: a -> b -> c)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a)
                   (eta2 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b)
                   (eta3 :: GHC.IORef.IORef GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a>_N)
                         eta3)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (eta2
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N)
                         eta3)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, eta ipv1 ipv3 #) } }) -}
53bfd62754b6954ed392d3a123ed76bd
  $fApplicativeR4 ::
    a
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (x :: a)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1, x #)) -}
f8f4429eb108d44fb85ae39be4360c09
  $fApplicativeR_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (f `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a -> b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a -> b>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 ipv3 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <r>_R
                      ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <b>_N))) -}
fdfc12415565a97b2b77145794386dda
  $fDefaultConfig ::
    Data.Default.Class.Default Language.R.Instance.Config
  DFunId
  {- Strictness: m, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.R.Instance.defaultConfig
                  `cast`
                (Sym (Data.Default.Class.N:Default[0]
                          <Language.R.Instance.Config>_N)) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fFunctorR :: GHC.Base.Functor (Language.R.Instance.R s)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fFunctorR_$s$fFunctorReaderT_$cfmap
                     @ (GHC.IORef.IORef GHC.Types.Int))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N)
                  Language.R.Instance.$fFunctorR1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b>_R
                        ->_R Trans
                                 (<GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <a>_N)))
                       (<a>_R
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N)) -}
96c2f9bf06ef79cddb667bd21ec4dad7
  $fFunctorR1 ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (x :: a)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO b)
                   (eta1 :: GHC.IORef.IORef GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, x #) }) -}
fd9638ca657a61bc06ee2e22dbe7baee
  $fFunctorR_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ GHC.Types.IO
                   @ a
                   @ GHC.Types.IO
                   @ b
                   @ r
                   (GHC.Base.$fFunctorIO2 @ a @ b f)
                     `cast`
                   (<GHC.Types.IO a>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadCatchR ::
    Control.Monad.Catch.MonadCatch (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fMonadThrowR @ s)
                  (Language.R.Instance.$fMonadCatchR1 @ s)
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Exception e>_R
                   ->_R Trans
                            (<Control.Monad.Trans.Reader.ReaderT
                                (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                             ->_R <e
                                   -> Control.Monad.Trans.Reader.ReaderT
                                        (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                             ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                             ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                            (Trans
                                 (<Control.Monad.Trans.Reader.ReaderT
                                     (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                                  ->_R <e
                                        -> Control.Monad.Trans.Reader.ReaderT
                                             (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a>_R
                                  ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <GHC.IORef.IORef GHC.Types.Int>_R
                                                <GHC.Types.IO>_R
                                                <a>_N))
                                 (Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                                  ->_R (<e>_R ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N)
                                  ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N))) -}
c14cad2b1f84bfbf8e43936eac3a9e42
  $fMonadCatchR1 ::
    GHC.Exception.Exception e =>
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a
    -> (e
        -> Control.Monad.Trans.Reader.ReaderT
             (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a)
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(U),A)><L,1*C1(C1(U))><L,1*C1(C1(C1(U)))><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ s
                   @ e
                   @ a
                   ($dException :: GHC.Exception.Exception e)
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a)
                   (c :: e
                         -> Control.Monad.Trans.Reader.ReaderT
                              (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a)
                   (r1 :: GHC.IORef.IORef GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ a
                   @ GHC.Exception.SomeException
                   (ds
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a>_N)
                      r1)
                     `cast`
                   (GHC.Types.N:IO[0] <a>_R)
                   (\ (e1 :: GHC.Exception.SomeException)[OneShot] ->
                    case GHC.Exception.fromException @ e $dException e1 of wild {
                      GHC.Base.Nothing
                      -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1
                      GHC.Base.Just e'
                      -> ((c e')
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R) })
                   eta) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadIOR ::
    Control.Monad.IO.Class.MonadIO (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fMonadR @ s)
                  Language.R.Instance.$fMonadIOR1
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<GHC.Types.IO a>_R
                        ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GHC.IORef.IORef GHC.Types.Int>_R
                                      <GHC.Types.IO>_R
                                      <a>_N))
                       (<GHC.Types.IO a>_R
                        ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N)) -}
a916fcc08591ba0e83a5cc6f841bd397
  $fMonadIOR1 ::
    GHC.Types.IO a -> GHC.IORef.IORef GHC.Types.Int -> GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (x :: GHC.Types.IO a)
                   (ds :: GHC.IORef.IORef GHC.Types.Int) ->
                 x) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadMaskR ::
    Control.Monad.Catch.MonadMask (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fMonadCatchR @ s)
                  (Language.R.Instance.$fMonadMaskR5 @ s)
                    `cast`
                  (forall (b :: <*>_N).
                   <(forall a. Language.R.Instance.R s a -> Language.R.Instance.R s a)
                    -> Language.R.Instance.R s b>_R
                   ->_R Trans
                            (<GHC.IORef.IORef GHC.Types.Int>_R
                             ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <b>_N))
                                 (Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N)))
                  (Language.R.Instance.$fMonadMaskR1 @ s)
                    `cast`
                  (forall (b :: <*>_N).
                   <(forall a. Language.R.Instance.R s a -> Language.R.Instance.R s a)
                    -> Language.R.Instance.R s b>_R
                   ->_R Trans
                            (<GHC.IORef.IORef GHC.Types.Int>_R
                             ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <b>_N))
                                 (Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N))) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadMaskR1 ::
    ((forall a. Language.R.Instance.R s a -> Language.R.Instance.R s a)
     -> Language.R.Instance.R s b)
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: (\ @ s
                   @ b
                   (ds :: (forall a.
                           Language.R.Instance.R s a -> Language.R.Instance.R s a)
                          -> Language.R.Instance.R s b)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds2 {
                   DEFAULT
                   -> GHC.Prim.maskUninterruptible#
                        @ b
                        ((ds
                            Language.R.Instance.$fMonadMaskR4
                              `cast`
                            (forall (a1 :: <*>_N).
                             Trans
                                 (<Control.Monad.Trans.Reader.ReaderT
                                     (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                  ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Nth:3
                                           (Trans
                                                (Sym (GHC.Types.N:IO[0] <a1>_R)
                                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a1 #)>_R)
                                                (<GHC.Types.IO a1>_R
                                                 ->_R Sym (GHC.Types.N:IO[0] <a1>_R))))
                                 (Trans
                                      (<Control.Monad.Trans.Reader.ReaderT
                                          (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                       ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                     <*>_N
                                                     <GHC.IORef.IORef GHC.Types.Int>_R
                                                     <GHC.Types.IO>_R
                                                     <a1>_N))
                                      (Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N
                                       ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N))))
                           `cast`
                         (Trans
                              (Language.R.Instance.N:R[0] <s>_P <b>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N))
                           eta)
                          `cast`
                        (Nth:2
                             (Trans
                                  (<GHC.Types.IO b>_R ->_R GHC.Types.N:IO[0] <b>_R)
                                  (GHC.Types.N:IO[0] <b>_R
                                   ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)>_R)))
                        ipv
                   0#
                   -> GHC.Prim.maskUninterruptible#
                        @ b
                        ((ds
                            Language.R.Instance.$fMonadMaskR3
                              `cast`
                            (forall (a1 :: <*>_N).
                             Trans
                                 (<Control.Monad.Trans.Reader.ReaderT
                                     (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                  ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Nth:3
                                           (Trans
                                                (Sym (GHC.Types.N:IO[0] <a1>_R)
                                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a1 #)>_R)
                                                (<GHC.Types.IO a1>_R
                                                 ->_R Sym (GHC.Types.N:IO[0] <a1>_R))))
                                 (Trans
                                      (<Control.Monad.Trans.Reader.ReaderT
                                          (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                       ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                     <*>_N
                                                     <GHC.IORef.IORef GHC.Types.Int>_R
                                                     <GHC.Types.IO>_R
                                                     <a1>_N))
                                      (Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N
                                       ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N))))
                           `cast`
                         (Trans
                              (Language.R.Instance.N:R[0] <s>_P <b>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N))
                           eta)
                          `cast`
                        (Nth:2
                             (Trans
                                  (<GHC.Types.IO b>_R ->_R GHC.Types.N:IO[0] <b>_R)
                                  (GHC.Types.N:IO[0] <b>_R
                                   ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)>_R)))
                        ipv
                   1#
                   -> ((ds
                          Language.R.Instance.$fMonadMaskR2
                            `cast`
                          (forall (a1 :: <*>_N).
                           Trans
                               (<Control.Monad.Trans.Reader.ReaderT
                                   (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                ->_R Nth:3
                                         (Trans
                                              (Sym (GHC.Types.N:IO[0] <a1>_R)
                                               ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           a1 #)>_R)
                                              (<GHC.Types.IO a1>_R
                                               ->_R Sym (GHC.Types.N:IO[0] <a1>_R))))
                               (Trans
                                    (<Control.Monad.Trans.Reader.ReaderT
                                        (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                   <*>_N
                                                   <GHC.IORef.IORef GHC.Types.Int>_R
                                                   <GHC.Types.IO>_R
                                                   <a1>_N))
                                    (Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N
                                     ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N))))
                         `cast`
                       (Trans
                            (Language.R.Instance.N:R[0] <s>_P <b>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N))
                         eta)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv } }) -}
d9cd6e43499de5f801c796839b2cfd8c
  $fMonadMaskR2 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a1 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.maskUninterruptible#
                   @ a1
                   (ds
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a1>_N)
                      eta)
                     `cast`
                   (Nth:2
                        (Trans
                             (<GHC.Types.IO a1>_R ->_R GHC.Types.N:IO[0] <a1>_R)
                             (GHC.Types.N:IO[0] <a1>_R
                              ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a1 #)>_R)))
                   eta1) -}
a5616ef0c85d6d0f6e2aa728e616ad85
  $fMonadMaskR3 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a1 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.unmaskAsyncExceptions#
                   @ a1
                   (ds
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a1>_N)
                      eta)
                     `cast`
                   (Nth:2
                        (Trans
                             (<GHC.Types.IO a1>_R ->_R GHC.Types.N:IO[0] <a1>_R)
                             (GHC.Types.N:IO[0] <a1>_R
                              ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a1 #)>_R)))
                   eta1) -}
5e6701cd0b28d255125fe191a82c3282
  $fMonadMaskR4 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a1 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.maskAsyncExceptions#
                   @ a1
                   (ds
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a1>_N)
                      eta)
                     `cast`
                   (Nth:2
                        (Trans
                             (<GHC.Types.IO a1>_R ->_R GHC.Types.N:IO[0] <a1>_R)
                             (GHC.Types.N:IO[0] <a1>_R
                              ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a1 #)>_R)))
                   eta1) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadMaskR5 ::
    ((forall a. Language.R.Instance.R s a -> Language.R.Instance.R s a)
     -> Language.R.Instance.R s b)
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: (\ @ s
                   @ b
                   (ds :: (forall a.
                           Language.R.Instance.R s a -> Language.R.Instance.R s a)
                          -> Language.R.Instance.R s b)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds2 {
                   DEFAULT
                   -> ((ds
                          Language.R.Instance.$fMonadMaskR4
                            `cast`
                          (forall (a1 :: <*>_N).
                           Trans
                               (<Control.Monad.Trans.Reader.ReaderT
                                   (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                ->_R Nth:3
                                         (Trans
                                              (Sym (GHC.Types.N:IO[0] <a1>_R)
                                               ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           a1 #)>_R)
                                              (<GHC.Types.IO a1>_R
                                               ->_R Sym (GHC.Types.N:IO[0] <a1>_R))))
                               (Trans
                                    (<Control.Monad.Trans.Reader.ReaderT
                                        (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                   <*>_N
                                                   <GHC.IORef.IORef GHC.Types.Int>_R
                                                   <GHC.Types.IO>_R
                                                   <a1>_N))
                                    (Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N
                                     ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N))))
                         `cast`
                       (Trans
                            (Language.R.Instance.N:R[0] <s>_P <b>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N))
                         eta)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ b
                        ((ds
                            Language.R.Instance.$fMonadMaskR3
                              `cast`
                            (forall (a1 :: <*>_N).
                             Trans
                                 (<Control.Monad.Trans.Reader.ReaderT
                                     (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                  ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Nth:3
                                           (Trans
                                                (Sym (GHC.Types.N:IO[0] <a1>_R)
                                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a1 #)>_R)
                                                (<GHC.Types.IO a1>_R
                                                 ->_R Sym (GHC.Types.N:IO[0] <a1>_R))))
                                 (Trans
                                      (<Control.Monad.Trans.Reader.ReaderT
                                          (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                       ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                     <*>_N
                                                     <GHC.IORef.IORef GHC.Types.Int>_R
                                                     <GHC.Types.IO>_R
                                                     <a1>_N))
                                      (Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N
                                       ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N))))
                           `cast`
                         (Trans
                              (Language.R.Instance.N:R[0] <s>_P <b>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N))
                           eta)
                          `cast`
                        (Nth:2
                             (Trans
                                  (<GHC.Types.IO b>_R ->_R GHC.Types.N:IO[0] <b>_R)
                                  (GHC.Types.N:IO[0] <b>_R
                                   ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)>_R)))
                        ipv
                   1#
                   -> ((ds
                          Language.R.Instance.$fMonadMaskR2
                            `cast`
                          (forall (a1 :: <*>_N).
                           Trans
                               (<Control.Monad.Trans.Reader.ReaderT
                                   (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                ->_R Nth:3
                                         (Trans
                                              (Sym (GHC.Types.N:IO[0] <a1>_R)
                                               ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           a1 #)>_R)
                                              (<GHC.Types.IO a1>_R
                                               ->_R Sym (GHC.Types.N:IO[0] <a1>_R))))
                               (Trans
                                    (<Control.Monad.Trans.Reader.ReaderT
                                        (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a1>_R
                                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                   <*>_N
                                                   <GHC.IORef.IORef GHC.Types.Int>_R
                                                   <GHC.Types.IO>_R
                                                   <a1>_N))
                                    (Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N
                                     ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a1>_N))))
                         `cast`
                       (Trans
                            (Language.R.Instance.N:R[0] <s>_P <b>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <b>_N))
                         eta)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv } }) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadR :: GHC.Base.Monad (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fApplicativeR @ s)
                  (Language.R.Instance.$fMonadR_$s$fMonadReaderT_$c>>=
                     @ (GHC.IORef.IORef GHC.Types.Int))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                   ->_R (<a>_R ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N)
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N)
                  (Language.R.Instance.$fMonadR_$s$fMonadReaderT_$c>>
                     @ (GHC.IORef.IORef GHC.Types.Int))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <b>_N)
                  Language.R.Instance.$fApplicativeR4
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R Trans
                                 (<GHC.IORef.IORef GHC.Types.Int>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <a>_N)))
                       (<a>_R ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N))
                  (Language.R.Instance.$fMonadR_$s$fMonadReaderT_$cfail
                     @ (GHC.IORef.IORef GHC.Types.Int))
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadRR :: Control.Monad.R.Class.MonadR (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fApplicativeR @ s)
                  (Language.R.Instance.$fMonadIOR @ s)
                  (Language.R.Instance.$fMonadCatchR @ s)
                  (Language.R.Instance.$fMonadMaskR @ s)
                  (Language.R.Instance.$fPrimMonadR @ s)
                  (Language.R.Instance.$fMonadRR3 @ s)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GHC.IORef.IORef GHC.Types.Int>_R
                                      <GHC.Types.IO>_R
                                      <a>_N))
                            (Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N))
                  (Language.R.Instance.$fMonadRR2 @ s)
                    `cast`
                  (forall (s1 :: <*>_N) (a :: <Foreign.R.Type.SEXPTYPE>_N).
                   <(s1 :: *) Data.Type.Equality.~ (Control.Memory.Region.V :: *)>_R
                   ->_R <Foreign.R.Internal.SEXP s1 a>_R
                   ->_R Trans
                            (<GHC.IORef.IORef GHC.Types.Int>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <Foreign.R.Internal.SEXP
                                              (Control.Monad.R.Class.Region
                                                 (Language.R.Instance.R s))
                                              a>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <Foreign.R.Internal.SEXP
                                              (Control.Monad.R.Class.Region
                                                 (Language.R.Instance.R s))
                                              a>_N))
                                 (Sym (Language.R.Instance.N:R[0] <s>_P) <Foreign.R.Internal.SEXP
                                                                            (Control.Monad.R.Class.Region
                                                                               (Language.R.Instance.R
                                                                                  s))
                                                                            a>_N)))
                  (Language.R.Instance.$fMonadRR1 @ s)
                    `cast`
                  (Trans
                       (<GHC.IORef.IORef GHC.Types.Int>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Control.Monad.R.Class.ExecContext
                                         (Language.R.Instance.R s)>_R))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GHC.IORef.IORef GHC.Types.Int>_R
                                      <GHC.Types.IO>_R
                                      <Control.Monad.R.Class.ExecContext
                                         (Language.R.Instance.R s)>_N))
                            (Sym (Language.R.Instance.N:R[0]
                                      <s>_P) <Control.Monad.R.Class.ExecContext
                                                (Language.R.Instance.R s)>_N)))
                  (Language.R.Instance.$fMonadRR_$cunsafeRunWithExecContext @ s) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadRR1 ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Control.Monad.R.Class.ExecContext (Language.R.Instance.R s) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   (ref :: GHC.IORef.IORef GHC.Types.Int)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s1,
                    ref
                      `cast`
                    (Trans
                         (Sym (Language.R.Instance.N:R:ExecContextR[0] <s>_N))
                         (Sym (Language.R.Instance.D:R:ExecContextR0[0] <s>_N))) #)) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadRR2 ::
    (s2 :: *) Data.Type.Equality.~ (Control.Memory.Region.V :: *) =>
    Foreign.R.Internal.SEXP s2 a
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            (Control.Monad.R.Class.Region (Language.R.Instance.R s1)) a #)
  {- Arity: 4, Strictness: <S(S),1*U(1*U)><S(S),1*U(U)><L,U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ s
                   @ s1
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (w :: (s1 :: *)
                         Data.Type.Equality.~
                         (Control.Memory.Region.V :: *))
                   (w1 :: Foreign.R.Internal.SEXP s1 a)
                   (w2 :: GHC.IORef.IORef GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s1>_P <a>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Instance.$w$cacquire @ s @ s1 @ a w ww1 w2 w3 }) -}
e4abbe7a0854f3361ea7e934fb0c677b
  $fMonadRR3 ::
    GHC.Types.IO a -> GHC.IORef.IORef GHC.Types.Int -> GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   @ a
                   (m :: GHC.Types.IO a)
                   (ds :: GHC.IORef.IORef GHC.Types.Int) ->
                 m) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadRR_$cunsafeRunWithExecContext ::
    Language.R.Instance.R s a
    -> Control.Monad.R.Class.ExecContext (Language.R.Instance.R s)
    -> GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   @ a
                   (m :: Language.R.Instance.R s a)
                   (ds :: Control.Monad.R.Class.ExecContext
                            (Language.R.Instance.R s)) ->
                 m `cast`
                 (Trans
                      (Language.R.Instance.N:R[0] <s>_P <a>_N)
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <a>_N))
                   ds
                     `cast`
                   (Trans
                        (Language.R.Instance.D:R:ExecContextR0[0] <s>_N)
                        (Language.R.Instance.N:R:ExecContextR[0] <s>_N))) -}
f68aafc1e1482ad0ac3fc1e31c7ccde3
  $fMonadR_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (k `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R <r>_R
                      ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <b>_N))) -}
8a17ff35be0be5b3fb31c6631dbddf99
  $fMonadR_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ((k ipv1)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R <r>_R
                      ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                     (<Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                      ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                      ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <b>_N))) -}
7bf7d9a1a7ca6765c90a72e6a4bc2807
  $fMonadR_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: GHC.Types.IO a
                   = GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ a
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fMonadThrowR ::
    Control.Monad.Catch.MonadThrow (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fMonadR @ s)
                  (Language.R.Instance.$fMonadThrowR1 @ s)
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   Trans
                       (<GHC.Exception.Exception e>_R
                        ->_R <e>_R
                        ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                        ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                       (Trans
                            (<GHC.Exception.Exception e>_R
                             ->_R <e>_R
                             ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <a>_N))
                            (<GHC.Exception.Exception e>_R
                             ->_R <e>_R
                             ->_R Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N))) -}
726c13df94e7d0ad9bb62c6a5b78c8da
  $fMonadThrowR1 ::
    GHC.Exception.Exception e =>
    e
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>x,
     Unfolding: InlineRule (4, True, True)
                (\ @ s
                   @ e
                   @ a
                   ($dException :: GHC.Exception.Exception e)
                   (eta1 :: e)
                   (eta :: GHC.IORef.IORef GHC.Types.Int)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.IO.throwIO1 @ e @ a $dException eta1 eta2) -}
fdfc12415565a97b2b77145794386dda
  $fMonoidConfig :: GHC.Base.Monoid Language.R.Instance.Config
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.R.Instance.Config
                  Language.R.Instance.defaultConfig
                  Language.R.Instance.$fMonoidConfig_$cmappend
                  Language.R.Instance.$fMonoidConfig_go -}
fdfc12415565a97b2b77145794386dda
  $fMonoidConfig_$cmappend ::
    Language.R.Instance.Config
    -> Language.R.Instance.Config -> Language.R.Instance.Config
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U)><L,U(1*U,1*U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.R.Instance.Config)
                   (w1 :: Language.R.Instance.Config) ->
                 Language.R.Instance.Config
                   (case w1 of wild { Language.R.Instance.Config ds ds1 ds2 ->
                    case ds
                           `cast`
                         (Data.Monoid.N:Last[0] <[GHC.Types.Char]>_N) of wild1 {
                      GHC.Base.Nothing
                      -> case w of wild2 { Language.R.Instance.Config ds3 ds4 ds5 ->
                         ds3 }
                      GHC.Base.Just ipv
                      -> wild1
                           `cast`
                         (Sym (Data.Monoid.N:Last[0]) <[GHC.Types.Char]>_N) } })
                   (case w of wild { Language.R.Instance.Config ds ds1 ds2 ->
                    GHC.Base.++
                      @ [GHC.Types.Char]
                      ds1
                      (case w1 of wild1 { Language.R.Instance.Config ds3 ds4 ds5 ->
                       ds4 }) })
                   (case w1 of wild { Language.R.Instance.Config ds ds1 ds2 ->
                    case ds2
                           `cast`
                         (Data.Monoid.N:Last[0] <GHC.Types.Bool>_N) of wild1 {
                      GHC.Base.Nothing
                      -> case w of wild2 { Language.R.Instance.Config ds3 ds4 ds5 ->
                         ds5 }
                      GHC.Base.Just ipv
                      -> wild1
                           `cast`
                         (Sym (Data.Monoid.N:Last[0]) <GHC.Types.Bool>_N) } })) -}
fdfc12415565a97b2b77145794386dda
  $fMonoidConfig_go ::
    [Language.R.Instance.Config] -> Language.R.Instance.Config
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.R.Instance.Config]) ->
                 case Language.R.Instance.$wgo w of ww { (#,,#) ww1 ww2 ww3 ->
                 Language.R.Instance.Config ww1 ww2 ww3 }) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fPrimMonadR ::
    Control.Monad.Primitive.PrimMonad (Language.R.Instance.R s)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Language.R.Instance.R s)
                  (Language.R.Instance.$fMonadR @ s)
                  (Language.R.Instance.$fPrimMonadR1 @ s)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Prim.State#
                      (Control.Monad.Primitive.PrimState (Language.R.Instance.R s))
                    -> (# GHC.Prim.State#
                            (Control.Monad.Primitive.PrimState (Language.R.Instance.R s)),
                          a #)>_R
                   ->_R Trans
                            (<GHC.IORef.IORef GHC.Types.Int>_R
                             ->_R Trans
                                      ((GHC.Prim.State#
                                          (Language.R.Instance.D:R:PrimStateR[0]
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <s>_N))))_R
                                       ->_R ((#,#)
                                               <'GHC.Types.TupleRep '[]>_R
                                               <'GHC.Types.LiftedRep>_R
                                               (GHC.Prim.State#
                                                  (Language.R.Instance.D:R:PrimStateR[0]
                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <s>_N))))_R
                                               <a>_R)_R)
                                      (Trans
                                           (Nth:2
                                                (Trans
                                                     (((GHC.Prim.State#
                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <s>_N))_R
                                                       ->_R ((#,#)
                                                               <'GHC.Types.TupleRep '[]>_R
                                                               <'GHC.Types.LiftedRep>_R
                                                               (GHC.Prim.State#
                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <s>_N))_R
                                                               <a>_R)_R)
                                                      ->_R <GHC.ST.ST s a>_R)
                                                     (<GHC.ST.STRep s a>_R
                                                      ->_R GHC.ST.N:ST[0] <s>_N <a>_R)))
                                           (Trans
                                                (Nth:3
                                                     (Trans
                                                          (<GHC.ST.STRep s a>_R
                                                           ->_R Sym (GHC.ST.N:ST[0] <s>_N <a>_R))
                                                          (((GHC.Prim.State#
                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                         <s>_N)))_R
                                                            ->_R ((#,#)
                                                                    <'GHC.Types.TupleRep '[]>_R
                                                                    <'GHC.Types.LiftedRep>_R
                                                                    (GHC.Prim.State#
                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                 <s>_N)))_R
                                                                    <a>_R)_R)
                                                           ->_R <GHC.ST.ST s a>_R)))
                                                (Trans
                                                     (GHC.ST.N:ST[0]
                                                          (UnsafeCo nominal s GHC.Prim.RealWorld)
                                                          <a>_R)
                                                     (Sym (GHC.Types.N:IO[0] <a>_R))))))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GHC.IORef.IORef GHC.Types.Int>_R
                                           <GHC.Types.IO>_R
                                           <a>_N))
                                 (Sym (Language.R.Instance.N:R[0] <s>_P) <a>_N))) -}
3e2f29a557a53b0a74725cbddb74bda9
  $fPrimMonadR1 ::
    (GHC.Prim.State#
       (Control.Monad.Primitive.PrimState (Language.R.Instance.R s))
     -> (# GHC.Prim.State#
             (Control.Monad.Primitive.PrimState (Language.R.Instance.R s)),
           a #))
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State#
         (Control.Monad.Primitive.PrimState (Language.R.Instance.R s))
    -> (# GHC.Prim.State#
            (Control.Monad.Primitive.PrimState (Language.R.Instance.R s)),
          a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   @ a
                   (f :: GHC.Prim.State#
                           (Control.Monad.Primitive.PrimState (Language.R.Instance.R s))
                         -> (# GHC.Prim.State#
                                 (Control.Monad.Primitive.PrimState (Language.R.Instance.R s)),
                               a #))
                   (ds :: GHC.IORef.IORef GHC.Types.Int) ->
                 f) -}
30d1af628e5d3052aa0c9f4cf94b14f8
  $tc'Config :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16106222552318564142##
                   5737498664621554561##
                   Language.R.Instance.$trModule
                   Language.R.Instance.$tc'Config2
                   0#
                   Language.R.Instance.$tc'Config1) -}
64629f073d83d0e8fdcbed0561008113
  $tc'Config1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1d1f129399e9f4e8dd538e12c1449e03
  $tc'Config2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Instance.$tc'Config3) -}
6cf0708b099a377950b6cbbd7d14feae
  $tc'Config3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Config"#) -}
a542c686e0446796ec227e9b82f3d60d
  $tc'ExecContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   386969341354661491##
                   680871701787264990##
                   Language.R.Instance.$trModule
                   Language.R.Instance.$tc'ExecContext2
                   1#
                   Language.R.Instance.$tc'ExecContext1) -}
f1189e7f65891dde34061bf05dfdf696
  $tc'ExecContext1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
74e4369001ee2993627a098e72fea2b4
  $tc'ExecContext2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.R.Instance.$tc'ExecContext3) -}
61b6fa5b09b208f71713faf9069409ed
  $tc'ExecContext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExecContext"#) -}
a85f2466f4ece95223944ad18484e510
  $tc'R :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18345860913295291011##
                   7161887217293126827##
                   Language.R.Instance.$trModule
                   Language.R.Instance.$tc'R2
                   2#
                   Language.R.Instance.$tc'R1) -}
2f28afa6315c073ba8fe43cfc0dd3621
  $tc'R1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d39c03e6f2195b5d23c3d5b2a8f0a1f3
  $tc'R2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Instance.$tc'R3) -}
0a7ffaeb6215cc3e0c056ae96a13ede5
  $tc'R3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'R"#) -}
78fb9e686f74f7565cf772cdc6463b18
  $tcConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11618961202835926778##
                   10542111621019275158##
                   Language.R.Instance.$trModule
                   Language.R.Instance.$tcConfig1
                   0#
                   GHC.Types.krep$*) -}
cfcc47f24b0da0f7dee86b696ed77613
  $tcConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Instance.$tcConfig2) -}
d314b6da8feda347b96e4586f0ec8636
  $tcConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Config"#) -}
148eeecc5efc43d21996879508dfd5a6
  $tcR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14715856047065049001##
                   15346369893028450563##
                   Language.R.Instance.$trModule
                   Language.R.Instance.$tcR1
                   0#
                   GHC.Types.krep$*->*->*) -}
832e8672650e08953244f1f978f77736
  $tcR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Instance.$tcR2) -}
a19f936ae8ee63ee58a1d39803ea7606
  $tcR2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("R"#) -}
c8b1218db8b12df2cfb4086edcbe541a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.R.Instance.$trModule3
                   Language.R.Instance.$trModule1) -}
3ca5153065a1ba6bdb1e377ee9f42803
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Instance.$trModule2) -}
105cad76e5038b009903a88418c06a51
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.R.Instance"#) -}
39d35d39f4a568940fd6ab8b41f9b587
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Instance.$trModule4) -}
e2d500fa9f975494668493397f83bc6d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
3e2f29a557a53b0a74725cbddb74bda9
  $w$cacquire ::
    (s2 :: *) Data.Type.Equality.~ (Control.Memory.Region.V :: *) =>
    GHC.Prim.Addr#
    -> GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            (Control.Monad.R.Class.Region (Language.R.Instance.R s1)) a #)
  {- Arity: 4, Strictness: <S(S),1*U(1*U)><S,U><L,U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   @ s1
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (w :: (s1 :: *)
                         Data.Type.Equality.~
                         (Control.Memory.Region.V :: *))
                   (ww :: GHC.Prim.Addr#)
                   (w1 :: GHC.IORef.IORef GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ s1
                        @ Control.Memory.Region.V
                        w `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <s1>_N <Control.Memory.Region.V>_N) of cobox { DEFAULT ->
                 case GHC.Prim.getMaskingState# w2 of ds { (#,#) ipv ipv1 ->
                 let {
                   io :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Foreign.R.Internal.SEXP s a #)
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Addr# #)}
                            ww
                            s2 of wild { (#,#) ds2 ds3 ->
                     case w1
                            `cast`
                          (Trans
                               (Nth:2
                                    (Trans
                                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                   <*>_N
                                                   <GHC.IORef.IORef GHC.Types.Int>_R
                                                   <GHC.Types.IO>_R
                                                   <Foreign.R.Internal.SEXP
                                                      (Control.Monad.R.Class.Region
                                                         (Language.R.Instance.R s))
                                                      a>_N))
                                         (Trans
                                              (Sym (Language.R.Instance.N:R[0]
                                                        <s>_P) <Foreign.R.Internal.SEXP
                                                                  (Control.Monad.R.Class.Region
                                                                     (Language.R.Instance.R s))
                                                                  a>_N)
                                              (Nth:3
                                                   (Trans
                                                        (<Foreign.R.Internal.SEXP s1 a>_R
                                                         ->_R Trans
                                                                  (Language.R.Instance.N:R[0]
                                                                       <s>_P (Foreign.R.Internal.SEXP
                                                                                (Language.R.Instance.D:R:PrimStateR[0]
                                                                                     <s>_N)
                                                                                <a>_N)_N)
                                                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                       <*>_N
                                                                       <GHC.IORef.IORef
                                                                          GHC.Types.Int>_R
                                                                       <GHC.Types.IO>_R
                                                                       <Foreign.R.Internal.SEXP
                                                                          s a>_N))
                                                        (<Foreign.R.Internal.SEXP s1 a>_R
                                                         ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                                         ->_R GHC.Types.N:IO[0]
                                                                  <Foreign.R.Internal.SEXP
                                                                     s a>_R))))))
                               (Nth:2
                                    (Trans
                                         (<GHC.IORef.IORef GHC.Types.Int>_R
                                          ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                         (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                          ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                      GHC.Types.Int #)>_R)))) of wild1 { GHC.STRef.STRef var# ->
                     case GHC.Prim.readMutVar#
                            @ GHC.Prim.RealWorld
                            @ GHC.Types.Int
                            var#
                            ds2 of ds1 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild2 { GHC.Types.I# x1 ->
                     case x1 of wild3 {
                       DEFAULT
                       -> case GHC.Prim.writeMutVar#
                                 @ GHC.Prim.RealWorld
                                 @ GHC.Types.Int
                                 var#
                                 (GHC.Types.I# (GHC.Prim.+# wild3 1#))
                                 ipv2 of s2# { DEFAULT ->
                          (# s2#,
                             (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds3)
                               `cast`
                             (Trans
                                  (GHC.Ptr.Ptr
                                     <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s a>)_R
                                  (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a>_P))) #) }
                       9223372036854775807#
                       -> case GHC.Enum.$fEnumInt2
                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    Foreign.R.Internal.SEXP s a #)
                          of {} } } } } }
                 } in
                 case ipv1 of ds1 {
                   DEFAULT
                   -> (GHC.Prim.maskUninterruptible#
                         @ (Foreign.R.Internal.SEXP s a)
                         io
                         ipv)
                        `cast`
                      (Nth:3
                           (Trans
                                (Nth:3
                                     (Trans
                                          (Nth:3
                                               (Trans
                                                    (<Foreign.R.Internal.SEXP s1 a>_R
                                                     ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Foreign.R.Internal.SEXP s a>_R))
                                                    (<Foreign.R.Internal.SEXP s1 a>_R
                                                     ->_R Trans
                                                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                        <*>_N
                                                                        <GHC.IORef.IORef
                                                                           GHC.Types.Int>_R
                                                                        <GHC.Types.IO>_R
                                                                        <Foreign.R.Internal.SEXP
                                                                           s a>_N))
                                                              (Sym (Language.R.Instance.N:R[0]
                                                                        <s>_P) (Foreign.R.Internal.SEXP
                                                                                  (Sym (Language.R.Instance.D:R:PrimStateR[0]
                                                                                            <s>_N))
                                                                                  <a>_N)_N))))
                                          (Trans
                                               (Language.R.Instance.N:R[0]
                                                    <s>_P <Foreign.R.Internal.SEXP
                                                             (Control.Monad.R.Class.Region
                                                                (Language.R.Instance.R s))
                                                             a>_N)
                                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <GHC.IORef.IORef GHC.Types.Int>_R
                                                    <GHC.Types.IO>_R
                                                    <Foreign.R.Internal.SEXP
                                                       (Control.Monad.R.Class.Region
                                                          (Language.R.Instance.R s))
                                                       a>_N))))
                                (GHC.Types.N:IO[0]
                                     <Foreign.R.Internal.SEXP
                                        (Control.Monad.R.Class.Region (Language.R.Instance.R s))
                                        a>_R)))
                   1#
                   -> (io ipv)
                        `cast`
                      (Nth:3
                           (Trans
                                (Nth:3
                                     (Trans
                                          (Nth:3
                                               (Trans
                                                    (<Foreign.R.Internal.SEXP s1 a>_R
                                                     ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Foreign.R.Internal.SEXP s a>_R))
                                                    (<Foreign.R.Internal.SEXP s1 a>_R
                                                     ->_R Trans
                                                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                        <*>_N
                                                                        <GHC.IORef.IORef
                                                                           GHC.Types.Int>_R
                                                                        <GHC.Types.IO>_R
                                                                        <Foreign.R.Internal.SEXP
                                                                           s a>_N))
                                                              (Sym (Language.R.Instance.N:R[0]
                                                                        <s>_P) (Foreign.R.Internal.SEXP
                                                                                  (Sym (Language.R.Instance.D:R:PrimStateR[0]
                                                                                            <s>_N))
                                                                                  <a>_N)_N))))
                                          (Trans
                                               (Language.R.Instance.N:R[0]
                                                    <s>_P <Foreign.R.Internal.SEXP
                                                             (Control.Monad.R.Class.Region
                                                                (Language.R.Instance.R s))
                                                             a>_N)
                                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <GHC.IORef.IORef GHC.Types.Int>_R
                                                    <GHC.Types.IO>_R
                                                    <Foreign.R.Internal.SEXP
                                                       (Control.Monad.R.Class.Region
                                                          (Language.R.Instance.R s))
                                                       a>_N))))
                                (GHC.Types.N:IO[0]
                                     <Foreign.R.Internal.SEXP
                                        (Control.Monad.R.Class.Region (Language.R.Instance.R s))
                                        a>_R))) } } }) -}
fdfc12415565a97b2b77145794386dda
  $wgo ::
    [Language.R.Instance.Config]
    -> (# Data.Monoid.Last GHC.Base.String, [GHC.Base.String],
          Data.Monoid.Last GHC.Types.Bool #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
4600b2ff1f642ed87a63f8ddc4d95188
  $winitialize ::
    Data.Monoid.Last GHC.Base.String
    -> [GHC.Base.String]
    -> Data.Monoid.Last GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0] -}
30d94133161f32b5f163137a7d0aad47
  $wwithEmbeddedR ::
    Data.Monoid.Last GHC.Base.String
    -> [GHC.Base.String]
    -> Data.Monoid.Last GHC.Types.Bool
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(U)><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: Data.Monoid.Last GHC.Base.String)
                   (ww1 :: [GHC.Base.String])
                   (ww2 :: Data.Monoid.Last GHC.Types.Bool)
                   (w :: GHC.Types.IO a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w1 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case Language.R.Instance.$winitialize
                             ww
                             ww1
                             ww2
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ a
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ a
                                w `cast`
                                (Nth:2
                                     (Trans
                                          (<GHC.Types.IO a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                          (GHC.Types.N:IO[0] <a>_R
                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a #)>_R))))
                             (Language.R.Instance.withEmbeddedR2 @ a)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld #)}
                             0#
                             ipv4 of wild1 { Unit# ds4 ->
                      case GHC.Prim.writeInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             __label "isRInitialized" (data)
                             0#
                             0#
                             ds4 of s2 { DEFAULT ->
                      (# s2, ipv5 #) } } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ a
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case Language.R.Instance.$winitialize
                                ww
                                ww1
                                ww2
                                s of ds2 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ a
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ a
                                   w `cast`
                                   (Nth:2
                                        (Trans
                                             (<GHC.Types.IO a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                             (GHC.Types.N:IO[0] <a>_R
                                              ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          a #)>_R))))
                                (Language.R.Instance.withEmbeddedR2 @ a)
                                ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                      -> GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                      -> (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld #)}
                                0#
                                ipv4 of wild1 { Unit# ds4 ->
                         case GHC.Prim.writeInt32OffAddr#
                                @ GHC.Prim.RealWorld
                                __label "isRInitialized" (data)
                                0#
                                0#
                                ds4 of s2 { DEFAULT ->
                         (# s2, ipv5 #) } } } })
                        ipv
                   1#
                   -> case Language.R.Instance.$winitialize
                             ww
                             ww1
                             ww2
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ a
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ a
                                w `cast`
                                (Nth:2
                                     (Trans
                                          (<GHC.Types.IO a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                          (GHC.Types.N:IO[0] <a>_R
                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a #)>_R))))
                             (Language.R.Instance.withEmbeddedR2 @ a)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld #)}
                             0#
                             ipv4 of wild1 { Unit# ds4 ->
                      case GHC.Prim.writeInt32OffAddr#
                             @ GHC.Prim.RealWorld
                             __label "isRInitialized" (data)
                             0#
                             0#
                             ds4 of s2 { DEFAULT ->
                      (# s2, ipv5 #) } } } } } }) -}
fdfc12415565a97b2b77145794386dda
  data Config
    = Config {configProgName :: Data.Monoid.Last GHC.Base.String,
              configArgs :: [GHC.Base.String],
              configSignalHandlers :: Data.Monoid.Last GHC.Types.Bool}
3e2f29a557a53b0a74725cbddb74bda9
  axiom Language.R.Instance.D:R:ExecContextR0::
    [s]
      Control.Monad.R.Class.ExecContext (Language.R.Instance.R s)
        = Language.R.Instance.R:ExecContextR s
3e2f29a557a53b0a74725cbddb74bda9
  axiom Language.R.Instance.D:R:PrimStateR::
    [s] Control.Monad.Primitive.PrimState (Language.R.Instance.R s) = s
3e2f29a557a53b0a74725cbddb74bda9
  type role R phantom nominal
  newtype R s a
    = R {unR :: Control.Monad.Trans.Reader.ReaderT
                  (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a}
3e2f29a557a53b0a74725cbddb74bda9
  newtype instance Control.Monad.R.Class.ExecContext
                     (Language.R.Instance.R s)
    = ExecContext (GHC.IORef.IORef GHC.Types.Int)
fdfc12415565a97b2b77145794386dda
  configArgs :: Language.R.Instance.Config -> [GHC.Base.String]
  RecSel Left Language.R.Instance.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.R.Instance.Config) ->
                 case ds of wild { Language.R.Instance.Config ds1 ds2 ds3 ->
                 ds2 }) -}
fdfc12415565a97b2b77145794386dda
  configProgName ::
    Language.R.Instance.Config -> Data.Monoid.Last GHC.Base.String
  RecSel Left Language.R.Instance.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.R.Instance.Config) ->
                 case ds of wild { Language.R.Instance.Config ds1 ds2 ds3 ->
                 ds1 }) -}
fdfc12415565a97b2b77145794386dda
  configSignalHandlers ::
    Language.R.Instance.Config -> Data.Monoid.Last GHC.Types.Bool
  RecSel Left Language.R.Instance.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.R.Instance.Config) ->
                 case ds of wild { Language.R.Instance.Config ds1 ds2 ds3 ->
                 ds3 }) -}
fdfc12415565a97b2b77145794386dda
  defaultConfig :: Language.R.Instance.Config
  {- Strictness: m,
     Unfolding: (Language.R.Instance.Config
                   (GHC.Base.Nothing @ GHC.Base.String)
                     `cast`
                   (Sym (Data.Monoid.N:Last[0]) <GHC.Base.String>_N)
                   Language.R.Instance.defaultConfig2
                   Language.R.Instance.defaultConfig1
                     `cast`
                   (Sym (Data.Monoid.N:Last[0]) <GHC.Types.Bool>_N)) -}
d75b4c749a190ea3600a1222b7ae682c
  defaultConfig1 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.False) -}
8a72ccb3cdaf8096f18c84496530d842
  defaultConfig2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.R.Instance.defaultConfig6
                   Language.R.Instance.defaultConfig3) -}
80fa07aa125759d96c61667a91f9423e
  defaultConfig3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.R.Instance.defaultConfig4
                   (GHC.Types.[] @ GHC.Base.String)) -}
46a993008f0757de706eb617a9f46705
  defaultConfig4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.R.Instance.defaultConfig5) -}
a61208237b13946f807d09a9bac682a9
  defaultConfig5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--silent"#) -}
2f43d2b0e10650ee0099cfe4000b293b
  defaultConfig6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.R.Instance.defaultConfig7) -}
69736fe9689f47806ef8a2b0e3546adf
  defaultConfig7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--vanilla"#) -}
c7b249946e0c50b5e40adb588842623c
  finalize :: GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Instance.finalize1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
edbb5b35a3e8350bf0491b7c46f5f519
  finalize1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld #)}
                        0#
                        s of wild1 { Unit# ds ->
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        __label "isRInitialized" (data)
                        0#
                        0#
                        ds of s2 { DEFAULT ->
                 (# s2, GHC.Tuple.() #) } }) -}
0bb585adde0352cbc7c787a47ad470c6
  initialize :: Language.R.Instance.Config -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Instance.initialize1
                  `cast`
                (<Language.R.Instance.Config>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8cfc3795686fa6ac6533d0e269caaa05
  initialize1 ::
    Language.R.Instance.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.R.Instance.Config)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Language.R.Instance.Config ww1 ww2 ww3 ->
                 Language.R.Instance.$winitialize ww1 ww2 ww3 w1 }) -}
a0fe844b688f6e8a1c70db7a955b9c30
  runRegion ::
    Control.DeepSeq.NFData a =>
    (forall s. Language.R.Instance.R s a) -> GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(H)><L,C(C1(U(U,U)))>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Instance.runRegion1
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R <forall s. Language.R.Instance.R s a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
354a73ee28c1be6f5e741bd6808fad56
  runRegion1 ::
    Control.DeepSeq.NFData a =>
    (forall s. Language.R.Instance.R s a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(H)><L,C(C1(U(U,U)))>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dNFData :: Control.DeepSeq.NFData a)
                   (r :: forall s. Language.R.Instance.R s a) ->
                 Language.R.Instance.runRegion2
                   @ a
                   @ GHC.Types.Any
                   $dNFData
                   (r @ GHC.Types.Any)) -}
fbbab8fe1d3776a7c8e3395ad29929a2
  runRegion2 ::
    Control.DeepSeq.NFData a =>
    Language.R.Instance.R s a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(H)><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: (\ @ a
                   @ s
                   ($dNFData :: Control.DeepSeq.NFData a)
                   (r :: Language.R.Instance.R s a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ a
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ a
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case (r `cast`
                                       (Trans
                                            (Language.R.Instance.N:R[0] <s>_P <a>_N)
                                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                 <GHC.Types.IO>_R
                                                 <a>_N))
                                         (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                           `cast`
                                         (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N))
                                        `cast`
                                      (GHC.Types.N:IO[0] <a>_R)
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case $dNFData `cast` (Control.DeepSeq.N:NFData[0] <a>_N)
                                        ipv5 of wild { () ->
                                 ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      (# ds5, ipv5 #) } } } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ a
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newMutVar#
                                @ GHC.Types.Int
                                @ GHC.Prim.RealWorld
                                Language.R.Instance.runRegion3
                                s1 of ds2 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ a
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ a
                                   (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case (r `cast`
                                          (Trans
                                               (Language.R.Instance.N:R[0] <s>_P <a>_N)
                                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <GHC.IORef.IORef GHC.Types.Int>_R
                                                    <GHC.Types.IO>_R
                                                    <a>_N))
                                            (GHC.STRef.STRef
                                               @ GHC.Prim.RealWorld
                                               @ GHC.Types.Int
                                               ipv3)
                                              `cast`
                                            (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N))
                                           `cast`
                                         (GHC.Types.N:IO[0] <a>_R)
                                           s2 of ds3 { (#,#) ipv4 ipv5 ->
                                    case $dNFData `cast` (Control.DeepSeq.N:NFData[0] <a>_N)
                                           ipv5 of wild { () ->
                                    ds3 } }))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.readMutVar#
                                        @ GHC.Prim.RealWorld
                                        @ GHC.Types.Int
                                        ipv3
                                        s2 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of wild { GHC.Types.I# x# ->
                                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld #)}
                                        (GHC.Prim.narrow32Int# x#)
                                        ipv4 of wild1 { Unit# ds4 ->
                                 GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 ds4 } } })
                                ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Types.Int
                                ipv3
                                ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                         case ipv8 of wild { GHC.Types.I# x# ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                      -> GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                      -> (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld #)}
                                (GHC.Prim.narrow32Int# x#)
                                ipv7 of wild1 { Unit# ds5 ->
                         (# ds5, ipv5 #) } } } } })
                        ipv
                   1#
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ a
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ a
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case (r `cast`
                                       (Trans
                                            (Language.R.Instance.N:R[0] <s>_P <a>_N)
                                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                 <GHC.Types.IO>_R
                                                 <a>_N))
                                         (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                           `cast`
                                         (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N))
                                        `cast`
                                      (GHC.Types.N:IO[0] <a>_R)
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case $dNFData `cast` (Control.DeepSeq.N:NFData[0] <a>_N)
                                        ipv5 of wild { () ->
                                 ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Int#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      (# ds5, ipv5 #) } } } } } } }) -}
2171aeffc85f6e1e8f6ebce50db118ba
  runRegion3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3e2f29a557a53b0a74725cbddb74bda9
  unR ::
    Language.R.Instance.R s a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.IORef.IORef GHC.Types.Int) GHC.Types.IO a
  RecSel Left Language.R.Instance.R
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Instance.unR1
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <Language.R.Instance.R s a>_R
                 ->_R Language.R.Instance.N:R[0] <s>_P <a>_N) -}
3e2f29a557a53b0a74725cbddb74bda9
  unR1 :: Language.R.Instance.R s a -> Language.R.Instance.R s a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ s @ a (ds :: Language.R.Instance.R s a) -> ds) -}
d281c2eaa69598fadd6b0b620da8ba99
  unsafeRunRegion ::
    Control.DeepSeq.NFData a =>
    Language.R.Instance.R s a -> GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(H)><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Instance.runRegion2
                  `cast`
                (forall (a :: <*>_N) (s :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R <Language.R.Instance.R s a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
93867847677dcdeac847d14f3eaeab32
  withEmbeddedR ::
    Language.R.Instance.Config -> GHC.Types.IO a -> GHC.Types.IO a
  {- Arity: 3, Strictness: <S,1*U(U,U,U)><L,C(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Instance.withEmbeddedR1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.R.Instance.Config>_R
                 ->_R <GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
95c9b336e5e22f0d354d584c1c4b0c84
  withEmbeddedR1 ::
    Language.R.Instance.Config
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, Strictness: <S,1*U(U,U,U)><L,C(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Language.R.Instance.Config)
                   (w1 :: GHC.Types.IO a)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Language.R.Instance.Config ww1 ww2 ww3 ->
                 Language.R.Instance.$wwithEmbeddedR @ a ww1 ww2 ww3 w1 w2 }) -}
7fd7fdc59313d55625b88455486b9621
  withEmbeddedR2 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <B,U><B,U>x -}
instance GHC.Base.Applicative [Language.R.Instance.R]
  = Language.R.Instance.$fApplicativeR
instance Data.Default.Class.Default [Language.R.Instance.Config]
  = Language.R.Instance.$fDefaultConfig
instance GHC.Base.Functor [Language.R.Instance.R]
  = Language.R.Instance.$fFunctorR
instance Control.Monad.Catch.MonadCatch [Language.R.Instance.R]
  = Language.R.Instance.$fMonadCatchR
instance Control.Monad.IO.Class.MonadIO [Language.R.Instance.R]
  = Language.R.Instance.$fMonadIOR
instance Control.Monad.Catch.MonadMask [Language.R.Instance.R]
  = Language.R.Instance.$fMonadMaskR
instance GHC.Base.Monad [Language.R.Instance.R]
  = Language.R.Instance.$fMonadR
instance Control.Monad.R.Class.MonadR [Language.R.Instance.R]
  = Language.R.Instance.$fMonadRR
instance Control.Monad.Catch.MonadThrow [Language.R.Instance.R]
  = Language.R.Instance.$fMonadThrowR
instance GHC.Base.Monoid [Language.R.Instance.Config]
  = Language.R.Instance.$fMonoidConfig
instance Control.Monad.Primitive.PrimMonad [Language.R.Instance.R]
  = Language.R.Instance.$fPrimMonadR
family instance Control.Monad.R.Class.ExecContext [Language.R.Instance.R]
  = Language.R.Instance.D:R:ExecContextR0
family instance Control.Monad.Primitive.PrimState [Language.R.Instance.R]
  = Language.R.Instance.D:R:PrimStateR
"SPEC/Language.R.Instance $fApplicativeReaderT_$c<*> @ IO _" [orphan] forall @ r
                                                                             ($dApplicative :: GHC.Base.Applicative
                                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Language.R.Instance.$fApplicativeR_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/Language.R.Instance $fFunctorReaderT_$cfmap @ IO _" [orphan] forall @ r
                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                          GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Language.R.Instance.$fFunctorR_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Language.R.Instance $fMonadReaderT_$c>> @ IO _" [orphan] forall @ r
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ GHC.Types.IO
                                                 @ r
                                                 $dMonad
  = Language.R.Instance.$fMonadR_$s$fMonadReaderT_$c>> @ r
"SPEC/Language.R.Instance $fMonadReaderT_$c>>= @ IO _" [orphan] forall @ r
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Language.R.Instance.$fMonadR_$s$fMonadReaderT_$c>>= @ r
"SPEC/Language.R.Instance $fMonadReaderT_$cfail @ IO _" [orphan] forall @ r
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Language.R.Instance.$fMonadR_$s$fMonadReaderT_$cfail @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

