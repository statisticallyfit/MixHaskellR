
==================== FINAL INTERFACE ====================
2017-12-28 08:49:50.260214 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Language.R.Literal 8022
  interface hash: 1ae91eb728b86b63d33a35fef65bfbd3
  ABI hash: ad8f87454366c7ad983921c1f51fd824
  export-list hash: 09926bbdfbf4502e7f2f6ef4b9b693bb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c21be09f753b7b86fb888b2d0adfb1bd
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.R.Literal.dynSEXP
  Language.R.Literal.fromPairList
  Language.R.Literal.fromSomeSEXP
  Language.R.Literal.funToSEXP
  Language.R.Literal.mkProtectedSEXPVector
  Language.R.Literal.mkProtectedSEXPVectorIO
  Language.R.Literal.mkSEXP
  Language.R.Literal.mkSEXPVector
  Language.R.Literal.mkSEXPVectorIO
  Language.R.Literal.toPairList
  Language.R.Literal.Literal{Language.R.Literal.fromSEXP Language.R.Literal.mkSEXPIO}
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP Data.Vector.SEXP.Base
                     Data.Vector.SEXP.Mutable Data.Vector.SEXP.Mutable.Internal
                     Foreign.R Foreign.R.Constraints Foreign.R.Embedded
                     Foreign.R.EventLoop Foreign.R.Internal Foreign.R.Type
                     Internal.Error Language.R.Globals Language.R.HExp
                     Language.R.Instance Language.R.Internal [boot]
                     Language.R.Internal.FunWrappers Language.R.Internal.FunWrappers.TH
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 mtl-2.2.1 pretty-1.1.3.3 primitive-0.6.2.0
                      process-1.6.1.0 reflection-2.1.2 safe-0.3.15 setenv-0.1.1.3
                      singletons-2.3.1 stm-2.4.4.1 syb-0.7 template-haskell-2.12.0.0
                      text-1.2.2.2 th-desugar-1.7 th-expand-syns-0.4.3.0 th-lift-0.7.7
                      th-lift-instances-0.1.11 th-orphans-0.13.4 th-reify-many-0.1.8
                      transformers-0.5.2.0 unix-2.7.2.2 vector-0.12.0.1
orphans: reflection-2.1.2:Data.Reflection
         stm-2.4.4.1:Control.Monad.STM
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Control.Memory.Region
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Data.Vector.SEXP
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Language.R.Instance
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Complex b75c9c36fb3e1275b27f07a23b164de4
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Int e234a0a6d2a21ac9385a90eec01cbcae
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:Foreign.C.String 77a609cc1f3a7c50c3bbf1134c105acc
import  -/  base-4.10.1.0:Foreign.Storable c463817097bdd1b4c7f7c325680a9964
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Foreign fa59c0b32fe445840d1211c9ecd6d691
import  -/  base-4.10.1.0:GHC.IO.Encoding.UTF8 cbd41ec820909f295fa9543d5dba3734
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO.Unsafe 00b3b8853d06169d9bfd9af46118ba88
import  -/  deepseq-1.4.3.0:Control.DeepSeq 9eeb1cba615a0eb5ceba9a811a507265
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Control.Memory.Region bd2f465c2e25d1f80c1a2e359d1309ef
  exports: d60c5e1550fee34b0484ba752c6d17b8
  V 541302cd07c279e1266bc49e9f25f5fc
import  -/  Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
  exports: ebb323240982ac39e80db1d6fb39a690
  MonadR 3b2bb150f2b80e2d32d08e5e9fb3cdc6
  Region 49abf5cb38f3f6f39f201ac2b8615c87
  acquire 4887fbeabaa4df5f85760e10afb98633
  io dcc175ea7fefcdd9812fba741a117c5c
import  -/  Data.Vector.SEXP 1ba3b4d0f52c5e1239a58edb94ac6587
  exports: ba6781c44342a369931119b5db2f7524
  Vector 3476d9bcd1360fdfad479ca1a02d99fb
  fromSEXP a7852ed91bd612055285079f6dd5721b
  toList 3476d9bcd1360fdfad479ca1a02d99fb
  toSEXP 45144a53d69700caab0267da0da2e899
  toString 89db6b8b39a587c28a1fdeb77939331d
import  -/  Data.Vector.SEXP.Base 45a38cf91fe2cf94fe8625a751ba7f0f
  ElemRep 2b851d09f4d303100201309c9c4ed4f7
  VECTOR 206ef0809e9e9bd525db9efc5a1a282d
import  -/  Data.Vector.SEXP.Mutable 099966697135647881a6d1b4beb0bf6d
  exports: 0f2c8059872224e98e761b2b6e1eb9f3
  fromSEXP df91a45cf98a04e59c05579e3c2c5211
  toSEXP 55c17bdcbc7455befad4d9ebf56417c4
import  -/  Data.Vector.SEXP.Mutable.Internal 2ce42555caaa41eef4158ba025e8960c
  MVector 65227b433ce3b999cef5e7dedfaea8e6
import  -/  Foreign.R 51460710da704a1aff942901939ab83a
  exports: 66604cef250b707139e6d39041287043
  CE_UTF8 92b5ee76c2ad63eced2be36d3ca79d38
  SEXP0 1e7c3803f3abb3c979e17a50378d440a
  allocVector 20a503e6845850e58f85d6da9508c6db
  install e4e5ace4396c039f161b20e02876c4be
  mkCharCE 9bcccf07c44deaf2d3effad57feff8b9
  protect 9d62708a46a0cadab0ad0a511a77c60d
  unprotect 815b337c705ba5d9ef7902b5da589473
  withProtected ee6067e4d5f6ac7496f0966c08f7bc06
import  -/  Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
  exports: ebf5f0f68a41d7c6be7eda742c07c975
  SEXP b92a1b967edd9e3e71e3bf97a52c270d
  SEXP 8e71af79acc64eda5f9cb7291bf461df
  SomeSEXP d3242a05a97056d0f4278da347cae3e8
  SomeSEXP 870de88561703105d28633d6a8e2294b
  cast b6459dd4ed2a6aeb4d6b884bbf9a0a4b
  release 47626d4fe9a76c8454cdf7c4f29723b0
  somesexp efba7eee9369e61aec98274362b1f350
  unsafeCoerce fd24c6a04fe85cae12472829ca64771e
  unsafeRelease 947c5de2985d3c51da4d5b3a8811624f
  unsafeSEXPToVectorPtr 793ad2fe9d7f56fdd17d73e58572c323
  unsexp 456b119a325c68ef328adef52d3b1e7c
import  -/  Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
  exports: 5754d5cde3f2758aa360e9e8b66ebc71
  Any 589ebb68a061744ef10e332567d19085
  Char 1eeae3bbb682357f0ba159402f19e108
  Complex 03b70292738c47ec6de32b86c6c9acd6
  ExtPtr 09861da2031986d92237c2e2fd47f695
  Int 846c6444255f487e6112f24053a1fef2
  IsVector dd85b2d9ae3c40d713f260e06d8370c5
  Logical 5beffbd327782875e2209d8de33ff56f
  Logical 1780ac06eb92df8fe8d6ec65362cd7e7
  Raw 26e1a1cc553af22e87fb0296aa30967f
  Real c1c8247577c466184e317ce009c96d3a
  SSEXPTYPE 01bde09c1432a58c48c6a6c3ae653c47
  String e0243b21c36f7ea25c758c04c63f25ed
import  -/  Internal.Error 740162e156c3d9ec6fcb98a35435f6ce
  exports: 13dcfd343f68bd642398afc1dc7f61a0
  failure 1195b0f2e62fb52c3773907c4a230d1e
  impossible a4c52844231a41b3412f8e2cbb31b1ac
  unimplemented 8b7f071ba26c09d6b472c8188a7279bf
import  -/  Language.R.Globals 6466af466952ec50029e279d952209f8
  exports: d382aabb26fa46ceafcdf718d6d966c6
  nilValue 6fd3b3a9ae25de3a8024897c909e667c
import  -/  Language.R.HExp 65742348049316c593051d25bc8cd9c6
  exports: c8c11e48e2f3de692b7c0633951e2386
  Char 580fe987e5b9f944444503249b3ba7ea
  Complex f235946b13e0cbd8ebc8e7c2360a3537
  Int 858608b86e02608eb274851ea8c590e6
  List 78a926d23c6d60b2ad213d44a3d3c6b6
  Logical 21fd96ca028aebecc64d9fa7ff48e109
  Nil 955d3c36214a4994ba97284e1485f178
  Real 8584fdda8d6051cf195cee65b9a7ec76
  String 19a08976f38b34ad047913f7156cdb66
  Symbol a2e76fda143312ec2bb3ff827f019621
  hexp 4c1fd9e46ec95c8e40058dd387b6e55d
  unhexp 9df14c64844230c3144c262c0f3619de
import  -/  Language.R.Instance 7c21de0bbc964770a1fa7d8ec3cc550d
  exports: 0ac609f07d5111ef46783c8e10754d9e
  R 3e2f29a557a53b0a74725cbddb74bda9
  unsafeRunRegion d281c2eaa69598fadd6b0b620da8ba99
import  -/  Language.R.Internal 82a0a60b1100c2a94f070fa76da54d19
  exports: 871a20cdc837ab3f532627a7e9829828
  r1 3c2e7d3b9f7522954ef8eccb73e44618
import  -/  Language.R.Internal.FunWrappers 63eb051acc9f7bfd61e176896a2dd24e
  exports: 15083a473734732170b10ea63d30e1fa
  wrap0 3642fc3a8f8a719e3ef648fb111639ea
  wrap1 3397c6c9d2b6890f4efe563eab5883a9
  wrap10 649dac3c88a3ca473f42483a9b588c98
  wrap11 307501416537ca931435b793d925b2f6
  wrap12 a4e89c2c3b259bcea72b0b0b9ec64436
  wrap2 d7a2aa9d71ff3f7488ac4a7a1b23859a
  wrap3 a06b4a57c4fb888dff6fa4e0ee4ce27d
  wrap4 0d6076f6bb38c688abcfd98ece8109bb
  wrap5 cdfbf8ac271198648083f2363ab92a7f
  wrap6 911fd4943edfb88e16135e66818232ae
  wrap7 e38badfc56270c0e78712176349dcd80
  wrap8 41c2697e46e2ffbb863c86a52f66eaea
  wrap9 4efb799c013be54f969971f4c3d718af
import  -/  Language.R.Internal.FunWrappers.TH d6163568add535beef0e5afc8b94de84
  exports: a3366d7ec050d0d707097a3f42a340be
  thWrapperLiterals 9e84d054260e78fe0da62eca11efe4a7
import  -/  singletons-2.3.1:Data.Singletons 9da68ca382f47f0899b26cbacf532ec5
5aed4544430b6411200f06bbc98c7687
  $dmfromSEXP ::
    Language.R.Literal.Literal a ty =>
    forall s.
    (Foreign.R.Type.IsVector ty, Language.R.Literal.Literal [a] ty) =>
    Foreign.R.Internal.SEXP s ty -> a
  {- Arity: 4,
     Strictness: <L,A><L,A><S(LLC(S)),1*U(A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dLiteral :: Language.R.Literal.Literal a ty)
                   @ s
                   ($d(%,%) :: Foreign.R.Type.IsVector ty)
                   ($dLiteral1 :: Language.R.Literal.Literal [a] ty)
                   (ds :: Foreign.R.Internal.SEXP s ty) ->
                 let {
                   fail5 :: GHC.Prim.Void# -> a <join 1> {- Arity: 1 -}
                   = \ (ds1 :: GHC.Prim.Void#)[OneShot] ->
                     Internal.Error.failure1
                       @ a
                       (GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b ->
                           GHC.CString.unpackFoldrCString# @ b "Not a singleton vector."#))
                       (GHC.Base.build
                          @ GHC.Types.Char
                          (\ @ b -> GHC.CString.unpackFoldrCString# @ b "fromSEXP"#))
                 } in
                 case Language.R.Literal.fromSEXP
                        @ [a]
                        @ ty
                        $dLiteral1
                        @ s
                        ds of wild {
                   [] -> fail5 GHC.Prim.void#
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x : ipv ipv1 -> fail5 GHC.Prim.void# } }) -}
00106fe61ffa47086ceede1786089ab0
  $dmmkSEXPIO ::
    (Language.R.Literal.Literal a ty, Foreign.R.Type.IsVector ty,
     Language.R.Literal.Literal [a] ty) =>
    a
    -> GHC.Types.IO
         (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><S(LC(S)L),1*U(A,1*C1(U),A)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dLiteral :: Language.R.Literal.Literal a ty)
                   ($d(%,%) :: Foreign.R.Type.IsVector ty)
                   ($dLiteral1 :: Language.R.Literal.Literal [a] ty)
                   (x :: a) ->
                 Language.R.Literal.mkSEXPIO
                   @ [a]
                   @ ty
                   $dLiteral1
                   (GHC.Base.build
                      @ a
                      (\ @ a1 (c :: a -> a1 -> a1)[OneShot] (n :: a1)[OneShot] ->
                       c x n))) -}
5d231fa05dea85061f6910edfa292997
  $fHFunWrap(->)(->) ::
    (Language.R.Literal.Literal a la,
     Language.R.Literal.HFunWrap b wb) =>
    Language.R.Literal.HFunWrap (a -> b) (Foreign.R.SEXP0 -> wb)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(1*U,A,1*C1(U))><C(S),1*C1(U)><L,1*C1(U)><L,1*U(U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.R.Literal.$fHFunWrap(->)(->)_$chFunWrap
                  `cast`
                (forall (a :: <*>_N) (la :: <Foreign.R.Type.SEXPTYPE>_N) (b :: <*>_N) (wb :: <*>_N).
                 <Language.R.Literal.Literal a la>_R
                 ->_R <Language.R.Literal.HFunWrap b wb>_R
                 ->_R Sym (Language.R.Literal.N:HFunWrap[0]) <a
                                                              -> b>_N <Foreign.R.SEXP0 -> wb>_N) -}
5d231fa05dea85061f6910edfa292997
  $fHFunWrap(->)(->)_$chFunWrap ::
    (Language.R.Literal.Literal a la,
     Language.R.Literal.HFunWrap b wb) =>
    (a -> b) -> Foreign.R.SEXP0 -> wb
  {- Arity: 4,
     Strictness: <L,U(1*U,A,1*C1(U))><C(S),1*C1(U)><L,1*C1(U)><L,1*U(U)>,
     Unfolding: (\ @ a
                   @ la :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ wb
                   ($dLiteral :: Language.R.Literal.Literal a la)
                   ($dHFunWrap :: Language.R.Literal.HFunWrap b wb)
                   (eta :: a -> b)
                   (eta1 :: Foreign.R.SEXP0) ->
                 $dHFunWrap `cast` (Language.R.Literal.N:HFunWrap[0] <b>_N <wb>_N)
                   (case Language.R.Literal.fromSEXP
                           @ a
                           @ la
                           $dLiteral
                           @ GHC.Types.Any
                           (case eta1
                                   `cast`
                                 (GHC.Ptr.Ptr
                                    <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                   GHC.Types.Any
                                                                   GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                            case Foreign.R.Internal.$wunsafeCast
                                   @ GHC.Types.Any
                                   @ la
                                   (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                      @ la
                                      (Language.R.Literal.$p1Literal @ a @ la $dLiteral)
                                        `cast`
                                      (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <la>_N))
                                     `cast`
                                   (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                   (Foreign.R.Internal.SomeSEXP
                                      @ GHC.Types.Any
                                      @ GHC.Types.Any
                                      dt1) of ww { DEFAULT ->
                            (GHC.Ptr.Ptr @ (Language.R.HExp.HExp GHC.Types.Any la) ww)
                              `cast`
                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                      <GHC.Types.Any>_P <la>_P)) } }) of vx { DEFAULT ->
                    eta vx })) -}
5d231fa05dea85061f6910edfa292997
  $fHFunWrapRIO ::
    (Control.DeepSeq.NFData a, Language.R.Literal.Literal a la) =>
    Language.R.Literal.HFunWrap
      (Language.R.Instance.R s a) (GHC.Types.IO Foreign.R.SEXP0)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(H)><L,1*U(A,1*C1(C1(U(U,U))),A)><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.R.Literal.$fHFunWrapRIO1
                  `cast`
                (forall (a :: <*>_N) (la :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R <Language.R.Literal.Literal a la>_R
                 ->_R Trans
                          (<Language.R.Instance.R s a>_R
                           ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP0>_R))
                          (Sym (Language.R.Literal.N:HFunWrap[0]) <Language.R.Instance.R
                                                                     s a>_N <GHC.Types.IO
                                                                               Foreign.R.SEXP0>_N)) -}
532d88a9e167e159ea68e018312ebd01
  $fHFunWrapRIO1 ::
    (Control.DeepSeq.NFData a, Language.R.Literal.Literal a la) =>
    Language.R.Instance.R s a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP0 #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(H)><L,1*U(A,1*C1(C1(U(U,U))),A)><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ la :: Foreign.R.Type.SEXPTYPE
                   @ s
                   ($dNFData :: Control.DeepSeq.NFData a)
                   ($dLiteral :: Language.R.Literal.Literal a la)
                   (a1 :: Language.R.Instance.R s a)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Language.R.Instance.runRegion2
                        @ a
                        @ s
                        $dNFData
                        a1
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of vx { DEFAULT ->
                 case (Language.R.Literal.mkSEXPIO @ a @ la $dLiteral vx)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Foreign.R.Internal.SEXP Control.Memory.Region.V la>_R)
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    ipv3
                      `cast`
                    (Trans
                         (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <la>_P)
                         (GHC.Ptr.Ptr
                            <Language.R.HExp.HExp
                               Control.Memory.Region.V
                               la, Foreign.R.Internal.SEXPREC>)_R) #) } } }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr ::
    (Control.DeepSeq.NFData c, Language.R.Literal.Literal a a0,
     Language.R.Literal.Literal b b0,
     Language.R.Literal.Literal c c0) =>
    Language.R.Literal.Literal
      (a -> b -> Language.R.Instance.R s c) 'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 4,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ c
                      @ a
                      @ a0 :: Foreign.R.Type.SEXPTYPE
                      @ b
                      @ b0 :: Foreign.R.Type.SEXPTYPE
                      @ c0 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData c)
                      (v1 :: Language.R.Literal.Literal a a0)
                      (v2 :: Language.R.Literal.Literal b b0)
                      (v3 :: Language.R.Literal.Literal c c0).
                  @ (a -> b -> Language.R.Instance.R s c)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr12
                     @ c
                     @ a
                     @ a0
                     @ b
                     @ b0
                     @ c0
                     @ s
                     v
                     v1
                     v2
                     v3)
                    `cast`
                  (<a -> b -> Language.R.Instance.R s c>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr11 @ s1 @ a @ b @ s @ c) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr0 ::
    (Control.DeepSeq.NFData b, Language.R.Literal.Literal a a0,
     Language.R.Literal.Literal b b0) =>
    Language.R.Literal.Literal
      (a -> Language.R.Instance.R s b) 'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 3,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ b
                      @ a
                      @ a0 :: Foreign.R.Type.SEXPTYPE
                      @ b0 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData b)
                      (v1 :: Language.R.Literal.Literal a a0)
                      (v2 :: Language.R.Literal.Literal b b0).
                  @ (a -> Language.R.Instance.R s b)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr14
                     @ b
                     @ a
                     @ a0
                     @ b0
                     @ s
                     v
                     v1
                     v2)
                    `cast`
                  (<a -> Language.R.Instance.R s b>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr13 @ s1 @ a @ s @ b) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr1 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a11 i10,
     Language.R.Literal.Literal a12 i11,
     Language.R.Literal.Literal a13 i12,
     Language.R.Literal.Literal a1 i13) =>
    Language.R.Literal.Literal
      (a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 14,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ a7
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ a8
                      @ i7 :: Foreign.R.Type.SEXPTYPE
                      @ a9
                      @ i8 :: Foreign.R.Type.SEXPTYPE
                      @ a10
                      @ i9 :: Foreign.R.Type.SEXPTYPE
                      @ a11
                      @ i10 :: Foreign.R.Type.SEXPTYPE
                      @ a12
                      @ i11 :: Foreign.R.Type.SEXPTYPE
                      @ i12 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a7 i6)
                      (v8 :: Language.R.Literal.Literal a8 i7)
                      (v9 :: Language.R.Literal.Literal a9 i8)
                      (v10 :: Language.R.Literal.Literal a10 i9)
                      (v11 :: Language.R.Literal.Literal a11 i10)
                      (v12 :: Language.R.Literal.Literal a12 i11)
                      (v13 :: Language.R.Literal.Literal a i12).
                  @ (a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> a10
                     -> a11
                     -> a12
                     -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr15
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ a7
                     @ i6
                     @ a8
                     @ i7
                     @ a9
                     @ i8
                     @ a10
                     @ i9
                     @ a11
                     @ i10
                     @ a12
                     @ i11
                     @ i12
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9
                     v10
                     v11
                     v12
                     v13)
                    `cast`
                  (<a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> a9
                    -> a10
                    -> a11
                    -> a12
                    -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Internal.Error.unimplemented
                     @ (Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
                        -> a1
                        -> a2
                        -> a3
                        -> a4
                        -> a5
                        -> a6
                        -> a7
                        -> a8
                        -> a9
                        -> a10
                        -> a11
                        -> a12
                        -> Language.R.Instance.R s a)
                     (GHC.Base.build
                        @ GHC.Types.Char
                        (\ @ b ->
                         GHC.CString.unpackFoldrCString#
                           @ b
                           "thWrapperLiteral fromSEXP"#))) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr10 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a1 i4) =>
    Language.R.Literal.Literal
      (a2 -> a3 -> a4 -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 5,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a i3).
                  @ (a1 -> a2 -> a3 -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr17
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ i3
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4)
                    `cast`
                  (<a1 -> a2 -> a3 -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr16
                     @ s1
                     @ a1
                     @ a2
                     @ a3
                     @ s
                     @ a) -}
46eb1a65ec5bff9f1d8078c47feee4d6
  $fLiteral(->)ExtPtr11 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a -> b -> Language.R.Instance.R s2 c
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr12 ::
    (Control.DeepSeq.NFData c, Language.R.Literal.Literal a a0,
     Language.R.Literal.Literal b b0,
     Language.R.Literal.Literal c c0) =>
    (a -> b -> Language.R.Instance.R s c)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 6,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C1(C1(U(U,U)))))><S,U>,
     Unfolding: (\ @ c
                   @ a
                   @ a0 :: Foreign.R.Type.SEXPTYPE
                   @ b
                   @ b0 :: Foreign.R.Type.SEXPTYPE
                   @ c0 :: Foreign.R.Type.SEXPTYPE
                   @ s
                   ($dNFData :: Control.DeepSeq.NFData c)
                   ($dLiteral :: Language.R.Literal.Literal a a0)
                   ($dLiteral1 :: Language.R.Literal.Literal b b0)
                   ($dLiteral2 :: Language.R.Literal.Literal c c0)
                   (eta :: a -> b -> Language.R.Instance.R s c)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl60 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
                   = Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                       @ a0
                       (Language.R.Literal.$p1Literal @ a @ a0 $dLiteral)
                         `cast`
                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <a0>_N)
                 } in
                 let {
                   lvl61 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
                   = Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                       @ b0
                       (Language.R.Literal.$p1Literal @ b @ b0 $dLiteral1)
                         `cast`
                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <b0>_N)
                 } in
                 case (Language.R.Internal.FunWrappers.wrap2
                         (\ (eta2 :: Foreign.R.SEXP0) ->
                          let {
                            eta3 :: b -> Language.R.Instance.R s c
                            = case Language.R.Literal.fromSEXP
                                     @ a
                                     @ a0
                                     $dLiteral
                                     @ GHC.Types.Any
                                     (case eta2
                                             `cast`
                                           (GHC.Ptr.Ptr
                                              <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                             GHC.Types.Any
                                                                             GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                                      case Foreign.R.Internal.$wunsafeCast
                                             @ GHC.Types.Any
                                             @ a0
                                             lvl60
                                               `cast`
                                             (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                             (Foreign.R.Internal.SomeSEXP
                                                @ GHC.Types.Any
                                                @ GHC.Types.Any
                                                dt1) of ww { DEFAULT ->
                                      (GHC.Ptr.Ptr @ (Language.R.HExp.HExp GHC.Types.Any a0) ww)
                                        `cast`
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any>_P <a0>_P)) } }) of vx { DEFAULT ->
                              eta vx }
                          } in
                          (\ (eta4 :: Foreign.R.SEXP0)
                             (eta5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case Language.R.Instance.runRegion2
                                  @ c
                                  @ s
                                  $dNFData
                                  (case Language.R.Literal.fromSEXP
                                          @ b
                                          @ b0
                                          $dLiteral1
                                          @ GHC.Types.Any
                                          (case eta4
                                                  `cast`
                                                (GHC.Ptr.Ptr
                                                   <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                  GHC.Types.Any
                                                                                  GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                                           case Foreign.R.Internal.$wunsafeCast
                                                  @ GHC.Types.Any
                                                  @ b0
                                                  lvl61
                                                    `cast`
                                                  (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                                  (Foreign.R.Internal.SomeSEXP
                                                     @ GHC.Types.Any
                                                     @ GHC.Types.Any
                                                     dt1) of ww { DEFAULT ->
                                           (GHC.Ptr.Ptr
                                              @ (Language.R.HExp.HExp GHC.Types.Any b0)
                                              ww)
                                             `cast`
                                           (Sym (Foreign.R.Internal.N:SEXP[0]
                                                     <GHC.Types.Any>_P
                                                     <b0>_P)) } }) of vx { DEFAULT ->
                                   eta3 vx })
                                  eta5 of ds1 { (#,#) ipv ipv1 ->
                           case ipv1 of vx { DEFAULT ->
                           case (Language.R.Literal.mkSEXPIO @ c @ c0 $dLiteral2 vx)
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Foreign.R.Internal.SEXP Control.Memory.Region.V c0>_R)
                                  ipv of ds { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              ipv3
                                `cast`
                              (Trans
                                   (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <c0>_P)
                                   (GHC.Ptr.Ptr
                                      <Language.R.HExp.HExp
                                         Control.Memory.Region.V
                                         c0, Foreign.R.Internal.SEXPREC>)_R) #) } } })
                            `cast`
                          (<Foreign.R.SEXP0>_R
                           ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.SEXP0>_R))))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Ptr.FunPtr
                              (Foreign.R.SEXP0
                               -> Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { GHC.Ptr.FunPtr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                        ds2
                        ipv of wild { (#,#) ds3 ds4 ->
                 (# ds3,
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp
                           Control.Memory.Region.V 'Foreign.R.Type.ExtPtr)
                      ds4 #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.TupleRep '[]>_R
                    <'GHC.Types.LiftedRep>_R
                    <GHC.Prim.State# GHC.Prim.RealWorld>_R
                    (Sym (Foreign.R.Internal.N:SEXP[0]
                              <Control.Memory.Region.V>_P
                              <'Foreign.R.Type.ExtPtr>_P)))_R } } }) -}
6d92af2984483d38062f80f193b87e24
  $fLiteral(->)ExtPtr13 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a -> Language.R.Instance.R s2 b
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr14 ::
    (Control.DeepSeq.NFData b, Language.R.Literal.Literal a a0,
     Language.R.Literal.Literal b b0) =>
    (a -> Language.R.Instance.R s b)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 5,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C1(C1(U(U,U))))><S,U>,
     Unfolding: (\ @ b
                   @ a
                   @ a0 :: Foreign.R.Type.SEXPTYPE
                   @ b0 :: Foreign.R.Type.SEXPTYPE
                   @ s
                   ($dNFData :: Control.DeepSeq.NFData b)
                   ($dLiteral :: Language.R.Literal.Literal a a0)
                   ($dLiteral1 :: Language.R.Literal.Literal b b0)
                   (eta :: a -> Language.R.Instance.R s b)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl60 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
                   = Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                       @ a0
                       (Language.R.Literal.$p1Literal @ a @ a0 $dLiteral)
                         `cast`
                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <a0>_N)
                 } in
                 case (Language.R.Internal.FunWrappers.wrap1
                         (\ (eta2 :: Foreign.R.SEXP0)
                            (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case Language.R.Instance.runRegion2
                                 @ b
                                 @ s
                                 $dNFData
                                 (case Language.R.Literal.fromSEXP
                                         @ a
                                         @ a0
                                         $dLiteral
                                         @ GHC.Types.Any
                                         (case eta2
                                                 `cast`
                                               (GHC.Ptr.Ptr
                                                  <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                 GHC.Types.Any
                                                                                 GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                                          case Foreign.R.Internal.$wunsafeCast
                                                 @ GHC.Types.Any
                                                 @ a0
                                                 lvl60
                                                   `cast`
                                                 (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                                 (Foreign.R.Internal.SomeSEXP
                                                    @ GHC.Types.Any
                                                    @ GHC.Types.Any
                                                    dt1) of ww { DEFAULT ->
                                          (GHC.Ptr.Ptr @ (Language.R.HExp.HExp GHC.Types.Any a0) ww)
                                            `cast`
                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                    <GHC.Types.Any>_P
                                                    <a0>_P)) } }) of vx { DEFAULT ->
                                  eta vx })
                                 eta3 of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of vx { DEFAULT ->
                          case (Language.R.Literal.mkSEXPIO @ b @ b0 $dLiteral1 vx)
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Foreign.R.Internal.SEXP Control.Memory.Region.V b0>_R)
                                 ipv of ds { (#,#) ipv2 ipv3 ->
                          (# ipv2,
                             ipv3
                               `cast`
                             (Trans
                                  (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <b0>_P)
                                  (GHC.Ptr.Ptr
                                     <Language.R.HExp.HExp
                                        Control.Memory.Region.V
                                        b0, Foreign.R.Internal.SEXPREC>)_R) #) } } })
                           `cast`
                         (<Foreign.R.SEXP0>_R
                          ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.SEXP0>_R)))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Ptr.FunPtr
                              (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { GHC.Ptr.FunPtr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                        ds2
                        ipv of wild { (#,#) ds3 ds4 ->
                 (# ds3,
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp
                           Control.Memory.Region.V 'Foreign.R.Type.ExtPtr)
                      ds4 #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.TupleRep '[]>_R
                    <'GHC.Types.LiftedRep>_R
                    <GHC.Prim.State# GHC.Prim.RealWorld>_R
                    (Sym (Foreign.R.Internal.N:SEXP[0]
                              <Control.Memory.Region.V>_P
                              <'Foreign.R.Type.ExtPtr>_P)))_R } } }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr15 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a11 i10,
     Language.R.Literal.Literal a12 i11,
     Language.R.Literal.Literal a13 i12,
     Language.R.Literal.Literal a1 i13) =>
    (a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 16,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C(C(C(C(C(C(C1(C1(U(U,U)))))))))))))))><S,U> -}
0797471e3ef7170bde3e3d6ed0ce1d6d
  $fLiteral(->)ExtPtr16 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a1 -> a2 -> a3 -> Language.R.Instance.R s2 a4
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr17 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a1 i4) =>
    (a2 -> a3 -> a4 -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 7,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C1(C1(U(U,U))))))><S,U>,
     Unfolding: (\ @ a
                   @ a1
                   @ i :: Foreign.R.Type.SEXPTYPE
                   @ a2
                   @ i1 :: Foreign.R.Type.SEXPTYPE
                   @ a3
                   @ i2 :: Foreign.R.Type.SEXPTYPE
                   @ i3 :: Foreign.R.Type.SEXPTYPE
                   @ s
                   ($dNFData :: Control.DeepSeq.NFData a)
                   ($dLiteral :: Language.R.Literal.Literal a1 i)
                   ($dLiteral1 :: Language.R.Literal.Literal a2 i1)
                   ($dLiteral2 :: Language.R.Literal.Literal a3 i2)
                   ($dLiteral3 :: Language.R.Literal.Literal a i3)
                   (eta :: a1 -> a2 -> a3 -> Language.R.Instance.R s a)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl60 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
                   = Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                       @ i
                       (Language.R.Literal.$p1Literal @ a1 @ i $dLiteral)
                         `cast`
                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <i>_N)
                 } in
                 let {
                   lvl61 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
                   = Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                       @ i1
                       (Language.R.Literal.$p1Literal @ a2 @ i1 $dLiteral1)
                         `cast`
                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <i1>_N)
                 } in
                 let {
                   lvl62 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
                   = Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                       @ i2
                       (Language.R.Literal.$p1Literal @ a3 @ i2 $dLiteral2)
                         `cast`
                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <i2>_N)
                 } in
                 case (Language.R.Internal.FunWrappers.wrap3
                         (\ (eta2 :: Foreign.R.SEXP0) ->
                          let {
                            eta3 :: a2 -> a3 -> Language.R.Instance.R s a
                            = case Language.R.Literal.fromSEXP
                                     @ a1
                                     @ i
                                     $dLiteral
                                     @ GHC.Types.Any
                                     (case eta2
                                             `cast`
                                           (GHC.Ptr.Ptr
                                              <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                             GHC.Types.Any
                                                                             GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                                      case Foreign.R.Internal.$wunsafeCast
                                             @ GHC.Types.Any
                                             @ i
                                             lvl60
                                               `cast`
                                             (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                             (Foreign.R.Internal.SomeSEXP
                                                @ GHC.Types.Any
                                                @ GHC.Types.Any
                                                dt1) of ww { DEFAULT ->
                                      (GHC.Ptr.Ptr @ (Language.R.HExp.HExp GHC.Types.Any i) ww)
                                        `cast`
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any>_P <i>_P)) } }) of vx { DEFAULT ->
                              eta vx }
                          } in
                          \ (eta4 :: Foreign.R.SEXP0) ->
                          let {
                            eta5 :: a3 -> Language.R.Instance.R s a
                            = case Language.R.Literal.fromSEXP
                                     @ a2
                                     @ i1
                                     $dLiteral1
                                     @ GHC.Types.Any
                                     (case eta4
                                             `cast`
                                           (GHC.Ptr.Ptr
                                              <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                             GHC.Types.Any
                                                                             GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                                      case Foreign.R.Internal.$wunsafeCast
                                             @ GHC.Types.Any
                                             @ i1
                                             lvl61
                                               `cast`
                                             (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                             (Foreign.R.Internal.SomeSEXP
                                                @ GHC.Types.Any
                                                @ GHC.Types.Any
                                                dt1) of ww { DEFAULT ->
                                      (GHC.Ptr.Ptr @ (Language.R.HExp.HExp GHC.Types.Any i1) ww)
                                        `cast`
                                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                                <GHC.Types.Any>_P <i1>_P)) } }) of vx { DEFAULT ->
                              eta3 vx }
                          } in
                          (\ (eta6 :: Foreign.R.SEXP0)
                             (eta7 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case Language.R.Instance.runRegion2
                                  @ a
                                  @ s
                                  $dNFData
                                  (case Language.R.Literal.fromSEXP
                                          @ a3
                                          @ i2
                                          $dLiteral2
                                          @ GHC.Types.Any
                                          (case eta6
                                                  `cast`
                                                (GHC.Ptr.Ptr
                                                   <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                  GHC.Types.Any
                                                                                  GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                                           case Foreign.R.Internal.$wunsafeCast
                                                  @ GHC.Types.Any
                                                  @ i2
                                                  lvl62
                                                    `cast`
                                                  (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                                  (Foreign.R.Internal.SomeSEXP
                                                     @ GHC.Types.Any
                                                     @ GHC.Types.Any
                                                     dt1) of ww { DEFAULT ->
                                           (GHC.Ptr.Ptr
                                              @ (Language.R.HExp.HExp GHC.Types.Any i2)
                                              ww)
                                             `cast`
                                           (Sym (Foreign.R.Internal.N:SEXP[0]
                                                     <GHC.Types.Any>_P
                                                     <i2>_P)) } }) of vx { DEFAULT ->
                                   eta5 vx })
                                  eta7 of ds1 { (#,#) ipv ipv1 ->
                           case ipv1 of vx { DEFAULT ->
                           case (Language.R.Literal.mkSEXPIO @ a @ i3 $dLiteral3 vx)
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Foreign.R.Internal.SEXP Control.Memory.Region.V i3>_R)
                                  ipv of ds { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              ipv3
                                `cast`
                              (Trans
                                   (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <i3>_P)
                                   (GHC.Ptr.Ptr
                                      <Language.R.HExp.HExp
                                         Control.Memory.Region.V
                                         i3, Foreign.R.Internal.SEXPREC>)_R) #) } } })
                            `cast`
                          (<Foreign.R.SEXP0>_R
                           ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.SEXP0>_R))))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Ptr.FunPtr
                              (Foreign.R.SEXP0
                               -> Foreign.R.SEXP0
                               -> Foreign.R.SEXP0
                               -> GHC.Types.IO Foreign.R.SEXP0)>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { GHC.Ptr.FunPtr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                        ds2
                        ipv of wild { (#,#) ds3 ds4 ->
                 (# ds3,
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp
                           Control.Memory.Region.V 'Foreign.R.Type.ExtPtr)
                      ds4 #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.TupleRep '[]>_R
                    <'GHC.Types.LiftedRep>_R
                    <GHC.Prim.State# GHC.Prim.RealWorld>_R
                    (Sym (Foreign.R.Internal.N:SEXP[0]
                              <Control.Memory.Region.V>_P
                              <'Foreign.R.Type.ExtPtr>_P)))_R } } }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr18 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a11 i10,
     Language.R.Literal.Literal a12 i11,
     Language.R.Literal.Literal a1 i12) =>
    (a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 15,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C(C(C(C(C(C1(C1(U(U,U))))))))))))))><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr19 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a11 i10,
     Language.R.Literal.Literal a1 i11) =>
    (a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 14,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C(C(C(C(C1(C1(U(U,U)))))))))))))><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr2 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a11 i10,
     Language.R.Literal.Literal a12 i11,
     Language.R.Literal.Literal a1 i12) =>
    Language.R.Literal.Literal
      (a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 13,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ a7
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ a8
                      @ i7 :: Foreign.R.Type.SEXPTYPE
                      @ a9
                      @ i8 :: Foreign.R.Type.SEXPTYPE
                      @ a10
                      @ i9 :: Foreign.R.Type.SEXPTYPE
                      @ a11
                      @ i10 :: Foreign.R.Type.SEXPTYPE
                      @ i11 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a7 i6)
                      (v8 :: Language.R.Literal.Literal a8 i7)
                      (v9 :: Language.R.Literal.Literal a9 i8)
                      (v10 :: Language.R.Literal.Literal a10 i9)
                      (v11 :: Language.R.Literal.Literal a11 i10)
                      (v12 :: Language.R.Literal.Literal a i11).
                  @ (a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> a10
                     -> a11
                     -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr18
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ a7
                     @ i6
                     @ a8
                     @ i7
                     @ a9
                     @ i8
                     @ a10
                     @ i9
                     @ a11
                     @ i10
                     @ i11
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9
                     v10
                     v11
                     v12)
                    `cast`
                  (<a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> a9
                    -> a10
                    -> a11
                    -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Internal.Error.unimplemented
                     @ (Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
                        -> a1
                        -> a2
                        -> a3
                        -> a4
                        -> a5
                        -> a6
                        -> a7
                        -> a8
                        -> a9
                        -> a10
                        -> a11
                        -> Language.R.Instance.R s a)
                     (GHC.Base.build
                        @ GHC.Types.Char
                        (\ @ b ->
                         GHC.CString.unpackFoldrCString#
                           @ b
                           "thWrapperLiteral fromSEXP"#))) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr20 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a1 i10) =>
    (a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 13,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C(C(C(C1(C1(U(U,U))))))))))))><S,U> -}
dc1f11e371055d331542a4f4b2b97848
  $fLiteral(->)ExtPtr21 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> Language.R.Instance.R s2 a9
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr22 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a1 i9) =>
    (a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 12,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C(C(C1(C1(U(U,U)))))))))))><S,U> -}
162b8ec0d24b46778da97718461b2a49
  $fLiteral(->)ExtPtr23 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> Language.R.Instance.R s2 a8
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr24 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a1 i8) =>
    (a2
     -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 11,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C(C1(C1(U(U,U))))))))))><S,U> -}
d6fce319a73e421b1c6f40457d7c0b7e
  $fLiteral(->)ExtPtr25 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> Language.R.Instance.R s2 a7
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr26 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6,
     Language.R.Literal.Literal a1 i7) =>
    (a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 10,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C(C1(C1(U(U,U)))))))))><S,U> -}
eec388a3709d6f71d650032344428d12
  $fLiteral(->)ExtPtr27 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a1 -> a2 -> a3 -> a4 -> a5 -> Language.R.Instance.R s2 a6
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr28 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a1 i6) =>
    (a2 -> a3 -> a4 -> a5 -> a6 -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 9,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C(C1(C1(U(U,U))))))))><S,U> -}
9da65c6278494d732920adf9e02720a0
  $fLiteral(->)ExtPtr29 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> a1 -> a2 -> a3 -> a4 -> Language.R.Instance.R s2 a5
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr3 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a11 i10,
     Language.R.Literal.Literal a1 i11) =>
    Language.R.Literal.Literal
      (a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 12,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ a7
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ a8
                      @ i7 :: Foreign.R.Type.SEXPTYPE
                      @ a9
                      @ i8 :: Foreign.R.Type.SEXPTYPE
                      @ a10
                      @ i9 :: Foreign.R.Type.SEXPTYPE
                      @ i10 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a7 i6)
                      (v8 :: Language.R.Literal.Literal a8 i7)
                      (v9 :: Language.R.Literal.Literal a9 i8)
                      (v10 :: Language.R.Literal.Literal a10 i9)
                      (v11 :: Language.R.Literal.Literal a i10).
                  @ (a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> a10
                     -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr19
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ a7
                     @ i6
                     @ a8
                     @ i7
                     @ a9
                     @ i8
                     @ a10
                     @ i9
                     @ i10
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9
                     v10
                     v11)
                    `cast`
                  (<a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> a9
                    -> a10
                    -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Internal.Error.unimplemented
                     @ (Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
                        -> a1
                        -> a2
                        -> a3
                        -> a4
                        -> a5
                        -> a6
                        -> a7
                        -> a8
                        -> a9
                        -> a10
                        -> Language.R.Instance.R s a)
                     (GHC.Base.build
                        @ GHC.Types.Char
                        (\ @ b ->
                         GHC.CString.unpackFoldrCString#
                           @ b
                           "thWrapperLiteral fromSEXP"#))) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr30 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4,
     Language.R.Literal.Literal a1 i5) =>
    (a2 -> a3 -> a4 -> a5 -> Language.R.Instance.R s a1)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 8,
     Strictness: <L,C(H)><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(1*U,A,C(U))><L,U(A,C(C1(U(U,U))),A)><L,C(C(C(C(C1(C1(U(U,U)))))))><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr4 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a10 i9,
     Language.R.Literal.Literal a1 i10) =>
    Language.R.Literal.Literal
      (a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 11,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ a7
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ a8
                      @ i7 :: Foreign.R.Type.SEXPTYPE
                      @ a9
                      @ i8 :: Foreign.R.Type.SEXPTYPE
                      @ i9 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a7 i6)
                      (v8 :: Language.R.Literal.Literal a8 i7)
                      (v9 :: Language.R.Literal.Literal a9 i8)
                      (v10 :: Language.R.Literal.Literal a i9).
                  @ (a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr20
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ a7
                     @ i6
                     @ a8
                     @ i7
                     @ a9
                     @ i8
                     @ i9
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9
                     v10)
                    `cast`
                  (<a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> a9
                    -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Internal.Error.unimplemented
                     @ (Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
                        -> a1
                        -> a2
                        -> a3
                        -> a4
                        -> a5
                        -> a6
                        -> a7
                        -> a8
                        -> a9
                        -> Language.R.Instance.R s a)
                     (GHC.Base.build
                        @ GHC.Types.Char
                        (\ @ b ->
                         GHC.CString.unpackFoldrCString#
                           @ b
                           "thWrapperLiteral fromSEXP"#))) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr5 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a9 i8,
     Language.R.Literal.Literal a1 i9) =>
    Language.R.Literal.Literal
      (a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 10,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ a7
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ a8
                      @ i7 :: Foreign.R.Type.SEXPTYPE
                      @ i8 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a7 i6)
                      (v8 :: Language.R.Literal.Literal a8 i7)
                      (v9 :: Language.R.Literal.Literal a i8).
                  @ (a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr22
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ a7
                     @ i6
                     @ a8
                     @ i7
                     @ i8
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9)
                    `cast`
                  (<a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr21
                     @ s1
                     @ a1
                     @ a2
                     @ a3
                     @ a4
                     @ a5
                     @ a6
                     @ a7
                     @ a8
                     @ s
                     @ a) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr6 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6, Language.R.Literal.Literal a8 i7,
     Language.R.Literal.Literal a1 i8) =>
    Language.R.Literal.Literal
      (a2
       -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 9,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ a7
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ i7 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a7 i6)
                      (v8 :: Language.R.Literal.Literal a i7).
                  @ (a1
                     -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr24
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ a7
                     @ i6
                     @ i7
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8)
                    `cast`
                  (<a1
                    -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr23
                     @ s1
                     @ a1
                     @ a2
                     @ a3
                     @ a4
                     @ a5
                     @ a6
                     @ a7
                     @ s
                     @ a) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr7 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a7 i6,
     Language.R.Literal.Literal a1 i7) =>
    Language.R.Literal.Literal
      (a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 8,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ a6
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ i6 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a6 i5)
                      (v7 :: Language.R.Literal.Literal a i6).
                  @ (a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr26
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ a6
                     @ i5
                     @ i6
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7)
                    `cast`
                  (<a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr25
                     @ s1
                     @ a1
                     @ a2
                     @ a3
                     @ a4
                     @ a5
                     @ a6
                     @ s
                     @ a) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr8 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4, Language.R.Literal.Literal a6 i5,
     Language.R.Literal.Literal a1 i6) =>
    Language.R.Literal.Literal
      (a2 -> a3 -> a4 -> a5 -> a6 -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 7,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ a5
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ i5 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a5 i4)
                      (v6 :: Language.R.Literal.Literal a i5).
                  @ (a1 -> a2 -> a3 -> a4 -> a5 -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr28
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ a5
                     @ i4
                     @ i5
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6)
                    `cast`
                  (<a1 -> a2 -> a3 -> a4 -> a5 -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr27
                     @ s1
                     @ a1
                     @ a2
                     @ a3
                     @ a4
                     @ a5
                     @ s
                     @ a) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral(->)ExtPtr9 ::
    (Control.DeepSeq.NFData a1, Language.R.Literal.Literal a2 i1,
     Language.R.Literal.Literal a3 i2, Language.R.Literal.Literal a4 i3,
     Language.R.Literal.Literal a5 i4,
     Language.R.Literal.Literal a1 i5) =>
    Language.R.Literal.Literal
      (a2 -> a3 -> a4 -> a5 -> Language.R.Instance.R s a1)
      'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 6,
     Strictness: <L,C(H)><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(U,A,C(U))><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ a1
                      @ i :: Foreign.R.Type.SEXPTYPE
                      @ a2
                      @ i1 :: Foreign.R.Type.SEXPTYPE
                      @ a3
                      @ i2 :: Foreign.R.Type.SEXPTYPE
                      @ a4
                      @ i3 :: Foreign.R.Type.SEXPTYPE
                      @ i4 :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a1 i)
                      (v2 :: Language.R.Literal.Literal a2 i1)
                      (v3 :: Language.R.Literal.Literal a3 i2)
                      (v4 :: Language.R.Literal.Literal a4 i3)
                      (v5 :: Language.R.Literal.Literal a i4).
                  @ (a1 -> a2 -> a3 -> a4 -> Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteral(->)ExtPtr30
                     @ a
                     @ a1
                     @ i
                     @ a2
                     @ i1
                     @ a3
                     @ i2
                     @ a4
                     @ i3
                     @ i4
                     @ s
                     v
                     v1
                     v2
                     v3
                     v4
                     v5)
                    `cast`
                  (<a1 -> a2 -> a3 -> a4 -> Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 ->
                   Language.R.Literal.$fLiteral(->)ExtPtr29
                     @ s1
                     @ a1
                     @ a2
                     @ a3
                     @ a4
                     @ s
                     @ a) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralComplexComplex ::
    Language.R.Literal.Literal
      (Data.Complex.Complex GHC.Types.Double) 'Foreign.R.Type.Complex
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Complex.Complex GHC.Types.Double)
                  @ 'Foreign.R.Type.Complex
                  Foreign.R.Type.$fSingISEXPTYPEComplex1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Complex>_N)
                  Language.R.Literal.$fLiteralComplexComplex2
                    `cast`
                  (<Data.Complex.Complex GHC.Types.Double>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Complex)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V
                                                   'Foreign.R.Type.Complex>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[4]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Complex)>_R)))
                  Language.R.Literal.$fLiteralComplexComplex_$cfromSEXP -}
91d8016875ff0292bf8ec2136058ae6f
  $fLiteralComplexComplex1 :: Data.Complex.Complex GHC.Types.Double
  {- Strictness: x -}
80b51b942772b3bc903da407a89cb849
  $fLiteralComplexComplex2 ::
    Data.Complex.Complex GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Complex #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Complex.Complex GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralComplexComplex_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEComplex1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Complex>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO (Data.Complex.Complex GHC.Types.Double))
                      (\ @ b1
                         (c :: GHC.Types.IO (Data.Complex.Complex GHC.Types.Double)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.mapFB
                         @ (GHC.Types.IO (Data.Complex.Complex GHC.Types.Double))
                         @ b1
                         @ (Data.Complex.Complex GHC.Types.Double)
                         c
                         (GHC.Base.$fApplicativeIO4
                            @ (Data.Complex.Complex GHC.Types.Double))
                           `cast`
                         (<Data.Complex.Complex GHC.Types.Double>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.Complex.Complex GHC.Types.Double>_R))
                         x
                         n))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[4]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Complex)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Complex)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Complex>_R)))
                   eta) -}
627e64fbaf0cc63031559a883390595b
  $fLiteralComplexComplex_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Complex
    -> Data.Complex.Complex GHC.Types.Double
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Complex) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Complex>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP @ s ww1 }) -}
b522f5f4aa37e587871a3c0c6873d1f7
  $fLiteralComplexComplex_$smkSEXPVectorIO ::
    Foreign.R.Type.SSEXPTYPE 'Foreign.R.Type.Complex
    -> [GHC.Types.IO
          (Data.Vector.SEXP.Base.ElemRep
             Control.Memory.Region.V 'Foreign.R.Type.Complex)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Complex #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralDoubleReal ::
    Language.R.Literal.Literal GHC.Types.Double 'Foreign.R.Type.Real
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ 'Foreign.R.Type.Real
                  Foreign.R.Type.$fSingISEXPTYPEReal1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N)
                  Language.R.Literal.$fLiteralDoubleReal2
                    `cast`
                  (<GHC.Types.Double>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Real)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V 'Foreign.R.Type.Real>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[3]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Real)>_R)))
                  Language.R.Literal.$fLiteralDoubleReal_$cfromSEXP -}
e6a9887b93949d721a515ffa6e5d79f9
  $fLiteralDoubleReal1 :: GHC.Types.Double
  {- Strictness: x -}
a324695741a1d33d936fb367f5b33fc3
  $fLiteralDoubleReal2 ::
    GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Real #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralDoubleReal_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEReal1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Real>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO GHC.Types.Double)
                      (\ @ b1
                         (c :: GHC.Types.IO GHC.Types.Double -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.mapFB
                         @ (GHC.Types.IO GHC.Types.Double)
                         @ b1
                         @ GHC.Types.Double
                         c
                         (GHC.Base.$fApplicativeIO4 @ GHC.Types.Double)
                           `cast`
                         (<GHC.Types.Double>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R))
                         x
                         n))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Real)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Real)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Real>_R)))
                   eta) -}
0751cf91ca9909bac3b6921391deccbe
  $fLiteralDoubleReal_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Real -> GHC.Types.Double
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Real) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Real>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP2 @ s ww1 }) -}
bf433956c0654db9644fe4f9c8389705
  $fLiteralDoubleReal_$smkSEXPVectorIO ::
    Foreign.R.Type.SSEXPTYPE 'Foreign.R.Type.Real
    -> [GHC.Types.IO
          (Data.Vector.SEXP.Base.ElemRep
             Control.Memory.Region.V 'Foreign.R.Type.Real)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Real #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralInt32Int ::
    Language.R.Literal.Literal GHC.Int.Int32 'Foreign.R.Type.Int
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  @ 'Foreign.R.Type.Int
                  Foreign.R.Type.$fSingISEXPTYPEInt1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N)
                  Language.R.Literal.$fLiteralInt32Int2
                    `cast`
                  (<GHC.Int.Int32>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Int)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V 'Foreign.R.Type.Int>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[2]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Int)>_R)))
                  Language.R.Literal.$fLiteralInt32Int_$cfromSEXP -}
1885cce389a8f4c9482f54e57c289a00
  $fLiteralInt32Int1 :: GHC.Int.Int32
  {- Strictness: x -}
583e71d048fd49f6288b7217ca4c7a9b
  $fLiteralInt32Int2 ::
    GHC.Int.Int32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Int.Int32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralInt32Int_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEInt1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Int>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO GHC.Int.Int32)
                      (\ @ b1
                         (c :: GHC.Types.IO GHC.Int.Int32 -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.mapFB
                         @ (GHC.Types.IO GHC.Int.Int32)
                         @ b1
                         @ GHC.Int.Int32
                         c
                         (GHC.Base.$fApplicativeIO4 @ GHC.Int.Int32)
                           `cast`
                         (<GHC.Int.Int32>_R ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int32>_R))
                         x
                         n))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Int)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Int)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Int>_R)))
                   eta) -}
eb2c16b6852043915df9d7fc3a28620b
  $fLiteralInt32Int_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Int -> GHC.Int.Int32
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Int) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Int>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP4 @ s ww1 }) -}
f08cf05319b577c3ce85bf24fc0fa2c8
  $fLiteralInt32Int_$smkSEXPVectorIO ::
    Foreign.R.Type.SSEXPTYPE 'Foreign.R.Type.Int
    -> [GHC.Types.IO
          (Data.Vector.SEXP.Base.ElemRep
             Control.Memory.Region.V 'Foreign.R.Type.Int)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Int #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralLogicalLogical ::
    Language.R.Literal.Literal
      Foreign.R.Type.Logical 'Foreign.R.Type.Logical
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.R.Type.Logical
                  @ 'Foreign.R.Type.Logical
                  Foreign.R.Type.$fSingISEXPTYPELogical1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Logical>_N)
                  Language.R.Literal.$fLiteralLogicalLogical2
                    `cast`
                  (<Foreign.R.Type.Logical>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Logical)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V
                                                   'Foreign.R.Type.Logical>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[1]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Logical)>_R)))
                  Language.R.Literal.$fLiteralLogicalLogical_$cfromSEXP -}
cefbb8de973567279a1aaf3bb8e8c2a3
  $fLiteralLogicalLogical1 :: Foreign.R.Type.Logical
  {- Strictness: x -}
a595879432f473470a6a2a601c7d2496
  $fLiteralLogicalLogical2 ::
    Foreign.R.Type.Logical
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Logical #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Foreign.R.Type.Logical)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralLogicalLogical_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPELogical1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Logical>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO Foreign.R.Type.Logical)
                      (\ @ b1
                         (c :: GHC.Types.IO Foreign.R.Type.Logical -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.mapFB
                         @ (GHC.Types.IO Foreign.R.Type.Logical)
                         @ b1
                         @ Foreign.R.Type.Logical
                         c
                         (GHC.Base.$fApplicativeIO4 @ Foreign.R.Type.Logical)
                           `cast`
                         (<Foreign.R.Type.Logical>_R
                          ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Type.Logical>_R))
                         x
                         n))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[1]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Logical)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Logical)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Logical>_R)))
                   eta) -}
85b88d66ae54bd2949e4a5fc0cd65bff
  $fLiteralLogicalLogical_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Logical
    -> Foreign.R.Type.Logical
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Logical) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Logical>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP6 @ s ww1 }) -}
f7739faa01384a469249f8a2a404d4b1
  $fLiteralLogicalLogical_$smkSEXPVectorIO ::
    Foreign.R.Type.SSEXPTYPE 'Foreign.R.Type.Logical
    -> [GHC.Types.IO
          (Data.Vector.SEXP.Base.ElemRep
             Control.Memory.Region.V 'Foreign.R.Type.Logical)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Logical #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U> -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralMVectorty ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    Language.R.Literal.Literal
      (Data.Vector.SEXP.Mutable.Internal.MVector
         Control.Memory.Region.V ty a)
      ty
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ ty :: Foreign.R.Type.SEXPTYPE
                      @ a
                      (v :: Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a).
                  @ (Data.Vector.SEXP.Mutable.Internal.MVector
                       Control.Memory.Region.V ty a)
                  @ ty
                  (Language.R.Literal.$fLiteralMVectorty_$cp1Literal @ ty @ a v)
                  (Language.R.Literal.$fLiteralMVectorty1 @ ty @ a v)
                    `cast`
                  (<Data.Vector.SEXP.Mutable.Internal.MVector
                      Control.Memory.Region.V ty a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R))
                  (Language.R.Literal.$fLiteralMVectorty_$cfromSEXP @ ty @ a v) -}
599a80b0eb32a8d132f72310fc19c0f6
  $fLiteralMVectorty1 ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      Control.Memory.Region.V ty a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP Control.Memory.Region.V ty #)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><L,1*U(U,U,U)><S,U>,
     Unfolding: (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   Control.Memory.Region.V ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             Control.Memory.Region.V ty a)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            Control.Memory.Region.V
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 Language.R.Instance.runRegion2
                   @ (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                   @ Control.Memory.Region.V
                   (Foreign.R.Internal.$fNFDataSEXP_$crnf
                      @ Control.Memory.Region.Void
                      @ ty)
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Foreign.R.Internal.SEXP Control.Memory.Region.Void ty>_N))
                   (case eta
                           `cast`
                         (Data.Vector.SEXP.Mutable.Internal.MVector
                            <Control.Memory.Region.V, Control.Monad.Primitive.PrimState
                                                        (Language.R.Instance.R
                                                           Control.Memory.Region.V)>
                            <ty>_P
                            <a>_P)_R of ww { Data.Vector.SEXP.Mutable.Internal.MVector ww1 ww2 ww3 ->
                    (Data.Vector.SEXP.Mutable.$wtoSEXP
                       @ (Language.R.Instance.R Control.Memory.Region.V)
                       @ ty
                       @ a
                       (Language.R.Instance.$fMonadRR @ Control.Memory.Region.Void)
                       $d(%,,,%)
                         `cast`
                       (GHC.Classes.(%,,,%)
                          <Foreign.Storable.Storable a>_N
                          <(Data.Singletons.SingI ty,
                            ty
                            Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                       'Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                       'Foreign.R.Type.Real,
                                                       'Foreign.R.Type.Complex,
                                                       'Foreign.R.Type.String,
                                                       'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                       'Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw])>_N
                          <Data.Singletons.SingI ty>_N
                          ((Data.Type.Equality.~)
                             <*>_N
                             (Data.Vector.SEXP.Base.ElemRep
                                (Sym (Language.R.Instance.D:R:PrimStateR[0]
                                          <Control.Memory.Region.Void>_N))
                                <ty>_N)_N
                             <a>_N)_N)_R
                       ww1
                       ww2
                       ww3)
                      `cast`
                    (Language.R.Instance.R
                       <Control.Memory.Region.V>_P
                       (Foreign.R.Internal.SEXP
                          (Language.R.Instance.D:R:PrimStateR[0] <Control.Memory.Region.V>_N)
                          <ty>_N)_N)_R })
                   eta1 }) -}
68d4528d66307aba1ea3bfad41329abb
  $fLiteralMVectorty_$cfromSEXP ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    forall s.
    Foreign.R.Internal.SEXP s ty
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         Control.Memory.Region.V ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(A,U(U,A),A,U(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a)
                   @ s
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 case Language.R.Literal.$w$cfromSEXP8
                        @ ty
                        @ a
                        w
                        @ s
                        ww1 of ww2 { (#,,#) ww3 ww4 ww5 ->
                 Data.Vector.SEXP.Mutable.Internal.MVector
                   @ Control.Memory.Region.V
                   @ ty
                   @ a
                   ww3
                   ww4
                   ww5 } }) -}
8e2897944116243fb7d61f448df92e9b
  $fLiteralMVectorty_$cp1Literal ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    Data.Singletons.SingI ty
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS(SL)LS(S)),U(A,1*U(1*U,A),A,1*U(1*U))>,
     Unfolding: (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   Control.Memory.Region.V ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            Control.Memory.Region.V
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 GHC.Classes.$p1(%,%)
                   @ (Data.Singletons.SingI ty)
                   @ (ty
                      Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                 'Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                 'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                 'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                 'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                 'Foreign.R.Type.Raw])
                   (GHC.Classes.$p2(%,,,%)
                      @ (Foreign.Storable.Storable a)
                      @ (Foreign.R.Type.IsVector ty)
                      @ (Data.Singletons.SingI ty)
                      @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                         Data.Type.Equality.~
                         (a :: *))
                      $d(%,,,%)) }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralRExtPtr ::
    (Control.DeepSeq.NFData a, Language.R.Literal.Literal a b) =>
    Language.R.Literal.Literal
      (Language.R.Instance.R s a) 'Foreign.R.Type.ExtPtr
  DFunId
  {- Arity: 2, Strictness: <L,C(H)><L,U(A,C(C1(U(U,U))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Control.DeepSeq.NFData a)
                      (v1 :: Language.R.Literal.Literal a b).
                  @ (Language.R.Instance.R s a)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Language.R.Literal.$fLiteralRExtPtr2 @ a @ b @ s v v1)
                    `cast`
                  (<Language.R.Instance.R s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (\ @ s1 -> Language.R.Literal.$fLiteralRExtPtr1 @ s1 @ s @ a) -}
941d8c4e10b5c02f4eff825f1981a433
  $fLiteralRExtPtr1 ::
    Foreign.R.Internal.SEXP s1 'Foreign.R.Type.ExtPtr
    -> Language.R.Instance.R s2 a
  {- Strictness: x -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralRExtPtr2 ::
    (Control.DeepSeq.NFData a, Language.R.Literal.Literal a b) =>
    Language.R.Instance.R s a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(H)><L,U(A,C(C1(U(U,U))),A)><L,C(C1(U(U,U)))><S,U>,
     Unfolding: (\ @ a
                   @ b :: Foreign.R.Type.SEXPTYPE
                   @ s
                   ($dNFData :: Control.DeepSeq.NFData a)
                   ($dLiteral :: Language.R.Literal.Literal a b)
                   (eta :: Language.R.Instance.R s a)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Language.R.Internal.FunWrappers.wrap0
                         (Language.R.Literal.$fHFunWrapRIO1
                            @ a
                            @ b
                            @ s
                            $dNFData
                            $dLiteral
                            eta)
                           `cast`
                         (Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP0>_R)))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Ptr.FunPtr (GHC.Types.IO Foreign.R.SEXP0)>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { GHC.Ptr.FunPtr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                        ds2
                        ipv of wild { (#,#) ds3 ds4 ->
                 (# ds3,
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp
                           Control.Memory.Region.V 'Foreign.R.Type.ExtPtr)
                      ds4 #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.TupleRep '[]>_R
                    <'GHC.Types.LiftedRep>_R
                    <GHC.Prim.State# GHC.Prim.RealWorld>_R
                    (Sym (Foreign.R.Internal.N:SEXP[0]
                              <Control.Memory.Region.V>_P
                              <'Foreign.R.Type.ExtPtr>_P)))_R } } }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralSEXPa ::
    Data.Singletons.SingI a =>
    Language.R.Literal.Literal (Foreign.R.Internal.SEXP s a) a
  DFunId
  {- Arity: 1, Strictness: <L,U>m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Foreign.R.Type.SEXPTYPE
                      @ s
                      (v :: Data.Singletons.SingI a).
                  @ (Foreign.R.Internal.SEXP s a)
                  @ a
                  v
                  (\ (eta :: Foreign.R.Internal.SEXP s a)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# eta1,
                      eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <s>_P <a>_P)
                           (Trans
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp s a, Language.R.HExp.HExp
                                                                Control.Memory.Region.V a>)_R
                                (Sym (Foreign.R.Internal.N:SEXP[0]
                                          <Control.Memory.Region.V>_P <a>_P)))) #))
                    `cast`
                  (<Foreign.R.Internal.SEXP s a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP Control.Memory.Region.V a>_R))
                  (Language.R.Literal.$fLiteralSEXPa_$cfromSEXP @ a @ s v) -}
4362002cf98ca0423442547a099c6301
  $fLiteralSEXPa_$cfromSEXP ::
    Data.Singletons.SingI a =>
    forall s1.
    Foreign.R.Internal.SEXP s1 a -> Foreign.R.Internal.SEXP s a
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Foreign.R.Type.SEXPTYPE
                   @ s
                   ($dSingI :: Data.Singletons.SingI a)
                   @ s1
                   (x :: Foreign.R.Internal.SEXP s1 a) ->
                 case x `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <s1>_P <a>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp s1 a, Language.R.HExp.HExp
                                                            s a>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                 case Foreign.R.Internal.$wunsafeCast
                        @ s
                        @ a
                        (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                           @ a
                           $dSingI
                             `cast`
                           (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <a>_N))
                          `cast`
                        (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                        (Foreign.R.Internal.SomeSEXP @ s @ a dt1) of ww { DEFAULT ->
                 (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a) ww)
                   `cast`
                 (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a>_P)) } }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralSomeSEXPAny ::
    Language.R.Literal.Literal
      (Foreign.R.Internal.SomeSEXP s) 'Foreign.R.Type.Any
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Foreign.R.Internal.SomeSEXP s)
                  @ 'Foreign.R.Type.Any
                  Foreign.R.Type.$fSingISEXPTYPEAny1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Any>_N)
                  (Language.R.Literal.$fLiteralSomeSEXPAny1 @ s)
                    `cast`
                  (<Foreign.R.Internal.SomeSEXP s>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.Any>_R))
                  (\ @ s1 -> Foreign.R.Internal.$WSomeSEXP @ s @ 'Foreign.R.Type.Any)
                    `cast`
                  (forall (s1 :: <*>_N).
                   Trans
                       (Foreign.R.Internal.N:SEXP[0] <s>_P <'Foreign.R.Type.Any>_P)
                       (Trans
                            (GHC.Ptr.Ptr
                               <Language.R.HExp.HExp s 'Foreign.R.Type.Any, Language.R.HExp.HExp
                                                                              s1
                                                                              'Foreign.R.Type.Any>)_R
                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                      <s1>_P <'Foreign.R.Type.Any>_P)))
                   ->_R <Foreign.R.Internal.SomeSEXP s>_R) -}
484eb921a610bb24ccf0e95e79f0be67
  $fLiteralSomeSEXPAny1 ::
    Foreign.R.Internal.SomeSEXP s
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Any #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   (ds :: Foreign.R.Internal.SomeSEXP s)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild { Foreign.R.Internal.SomeSEXP a dt ->
                 (# eta,
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a) dt)
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Language.R.HExp.HExp s a, Language.R.HExp.HExp
                                                         Control.Memory.Region.V
                                                         'Foreign.R.Type.Any>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <Control.Memory.Region.V>_P <'Foreign.R.Type.Any>_P))) #) }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteralVectorty ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    Language.R.Literal.Literal
      (Data.Vector.SEXP.Vector Control.Memory.Region.V ty a) ty
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ ty :: Foreign.R.Type.SEXPTYPE
                      @ a
                      (v :: Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a).
                  @ (Data.Vector.SEXP.Vector Control.Memory.Region.V ty a)
                  @ ty
                  (Language.R.Literal.$fLiteralMVectorty_$cp1Literal @ ty @ a v)
                  (Language.R.Literal.$fLiteralVectorty1 @ ty @ a v)
                    `cast`
                  (<Data.Vector.SEXP.Vector Control.Memory.Region.V ty a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R))
                  (Language.R.Literal.$fLiteralVectorty_$cfromSEXP @ ty @ a v) -}
02d0843259136dd60e22a2882816f734
  $fLiteralVectorty1 ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    Data.Vector.SEXP.Vector Control.Memory.Region.V ty a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP Control.Memory.Region.V ty #)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><L,1*U(U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   Control.Memory.Region.V ty a)
                   (eta :: Data.Vector.SEXP.Vector Control.Memory.Region.V ty a)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            Control.Memory.Region.V
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 (# eta1,
                    Data.Vector.SEXP.toSEXP
                      @ Control.Memory.Region.V
                      @ ty
                      @ a
                      $d(%,,,%)
                      eta #) }) -}
32da57c5a9e9aa2d80a727534fda7369
  $fLiteralVectorty_$cfromSEXP ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    forall s.
    Foreign.R.Internal.SEXP s ty
    -> Data.Vector.SEXP.Vector Control.Memory.Region.V ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a)
                   @ s
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP9 @ ty @ a w @ s ww1 }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral[]Complex ::
    Language.R.Literal.Literal
      [Data.Complex.Complex GHC.Types.Double] 'Foreign.R.Type.Complex
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Data.Complex.Complex GHC.Types.Double]
                  @ 'Foreign.R.Type.Complex
                  Foreign.R.Type.$fSingISEXPTYPEComplex1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Complex>_N)
                  Language.R.Literal.$fLiteral[]Complex1
                    `cast`
                  (<[Data.Complex.Complex GHC.Types.Double]>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Complex)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V
                                                   'Foreign.R.Type.Complex>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[4]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Complex)>_R)))
                  Language.R.Literal.$fLiteral[]Complex_$cfromSEXP -}
33e74d043b93f834358f8b30b11e4c56
  $fLiteral[]Complex1 ::
    [Data.Complex.Complex GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Complex #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Complex.Complex GHC.Types.Double])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralComplexComplex_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEComplex1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Complex>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO (Data.Complex.Complex GHC.Types.Double))
                      (\ @ b1
                         (c :: GHC.Types.IO (Data.Complex.Complex GHC.Types.Double)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Data.Complex.Complex GHC.Types.Double)
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Types.IO (Data.Complex.Complex GHC.Types.Double))
                            @ b1
                            @ (Data.Complex.Complex GHC.Types.Double)
                            c
                            (GHC.Base.$fApplicativeIO4
                               @ (Data.Complex.Complex GHC.Types.Double))
                              `cast`
                            (<Data.Complex.Complex GHC.Types.Double>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <Data.Complex.Complex GHC.Types.Double>_R)))
                         n
                         x))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[4]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Complex)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Complex)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Complex>_R)))
                   eta) -}
3673e9a97258140dbf6bdefd251a5f82
  $fLiteral[]Complex_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Complex
    -> [Data.Complex.Complex GHC.Types.Double]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Complex) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Complex>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP1 @ s ww1 }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral[]Int ::
    Language.R.Literal.Literal [GHC.Int.Int32] 'Foreign.R.Type.Int
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Int.Int32]
                  @ 'Foreign.R.Type.Int
                  Foreign.R.Type.$fSingISEXPTYPEInt1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N)
                  Language.R.Literal.$fLiteral[]Int1
                    `cast`
                  (<[GHC.Int.Int32]>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Int)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V 'Foreign.R.Type.Int>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[2]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Int)>_R)))
                  Language.R.Literal.$fLiteral[]Int_$cfromSEXP -}
5e563c85449d9cf238b9eb3dfa0cf271
  $fLiteral[]Int1 ::
    [GHC.Int.Int32]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Int.Int32])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralInt32Int_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEInt1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Int>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO GHC.Int.Int32)
                      (\ @ b1
                         (c :: GHC.Types.IO GHC.Int.Int32 -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Int.Int32
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Types.IO GHC.Int.Int32)
                            @ b1
                            @ GHC.Int.Int32
                            c
                            (GHC.Base.$fApplicativeIO4 @ GHC.Int.Int32)
                              `cast`
                            (<GHC.Int.Int32>_R ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)))
                         n
                         x))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Int)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Int)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Int>_R)))
                   eta) -}
5a311d09b80fb243a0677bd972389cea
  $fLiteral[]Int_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Int -> [GHC.Int.Int32]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Int) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Int>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP5 @ s ww1 }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral[]Logical ::
    Language.R.Literal.Literal
      [Foreign.R.Type.Logical] 'Foreign.R.Type.Logical
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Foreign.R.Type.Logical]
                  @ 'Foreign.R.Type.Logical
                  Foreign.R.Type.$fSingISEXPTYPELogical1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Logical>_N)
                  Language.R.Literal.$fLiteral[]Logical1
                    `cast`
                  (<[Foreign.R.Type.Logical]>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Logical)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V
                                                   'Foreign.R.Type.Logical>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[1]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Logical)>_R)))
                  Language.R.Literal.$fLiteral[]Logical_$cfromSEXP -}
a9ee69f6d1787bc93ee7c6c014549837
  $fLiteral[]Logical1 ::
    [Foreign.R.Type.Logical]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Logical #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Foreign.R.Type.Logical])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralLogicalLogical_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPELogical1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Logical>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO Foreign.R.Type.Logical)
                      (\ @ b1
                         (c :: GHC.Types.IO Foreign.R.Type.Logical -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Foreign.R.Type.Logical
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Types.IO Foreign.R.Type.Logical)
                            @ b1
                            @ Foreign.R.Type.Logical
                            c
                            (GHC.Base.$fApplicativeIO4 @ Foreign.R.Type.Logical)
                              `cast`
                            (<Foreign.R.Type.Logical>_R
                             ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Type.Logical>_R)))
                         n
                         x))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[1]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Logical)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Logical)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Logical>_R)))
                   eta) -}
4c528ea1ae175d29c33065edc7735626
  $fLiteral[]Logical_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Logical
    -> [Foreign.R.Type.Logical]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Logical) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Logical>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP7 @ s ww1 }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral[]Real ::
    Language.R.Literal.Literal [GHC.Types.Double] 'Foreign.R.Type.Real
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Double]
                  @ 'Foreign.R.Type.Real
                  Foreign.R.Type.$fSingISEXPTYPEReal1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N)
                  Language.R.Literal.$fLiteral[]Real1
                    `cast`
                  (<[GHC.Types.Double]>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.Real)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V 'Foreign.R.Type.Real>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[3]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.Real)>_R)))
                  Language.R.Literal.$fLiteral[]Real_$cfromSEXP -}
fac301697c83c1eaa9c8fcba1ea0fe02
  $fLiteral[]Real1 ::
    [GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Real #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Types.Double])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteralDoubleReal_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEReal1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Real>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO GHC.Types.Double)
                      (\ @ b1
                         (c :: GHC.Types.IO GHC.Types.Double -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Double
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Types.IO GHC.Types.Double)
                            @ b1
                            @ GHC.Types.Double
                            c
                            (GHC.Base.$fApplicativeIO4 @ GHC.Types.Double)
                              `cast`
                            (<GHC.Types.Double>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R)))
                         n
                         x))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.Real)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.Real)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Real>_R)))
                   eta) -}
77af83b6932e3a2e63287f3faad09ec7
  $fLiteral[]Real_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.Real
    -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.Real) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.Real>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP3 @ s ww1 }) -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral[]String ::
    Language.R.Literal.Literal GHC.Base.String 'Foreign.R.Type.String
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ 'Foreign.R.Type.String
                  Foreign.R.Type.$fSingISEXPTYPEString1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.String>_N)
                  Language.R.Literal.$fLiteral[]String1
                    `cast`
                  (<GHC.Base.String>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.String)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V
                                                   'Foreign.R.Type.String>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[5]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.String)>_R)))
                  Language.R.Literal.$fLiteral[]String_$cfromSEXP -}
532d88a9e167e159ea68e018312ebd01
  $fLiteral[]String0 ::
    Language.R.Literal.Literal [GHC.Base.String] 'Foreign.R.Type.String
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Base.String]
                  @ 'Foreign.R.Type.String
                  Foreign.R.Type.$fSingISEXPTYPEString1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.String>_N)
                  Language.R.Literal.$fLiteral[]String4
                    `cast`
                  (<[GHC.Base.String]>_R
                   ->_R Nth:3
                            (Trans
                                 (<[GHC.Types.IO
                                      (Data.Vector.SEXP.Base.ElemRep
                                         Control.Memory.Region.V 'Foreign.R.Type.String)]>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V
                                                   'Foreign.R.Type.String>_R))
                                 (([(GHC.Types.IO
                                       (Sub (Data.Vector.SEXP.Base.D:R:ElemRep[5]
                                                 <Control.Memory.Region.Void>_N)))_R])_R
                                  ->_R <GHC.Types.IO
                                          (Foreign.R.Internal.SEXP
                                             Control.Memory.Region.V 'Foreign.R.Type.String)>_R)))
                  Language.R.Literal.$fLiteral[]String0_$cfromSEXP -}
3d1d92ce074e25fe63d7ccb9850224a7
  $fLiteral[]String0_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.String
    -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.String) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.String>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP11 @ s ww1 }) -}
93fd6fec8aa637e737323f2672c9bd3f
  $fLiteral[]String1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteral[]String_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEString1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.String>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO
                           (Foreign.R.Internal.SEXP
                              Control.Memory.Region.V 'Foreign.R.Type.Char))
                      (\ @ b1
                         (c :: GHC.Types.IO
                                 (Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.Char)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.mapFB
                         @ (GHC.Types.IO
                              (Foreign.R.Internal.SEXP
                                 Control.Memory.Region.V 'Foreign.R.Type.Char))
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Language.R.Literal.$fLiteral[]String2
                           `cast`
                         (<GHC.Base.String>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Foreign.R.Internal.SEXP
                                           Control.Memory.Region.V 'Foreign.R.Type.Char>_R))
                         x
                         n))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[5]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.String)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.String)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.String>_R)))
                   eta) -}
b9e0cb3e1ff702e47cc4387f77d14ba3
  $fLiteral[]String2 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Char #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (str :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Foreign.charIsRepresentable3
                   @ (Foreign.R.Internal.SEXP
                        Control.Memory.Region.V 'Foreign.R.Type.Char)
                   GHC.IO.Encoding.UTF8.utf8
                   str
                   Language.R.Literal.$fLiteral[]String3
                     `cast`
                   (<Foreign.C.String.CString>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Foreign.R.Internal.SEXP
                                     Control.Memory.Region.V 'Foreign.R.Type.Char>_R))
                   eta) -}
8ed21f29523f959e2b14a65d4895de02
  $fLiteral[]String3 ::
    Foreign.C.String.CString
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Char #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Foreign.C.String.CString)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Ptr.Ptr ww1 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.Int#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                        ww1
                        1#
                        w2 of wild1 { (#,#) ds ds1 ->
                 (# ds,
                    (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           Control.Memory.Region.V
                                                           'Foreign.R.Type.Char>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <Control.Memory.Region.V>_P
                                   <'Foreign.R.Type.Char>_P))) #) } }) -}
d562bece50fa553354611d2f1e9345f4
  $fLiteral[]String4 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$fLiteral[]String_$smkSEXPVectorIO
                   Foreign.R.Type.$fSingISEXPTYPEString1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.String>_N)
                   (GHC.Base.build
                      @ (GHC.Types.IO
                           (Foreign.R.Internal.SEXP
                              Control.Memory.Region.V 'Foreign.R.Type.Char))
                      (\ @ b1
                         (c :: GHC.Types.IO
                                 (Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.Char)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Types.IO
                                 (Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.Char))
                            @ b1
                            @ [GHC.Types.Char]
                            c
                            Language.R.Literal.$fLiteral[]String2
                              `cast`
                            (<GHC.Base.String>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <Foreign.R.Internal.SEXP
                                              Control.Memory.Region.V 'Foreign.R.Type.Char>_R)))
                         n
                         x))
                     `cast`
                   (Nth:2
                        (Trans
                             (([(GHC.Types.IO
                                   (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[5]
                                                  <Control.Memory.Region.Void>_N))))_R])_R
                              ->_R <GHC.Types.IO
                                      (Foreign.R.Internal.SEXP
                                         Control.Memory.Region.V 'Foreign.R.Type.String)>_R)
                             (<[GHC.Types.IO
                                  (Data.Vector.SEXP.Base.ElemRep
                                     Control.Memory.Region.V 'Foreign.R.Type.String)]>_R
                              ->_R GHC.Types.N:IO[0]
                                       <Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.String>_R)))
                   eta) -}
75fd0877566ac0ea88a087074eeff732
  $fLiteral[]String_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s (w :: Foreign.R.Internal.SEXP s 'Foreign.R.Type.String) ->
                 case w `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <'Foreign.R.Type.String>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Language.R.Literal.$w$cfromSEXP10 @ s ww1 }) -}
4cc521b9cdcad0cf87e3530162e1381f
  $fLiteral[]String_$smkSEXPVectorIO ::
    Foreign.R.Type.SSEXPTYPE 'Foreign.R.Type.String
    -> [GHC.Types.IO
          (Data.Vector.SEXP.Base.ElemRep
             Control.Memory.Region.V 'Foreign.R.Type.String)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.String #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U> -}
59726df8d59231191d5ccef79edd807e
  $tc'C:HFunWrap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16223903148014853144##
                   12415779120551821351##
                   Language.R.Literal.$trModule
                   Language.R.Literal.$tc'C:HFunWrap2
                   2#
                   Language.R.Literal.$tc'C:HFunWrap1) -}
f0b8ba5058059b97f3aa8db7f60e81a7
  $tc'C:HFunWrap1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62b71aaf11533771f810e1a988cb1790
  $tc'C:HFunWrap2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.R.Literal.$tc'C:HFunWrap3) -}
899289ea6d85963839384aaae0626edf
  $tc'C:HFunWrap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:HFunWrap"#) -}
a365ec7e6cd347b87b7dade565171b8c
  $tcHFunWrap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9279688763839724155##
                   11934178971064874735##
                   Language.R.Literal.$trModule
                   Language.R.Literal.$tcHFunWrap2
                   0#
                   Language.R.Literal.$tcHFunWrap1) -}
44bb90a87f2e16776a0349dcf88b761c
  $tcHFunWrap1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1af1bea40c13ea1f54b68b455e3710dd
  $tcHFunWrap2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Literal.$tcHFunWrap3) -}
930f5ba181164c90a3c97fa3ed2e0a2f
  $tcHFunWrap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HFunWrap"#) -}
60fa4a67fc44767fbc4656e2d51d14cf
  $tcLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3431853296228447895##
                   3317618704581941967##
                   Language.R.Literal.$trModule
                   Language.R.Literal.$tcLiteral2
                   0#
                   Language.R.Literal.$tcLiteral1) -}
9c8094bfbbe1330b44a53e10860aa585
  $tcLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a9064787905210900757c2431355322e
  $tcLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Literal.$tcLiteral3) -}
9dbd59b117fbdc26b486a98164de50fb
  $tcLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Literal"#) -}
a55c33905fc54a163a26285524d29109
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.R.Literal.$trModule3
                   Language.R.Literal.$trModule1) -}
75fc91df3f22684f6d1f7adc9626078d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Literal.$trModule2) -}
ec0e0aa989c985cd64fddc5915f7a93a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.R.Literal"#) -}
9aa528258f27baffdf7e8e1953f8c572
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.R.Literal.$trModule4) -}
bff35edb0a385110721decd560976954
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
df5d35807850ab83a162a5b58bbd7bfd
  $w$cfromSEXP ::
    GHC.Prim.Addr# -> Data.Complex.Complex GHC.Types.Double
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ s (ww :: GHC.Prim.Addr#) ->
                 case Language.R.Literal.$w$cfromSEXP1 @ s ww of wild {
                   [] -> Language.R.Literal.$fLiteralComplexComplex1
                   : x ds
                   -> case ds of wild1 {
                        [] -> x
                        : ipv ipv1 -> Language.R.Literal.$fLiteralComplexComplex1 } }) -}
320226f484dca8a6a64fa258deb0ac26
  $w$cfromSEXP1 ::
    GHC.Prim.Addr# -> [Data.Complex.Complex GHC.Types.Double]
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
0fb4cb0d59e0a83a4dd86ed76fde8601
  $w$cfromSEXP10 :: GHC.Prim.Addr# -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
20c39eb4ace276bfdef5992383b83bea
  $w$cfromSEXP11 :: GHC.Prim.Addr# -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
af98a1f01ff52ec4354c816ffa7641d4
  $w$cfromSEXP2 :: GHC.Prim.Addr# -> GHC.Types.Double
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ s (ww :: GHC.Prim.Addr#) ->
                 case Language.R.Literal.$w$cfromSEXP3 @ s ww of wild {
                   [] -> Language.R.Literal.$fLiteralDoubleReal1
                   : x ds
                   -> case ds of wild1 {
                        [] -> x
                        : ipv ipv1 -> Language.R.Literal.$fLiteralDoubleReal1 } }) -}
858573eda36ebb52504da786028e5de4
  $w$cfromSEXP3 :: GHC.Prim.Addr# -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
13155b1f7fb586ddf9ad40f53657df7d
  $w$cfromSEXP4 :: GHC.Prim.Addr# -> GHC.Int.Int32
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ s (ww :: GHC.Prim.Addr#) ->
                 case Language.R.Literal.$w$cfromSEXP5 @ s ww of wild {
                   [] -> Language.R.Literal.$fLiteralInt32Int1
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Language.R.Literal.$fLiteralInt32Int1 } }) -}
a7cb200ed0e3d22ce0aa7006783f97b3
  $w$cfromSEXP5 :: GHC.Prim.Addr# -> [GHC.Int.Int32]
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
0282354731e79155d438e4b3a80af7cd
  $w$cfromSEXP6 :: GHC.Prim.Addr# -> Foreign.R.Type.Logical
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ s (ww :: GHC.Prim.Addr#) ->
                 case Language.R.Literal.$w$cfromSEXP7 @ s ww of wild {
                   [] -> Language.R.Literal.$fLiteralLogicalLogical1
                   : x ds
                   -> case ds of wild1 {
                        [] -> x
                        : ipv ipv1 -> Language.R.Literal.$fLiteralLogicalLogical1 } }) -}
9ec4011a38e8f6d5d46ed3d57160673e
  $w$cfromSEXP7 :: GHC.Prim.Addr# -> [Foreign.R.Type.Logical]
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
0a7dadb6b1de9bfd0ef3c9017ffff60a
  $w$cfromSEXP8 ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    forall s.
    GHC.Prim.Addr#
    -> (# GHC.Prim.Addr#, GHC.Prim.Int#, GHC.Prim.Int# #)
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(A,1*U(1*U,A),A,1*U(1*U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a)
                   @ s
                   (ww :: GHC.Prim.Addr#) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            Control.Memory.Region.V
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 case Foreign.R.Internal.$wunsafeCast
                        @ Control.Memory.Region.V
                        @ ty
                        (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                           @ ty
                           (GHC.Classes.$p1(%,%)
                              @ (Data.Singletons.SingI ty)
                              @ (ty
                                 Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                            'Foreign.R.Type.Logical,
                                                            'Foreign.R.Type.Int,
                                                            'Foreign.R.Type.Real,
                                                            'Foreign.R.Type.Complex,
                                                            'Foreign.R.Type.String,
                                                            'Foreign.R.Type.Vector,
                                                            'Foreign.R.Type.Expr,
                                                            'Foreign.R.Type.WeakRef,
                                                            'Foreign.R.Type.Raw])
                              (GHC.Classes.$p2(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 w))
                             `cast`
                           (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                          `cast`
                        (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                        (Foreign.R.Internal.SomeSEXP
                           @ Control.Memory.Region.V
                           @ ty
                           ww) of ww1 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int32 #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate#
                                @ GHC.Prim.RealWorld
                                s1 of s' { DEFAULT ->
                         case GHC.Prim.readInt32OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# ww1 32#)
                                0#
                                s' of ds2 { (#,#) ipv ipv1 ->
                         (# ipv,
                            GHC.Int.I32#
                              (GHC.Prim.narrow32Int# ipv1) #) } }) of ds { (#,#) ipv ipv1 ->
                 case ipv1 of dt { GHC.Int.I32# dt1 ->
                 (# ww1, 0#, dt1 #) } } } }) -}
f95a9c3d9e6fd9a0e03fb9a7edf41edb
  $w$cfromSEXP9 ::
    Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a =>
    forall s.
    GHC.Prim.Addr#
    -> Data.Vector.SEXP.Vector Control.Memory.Region.V ty a
  {- Arity: 2,
     Strictness: <S(LS(SL)LS(S)),U(U(C(U(U)),A,A,A,A,A,A,A),U(U,A),A,U(U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ ty :: Foreign.R.Type.SEXPTYPE
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR Control.Memory.Region.V ty a)
                   @ s
                   (ww :: GHC.Prim.Addr#) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            Control.Memory.Region.V
                                                            ty>_N <a>_N) of cobox { DEFAULT ->
                 case Foreign.R.Internal.$wunsafeCast
                        @ Control.Memory.Region.V
                        @ ty
                        (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                           @ ty
                           (GHC.Classes.$p1(%,%)
                              @ (Data.Singletons.SingI ty)
                              @ (ty
                                 Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                            'Foreign.R.Type.Logical,
                                                            'Foreign.R.Type.Int,
                                                            'Foreign.R.Type.Real,
                                                            'Foreign.R.Type.Complex,
                                                            'Foreign.R.Type.String,
                                                            'Foreign.R.Type.Vector,
                                                            'Foreign.R.Type.Expr,
                                                            'Foreign.R.Type.WeakRef,
                                                            'Foreign.R.Type.Raw])
                              (GHC.Classes.$p2(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ ((Data.Vector.SEXP.Base.ElemRep Control.Memory.Region.V ty :: *)
                                    Data.Type.Equality.~
                                    (a :: *))
                                 w))
                             `cast`
                           (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                          `cast`
                        (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                        (Foreign.R.Internal.SomeSEXP
                           @ Control.Memory.Region.V
                           @ ty
                           ww) of ww1 { DEFAULT ->
                 Data.Vector.SEXP.$wfromSEXP
                   @ Control.Memory.Region.V
                   @ ty
                   @ a
                   w
                   ww1 } }) -}
0734ab6ddafcb85a5f2492d50cf57ce9
  $wdynSEXP ::
    Language.R.Literal.Literal a ty =>
    Foreign.R.Internal.SomeSEXP s -> a
  {- Arity: 2, Strictness: <S(LLC(S)),U(U,A,1*C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: Language.R.Literal.Literal a ty)
                   (w1 :: Foreign.R.Internal.SomeSEXP s) ->
                 case w1 of wild { Foreign.R.Internal.SomeSEXP a1 dt ->
                 Language.R.Literal.fromSEXP
                   @ a
                   @ ty
                   w
                   @ Control.Memory.Region.V
                   (case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Foreign.R.Internal.SomeSEXP Control.Memory.Region.V #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.noDuplicate#
                                   @ GHC.Prim.RealWorld
                                   s1 of s' { DEFAULT ->
                            case (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                    @ ty
                                    (Language.R.Literal.$p1Literal @ a @ ty w)
                                      `cast`
                                    (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                   `cast`
                                 (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of wild1 {
                              DEFAULT
                              -> (# s',
                                    Foreign.R.Internal.SomeSEXP @ Control.Memory.Region.V @ a1 dt #)
                              Foreign.R.Type.Char
                              -> (Language.R.Internal.r1
                                    @ s
                                    @ a1
                                    Language.R.Literal.dynSEXP6
                                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a1) dt)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)))
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <Foreign.R.Internal.SomeSEXP Control.Memory.Region.V>_R)
                                   s'
                              Foreign.R.Type.Logical
                              -> (Language.R.Internal.r1
                                    @ s
                                    @ a1
                                    Language.R.Literal.dynSEXP5
                                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a1) dt)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)))
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <Foreign.R.Internal.SomeSEXP Control.Memory.Region.V>_R)
                                   s'
                              Foreign.R.Type.Int
                              -> (Language.R.Internal.r1
                                    @ s
                                    @ a1
                                    Language.R.Literal.dynSEXP4
                                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a1) dt)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)))
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <Foreign.R.Internal.SomeSEXP Control.Memory.Region.V>_R)
                                   s'
                              Foreign.R.Type.Real
                              -> (Language.R.Internal.r1
                                    @ s
                                    @ a1
                                    Language.R.Literal.dynSEXP3
                                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a1) dt)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)))
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <Foreign.R.Internal.SomeSEXP Control.Memory.Region.V>_R)
                                   s'
                              Foreign.R.Type.Complex
                              -> (Language.R.Internal.r1
                                    @ s
                                    @ a1
                                    Language.R.Literal.dynSEXP2
                                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a1) dt)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)))
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <Foreign.R.Internal.SomeSEXP Control.Memory.Region.V>_R)
                                   s'
                              Foreign.R.Type.Raw
                              -> (Language.R.Internal.r1
                                    @ s
                                    @ a1
                                    Language.R.Literal.dynSEXP1
                                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s a1) dt)
                                      `cast`
                                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <a1>_P)))
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <Foreign.R.Internal.SomeSEXP Control.Memory.Region.V>_R)
                                   s' } }) of ds { (#,#) ipv ipv1 ->
                    case Foreign.R.Internal.$wunsafeCast
                           @ Control.Memory.Region.V
                           @ ty
                           (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                              @ ty
                              (Language.R.Literal.$p1Literal @ a @ ty w)
                                `cast`
                              (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                             `cast`
                           (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                           ipv1 of ww { DEFAULT ->
                    (GHC.Ptr.Ptr
                       @ (Language.R.HExp.HExp Control.Memory.Region.V ty)
                       ww)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0]
                              <Control.Memory.Region.V>_P <ty>_P)) } }) }) -}
5ff8d9de11672acceb61e2d475848642
  $wfromSomeSEXP ::
    Language.R.Literal.Literal a form =>
    Foreign.R.Internal.SomeSEXP s -> a
  {- Arity: 2, Strictness: <S(LLC(S)),U(1*U,A,1*C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ s
                   @ a
                   @ form :: Foreign.R.Type.SEXPTYPE
                   (w :: Language.R.Literal.Literal a form)
                   (w1 :: Foreign.R.Internal.SomeSEXP s) ->
                 Language.R.Literal.fromSEXP
                   @ a
                   @ form
                   w
                   @ s
                   (case Foreign.R.Internal.$wunsafeCast
                           @ s
                           @ form
                           (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                              @ form
                              (Language.R.Literal.$p1Literal @ a @ form w)
                                `cast`
                              (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <form>_N))
                             `cast`
                           (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                           w1 of ww { DEFAULT ->
                    (GHC.Ptr.Ptr @ (Language.R.HExp.HExp s form) ww)
                      `cast`
                    (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <form>_P)) })) -}
28c59ddcc6b11686927ea8d4887d3aeb
  $wmkProtectedSEXPVector ::
    Foreign.R.Type.SSEXPTYPE b
    -> [Foreign.R.Internal.SEXP s a] -> Foreign.R.Internal.SEXP s b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: -}
796dd14629c95c55fda4b3f60651f602
  $wmkProtectedSEXPVectorIO ::
    Foreign.R.Type.SSEXPTYPE b
    -> [Foreign.R.Internal.SEXP s a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP s b #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0] -}
3636ffb0d0b3567d27137d8acbc6038a
  $wmkSEXPVector ::
    Foreign.Storable.Storable (Data.Vector.SEXP.Base.ElemRep s a) =>
    Foreign.R.Type.SSEXPTYPE a
    -> [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]
    -> Foreign.R.Internal.SEXP s a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><S,1*U><S,U>,
     Inline: -}
ec9f3dcaa6189e0ab3f79c67dbfca3fa
  $wmkSEXPVectorIO ::
    Foreign.Storable.Storable (Data.Vector.SEXP.Base.ElemRep s a) =>
    Foreign.R.Type.SSEXPTYPE a
    -> [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP s a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><S,1*U><S,U><S,U>,
     Inline: [0] -}
5d231fa05dea85061f6910edfa292997
  class HFunWrap a b | a -> b where
    hFunWrap :: a -> b
    {-# MINIMAL hFunWrap #-}
532d88a9e167e159ea68e018312ebd01
  class Data.Singletons.SingI ty =>
        Literal a (ty :: Foreign.R.Type.SEXPTYPE) | a -> ty where
    mkSEXPIO :: a
                -> GHC.Types.IO
                     (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
    default mkSEXPIO :: (Foreign.R.Type.IsVector ty,
                         Language.R.Literal.Literal [a] ty) =>
                        a
                        -> GHC.Types.IO
                             (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
    fromSEXP :: Foreign.R.Internal.SEXP s ty -> a
    default fromSEXP :: (Foreign.R.Type.IsVector ty,
                         Language.R.Literal.Literal [a] ty) =>
                        Foreign.R.Internal.SEXP s ty -> a
ad0bec7780ee08abb62c6bf9ce4b7a7b
  dynSEXP ::
    (Language.R.Literal.Literal a ty, Data.Singletons.SingI ty) =>
    Foreign.R.Internal.SomeSEXP s -> a
  {- Arity: 3, Strictness: <S(LLC(S)),U(U,A,C(U))><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: Language.R.Literal.Literal a ty)
                   (w1 :: Data.Singletons.SingI ty)
                   (w2 :: Foreign.R.Internal.SomeSEXP s) ->
                 Language.R.Literal.$wdynSEXP @ a @ s @ ty w w2) -}
208eb26f748ceccb567416939dfb1df7
  dynSEXP1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Language.R.Literal.dynSEXP_addr#
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Language.R.Literal.dynSEXP_addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
63df3687bc47f1362636e234c7fa7f5d
  dynSEXP2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Language.R.Literal.dynSEXP_addr#1
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Language.R.Literal.dynSEXP_addr#1
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
4107cc41d818a6b974f94786efe06da0
  dynSEXP3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Language.R.Literal.dynSEXP_addr#2
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Language.R.Literal.dynSEXP_addr#2
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
57f9608d6f943badb13be4811f3f3479
  dynSEXP4 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Language.R.Literal.dynSEXP_addr#3
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Language.R.Literal.dynSEXP_addr#3
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
07853064b4fb759fd90ed919495a3b1b
  dynSEXP5 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Language.R.Literal.dynSEXP_addr#4
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Language.R.Literal.dynSEXP_addr#4
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
b47693839adb1f1b0b6d544c091d5c5a
  dynSEXP6 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Language.R.Literal.dynSEXP_addr#5
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Language.R.Literal.dynSEXP_addr#5
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
9dce94b9a264a6bf54b05ed0e43b19be
  dynSEXP_addr# :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as.raw"#) -}
766a54ced783fac34cde8495906b4f19
  dynSEXP_addr#1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as.complex"#) -}
029e7e8f43c9e6b8aae881b53e39cc2c
  dynSEXP_addr#2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as.double"#) -}
84fc2eacab4dcd207393dfa4da6d8c4d
  dynSEXP_addr#3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as.integer"#) -}
1377cb2458fe471f3ae8929f8108739a
  dynSEXP_addr#4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as.logical"#) -}
0dc926081a34c781a5d35248b075986f
  dynSEXP_addr#5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as.character"#) -}
c8fcfde8044ebfb84db833c9b8134495
  fromPairList ::
    Foreign.R.Internal.SomeSEXP s
    -> [(GHC.Base.String, Foreign.R.Internal.SomeSEXP s)]
  {- Arity: 1, Strictness: <S,1*U> -}
6f12b6ef79ea1e6a2cd9574784500575
  fromSomeSEXP ::
    (Language.R.Literal.Literal a form, Data.Singletons.SingI form) =>
    Foreign.R.Internal.SomeSEXP s -> a
  {- Arity: 3, Strictness: <S(LLC(S)),U(U,A,C(U))><L,A><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ s
                   @ a
                   @ form :: Foreign.R.Type.SEXPTYPE
                   (w :: Language.R.Literal.Literal a form)
                   (w1 :: Data.Singletons.SingI form)
                   (w2 :: Foreign.R.Internal.SomeSEXP s) ->
                 Language.R.Literal.$wfromSomeSEXP @ s @ a @ form w w2) -}
9bf865105ec3331e936b19eeec7d1bbf
  funToSEXP ::
    Language.R.Literal.HFunWrap a b =>
    (b -> GHC.Types.IO (GHC.Ptr.FunPtr b))
    -> a
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s 'Foreign.R.Type.ExtPtr)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SS(S)))),1*C1(C1(U(U,1*U(U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Literal.funToSEXP1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (s :: <*>_N).
                 <Language.R.Literal.HFunWrap a b>_R
                 ->_R <b -> GHC.Types.IO (GHC.Ptr.FunPtr b)>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Foreign.R.Internal.SEXP s 'Foreign.R.Type.ExtPtr>_R)) -}
13f7ac7d18c5af54b3da18408277ff7d
  funToSEXP1 ::
    Language.R.Literal.HFunWrap a b =>
    (b -> GHC.Types.IO (GHC.Ptr.FunPtr b))
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP s 'Foreign.R.Type.ExtPtr #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SS(S)))),1*C1(C1(U(U,1*U(U))))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ s
                   ($dHFunWrap :: Language.R.Literal.HFunWrap a b)
                   (w :: b -> GHC.Types.IO (GHC.Ptr.FunPtr b))
                   (x :: a)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (w ($dHFunWrap
                            `cast`
                          (Language.R.Literal.N:HFunWrap[0] <a>_N <b>_N)
                            x))
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.Ptr.FunPtr b>_R)
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { GHC.Ptr.FunPtr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz GHC.Prim.Addr#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                        ds2
                        ipv of wild { (#,#) ds3 ds4 ->
                 (# ds3,
                    GHC.Ptr.Ptr
                      @ (Language.R.HExp.HExp s 'Foreign.R.Type.ExtPtr)
                      ds4 #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.TupleRep '[]>_R
                    <'GHC.Types.LiftedRep>_R
                    <GHC.Prim.State# GHC.Prim.RealWorld>_R
                    (Sym (Foreign.R.Internal.N:SEXP[0]
                              <s>_P <'Foreign.R.Type.ExtPtr>_P)))_R } } }) -}
0f622b3af4c65408c141c8b24246bfe8
  mkProtectedSEXPVector ::
    Foreign.R.Type.IsVector b =>
    Foreign.R.Type.SSEXPTYPE b
    -> [Foreign.R.Internal.SEXP s a] -> Foreign.R.Internal.SEXP s b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ b :: Foreign.R.Type.SEXPTYPE
                   @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (w :: Foreign.R.Type.IsVector b)
                   (w1 :: Foreign.R.Type.SSEXPTYPE b)
                   (w2 :: [Foreign.R.Internal.SEXP s a]) ->
                 Language.R.Literal.$wmkProtectedSEXPVector @ b @ s @ a w1 w2) -}
145126fd5e2d4a5efc106a4701a9cd17
  mkProtectedSEXPVectorIO ::
    Foreign.R.Type.IsVector b =>
    Foreign.R.Type.SSEXPTYPE b
    -> [Foreign.R.Internal.SEXP s a]
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s b)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,U><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Literal.mkProtectedSEXPVectorIO1
                  `cast`
                (forall (b :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <*>_N) (a :: <Foreign.R.Type.SEXPTYPE>_N).
                 <Foreign.R.Type.IsVector b>_R
                 ->_R <Foreign.R.Type.SSEXPTYPE b>_R
                 ->_R <[Foreign.R.Internal.SEXP s a]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s b>_R)) -}
fde6d3e5598ac722c19a7061d5587860
  mkProtectedSEXPVectorIO1 ::
    Foreign.R.Type.IsVector b =>
    Foreign.R.Type.SSEXPTYPE b
    -> [Foreign.R.Internal.SEXP s a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP s b #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ b :: Foreign.R.Type.SEXPTYPE
                   @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (w :: Foreign.R.Type.IsVector b)
                   (w1 :: Foreign.R.Type.SSEXPTYPE b)
                   (w2 :: [Foreign.R.Internal.SEXP s a])
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$wmkProtectedSEXPVectorIO
                   @ b
                   @ s
                   @ a
                   w1
                   w2
                   w3) -}
227b6a1a1996d03d8bfa6e49e3c30d67
  mkSEXP ::
    (Language.R.Literal.Literal a b, Control.Monad.R.Class.MonadR m) =>
    a -> m (Foreign.R.Internal.SEXP (Control.Monad.R.Class.Region m) b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U),A)><S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,1*U(1*U(A,1*C1(C1(U)),A,A,A),A),A,A,A,1*C1(U),1*C1(U),A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b :: Foreign.R.Type.SEXPTYPE
                   @ m :: * -> *
                   ($dLiteral :: Language.R.Literal.Literal a b)
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   (eta :: a) ->
                 GHC.Base.>>=
                   @ m
                   (Control.Monad.IO.Class.$p1MonadIO
                      @ m
                      (Control.Monad.R.Class.$p2MonadR @ m $dMonadR))
                   @ (Foreign.R.Internal.SEXP Control.Memory.Region.V b)
                   @ (Foreign.R.Internal.SEXP (Control.Monad.Primitive.PrimState m) b)
                   (Control.Monad.R.Class.io
                      @ m
                      $dMonadR
                      @ (Foreign.R.Internal.SEXP Control.Memory.Region.V b)
                      (Language.R.Literal.mkSEXPIO @ a @ b $dLiteral eta))
                   (Control.Monad.R.Class.acquire
                      @ m
                      $dMonadR
                      @ Control.Memory.Region.V
                      @ b
                      (GHC.Types.Eq#
                         @ *
                         @ *
                         @ Control.Memory.Region.Void
                         @ Control.Memory.Region.Void
                         @~ <Control.Memory.Region.Void>_N)
                        `cast`
                      (Sym (Data.Type.Equality.N:~[0]
                                <*>_N) <Control.Memory.Region.Void>_N <Control.Memory.Region.Void>_N))) -}
9cf80815ac602f8a0c58640dcce73267
  mkSEXPVector ::
    (Foreign.Storable.Storable (Data.Vector.SEXP.Base.ElemRep s a),
     Foreign.R.Type.IsVector a) =>
    Foreign.R.Type.SSEXPTYPE a
    -> [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]
    -> Foreign.R.Internal.SEXP s a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,A><S,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (w :: Foreign.Storable.Storable
                           (Data.Vector.SEXP.Base.ElemRep s a))
                   (w1 :: Foreign.R.Type.IsVector a)
                   (w2 :: Foreign.R.Type.SSEXPTYPE a)
                   (w3 :: [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]) ->
                 Language.R.Literal.$wmkSEXPVector @ s @ a w w2 w3) -}
8b27008bfafab49d4bde9831c387000f
  mkSEXPVectorIO ::
    (Foreign.Storable.Storable (Data.Vector.SEXP.Base.ElemRep s a),
     Foreign.R.Type.IsVector a) =>
    Foreign.R.Type.SSEXPTYPE a
    -> [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,A><S,1*U><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.R.Literal.mkSEXPVectorIO1
                  `cast`
                (forall (s :: <*>_N) (a :: <Foreign.R.Type.SEXPTYPE>_N).
                 <Foreign.Storable.Storable (Data.Vector.SEXP.Base.ElemRep s a)>_R
                 ->_R <Foreign.R.Type.IsVector a>_R
                 ->_R <Foreign.R.Type.SSEXPTYPE a>_R
                 ->_R <[GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s a>_R)) -}
2166932a36c7841c1b3f685dcf51f74b
  mkSEXPVectorIO1 ::
    (Foreign.Storable.Storable (Data.Vector.SEXP.Base.ElemRep s a),
     Foreign.R.Type.IsVector a) =>
    Foreign.R.Type.SSEXPTYPE a
    -> [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP s a #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,A><S,1*U><S,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ s
                   @ a :: Foreign.R.Type.SEXPTYPE
                   (w :: Foreign.Storable.Storable
                           (Data.Vector.SEXP.Base.ElemRep s a))
                   (w1 :: Foreign.R.Type.IsVector a)
                   (w2 :: Foreign.R.Type.SSEXPTYPE a)
                   (w3 :: [GHC.Types.IO (Data.Vector.SEXP.Base.ElemRep s a)])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Language.R.Literal.$wmkSEXPVectorIO @ s @ a w w2 w3 w4) -}
8c4289cc3104ea7ac963c3decfffe330
  toPairList ::
    Control.Monad.R.Class.MonadR m =>
    [(GHC.Base.String,
      Foreign.R.Internal.SomeSEXP (Control.Monad.R.Class.Region m))]
    -> m (Foreign.R.Internal.SomeSEXP (Control.Monad.R.Class.Region m))
  {- Arity: 2,
     Strictness: <S(LS(SL)LLLLLLL),U(U(U(C(C1(U)),A),A,A,A,A,A),U(U(A,C(C1(U)),A,C(U),A),A),A,A,A,C(U),C(U),A,A)><S,1*U> -}
instance Language.R.Literal.HFunWrap [(->), (->)]
  = Language.R.Literal.$fHFunWrap(->)(->)
instance Language.R.Literal.HFunWrap [Language.R.Instance.R,
                                      GHC.Types.IO]
  = Language.R.Literal.$fHFunWrapRIO
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr0
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr1
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr10
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr2
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr3
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr4
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr5
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr6
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr7
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr8
instance Language.R.Literal.Literal [(->), Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteral(->)ExtPtr9
instance Language.R.Literal.Literal [Data.Complex.Complex,
                                     Foreign.R.Type.Complex]
  = Language.R.Literal.$fLiteralComplexComplex
instance Language.R.Literal.Literal [GHC.Types.Double,
                                     Foreign.R.Type.Real]
  = Language.R.Literal.$fLiteralDoubleReal
instance Language.R.Literal.Literal [GHC.Int.Int32,
                                     Foreign.R.Type.Int]
  = Language.R.Literal.$fLiteralInt32Int
instance Language.R.Literal.Literal [Foreign.R.Type.Logical,
                                     Foreign.R.Type.Logical]
  = Language.R.Literal.$fLiteralLogicalLogical
instance Language.R.Literal.Literal [Data.Vector.SEXP.Mutable.Internal.MVector,
                                     .]
  = Language.R.Literal.$fLiteralMVectorty
instance Language.R.Literal.Literal [Language.R.Instance.R,
                                     Foreign.R.Type.ExtPtr]
  = Language.R.Literal.$fLiteralRExtPtr
instance Language.R.Literal.Literal [Foreign.R.Internal.SEXP, .]
  = Language.R.Literal.$fLiteralSEXPa
instance Language.R.Literal.Literal [Foreign.R.Internal.SomeSEXP,
                                     Foreign.R.Type.Any]
  = Language.R.Literal.$fLiteralSomeSEXPAny
instance Language.R.Literal.Literal [Data.Vector.SEXP.Vector, .]
  = Language.R.Literal.$fLiteralVectorty
instance Language.R.Literal.Literal [[], Foreign.R.Type.Complex]
  = Language.R.Literal.$fLiteral[]Complex
instance Language.R.Literal.Literal [[], Foreign.R.Type.Int]
  = Language.R.Literal.$fLiteral[]Int
instance Language.R.Literal.Literal [[], Foreign.R.Type.Logical]
  = Language.R.Literal.$fLiteral[]Logical
instance Language.R.Literal.Literal [[], Foreign.R.Type.Real]
  = Language.R.Literal.$fLiteral[]Real
instance Language.R.Literal.Literal [[], Foreign.R.Type.String]
  = Language.R.Literal.$fLiteral[]String
instance Language.R.Literal.Literal [[], Foreign.R.Type.String]
  = Language.R.Literal.$fLiteral[]String0
"SPEC mkSEXPVectorIO @ V @ 'Complex" forall ($d(%,%) :: Foreign.R.Type.IsVector
                                                          'Foreign.R.Type.Complex)
                                            ($dStorable :: Foreign.Storable.Storable
                                                             (Data.Vector.SEXP.Base.ElemRep
                                                                Control.Memory.Region.V
                                                                'Foreign.R.Type.Complex))
  Language.R.Literal.mkSEXPVectorIO1 @ Control.Memory.Region.Void
                                     @ 'Foreign.R.Type.Complex
                                     $dStorable
                                     $d(%,%)
  = Language.R.Literal.$fLiteralComplexComplex_$smkSEXPVectorIO
"SPEC mkSEXPVectorIO @ V @ 'Int" forall ($d(%,%) :: Foreign.R.Type.IsVector
                                                      'Foreign.R.Type.Int)
                                        ($dStorable :: Foreign.Storable.Storable
                                                         (Data.Vector.SEXP.Base.ElemRep
                                                            Control.Memory.Region.V
                                                            'Foreign.R.Type.Int))
  Language.R.Literal.mkSEXPVectorIO1 @ Control.Memory.Region.Void
                                     @ 'Foreign.R.Type.Int
                                     $dStorable
                                     $d(%,%)
  = Language.R.Literal.$fLiteralInt32Int_$smkSEXPVectorIO
"SPEC mkSEXPVectorIO @ V @ 'Logical" forall ($d(%,%) :: Foreign.R.Type.IsVector
                                                          'Foreign.R.Type.Logical)
                                            ($dStorable :: Foreign.Storable.Storable
                                                             (Data.Vector.SEXP.Base.ElemRep
                                                                Control.Memory.Region.V
                                                                'Foreign.R.Type.Logical))
  Language.R.Literal.mkSEXPVectorIO1 @ Control.Memory.Region.Void
                                     @ 'Foreign.R.Type.Logical
                                     $dStorable
                                     $d(%,%)
  = Language.R.Literal.$fLiteralLogicalLogical_$smkSEXPVectorIO
"SPEC mkSEXPVectorIO @ V @ 'Real" forall ($d(%,%) :: Foreign.R.Type.IsVector
                                                       'Foreign.R.Type.Real)
                                         ($dStorable :: Foreign.Storable.Storable
                                                          (Data.Vector.SEXP.Base.ElemRep
                                                             Control.Memory.Region.V
                                                             'Foreign.R.Type.Real))
  Language.R.Literal.mkSEXPVectorIO1 @ Control.Memory.Region.Void
                                     @ 'Foreign.R.Type.Real
                                     $dStorable
                                     $d(%,%)
  = Language.R.Literal.$fLiteralDoubleReal_$smkSEXPVectorIO
"SPEC mkSEXPVectorIO @ V @ 'String" forall ($d(%,%) :: Foreign.R.Type.IsVector
                                                         'Foreign.R.Type.String)
                                           ($dStorable :: Foreign.Storable.Storable
                                                            (Data.Vector.SEXP.Base.ElemRep
                                                               Control.Memory.Region.V
                                                               'Foreign.R.Type.String))
  Language.R.Literal.mkSEXPVectorIO1 @ Control.Memory.Region.Void
                                     @ 'Foreign.R.Type.String
                                     $dStorable
                                     $d(%,%)
  = Language.R.Literal.$fLiteral[]String_$smkSEXPVectorIO
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

