
==================== FINAL INTERFACE ====================
2017-12-28 08:49:44.68723 UTC

interface inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Language.R.Internal.FunWrappers.TH 8022
  interface hash: 28cf81b787c8d0021c3a3945e2d78419
  ABI hash: d6163568add535beef0e5afc8b94de84
  export-list hash: a3366d7ec050d0d707097a3f42a340be
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: be28bd6fe3b646e00de9465bfc7d7bc9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.R.Internal.FunWrappers.TH.thWrapper
  Language.R.Internal.FunWrappers.TH.thWrapperLiteral
  Language.R.Internal.FunWrappers.TH.thWrapperLiterals
  Language.R.Internal.FunWrappers.TH.thWrappers
module dependencies: Foreign.R.Constraints Foreign.R.Type
                     Internal.Error
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 mtl-2.2.1
                      pretty-1.1.3.3 primitive-0.6.2.0 safe-0.3.15 singletons-2.3.1
                      syb-0.7 template-haskell-2.12.0.0 text-1.2.2.2 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 transformers-0.5.2.0
                      vector-0.12.0.1
orphans: singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz:Foreign.R.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Traversable 60ea7c2973e63de7d08d5d0269f96e67
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
  exports: 5754d5cde3f2758aa360e9e8b66ebc71
  ExtPtr 09861da2031986d92237c2e2fd47f695
import  -/  Internal.Error 740162e156c3d9ec6fcb98a35435f6ce
  exports: 13dcfd343f68bd642398afc1dc7f61a0
  impossible a4c52844231a41b3412f8e2cbb31b1ac
  unimplemented 8b7f071ba26c09d6b472c8188a7279bf
import  -/  template-haskell-2.12.0.0:Language.Haskell.TH d7e4e65d21f6d5a32dbf1c79a4ca2723
import  -/  template-haskell-2.12.0.0:Language.Haskell.TH.Lib bda195ec35e92c198ea9974455154870
import  -/  template-haskell-2.12.0.0:Language.Haskell.TH.Syntax 89a468ec90271d2f2ee599dc8318cc79
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
b4905f7d36629d1ac629f7f533bbdf1d
  $s$wreplicateM1 ::
    GHC.Prim.Int#
    -> Language.Haskell.TH.Syntax.Q a
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U><L,C(U)><S(S(S(SLLLL)L)LLLLLLLLLLLLLLLLLLLLL),U(U(U(U(U(U,U),U,U,U,U,U),U,U,U,U),U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Language.Haskell.TH.Syntax.Q a)
                   @ m :: * -> *
                   (eta :: Language.Haskell.TH.Syntax.Quasi m) ->
                 letrec {
                   $wloop1 :: GHC.Prim.Int#
                              -> forall (m1 :: * -> *).
                                 Language.Haskell.TH.Syntax.Quasi m1 =>
                                 m1 [a]
                     {- Arity: 2,
                        Strictness: <S,U><S(S(S(SLLLL)L)LLLLLLLLLLLLLLLLLLLLL),U(U(U(U(U(U,U),U,U,U,U,U),U,U,U,U),U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
                        Inline: [0] -}
                   = \ (ww1 :: GHC.Prim.Int#)
                       @ m1 :: * -> *
                       (w :: Language.Haskell.TH.Syntax.Quasi m1) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww1 0#) of wild1 {
                       GHC.Types.False
                       -> GHC.Base.<*>
                            @ m1
                            (GHC.Base.$p1Monad
                               @ m1
                               (Control.Monad.Fail.$p1MonadFail
                                  @ m1
                                  (Language.Haskell.TH.Syntax.$p1Quasi @ m1 w)))
                            @ [a]
                            @ [a]
                            (Language.Haskell.TH.Syntax.$fApplicativeQ3
                               @ a
                               @ ([a] -> [a])
                               (GHC.Types.: @ a)
                               w1
                               @ m1
                               w)
                            ($wloop1 (GHC.Prim.-# ww1 1#) @ m1 w)
                       GHC.Types.True
                       -> GHC.Base.pure
                            @ m1
                            (GHC.Base.$p1Monad
                               @ m1
                               (Control.Monad.Fail.$p1MonadFail
                                  @ m1
                                  (Language.Haskell.TH.Syntax.$p1Quasi @ m1 w)))
                            @ [a]
                            (GHC.Types.[] @ a) }
                 } in
                 $wloop1 ww @ m eta) -}
fb7fcf0aa4acd47afad6fd3fffdec215
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.R.Internal.FunWrappers.TH.$trModule3
                   Language.R.Internal.FunWrappers.TH.$trModule1) -}
aaecad9a187377ffada56da546cf7770
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.R.Internal.FunWrappers.TH.$trModule2) -}
cbd56dd02c4646d826155613686e43e1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.R.Internal.FunWrappers.TH"#) -}
8d00eb46356510ff10a44cf73b610a98
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.R.Internal.FunWrappers.TH.$trModule4) -}
0bd89c209f442e5b845466ec074d4f89
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("inline-r-0.9.0.2-CmRL2Hikuao7dNZScoizZz"#) -}
b9b2cde6748c977d75bbd018faea0514
  $wthWrapperLiterals ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go3 :: GHC.Prim.Int#
                               -> forall (m :: * -> *).
                                  Language.Haskell.TH.Syntax.Quasi m =>
                                  m [Language.Haskell.TH.Syntax.Dec]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          Language.Haskell.TH.Syntax.$fApplicativeQ2
                            @ [Language.Haskell.TH.Syntax.Dec]
                            @ [Language.Haskell.TH.Syntax.Dec]
                            @ Language.Haskell.TH.Syntax.Dec
                            (GHC.Types.: @ Language.Haskell.TH.Syntax.Dec)
                            (Language.R.Internal.FunWrappers.TH.thWrapperLiteral
                               (GHC.Types.I# x))
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww1) of wild1 {
                               GHC.Types.False
                               -> (go3 (GHC.Prim.+# x 1#))
                                    `cast`
                                  (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                            <[Language.Haskell.TH.Syntax.Dec]>_N))
                               GHC.Types.True
                               -> Language.R.Internal.FunWrappers.TH.thWrapperLiterals1
                                    `cast`
                                  (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                            <[Language.Haskell.TH.Syntax.Dec]>_N)) })
                      } in
                      (go3 ww)
                        `cast`
                      (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                <[Language.Haskell.TH.Syntax.Dec]>_N))
                   GHC.Types.True
                   -> Language.R.Internal.FunWrappers.TH.thWrapperLiterals1
                        `cast`
                      (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                <[Language.Haskell.TH.Syntax.Dec]>_N)) }) -}
c4cc5e9eb9a98f67ccfbd08fbb9e958f
  $wthWrappers ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go3 :: GHC.Prim.Int#
                               -> forall (m :: * -> *).
                                  Language.Haskell.TH.Syntax.Quasi m =>
                                  m [Language.Haskell.TH.Syntax.Dec]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          Language.Haskell.TH.Syntax.$fApplicativeQ2
                            @ [Language.Haskell.TH.Syntax.Dec]
                            @ [Language.Haskell.TH.Syntax.Dec]
                            @ Language.Haskell.TH.Syntax.Dec
                            (GHC.Types.: @ Language.Haskell.TH.Syntax.Dec)
                            (Language.R.Internal.FunWrappers.TH.thWrapper (GHC.Types.I# x))
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww1) of wild1 {
                               GHC.Types.False
                               -> (go3 (GHC.Prim.+# x 1#))
                                    `cast`
                                  (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                            <[Language.Haskell.TH.Syntax.Dec]>_N))
                               GHC.Types.True
                               -> Language.R.Internal.FunWrappers.TH.thWrapperLiterals1
                                    `cast`
                                  (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                            <[Language.Haskell.TH.Syntax.Dec]>_N)) })
                      } in
                      (go3 ww)
                        `cast`
                      (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                <[Language.Haskell.TH.Syntax.Dec]>_N))
                   GHC.Types.True
                   -> Language.R.Internal.FunWrappers.TH.thWrapperLiterals1
                        `cast`
                      (Sym (Language.Haskell.TH.Syntax.N:Q[0]
                                <[Language.Haskell.TH.Syntax.Dec]>_N)) }) -}
ad6044777c5b3b96e0b09b98a71ae581
  thWrapper ::
    GHC.Types.Int
    -> Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Dec
  {- Arity: 1, Strictness: <L,U(U)> -}
2b28bce6090244bb7fc5443e5cdc9d49
  thWrapperLiteral ::
    GHC.Types.Int
    -> Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Dec
  {- Arity: 1, Strictness: <L,U(U)> -}
9e84d054260e78fe0da62eca11efe4a7
  thWrapperLiterals ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Language.R.Internal.FunWrappers.TH.$wthWrapperLiterals
                   ww1
                   ww3 } }) -}
89f320a9a62ebfa8181cbcfe9016106d
  thWrapperLiterals1 ::
    Language.Haskell.TH.Syntax.Quasi m =>
    m [Language.Haskell.TH.Syntax.Dec]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(S(LC(S)LLLL)LLLL)L)LLLLLLLLLLLLLLLLLLLLL),1*U(1*U(1*U(1*U(A,1*C1(U),A,A,A,A),A,A,A,A),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ m :: * -> *
                   ($dQuasi :: Language.Haskell.TH.Syntax.Quasi m) ->
                 GHC.Base.pure
                   @ m
                   (GHC.Base.$p1Monad
                      @ m
                      (Control.Monad.Fail.$p1MonadFail
                         @ m
                         (Language.Haskell.TH.Syntax.$p1Quasi @ m $dQuasi)))
                   @ [Language.Haskell.TH.Syntax.Dec]
                   (GHC.Types.[] @ Language.Haskell.TH.Syntax.Dec)) -}
f809a33a885dcdc3dc6f0459e52d2d22
  thWrappers ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Language.R.Internal.FunWrappers.TH.$wthWrappers ww1 ww3 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

