
==================== FINAL INTERFACE ====================
2017-12-28 08:50:03.969152 UTC

interface main:Test.FunPtr 8022
  interface hash: b56526f90444acbb43925be8b17c68d4
  ABI hash: 97fd702be2c9f042f2b886bf3f9da0f2
  export-list hash: 1b2473c062a2876dde60847221549d9f
  orphan hash: 006fccba94f5627336e732c8829e8f91
  flag hash: 0b31c216e9c27cb67f69e348b7e880e1
  sig of: Nothing
  used TH splices: True
  where
exports:
  Test.FunPtr.tests
module dependencies:
package dependencies: ansi-terminal-0.7.1.1 ansi-wl-pprint-0.6.8.1
                      array-0.5.2.0 async-2.1.1.1 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 clock-0.7.2 colour-2.3.4 containers-0.5.10.2
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 exceptions-0.8.3
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 inline-r-0.9.0.2
                      integer-gmp-1.0.1.0 mtl-2.2.1 optparse-applicative-0.14.0.0
                      parsec-3.1.11 pretty-1.1.3.3 primitive-0.6.2.0 process-1.6.1.0
                      reflection-2.1.2 regex-base-0.93.2 regex-tdfa-1.2.2 safe-0.3.15
                      setenv-0.1.1.3 singletons-2.3.1 stm-2.4.4.1 syb-0.7 tagged-0.8.5
                      tasty-0.11.3 tasty-hunit-0.9.2 template-haskell-2.12.0.0
                      text-1.2.2.2 th-desugar-1.7 th-expand-syns-0.4.3.0 th-lift-0.7.7
                      th-lift-instances-0.1.11 th-orphans-0.13.4 th-reify-many-0.1.8
                      transformers-0.5.2.0 unbounded-delays-0.1.1.0 unix-2.7.2.2
                      vector-0.12.0.1
orphans: reflection-2.1.2:Data.Reflection
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         syb-0.7:Data.Generics.Instances stm-2.4.4.1:Control.Monad.STM
         regex-tdfa-1.2.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.2:Text.Regex.TDFA.String text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show
         transformers-0.5.2.0:Control.Monad.Trans.Error
         regex-base-0.93.2:Text.Regex.Base.Context colour-2.3.4:Data.Colour
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats clock-0.7.2:System.Clock
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2:Control.Memory.Region
                         inline-r-0.9.0.2:Data.Vector.SEXP inline-r-0.9.0.2:Foreign.R.Type
                         inline-r-0.9.0.2:Language.R.Instance
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         tagged-0.8.5:Data.Tagged tasty-0.11.3:Test.Tasty.Core
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Control.Concurrent.MVar d59f7bf8c22359a853225b02e3e23e9e
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Foreign 6e1e49cc01b9f846dbcb01cc4a57d323
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.MVar b1970e54b4c552d660c9a97d807961dc
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Ptr f6ff03f1ebd95f085d6be4b1fdb71ff8
import  -/  base-4.10.1.0:GHC.Weak 4a23e785cfe6e65ef8228a35fd9ed07f
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Mem 699461a0f9cd815a5f18336077501985
import  -/  base-4.10.1.0:System.Mem.Weak 9f512a33c970630935eaba029edf27f0
import  -/  bytestring-0.10.8.2:Data.ByteString.Char8 ad3bf7657730adeac35cbb427299ea44
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  inline-r-0.9.0.2:Control.Memory.Region bd2f465c2e25d1f80c1a2e359d1309ef
import  -/  inline-r-0.9.0.2:Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
import  -/  inline-r-0.9.0.2:Foreign.R 51460710da704a1aff942901939ab83a
import  -/  inline-r-0.9.0.2:Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
import  -/  inline-r-0.9.0.2:Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
import  -/  inline-r-0.9.0.2:H.Prelude e36d2c9f12de64ccb9a431bc0e48e285
import  -/  inline-r-0.9.0.2:Language.R e598fe485b33abac7367c6e28d8b9814
import  -/  inline-r-0.9.0.2:Language.R.Globals 6466af466952ec50029e279d952209f8
import  -/  inline-r-0.9.0.2:Language.R.Instance 7c21de0bbc964770a1fa7d8ec3cc550d
import  -/  inline-r-0.9.0.2:Language.R.Internal b0cf14eb166f9e86feaeab7c8793ddbb
import  -/  inline-r-0.9.0.2:Language.R.Internal.FunWrappers 63eb051acc9f7bfd61e176896a2dd24e
import  -/  inline-r-0.9.0.2:Language.R.Literal ad8f87454366c7ad983921c1f51fd824
import  -/  inline-r-0.9.0.2:Language.R.QQ 1885758794873fa7a90ccf5c301146fd
import  -/  tasty-0.11.3:Test.Tasty fd7a7d678fb037373a84e0d2c94ba977
import  -/  tasty-0.11.3:Test.Tasty.Core ad38a7bfdd07cb983b46499179f5feea
import  -/  tasty-hunit-0.9.2:Test.Tasty.HUnit e2c91e2e2a1aa9764fce15de0bdca332
import  -/  tasty-hunit-0.9.2:Test.Tasty.HUnit.Orig cabfe6febc3dd1bdd12e76f191fca3cf
cde2a810dd27ac466efc4d2a4eddf2eb
  $fLiteralHaveWeakExtPtr ::
    Language.R.Literal.Literal
      (Test.FunPtr.HaveWeak a b) 'Foreign.R.Type.ExtPtr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Test.FunPtr.HaveWeak a b)
                  @ 'Foreign.R.Type.ExtPtr
                  Foreign.R.Type.$fSingISEXPTYPEExtPtr1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.ExtPtr>_N)
                  (Test.FunPtr.$fLiteralHaveWeakExtPtr1 @ a @ b)
                    `cast`
                  (<Test.FunPtr.HaveWeak a b>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Foreign.R.Internal.SEXP
                                    Control.Memory.Region.V 'Foreign.R.Type.ExtPtr>_R))
                  (Test.FunPtr.$fLiteralHaveWeakExtPtr_$cfromSEXP @ a @ b) -}
cde2a810dd27ac466efc4d2a4eddf2eb
  $fLiteralHaveWeakExtPtr1 ::
    Test.FunPtr.HaveWeak a b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U(U))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: Test.FunPtr.HaveWeak a b)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Test.FunPtr.HaveWeak ww1 ww2 ->
                 Test.FunPtr.$w$cmkSEXPIO @ a @ b ww1 ww2 w1 }) -}
cde2a810dd27ac466efc4d2a4eddf2eb
  $fLiteralHaveWeakExtPtr_$cfromSEXP ::
    Foreign.R.Internal.SEXP s 'Foreign.R.Type.ExtPtr
    -> Test.FunPtr.HaveWeak a b
  {- Strictness: x -}
7c7b8ff840d6e342fe21298ed38100b1
  $s$WSReal_$d~~ ::
    ('Foreign.R.Type.Real :: Foreign.R.Type.SEXPTYPE)
    GHC.Types.~~
    ('Foreign.R.Type.Real :: Foreign.R.Type.SEXPTYPE)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ Foreign.R.Type.SEXPTYPE
                   @ Foreign.R.Type.SEXPTYPE
                   @ 'Foreign.R.Type.Real
                   @ 'Foreign.R.Type.Real
                   @~ <'Foreign.R.Type.Real>_N) -}
df8e7bb88ca66bb77b3dd0dd83314a6d
  $s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (GHC.Ptr.FunPtr (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (GHC.Ptr.FunPtr (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)))
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ (GHC.Ptr.FunPtr
                          (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                     (GHC.Ptr.$fShowFunPtr
                        @ (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)))
                  (\ (x :: GHC.Base.Maybe
                             (GHC.Ptr.FunPtr
                                (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (case b1 of wild1 { GHC.Ptr.FunPtr addr ->
                           GHC.Ptr.$fShowFunPtr_$cshowsPrec
                             @ GHC.Types.Any
                             GHC.Show.appPrec1
                             (GHC.Ptr.Ptr @ GHC.Types.Any addr)
                             (GHC.Types.[] @ GHC.Types.Char) }) })
                  (\ (eta :: [GHC.Base.Maybe
                                (GHC.Ptr.FunPtr
                                   (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe
                          (GHC.Ptr.FunPtr (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)))
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ (GHC.Ptr.FunPtr
                             (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                        (GHC.Ptr.$fShowFunPtr
                           @ (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                        GHC.Show.$fShow(,)1)
                     eta
                     eta1) -}
9bf718629d920f52802311960a269473
  $tc'HaveWeak :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4049720028177657240##
                   16890625031537364218##
                   Test.FunPtr.$trModule
                   Test.FunPtr.$tc'HaveWeak2
                   2#
                   Test.FunPtr.$tc'HaveWeak1) -}
c8025952dfe5bcbc43d1866d6ebe3e33
  $tc'HaveWeak1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d7edbf3e032a49ef4d963b419e56508c
  $tc'HaveWeak2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.FunPtr.$tc'HaveWeak3) -}
abb120ffd21c8b6c9a72e023ef4e4e72
  $tc'HaveWeak3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HaveWeak"#) -}
800f3405df84dcb288f29a84f144468c
  $tcHaveWeak :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11169965982808325113##
                   14827135163418403467##
                   Test.FunPtr.$trModule
                   Test.FunPtr.$tcHaveWeak1
                   0#
                   GHC.Types.krep$*->*->*) -}
e9768b4d61c800c6f189137a1f9ae490
  $tcHaveWeak1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.FunPtr.$tcHaveWeak2) -}
e2edd491bebfa2884d0b310a6918632e
  $tcHaveWeak2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HaveWeak"#) -}
122ad9a6ff5ddf92a8a2a76aec428171
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Test.FunPtr.$trModule3
                   Test.FunPtr.$trModule1) -}
0138a02ab801e6b86047ac3e31ea61a5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.FunPtr.$trModule2) -}
32c967e6887f2643135ddec7144369f0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test.FunPtr"#) -}
f6f3dc20022feca59bff4e9c599dd334
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.FunPtr.$trModule4) -}
183653508d66463c0bd7751db6f3224a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
394dcab31356f34c0b3ebcca075f6440
  $w$cmkSEXPIO ::
    (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)
    -> GHC.MVar.MVar
         (GHC.Weak.Weak
            (GHC.Ptr.FunPtr (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.ExtPtr #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (ww :: Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)
                   (ww1 :: GHC.MVar.MVar
                             (GHC.Weak.Weak
                                (GHC.Ptr.FunPtr
                                   (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Language.R.Internal.FunWrappers.wrap1 ww)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Ptr.FunPtr
                              (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)>_R)
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.mkWeakNoFinalizer#
                        @ 'GHC.Types.LiftedRep
                        @ (GHC.Ptr.FunPtr
                             (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                        @ (GHC.Ptr.FunPtr
                             (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                        ipv1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ww1 of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Weak.Weak
                             (GHC.Ptr.FunPtr (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)))
                        mvar#
                        (GHC.Weak.Weak
                           @ (GHC.Ptr.FunPtr
                                (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                           ipv3)
                        ipv2 of s2# { DEFAULT ->
                 case ipv1
                        `cast`
                      (GHC.Ptr.FunPtr
                         <Foreign.R.SEXP0
                          -> GHC.Types.IO
                               Foreign.R.SEXP0, ()>)_R of ds { GHC.Ptr.FunPtr ds3 ->
                 case {__pkg_ccall_GC main GHC.Prim.Addr#
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 GHC.Prim.Addr# #)}
                        ds3
                        s2# of wild1 { (#,#) ds4 ds5 ->
                 (# ds4,
                    (GHC.Ptr.Ptr
                       @ (Language.R.HExp.HExp
                            Control.Memory.Region.V 'Foreign.R.Type.Any)
                       ds5)
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Language.R.HExp.HExp
                               Control.Memory.Region.V 'Foreign.R.Type.Any, Language.R.HExp.HExp
                                                                              Control.Memory.Region.V
                                                                              'Foreign.R.Type.ExtPtr>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <Control.Memory.Region.V>_P
                                   <'Foreign.R.Type.ExtPtr>_P))) #) } } } } } }) -}
cde2a810dd27ac466efc4d2a4eddf2eb
  type role HaveWeak phantom phantom
  data HaveWeak a b
    = HaveWeak (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)
               (GHC.MVar.MVar
                  (GHC.Weak.Weak
                     (GHC.Ptr.FunPtr
                        (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))))
03dd8bc83e7e972171067423f16e30b4
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.FunPtr.tests20
                   Test.FunPtr.tests1) -}
b764ed925534b842b236c37c65020b60
  tests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Test.FunPtr.tests16
                   Test.FunPtr.tests2) -}
b3eb5d1170467137882f65341bbafecf
  tests10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SomeSEXP Control.Memory.Region.V #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.noDuplicate#
                        @ GHC.Prim.RealWorld
                        s of s' { DEFAULT ->
                 case Language.R.QQ.parse1
                        Test.FunPtr.tests11
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case ipv1
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.V>_P <'Foreign.R.Type.Expr>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 'Foreign.R.Type.Expr, Foreign.R.Internal.SEXPREC>)_R) of ds { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds2
                        0#
                        ipv of wild1 { (#,#) ds3 ds4 ->
                 case Language.R.Globals.globalEnv
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.G>_P <'Foreign.R.Type.Env>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.G
                                 'Foreign.R.Type.Env, Foreign.R.Internal.SEXPREC>)_R) of ds5 { GHC.Ptr.Ptr ds6 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds4
                        ds6
                        ds3 of wild { (#,#) ds7 ds8 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds8
                        ds7 of wild2 { Unit# ds9 ->
                 (# ds9,
                    Foreign.R.Internal.SomeSEXP
                      @ Control.Memory.Region.V
                      @ GHC.Types.Any
                      ds8 #) } } } } } } }) -}
660ecb01affb26ab2e2a7e1f88dc60cc
  tests11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.FunPtr.tests12) -}
10095091735c0482b3a8bb46ba446a15
  tests12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("function(foo_hs){ foo_hs(1) }"#) -}
8d46d94d9f7cb966b84e9820ff28a353
  tests13 ::
    GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
96a972988b9917d1a0c5c7debabdbf75
  tests14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.FunPtr.tests15) -}
5b06ba14be6d598007650c81490db5c7
  tests15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("funptr works in quasi-quotes"#) -}
f5435dd7c04b736788b1f24f02929197
  tests16 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Test.FunPtr.tests18
                   Test.FunPtr.tests17
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
ad92b78ac6263636f2c8173bed4cdeee
  tests17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U> -}
431f214c549d430f125e752ef7e822b1
  tests18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.FunPtr.tests19) -}
c49de9a4100533f8ef353161ff428673
  tests19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("funptr is freed from R"#) -}
d3d09e01beac4715d118a44a9c7b5e7c
  tests2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Test.FunPtr.tests3
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
edd541383eca090fc744ca766d88da0e
  tests20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.FunPtr.tests21) -}
83c81a746ec68abf936a7ddd78863e16
  tests21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("funptr"#) -}
fae48c4f3e6a124c04e0c382b20ac98e
  tests3 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Test.FunPtr.tests14
                   Test.FunPtr.tests4
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
73a5c7043fa783a9354d869a9426f0e5
  tests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# s of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Double
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ GHC.Types.Double
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case Test.FunPtr.tests6
                                        (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                          `cast`
                                        (Trans
                                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                             (Nth:2
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                 <*>_N
                                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                                 <GHC.Types.IO>_R
                                                                 <GHC.Types.Double>_N))
                                                       (Nth:3
                                                            (Nth:3
                                                                 (Trans
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                <*>_N
                                                                                <GHC.IORef.IORef
                                                                                   GHC.Types.Int>_R
                                                                                <GHC.Types.IO>_R
                                                                                <GHC.Types.Double>_N)
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R <GHC.IORef.IORef
                                                                               GHC.Types.Int>_R
                                                                       ->_R GHC.Types.N:IO[0]
                                                                                <GHC.Types.Double>_R)))))))
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of ds4 { GHC.Types.D# ipv7 -> ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Double
                                e1
                                ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      case ipv5 of wild2 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 2.0##) of wild3 {
                        GHC.Types.False
                        -> case Test.FunPtr.tests13 wild2 ds5
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True
                        -> (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ GHC.Types.Double
                             Test.FunPtr.tests5
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 2.0##) of wild1 {
                        GHC.Types.False
                        -> case Test.FunPtr.tests13 wild ipv2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #) } } }
                   1#
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Double
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ GHC.Types.Double
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case Test.FunPtr.tests6
                                        (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                          `cast`
                                        (Trans
                                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                             (Nth:2
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                 <*>_N
                                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                                 <GHC.Types.IO>_R
                                                                 <GHC.Types.Double>_N))
                                                       (Nth:3
                                                            (Nth:3
                                                                 (Trans
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                <*>_N
                                                                                <GHC.IORef.IORef
                                                                                   GHC.Types.Int>_R
                                                                                <GHC.Types.IO>_R
                                                                                <GHC.Types.Double>_N)
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R <GHC.IORef.IORef
                                                                               GHC.Types.Int>_R
                                                                       ->_R GHC.Types.N:IO[0]
                                                                                <GHC.Types.Double>_R)))))))
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of ds4 { GHC.Types.D# ipv7 -> ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Double
                                e1
                                ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      case ipv5 of wild2 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 2.0##) of wild3 {
                        GHC.Types.False
                        -> case Test.FunPtr.tests13 wild2 ds5
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True
                        -> (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } } } } } }) -}
dd1cc4373509b983c3f8040cce1499b6
  tests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        Language.R.Instance.runRegion3
                        s1 of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Double
                        @ GHC.Exception.SomeException
                        (GHC.Prim.unmaskAsyncExceptions#
                           @ GHC.Types.Double
                           (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Test.FunPtr.tests6
                                   (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                     `cast`
                                   (Trans
                                        (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                        (Nth:2
                                             (Trans
                                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                            <*>_N
                                                            <GHC.IORef.IORef GHC.Types.Int>_R
                                                            <GHC.Types.IO>_R
                                                            <GHC.Types.Double>_N))
                                                  (Nth:3
                                                       (Nth:3
                                                            (Trans
                                                                 (<Control.Monad.Trans.Reader.ReaderT
                                                                     (GHC.IORef.IORef GHC.Types.Int)
                                                                     GHC.Types.IO
                                                                     (Foreign.R.Internal.SomeSEXP
                                                                        GHC.Types.Any)>_R
                                                                  ->_R <Foreign.R.Internal.SomeSEXP
                                                                          GHC.Types.Any
                                                                        -> Control.Monad.Trans.Reader.ReaderT
                                                                             (GHC.IORef.IORef
                                                                                GHC.Types.Int)
                                                                             GHC.Types.IO
                                                                             GHC.Types.Double>_R
                                                                  ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                           <*>_N
                                                                           <GHC.IORef.IORef
                                                                              GHC.Types.Int>_R
                                                                           <GHC.Types.IO>_R
                                                                           <GHC.Types.Double>_N)
                                                                 (<Control.Monad.Trans.Reader.ReaderT
                                                                     (GHC.IORef.IORef GHC.Types.Int)
                                                                     GHC.Types.IO
                                                                     (Foreign.R.Internal.SomeSEXP
                                                                        GHC.Types.Any)>_R
                                                                  ->_R <Foreign.R.Internal.SomeSEXP
                                                                          GHC.Types.Any
                                                                        -> Control.Monad.Trans.Reader.ReaderT
                                                                             (GHC.IORef.IORef
                                                                                GHC.Types.Int)
                                                                             GHC.Types.IO
                                                                             GHC.Types.Double>_R
                                                                  ->_R <GHC.IORef.IORef
                                                                          GHC.Types.Int>_R
                                                                  ->_R GHC.Types.N:IO[0]
                                                                           <GHC.Types.Double>_R)))))))
                                   s2 of ds3 { (#,#) ipv4 ipv5 ->
                            case ipv5 of ds1 { GHC.Types.D# ipv -> ds3 } }))
                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Types.Int
                                ipv3
                                s2 of ds3 { (#,#) ipv4 ipv5 ->
                         case ipv5 of wild { GHC.Types.I# x# ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld #)}
                                (GHC.Prim.narrow32Int# x#)
                                ipv4 of wild1 { Unit# ds4 ->
                         GHC.Prim.raiseIO#
                           @ GHC.Exception.SomeException
                           @ GHC.Types.Double
                           e1
                           ds4 } } })
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv3
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 case ipv8 of wild { GHC.Types.I# x# ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        (GHC.Prim.narrow32Int# x#)
                        ipv7 of wild1 { Unit# ds5 ->
                 (# ds5, ipv5 #) } } } } }) -}
aa4e34a5e414b22211065f48138a477b
  tests6 ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (r1 :: GHC.IORef.IORef GHC.Types.Int)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Foreign.R.Internal.SomeSEXP Control.Memory.Region.V #)
                        Test.FunPtr.tests10 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Foreign.R.Internal.SomeSEXP a dt ->
                 case GHC.Prim.getMaskingState# s of ds1 { (#,#) ipv2 ipv3 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> GHC.Prim.Addr#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ww :: GHC.Prim.Addr#)[OneShot] ->
                     case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                           -> GHC.Prim.Addr#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Addr# #)}
                            dt
                            ww
                            w of wild1 { (#,#) ds4 ds5 ->
                     case ((Language.R.$wevalEnv
                              @ (Language.R.Instance.R GHC.Types.Any)
                              @ Control.Memory.Region.V
                              @ 'Foreign.R.Type.Lang
                              (Language.R.Instance.$fMonadRR @ GHC.Types.Any)
                              ds5
                              Language.R.Globals.globalEnv
                                `cast`
                              (Trans
                                   (Foreign.R.Internal.N:SEXP[0]
                                        <Control.Memory.Region.G>_P <'Foreign.R.Type.Env>_P)
                                   (Trans
                                        (GHC.Ptr.Ptr
                                           <Language.R.HExp.HExp
                                              Control.Memory.Region.G
                                              'Foreign.R.Type.Env, Language.R.HExp.HExp
                                                                     Control.Memory.Region.V
                                                                     'Foreign.R.Type.Env>)_R
                                        (Sym (Foreign.R.Internal.N:SEXP[0]
                                                  <Control.Memory.Region.V>_P
                                                  <'Foreign.R.Type.Env>_P)))))
                             `cast`
                           (Trans
                                (Nth:3
                                     (Trans
                                          (<Foreign.R.Internal.SEXP
                                              Control.Memory.Region.V 'Foreign.R.Type.Lang>_R
                                           ->_R (Language.R.Instance.R
                                                   <GHC.Types.Any>_P
                                                   (Foreign.R.Internal.SomeSEXP
                                                      (Language.R.Instance.D:R:PrimStateR[0]
                                                           <GHC.Types.Any>_N))_N)_R)
                                          (Trans
                                               (<Foreign.R.Internal.SEXP
                                                   Control.Memory.Region.V 'Foreign.R.Type.Lang>_R
                                                ->_R Language.R.Instance.N:R[0]
                                                         <GHC.Types.Any>_P <Foreign.R.Internal.SomeSEXP
                                                                              GHC.Types.Any>_N)
                                               (Nth:2
                                                    (Nth:3
                                                         (Trans
                                                              (<Control.Monad.Trans.Reader.ReaderT
                                                                  (GHC.IORef.IORef GHC.Types.Int)
                                                                  GHC.Types.IO
                                                                  (Foreign.R.Internal.SEXP
                                                                     Control.Memory.Region.V
                                                                     'Foreign.R.Type.Lang)>_R
                                                               ->_R <Foreign.R.Internal.SEXP
                                                                       Control.Memory.Region.V
                                                                       'Foreign.R.Type.Lang
                                                                     -> Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                               ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                        <*>_N
                                                                        <GHC.IORef.IORef
                                                                           GHC.Types.Int>_R
                                                                        <GHC.Types.IO>_R
                                                                        <Foreign.R.Internal.SomeSEXP
                                                                           GHC.Types.Any>_N)
                                                              (<Control.Monad.Trans.Reader.ReaderT
                                                                  (GHC.IORef.IORef GHC.Types.Int)
                                                                  GHC.Types.IO
                                                                  (Foreign.R.Internal.SEXP
                                                                     Control.Memory.Region.V
                                                                     'Foreign.R.Type.Lang)>_R
                                                               ->_R <Foreign.R.Internal.SEXP
                                                                       Control.Memory.Region.V
                                                                       'Foreign.R.Type.Lang
                                                                     -> Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                               ->_R <GHC.IORef.IORef
                                                                       GHC.Types.Int>_R
                                                               ->_R GHC.Types.N:IO[0]
                                                                        <Foreign.R.Internal.SomeSEXP
                                                                           GHC.Types.Any>_R)))))))
                                (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <GHC.IORef.IORef GHC.Types.Int>_R
                                     <GHC.Types.IO>_R
                                     <Foreign.R.Internal.SomeSEXP GHC.Types.Any>_N))
                             r1)
                            `cast`
                          (GHC.Types.N:IO[0] <Foreign.R.Internal.SomeSEXP GHC.Types.Any>_R)
                            ds4 of ds2 { (#,#) ipv4 ipv5 ->
                     (# ipv4,
                        Language.R.Literal.$wdynSEXP
                          @ GHC.Types.Double
                          @ GHC.Types.Any
                          @ 'Foreign.R.Type.Real
                          Language.R.Literal.$fLiteralDoubleReal
                          ipv5 #) } }
                 } in
                 case ipv3 of ds2 {
                   DEFAULT
                   -> case Language.R.Globals.nilValue
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0]
                                     <Control.Memory.Region.G>_P <'Foreign.R.Type.Nil>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      Control.Memory.Region.G
                                      'Foreign.R.Type.Nil, Foreign.R.Internal.SEXPREC>)_R) of ds3 { GHC.Ptr.Ptr ds4 ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Addr# #)}
                             ds4
                             ipv2 of wild1 { (#,#) ds5 ds6 ->
                      case GHC.Prim.catch#
                             @ (Foreign.R.Internal.SEXP
                                  Control.Memory.Region.V 'Foreign.R.Type.Lang)
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ (Foreign.R.Internal.SEXP
                                     Control.Memory.Region.V 'Foreign.R.Type.Lang)
                                (Test.FunPtr.tests8
                                   ds3
                                     `cast`
                                   (Trans
                                        (GHC.Ptr.Ptr
                                           <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                          Control.Memory.Region.V
                                                                          'Foreign.R.Type.Nil>)_R
                                        (Sym (Foreign.R.Internal.N:SEXP[0]
                                                  <Control.Memory.Region.V>_P
                                                  <'Foreign.R.Type.Nil>_P)))))
                             (Foreign.R.withProtected2
                                @ (Foreign.R.Internal.SEXP
                                     Control.Memory.Region.V 'Foreign.R.Type.Lang))
                             ds5 of ds7 { (#,#) ipv4 ipv5 ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             1#
                             ipv4 of wild2 { Unit# ds8 ->
                      case ipv5
                             `cast`
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.V>_P
                                <'Foreign.R.Type.Lang>_P) of ww { GHC.Ptr.Ptr ww1 ->
                      $w$j ds8 ww1 } } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ (Foreign.R.Internal.SEXP
                                  Control.Memory.Region.V 'Foreign.R.Type.Lang)
                             Test.FunPtr.tests7
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case ipv5
                             `cast`
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.V>_P
                                <'Foreign.R.Type.Lang>_P) of ww { GHC.Ptr.Ptr ww1 ->
                      $w$j ipv4 ww1 } }
                   1#
                   -> case Language.R.Globals.nilValue
                             `cast`
                           (Trans
                                (Foreign.R.Internal.N:SEXP[0]
                                     <Control.Memory.Region.G>_P <'Foreign.R.Type.Nil>_P)
                                (GHC.Ptr.Ptr
                                   <Language.R.HExp.HExp
                                      Control.Memory.Region.G
                                      'Foreign.R.Type.Nil, Foreign.R.Internal.SEXPREC>)_R) of ds3 { GHC.Ptr.Ptr ds4 ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Addr# #)}
                             ds4
                             ipv2 of wild1 { (#,#) ds5 ds6 ->
                      case GHC.Prim.catch#
                             @ (Foreign.R.Internal.SEXP
                                  Control.Memory.Region.V 'Foreign.R.Type.Lang)
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ (Foreign.R.Internal.SEXP
                                     Control.Memory.Region.V 'Foreign.R.Type.Lang)
                                (Test.FunPtr.tests8
                                   ds3
                                     `cast`
                                   (Trans
                                        (GHC.Ptr.Ptr
                                           <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                          Control.Memory.Region.V
                                                                          'Foreign.R.Type.Nil>)_R
                                        (Sym (Foreign.R.Internal.N:SEXP[0]
                                                  <Control.Memory.Region.V>_P
                                                  <'Foreign.R.Type.Nil>_P)))))
                             (Foreign.R.withProtected2
                                @ (Foreign.R.Internal.SEXP
                                     Control.Memory.Region.V 'Foreign.R.Type.Lang))
                             ds5 of ds7 { (#,#) ipv4 ipv5 ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             1#
                             ipv4 of wild2 { Unit# ds8 ->
                      case ipv5
                             `cast`
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.V>_P
                                <'Foreign.R.Type.Lang>_P) of ww { GHC.Ptr.Ptr ww1 ->
                      $w$j ds8 ww1 } } } } } } } } }) -}
cd9f4502214c7629c2fb88604a10bd3d
  tests7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Lang #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case Language.R.Globals.nilValue
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.G>_P <'Foreign.R.Type.Nil>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.G
                                 'Foreign.R.Type.Nil, Foreign.R.Internal.SEXPREC>)_R) of ds3 { GHC.Ptr.Ptr ds4 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds4
                        s1 of wild { (#,#) ds5 ds6 ->
                 case GHC.Prim.catch#
                        @ (Foreign.R.Internal.SEXP
                             Control.Memory.Region.V 'Foreign.R.Type.Lang)
                        @ GHC.Exception.SomeException
                        (GHC.Prim.unmaskAsyncExceptions#
                           @ (Foreign.R.Internal.SEXP
                                Control.Memory.Region.V 'Foreign.R.Type.Lang)
                           (Test.FunPtr.tests8
                              ds3
                                `cast`
                              (Trans
                                   (GHC.Ptr.Ptr
                                      <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                     Control.Memory.Region.V
                                                                     'Foreign.R.Type.Nil>)_R
                                   (Sym (Foreign.R.Internal.N:SEXP[0]
                                             <Control.Memory.Region.V>_P
                                             <'Foreign.R.Type.Nil>_P)))))
                        (Foreign.R.withProtected2
                           @ (Foreign.R.Internal.SEXP
                                Control.Memory.Region.V 'Foreign.R.Type.Lang))
                        ds5 of ds7 { (#,#) ipv4 ipv5 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        1#
                        ipv4 of wild1 { Unit# ds8 ->
                 (# ds8, ipv5 #) } } } }) -}
998957ebd1682096abc504dbff127f96
  tests8 ::
    Foreign.R.Internal.SEXP Control.Memory.Region.V 'Foreign.R.Type.Nil
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP
            Control.Memory.Region.V 'Foreign.R.Type.Lang #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (cdr :: Foreign.R.Internal.SEXP
                             Control.Memory.Region.V 'Foreign.R.Type.Nil)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Language.R.Internal.FunWrappers.wrap1
                         Test.FunPtr.tests9
                           `cast`
                         (<Foreign.R.SEXP0>_R
                          ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.SEXP0>_R)))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Ptr.FunPtr
                              (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ds { GHC.Ptr.FunPtr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds2
                        ipv of wild { (#,#) ds3 ds4 ->
                 case cdr
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.V>_P <'Foreign.R.Type.Nil>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 'Foreign.R.Type.Nil, Foreign.R.Internal.SEXPREC>)_R) of ds7 { GHC.Ptr.Ptr ds8 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds4
                        ds8
                        ds3 of wild1 { (#,#) ds9 ds5 ->
                 (# ds9,
                    (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds5)
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           Control.Memory.Region.V
                                                           'Foreign.R.Type.Lang>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <Control.Memory.Region.V>_P
                                   <'Foreign.R.Type.Lang>_P))) #) } } } } }) -}
53b00bcce4dd4ce2ca327373b1ce18e2
  tests9 ::
    Foreign.R.SEXP0
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Ptr.Ptr Foreign.R.Internal.SEXPREC #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (eta2 :: Foreign.R.SEXP0)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Language.R.Instance.runRegion2
                        @ GHC.Types.Double
                        @ GHC.Types.Any
                        (Control.DeepSeq.rwhnf @ GHC.Types.Double)
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N))
                        (case eta2
                                `cast`
                              (GHC.Ptr.Ptr
                                 <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                GHC.Types.Any
                                                                GHC.Types.Any>)_R of dt { GHC.Ptr.Ptr dt1 ->
                         case Foreign.R.Internal.$wunsafeCast
                                @ GHC.Types.Any
                                @ 'Foreign.R.Type.Real
                                Test.FunPtr.tests_lvl60
                                  `cast`
                                (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                                (Foreign.R.Internal.SomeSEXP
                                   @ GHC.Types.Any
                                   @ GHC.Types.Any
                                   dt1) of ww { DEFAULT ->
                         case Language.R.Literal.$w$cfromSEXP3 @ GHC.Types.Any ww of wild {
                           []
                           -> case Language.R.Literal.$fLiteralDoubleReal1
                              ret_ty (Language.R.Instance.R GHC.Types.Any GHC.Types.Double)
                              of {}
                           : x ds
                           -> case ds of wild1 {
                                []
                                -> case x of vx { GHC.Types.D# ipv ->
                                   (\ (eta :: GHC.IORef.IORef GHC.Types.Int)[OneShot]
                                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    (# eta1, GHC.Types.D# (GHC.Prim.+## ipv 1.0##) #))
                                     `cast`
                                   (Trans
                                        (<GHC.IORef.IORef GHC.Types.Int>_R
                                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R))
                                        (Trans
                                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                       <*>_N
                                                       <GHC.IORef.IORef GHC.Types.Int>_R
                                                       <GHC.Types.IO>_R
                                                       <GHC.Types.Double>_N))
                                             (Sym (Language.R.Instance.N:R[0]
                                                       <GHC.Types.Any>_P) <GHC.Types.Double>_N))) }
                                : ipv ipv1
                                -> case Language.R.Literal.$fLiteralDoubleReal1
                                   ret_ty (Language.R.Instance.R GHC.Types.Any GHC.Types.Double)
                                   of {} } } } })
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of vx { GHC.Types.D# ipv2 ->
                 case Language.R.Literal.$fLiteralDoubleReal_$smkSEXPVectorIO
                        Foreign.R.Type.$fSingISEXPTYPEReal1
                          `cast`
                        (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Real>_N)
                        (GHC.Types.:
                           @ (GHC.Types.IO GHC.Types.Double)
                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, vx #))
                             `cast`
                           (Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R))
                           (GHC.Types.[] @ (GHC.Types.IO GHC.Types.Double)))
                          `cast`
                        (Nth:2
                             (Trans
                                  (([(GHC.Types.IO
                                        (Sub (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3]
                                                       <Control.Memory.Region.Void>_N))))_R])_R
                                   ->_R <GHC.Types.IO
                                           (Foreign.R.Internal.SEXP
                                              Control.Memory.Region.V 'Foreign.R.Type.Real)>_R)
                                  (<[GHC.Types.IO
                                       (Data.Vector.SEXP.Base.ElemRep
                                          Control.Memory.Region.V 'Foreign.R.Type.Real)]>_R
                                   ->_R GHC.Types.N:IO[0]
                                            <Foreign.R.Internal.SEXP
                                               Control.Memory.Region.V 'Foreign.R.Type.Real>_R)))
                        ipv of ds { (#,#) ipv3 ipv4 ->
                 (# ipv3,
                    ipv4
                      `cast`
                    (Trans
                         (Foreign.R.Internal.N:SEXP[0]
                              <Control.Memory.Region.V>_P <'Foreign.R.Type.Real>_P)
                         (GHC.Ptr.Ptr
                            <Language.R.HExp.HExp
                               Control.Memory.Region.V
                               'Foreign.R.Type.Real, Foreign.R.Internal.SEXPREC>)_R) #) } } }) -}
e5cc925e90475eea88503a4e3b58f640
  tests_lvl60 :: Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
  {- Unfolding: (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                   @ 'Foreign.R.Type.Real
                   Foreign.R.Type.$fSingISEXPTYPEReal1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Real>_N)) -}
instance Language.R.Literal.Literal [Test.FunPtr.HaveWeak,
                                     Foreign.R.Type.ExtPtr]
  = Test.FunPtr.$fLiteralHaveWeakExtPtr
"SPEC/Test.FunPtr $fShowMaybe @ (FunPtr (SEXP0 -> IO SEXP0))" [orphan] forall (v :: GHC.Show.Show
                                                                                      (GHC.Ptr.FunPtr
                                                                                         (Foreign.R.SEXP0
                                                                                          -> GHC.Types.IO
                                                                                               Foreign.R.SEXP0)))
  GHC.Show.$fShowMaybe @ (GHC.Ptr.FunPtr
                            (Foreign.R.SEXP0 -> GHC.Types.IO Foreign.R.SEXP0))
                       v
  = Test.FunPtr.$s$fShowMaybe
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

