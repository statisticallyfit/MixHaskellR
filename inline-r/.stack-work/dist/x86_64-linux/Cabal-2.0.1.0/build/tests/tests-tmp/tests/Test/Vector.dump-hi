
==================== FINAL INTERFACE ====================
2017-12-28 08:50:08.490954 UTC

interface main:Test.Vector [orphan module] 8022
  interface hash: df08b38ca1e8dfa7e6a3c868ff22569c
  ABI hash: ed06612310d21fbd98b51c3c8a48ea00
  export-list hash: d6039e12613d397d402809cc670e180e
  orphan hash: d947afd4165c6885f457f89f47783b88
  flag hash: e8cbdff4f0eb66a830a2e3e37177bc34
  sig of: Nothing
  used TH splices: True
  where
exports:
  Test.Vector.fromListLength
  Test.Vector.testGeneralSEXPVector
  Test.Vector.testIdentity
  Test.Vector.testNumericSEXPVector
  Test.Vector.testPolymorphicFunctions
  Test.Vector.tests
  Test.Vector.vectorCopy
  Test.Vector.vectorIsImmutable
module dependencies:
package dependencies: QuickCheck-2.10.1 ansi-terminal-0.7.1.1
                      ansi-wl-pprint-0.6.8.1 array-0.5.2.0 async-2.1.1.1 base-4.10.1.0
                      binary-0.8.5.1 bytestring-0.10.8.2 clock-0.7.2 colour-2.3.4
                      containers-0.5.10.2 data-default-class-0.1.2.0 deepseq-1.4.3.0
                      exceptions-0.8.3 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      haskell-lexer-1.0.1 ieee754-0.8.0 inline-r-0.9.0.2
                      integer-gmp-1.0.1.0 mtl-2.2.1 optparse-applicative-0.14.0.0
                      parsec-3.1.11 pretty-1.1.3.3 pretty-show-1.6.15 primitive-0.6.2.0
                      process-1.6.1.0 quickcheck-assertions-0.3.0 random-1.1
                      reflection-2.1.2 regex-base-0.93.2 regex-tdfa-1.2.2 safe-0.3.15
                      setenv-0.1.1.3 singletons-2.3.1 stm-2.4.4.1 syb-0.7 tagged-0.8.5
                      tasty-0.11.3 tasty-hunit-0.9.2 tasty-quickcheck-0.9.1
                      template-haskell-2.12.0.0 text-1.2.2.2 tf-random-0.5 th-desugar-1.7
                      th-expand-syns-0.4.3.0 th-lift-0.7.7 th-lift-instances-0.1.11
                      th-orphans-0.13.4 th-reify-many-0.1.8 time-1.8.0.2
                      transformers-0.5.2.0 unbounded-delays-0.1.1.0 unix-2.7.2.2
                      vector-0.12.0.1
orphans: reflection-2.1.2:Data.Reflection
         singletons-2.3.1:Data.Singletons.TypeLits
         singletons-2.3.1:Data.Singletons.TypeLits.Internal
         singletons-2.3.1:Data.Singletons.Prelude.Instances
         singletons-2.3.1:Data.Singletons.Decide
         th-orphans-0.13.4:Language.Haskell.TH.Instances
         th-lift-instances-0.1.11:Instances.TH.Lift
         th-lift-0.7.7:Language.Haskell.TH.Lift
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         syb-0.7:Data.Generics.Instances stm-2.4.4.1:Control.Monad.STM
         regex-tdfa-1.2.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.2:Text.Regex.TDFA.String text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show
         regex-base-0.93.2:Text.Regex.Base.Context colour-2.3.4:Data.Colour
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats clock-0.7.2:System.Clock
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2:Control.Memory.Region
                         inline-r-0.9.0.2:Data.Vector.SEXP inline-r-0.9.0.2:Foreign.R.Type
                         inline-r-0.9.0.2:Language.R.Instance
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array
                         singletons-2.3.1:Data.Singletons
                         singletons-2.3.1:Data.Singletons.Prelude.Bool
                         singletons-2.3.1:Data.Singletons.Prelude.Eq
                         singletons-2.3.1:Data.Singletons.Prelude.Instances
                         singletons-2.3.1:Data.Singletons.Prelude.Num
                         singletons-2.3.1:Data.Singletons.Prelude.Ord
                         singletons-2.3.1:Data.Singletons.Syntax
                         singletons-2.3.1:Data.Singletons.TypeLits
                         singletons-2.3.1:Data.Singletons.TypeLits.Internal
                         tagged-0.8.5:Data.Tagged tasty-0.11.3:Test.Tasty.Core
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-desugar-1.7:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Arbitrary 163b49d50f1974012c75b48cc2898129
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Int e234a0a6d2a21ac9385a90eec01cbcae
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ieee754-0.8.0:Data.AEq 36da6ed8c900b60ebaceee7a22322349
import  -/  inline-r-0.9.0.2:Control.Monad.R.Class e5a0c4056d91754aa90b5adf4bc59248
import  -/  inline-r-0.9.0.2:Data.Vector.SEXP 1ba3b4d0f52c5e1239a58edb94ac6587
import  -/  inline-r-0.9.0.2:Data.Vector.SEXP.Base 45a38cf91fe2cf94fe8625a751ba7f0f
import  -/  inline-r-0.9.0.2:Data.Vector.SEXP.Mutable 099966697135647881a6d1b4beb0bf6d
import  -/  inline-r-0.9.0.2:Foreign.R 51460710da704a1aff942901939ab83a
import  -/  inline-r-0.9.0.2:Foreign.R.Internal 0950ef2cc999f128080e9690ff115a12
import  -/  inline-r-0.9.0.2:Foreign.R.Type c66cc062d80b456888eb0e05aa6a4002
import  -/  inline-r-0.9.0.2:H.Prelude e36d2c9f12de64ccb9a431bc0e48e285
import  -/  inline-r-0.9.0.2:Language.R e598fe485b33abac7367c6e28d8b9814
import  -/  inline-r-0.9.0.2:Language.R.Globals 6466af466952ec50029e279d952209f8
import  -/  inline-r-0.9.0.2:Language.R.HExp 65742348049316c593051d25bc8cd9c6
import  -/  inline-r-0.9.0.2:Language.R.Instance 7c21de0bbc964770a1fa7d8ec3cc550d
import  -/  inline-r-0.9.0.2:Language.R.Literal ad8f87454366c7ad983921c1f51fd824
import  -/  inline-r-0.9.0.2:Language.R.QQ 1885758794873fa7a90ccf5c301146fd
import  -/  quickcheck-assertions-0.3.0:Test.QuickCheck.Assertions 9f7b7aa735fd56cd9c0b02c6db518459
import  -/  singletons-2.3.1:Data.Singletons 9da68ca382f47f0899b26cbacf532ec5
import  -/  tasty-0.11.3:Test.Tasty fd7a7d678fb037373a84e0d2c94ba977
import  -/  tasty-0.11.3:Test.Tasty.Core ad38a7bfdd07cb983b46499179f5feea
import  -/  tasty-hunit-0.9.2:Test.Tasty.HUnit e2c91e2e2a1aa9764fce15de0bdca332
import  -/  tasty-hunit-0.9.2:Test.Tasty.HUnit.Orig cabfe6febc3dd1bdd12e76f191fca3cf
import  -/  tasty-quickcheck-0.9.1:Test.Tasty.QuickCheck c3b07024cf3e9fd1ecc9357c468b6072
import  -/  vector-0.12.0.1:Data.Vector.Fusion.Bundle a0b9e7f955f66470df3b2df4e11e5a05
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/tests/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
1a71c50595f2fa0572792266ceeb08bb
  $fAEqVector ::
    (Data.AEq.AEq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.AEq.AEq (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)))><L,U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (v1 :: Data.AEq.AEq a)
                      (v2 :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Test.Vector.$fAEqVector_$cp1AEq @ a @ s @ ty v1 v2)
                  (Test.Vector.$fAEqVector_$c=== @ a @ s @ ty v1 v2)
                  (Test.Vector.$fAEqVector_$c~== @ a @ s @ ty v1 v2) -}
649f4a74deade5be51c0ac231b9b4e42
  $fAEqVector2 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> [GHC.Types.Double]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLSS),1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Test.Vector.$wlvl ww1 ww2 ww3 ww4 }) -}
8a92d820d22463584688e0880e3042b0
  $fAEqVector3 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
36c308eab4ef71443c1c34b16af0c44d
  $fAEqVector_$c=== ::
    (Data.AEq.AEq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A),A,A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dAEq :: Data.AEq.AEq a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 GHC.Classes.==
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Test.Vector.$fAEqVector_$cp1AEq
                      @ a
                      @ s
                      @ ty
                      $dAEq
                      $d(%,,,%)) }) -}
814ca539232d15de52c4817bccd606cd
  $fAEqVector_$cp1AEq ::
    (Data.AEq.AEq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Classes.Eq (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A),A,A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: Data.AEq.AEq a)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case Test.Vector.$w$cp1AEq
                        @ a
                        @ s
                        @ ty
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Classes.C:Eq @ (Data.Vector.SEXP.Vector s ty a) ww1 ww2 }) -}
235a20afdc7c53db0d9e35018942182e
  $fAEqVector_$c~== ::
    (Data.AEq.AEq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C1(U)))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><S(SLSS),1*U(U,U,U,U)><L,1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: Data.AEq.AEq a)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w2 :: Data.Vector.SEXP.Vector s ty a)
                   (w3 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w2 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Test.Vector.$w$c~== @ a @ s @ ty w w1 ww1 ww2 ww3 ww4 w3 }) -}
38e57c706ed3f79b13013b1ed68f4d5a
  $fAEqVector_go2 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> Data.Monoid.All
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
1de884d827670daeac823567a1cd474f
  $fArbitraryBundle ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (Data.Vector.Fusion.Bundle.Bundle v a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ v1 :: * -> *
                      (v2 :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Data.Vector.Fusion.Bundle.Bundle v1 a)
                  (Test.Vector.$fArbitraryBundle1 @ a @ v1 v2)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Data.Vector.Fusion.Bundle.Bundle v1 a>_R))
                  (\ (ds :: Data.Vector.Fusion.Bundle.Bundle v1 a) ->
                   GHC.Types.[] @ (Data.Vector.Fusion.Bundle.Bundle v1 a)) -}
7e28c720ab4bb46a8087434a4ebf383f
  $fArbitraryBundle1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Data.Vector.Fusion.Bundle.Monadic.Bundle
         Data.Vector.Fusion.Util.Id v a
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ v1 :: * -> *
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case Test.Vector.$w$carbitrary
                        @ a
                        @ v1
                        w
                        w1
                        w2 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Data.Vector.Fusion.Bundle.Monadic.Bundle
                   @ Data.Vector.Fusion.Util.Id
                   @ v1
                   @ a
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
7f3047d0e37324b61417301bf3647613
  $fArbitraryBundle2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
bd7b046ec45b0fbd24da09c8f4d9dbd8
  $fArbitraryBundle3 ::
    ([a], GHC.Types.Int)
    -> Data.Vector.Fusion.Util.Id
         (Data.Vector.Fusion.Stream.Monadic.Step
            ([a], GHC.Types.Int) (Data.Vector.Fusion.Bundle.Monadic.Chunk v a))
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS(S)),1*U(1*U,1*U(U))>,
     Unfolding: (\ @ v1 :: * -> * @ a (s :: ([a], GHC.Types.Int)) ->
                 case s of wild { (,) ds1 n1 ->
                 case n1 of wild1 { GHC.Types.I# x9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x9 0#) of wild2 {
                   GHC.Types.False
                   -> case ds1 of wild3 {
                        []
                        -> (Data.Vector.Fusion.Stream.Monadic.Done
                              @ ([a], GHC.Types.Int)
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a))
                             `cast`
                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                     <Data.Vector.Fusion.Stream.Monadic.Step
                                        ([a], GHC.Types.Int)
                                        (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a)>_R))
                        : x10 xs1
                        -> (Data.Vector.Fusion.Stream.Monadic.Yield
                              @ ([a], GHC.Types.Int)
                              @ (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a)
                              (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                 @ v1
                                 @ a
                                 Test.Vector.$fArbitraryBundle4
                                 (\ @ m2 :: * -> *
                                    ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m2)
                                    ($dVector :: Data.Vector.Generic.Base.Vector v1 a)
                                    (eta :: Data.Vector.Generic.Base.Mutable
                                              v1 (Control.Monad.Primitive.PrimState m2) a) ->
                                  Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                    @ (Data.Vector.Generic.Base.Mutable v1)
                                    @ a
                                    (Data.Vector.Generic.Base.$p1Vector @ v1 @ a $dVector)
                                    @ m2
                                    $dPrimMonad
                                    eta
                                    Test.Vector.$fArbitraryBundle2
                                    x10))
                              (xs1, GHC.Types.I# (GHC.Prim.-# x9 1#)))
                             `cast`
                           (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                     <Data.Vector.Fusion.Stream.Monadic.Step
                                        ([a], GHC.Types.Int)
                                        (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a)>_R)) }
                   GHC.Types.True
                   -> (Data.Vector.Fusion.Stream.Monadic.Done
                         @ ([a], GHC.Types.Int)
                         @ (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a))
                        `cast`
                      (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                <Data.Vector.Fusion.Stream.Monadic.Step
                                   ([a], GHC.Types.Int)
                                   (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a)>_R)) } } }) -}
8e9475f8e33ddcb0ad1a7b83065dcb41
  $fArbitraryBundle4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
3dc5c1f3b7f7e821c3abf9dd409dfbda
  $fArbitraryBundle5 ::
    ([a], GHC.Types.Int)
    -> Data.Vector.Fusion.Util.Id
         (Data.Vector.Fusion.Stream.Monadic.Step ([a], GHC.Types.Int) a)
  {- Arity: 1,
     Unfolding: (\ @ a ->
                 Test.Vector.$fArbitraryBundle_step1
                   @ GHC.Types.Int
                   @ Data.Vector.Fusion.Util.Id
                   @ a
                   Data.Vector.Fusion.Util.$fMonadId
                   GHC.Num.$fNumInt
                   GHC.Classes.$fOrdInt) -}
602ba762092cb6b23fd7e5ded21e18c7
  $fArbitraryBundle_step1 ::
    (GHC.Base.Monad m2, GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([a1], b)
    -> m2 (Data.Vector.Fusion.Stream.Monadic.Step ([a1], b) a1)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,U(A,1*C1(C1(U)),A,A,A,A,C(U))><S(LLLC(C(S))LLLL),1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U(1*U,U)>,
     Inline: [0] (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ b
                   @ m2 :: * -> *
                   @ a1
                   ($dMonad1 :: GHC.Base.Monad m2)
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   (ds :: ([a1], b)) ->
                 case ds of wild { (,) ds1 n1 ->
                 case GHC.Classes.<=
                        @ b
                        $dOrd
                        n1
                        (GHC.Num.fromInteger @ b $dNum 0) of wild1 {
                   GHC.Types.False
                   -> case ds1 of wild2 {
                        []
                        -> GHC.Base.return
                             @ m2
                             $dMonad1
                             @ (Data.Vector.Fusion.Stream.Monadic.Step ([a1], b) a1)
                             (Data.Vector.Fusion.Stream.Monadic.Done @ ([a1], b) @ a1)
                        : x9 xs1
                        -> GHC.Base.return
                             @ m2
                             $dMonad1
                             @ (Data.Vector.Fusion.Stream.Monadic.Step ([a1], b) a1)
                             (Data.Vector.Fusion.Stream.Monadic.Yield
                                @ ([a1], b)
                                @ a1
                                x9
                                (xs1, GHC.Num.- @ b $dNum n1 (GHC.Num.fromInteger @ b $dNum 1))) }
                   GHC.Types.True
                   -> GHC.Base.return
                        @ m2
                        $dMonad1
                        @ (Data.Vector.Fusion.Stream.Monadic.Step ([a1], b) a1)
                        (Data.Vector.Fusion.Stream.Monadic.Done @ ([a1], b) @ a1) } }) -}
6c50b8b9eb7db346b35008965d42a139
  $fArbitraryVector ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Test.QuickCheck.Arbitrary.Arbitrary
      (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),A)><L,U(U(C(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ s
                      @ ty :: Foreign.R.Type.SEXPTYPE
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v2 :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Test.Vector.$fArbitraryVector3 @ a @ s @ ty v1 v2)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Data.Vector.SEXP.Vector s ty a>_R))
                  (Test.Vector.$fArbitraryVector_$cshrink @ a @ s @ ty v1 v2) -}
7c0c887f607bc076d97e7968dd97e868
  $fArbitraryVector1 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> [Data.Vector.SEXP.Vector
          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Data.Vector.SEXP.Vector
                             GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32) ->
                 GHC.Types.[]
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)) -}
687a365ca87ec85e845557cac705a028
  $fArbitraryVector10 ::
    Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
  {- Unfolding: (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                   @ 'Foreign.R.Type.Real
                   Foreign.R.Type.$fSingISEXPTYPEReal1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Real>_N)) -}
fc56f909d880dc931aab7359babda0fa
  $fArbitraryVector2 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> [Data.Vector.SEXP.Vector
          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Data.Vector.SEXP.Vector
                             GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 GHC.Types.[]
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)) -}
43e5f473ed12f357e2f5a7b7c0701024
  $fArbitraryVector3 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <L,1*U(1*C(C1(U)),A)><S(LS(SL)LS(S)),U(1*U(1*C1(U(U)),A,A,C(C1(C1(C1(U(U,A))))),A,A,A,A),1*U(1*U,A),A,U(U))><S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)> -}
0c01140c1e6f8f1b85226e55c5d668f8
  $fArbitraryVector4 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
bd231fac2b6db0ba28dcf527b017978c
  $fArbitraryVector5 ::
    GHC.ST.ST
      GHC.Prim.RealWorld
      (Data.Vector.SEXP.Mutable.Internal.W
         s1
         'Foreign.R.Type.Int
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Int.Int32)
  {- Strictness: x -}
1dddff4b9bee26572a97a728a2a6cea9
  $fArbitraryVector6 :: GHC.Types.Int
  {- Unfolding: (case Foreign.R.Type.$w$cfromEnum
                        (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                           @ 'Foreign.R.Type.Int
                           Foreign.R.Type.$fSingISEXPTYPEInt1
                             `cast`
                           (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Int>_N))
                          `cast`
                        (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of v1 { DEFAULT ->
                 GHC.Types.I# v1 }) -}
67757e3f08f248d3e89553bff539cebd
  $fArbitraryVector7 ::
    Data.Singletons.Demote Foreign.R.Type.SEXPTYPE
  {- Unfolding: (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                   @ 'Foreign.R.Type.Int
                   Foreign.R.Type.$fSingISEXPTYPEInt1
                     `cast`
                   (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Int>_N)) -}
e31f7dea9e02014f430beb9617fe0613
  $fArbitraryVector8 ::
    GHC.ST.ST
      GHC.Prim.RealWorld
      (Data.Vector.SEXP.Mutable.Internal.W
         s1
         'Foreign.R.Type.Real
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Types.Double)
  {- Strictness: x -}
33cd03b184f2a952ef25c7c0c6e5d77f
  $fArbitraryVector9 :: GHC.Types.Int
  {- Unfolding: (case Foreign.R.Type.$w$cfromEnum
                        (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                           @ 'Foreign.R.Type.Real
                           Foreign.R.Type.$fSingISEXPTYPEReal1
                             `cast`
                           (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]) <'Foreign.R.Type.Real>_N))
                          `cast`
                        (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of v1 { DEFAULT ->
                 GHC.Types.I# v1 }) -}
699f30a70a759559eed6e4087254abd6
  $fArbitraryVector_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a -> [Data.Vector.SEXP.Vector s ty a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 GHC.Types.[] @ (Data.Vector.SEXP.Vector s ty a) }) -}
e3b0c8f5e1cb00aabd4bdc7a7198a366
  $fArbitraryVector_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Test.Vector.$w$s$carbitrary ww1 ww2 ww3 ww4 ww8 } }) -}
f18e427d9f802e54b122d7d72fe42d25
  $fArbitraryVector_$s$carbitrary1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Test.Vector.$w$s$carbitrary1 ww1 ww2 ww3 ww4 ww8 } }) -}
c89841e6ad1e968424ac8efe21f6bae7
  $s$fShow(,) ::
    GHC.Show.Show
      (Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
       GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Vector.SEXP.Vector
                       GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                     GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                     @ GHC.Types.Int
                     Test.Vector.$s$fShow(,)_$s$fShowVector
                     GHC.Show.$fShowInt)
                  (\ (x9 :: (Data.Vector.SEXP.Vector
                               GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                             GHC.Types.Int)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                     @ GHC.Types.Int
                     Test.Vector.$s$fShow(,)_$s$fShowVector
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow(,)1
                     x9
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                              GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                        GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ (Data.Vector.SEXP.Vector
                             GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                        @ GHC.Types.Int
                        Test.Vector.$s$fShow(,)_$s$fShowVector
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
4f672b5a9bac82a4dce0267df87c8a90
  $s$fShow(,)1 ::
    (Foreign.Storable.Storable GHC.Int.Int32,
     (Data.Singletons.SingI 'Foreign.R.Type.Int, () :: Constraint),
     Data.Singletons.SingI 'Foreign.R.Type.Int,
     (GHC.Int.Int32 :: *) Data.Type.Equality.~ (GHC.Int.Int32 :: *))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.Storable.$fStorableInt32,
                  Test.Vector.$s$fShow(,)3,
                  Foreign.R.Type.$fSingISEXPTYPEInt1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                  Test.Vector.$s$fShow(,)2
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <GHC.Int.Int32>_N <GHC.Int.Int32>_N))) -}
609e271bae26596dd020e6ae1825ff2c
  $s$fShow(,)2 ::
    (GHC.Int.Int32 :: *) GHC.Types.~~ (GHC.Int.Int32 :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   @~ <GHC.Int.Int32>_N) -}
86a7ff32b53a5514b923448c0463e9cf
  $s$fShow(,)3 ::
    (Data.Singletons.SingI 'Foreign.R.Type.Int, () :: Constraint)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.R.Type.$fSingISEXPTYPEInt1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                  GHC.Classes.C:(%%))) -}
e84ae412314f111dca846326c3c5c647
  $s$fShow(,)4 ::
    GHC.Show.Show
      (Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
       GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Vector.SEXP.Vector
                       GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                     GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                     @ GHC.Types.Int
                     Test.Vector.$s$fShow(,)_$s$fShowVector1
                     GHC.Show.$fShowInt)
                  (\ (x9 :: (Data.Vector.SEXP.Vector
                               GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                             GHC.Types.Int)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                     @ GHC.Types.Int
                     Test.Vector.$s$fShow(,)_$s$fShowVector1
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow(,)1
                     x9
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                              GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                        GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ (Data.Vector.SEXP.Vector
                             GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                        @ GHC.Types.Int
                        Test.Vector.$s$fShow(,)_$s$fShowVector1
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
f7e614be2879bdf9d8ea58afb62d334f
  $s$fShow(,)5 ::
    (Foreign.Storable.Storable GHC.Types.Double,
     (Data.Singletons.SingI 'Foreign.R.Type.Real, () :: Constraint),
     Data.Singletons.SingI 'Foreign.R.Type.Real,
     (GHC.Types.Double :: *)
     Data.Type.Equality.~
     (GHC.Types.Double :: *))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.Storable.$fStorableDouble,
                  Test.Vector.$s$fShow(,)6,
                  Foreign.R.Type.$fSingISEXPTYPEReal1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N),
                  Test.Vector.$s$fShow(,)_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <GHC.Types.Double>_N <GHC.Types.Double>_N))) -}
8cdcd2402b72653eafc85e903f4db770
  $s$fShow(,)6 ::
    (Data.Singletons.SingI 'Foreign.R.Type.Real, () :: Constraint)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.R.Type.$fSingISEXPTYPEReal1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Real>_N),
                  GHC.Classes.C:(%%))) -}
8ae6c49ebe16a8cd5fdbd3c7fb56b799
  $s$fShow(,)_$d~~ ::
    (GHC.Types.Double :: *) GHC.Types.~~ (GHC.Types.Double :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   @~ <GHC.Types.Double>_N) -}
0353dc7a968621b81c06d857f4314a79
  $s$fShow(,)_$s$fShowVector ::
    GHC.Show.Show
      (Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Vector.SEXP.Vector
                       GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                  (\ (eta :: GHC.Types.Int)
                     (eta1 :: Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                     (eta2 :: GHC.Base.String) ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b
                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                        (n1 :: b)[OneShot] ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b
                        c
                        n1
                        (Data.Vector.SEXP.$fShowVector_$cshow
                           @ GHC.Int.Int32
                           @ GHC.Types.Any
                           @ 'Foreign.R.Type.Int
                           GHC.Int.$fShowInt32
                           Test.Vector.$s$fShow(,)1
                             `cast`
                           (GHC.Classes.(%,,,%)
                              <Foreign.Storable.Storable GHC.Int.Int32>_N
                              (GHC.Classes.(%,%)
                                 <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                                 (Trans
                                      (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                <'Foreign.R.Type.Int>_N
                                                <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                   'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                   'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                   'Foreign.R.Type.Raw]>_N))
                                      (Trans
                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                     <'Foreign.R.Type.Int>_N
                                                     <'Foreign.R.Type.Logical>_N
                                                     <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw]>_N))
                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                     <'Foreign.R.Type.Int>_N
                                                     <'Foreign.R.Type.Char>_N
                                                     <'['Foreign.R.Type.Logical,
                                                        'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw]>_N)))))_N
                              <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                              ((Data.Type.Equality.~)
                                 <*>_N
                                 (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2] <GHC.Types.Any>_N))
                                 <GHC.Int.Int32>_N)_N)_R
                           eta1))
                     eta2)
                  (Data.Vector.SEXP.$fShowVector_$cshow
                     @ GHC.Int.Int32
                     @ GHC.Types.Any
                     @ 'Foreign.R.Type.Int
                     GHC.Int.$fShowInt32
                     Test.Vector.$s$fShow(,)1
                       `cast`
                     (GHC.Classes.(%,,,%)
                        <Foreign.Storable.Storable GHC.Int.Int32>_N
                        (GHC.Classes.(%,%)
                           <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                           (Trans
                                (Sym (Foreign.R.Constraints.D:R::∈[1]
                                          <'Foreign.R.Type.Int>_N
                                          <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                             'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                             'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                             'Foreign.R.Type.Raw]>_N))
                                (Trans
                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                               <'Foreign.R.Type.Int>_N
                                               <'Foreign.R.Type.Logical>_N
                                               <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                  'Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                  'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                  'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N))
                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                               <'Foreign.R.Type.Int>_N
                                               <'Foreign.R.Type.Char>_N
                                               <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                  'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                  'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                  'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                  'Foreign.R.Type.Raw]>_N)))))_N
                        <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                        ((Data.Type.Equality.~)
                           <*>_N
                           (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2] <GHC.Types.Any>_N))
                           <GHC.Int.Int32>_N)_N)_R)
                  (Data.Vector.SEXP.$fShowVector_$cshowList
                     @ GHC.Int.Int32
                     @ GHC.Types.Any
                     @ 'Foreign.R.Type.Int
                     GHC.Int.$fShowInt32
                     Test.Vector.$s$fShow(,)1
                       `cast`
                     (GHC.Classes.(%,,,%)
                        <Foreign.Storable.Storable GHC.Int.Int32>_N
                        (GHC.Classes.(%,%)
                           <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                           (Trans
                                (Sym (Foreign.R.Constraints.D:R::∈[1]
                                          <'Foreign.R.Type.Int>_N
                                          <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                             'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                             'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                             'Foreign.R.Type.Raw]>_N))
                                (Trans
                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                               <'Foreign.R.Type.Int>_N
                                               <'Foreign.R.Type.Logical>_N
                                               <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                  'Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                  'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                  'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N))
                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                               <'Foreign.R.Type.Int>_N
                                               <'Foreign.R.Type.Char>_N
                                               <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                  'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                  'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                  'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                  'Foreign.R.Type.Raw]>_N)))))_N
                        <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                        ((Data.Type.Equality.~)
                           <*>_N
                           (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2] <GHC.Types.Any>_N))
                           <GHC.Int.Int32>_N)_N)_R) -}
95fc5c14863511bdc74157ea55776954
  $s$fShow(,)_$s$fShowVector1 ::
    GHC.Show.Show
      (Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Vector.SEXP.Vector
                       GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                  (\ (eta :: GHC.Types.Int)
                     (eta1 :: Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                     (eta2 :: GHC.Base.String) ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b
                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                        (n1 :: b)[OneShot] ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b
                        c
                        n1
                        (Data.Vector.SEXP.$fShowVector_$cshow
                           @ GHC.Types.Double
                           @ GHC.Types.Any
                           @ 'Foreign.R.Type.Real
                           GHC.Float.$fShowDouble
                           Test.Vector.$s$fShow(,)5
                             `cast`
                           (GHC.Classes.(%,,,%)
                              <Foreign.Storable.Storable GHC.Types.Double>_N
                              (GHC.Classes.(%,%)
                                 <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                                 (Trans
                                      (Sym (Foreign.R.Constraints.D:R::∈[1]
                                                <'Foreign.R.Type.Real>_N
                                                <'['Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                   'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                   'Foreign.R.Type.WeakRef,
                                                   'Foreign.R.Type.Raw]>_N))
                                      (Trans
                                           (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                     <'Foreign.R.Type.Real>_N
                                                     <'Foreign.R.Type.Int>_N
                                                     <'['Foreign.R.Type.Real,
                                                        'Foreign.R.Type.Complex,
                                                        'Foreign.R.Type.String,
                                                        'Foreign.R.Type.Vector,
                                                        'Foreign.R.Type.Expr,
                                                        'Foreign.R.Type.WeakRef,
                                                        'Foreign.R.Type.Raw]>_N))
                                           (Trans
                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                          <'Foreign.R.Type.Real>_N
                                                          <'Foreign.R.Type.Logical>_N
                                                          <'['Foreign.R.Type.Int,
                                                             'Foreign.R.Type.Real,
                                                             'Foreign.R.Type.Complex,
                                                             'Foreign.R.Type.String,
                                                             'Foreign.R.Type.Vector,
                                                             'Foreign.R.Type.Expr,
                                                             'Foreign.R.Type.WeakRef,
                                                             'Foreign.R.Type.Raw]>_N))
                                                (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                          <'Foreign.R.Type.Real>_N
                                                          <'Foreign.R.Type.Char>_N
                                                          <'['Foreign.R.Type.Logical,
                                                             'Foreign.R.Type.Int,
                                                             'Foreign.R.Type.Real,
                                                             'Foreign.R.Type.Complex,
                                                             'Foreign.R.Type.String,
                                                             'Foreign.R.Type.Vector,
                                                             'Foreign.R.Type.Expr,
                                                             'Foreign.R.Type.WeakRef,
                                                             'Foreign.R.Type.Raw]>_N))))))_N
                              <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                              ((Data.Type.Equality.~)
                                 <*>_N
                                 (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3] <GHC.Types.Any>_N))
                                 <GHC.Types.Double>_N)_N)_R
                           eta1))
                     eta2)
                  (Data.Vector.SEXP.$fShowVector_$cshow
                     @ GHC.Types.Double
                     @ GHC.Types.Any
                     @ 'Foreign.R.Type.Real
                     GHC.Float.$fShowDouble
                     Test.Vector.$s$fShow(,)5
                       `cast`
                     (GHC.Classes.(%,,,%)
                        <Foreign.Storable.Storable GHC.Types.Double>_N
                        (GHC.Classes.(%,%)
                           <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                           (Trans
                                (Sym (Foreign.R.Constraints.D:R::∈[1]
                                          <'Foreign.R.Type.Real>_N
                                          <'['Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                             'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                             'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N))
                                (Trans
                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                               <'Foreign.R.Type.Real>_N
                                               <'Foreign.R.Type.Int>_N
                                               <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                  'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                  'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                  'Foreign.R.Type.Raw]>_N))
                                     (Trans
                                          (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                    <'Foreign.R.Type.Real>_N
                                                    <'Foreign.R.Type.Logical>_N
                                                    <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                       'Foreign.R.Type.Complex,
                                                       'Foreign.R.Type.String,
                                                       'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                       'Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw]>_N))
                                          (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                    <'Foreign.R.Type.Real>_N
                                                    <'Foreign.R.Type.Char>_N
                                                    <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                       'Foreign.R.Type.Real,
                                                       'Foreign.R.Type.Complex,
                                                       'Foreign.R.Type.String,
                                                       'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                       'Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw]>_N))))))_N
                        <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                        ((Data.Type.Equality.~)
                           <*>_N
                           (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3] <GHC.Types.Any>_N))
                           <GHC.Types.Double>_N)_N)_R)
                  (Data.Vector.SEXP.$fShowVector_$cshowList
                     @ GHC.Types.Double
                     @ GHC.Types.Any
                     @ 'Foreign.R.Type.Real
                     GHC.Float.$fShowDouble
                     Test.Vector.$s$fShow(,)5
                       `cast`
                     (GHC.Classes.(%,,,%)
                        <Foreign.Storable.Storable GHC.Types.Double>_N
                        (GHC.Classes.(%,%)
                           <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                           (Trans
                                (Sym (Foreign.R.Constraints.D:R::∈[1]
                                          <'Foreign.R.Type.Real>_N
                                          <'['Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                             'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                             'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N))
                                (Trans
                                     (Sym (Foreign.R.Constraints.D:R::∈[2]
                                               <'Foreign.R.Type.Real>_N
                                               <'Foreign.R.Type.Int>_N
                                               <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                  'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                  'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                  'Foreign.R.Type.Raw]>_N))
                                     (Trans
                                          (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                    <'Foreign.R.Type.Real>_N
                                                    <'Foreign.R.Type.Logical>_N
                                                    <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                       'Foreign.R.Type.Complex,
                                                       'Foreign.R.Type.String,
                                                       'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                       'Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw]>_N))
                                          (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                    <'Foreign.R.Type.Real>_N
                                                    <'Foreign.R.Type.Char>_N
                                                    <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                       'Foreign.R.Type.Real,
                                                       'Foreign.R.Type.Complex,
                                                       'Foreign.R.Type.String,
                                                       'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                       'Foreign.R.Type.WeakRef,
                                                       'Foreign.R.Type.Raw]>_N))))))_N
                        <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                        ((Data.Type.Equality.~)
                           <*>_N
                           (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3] <GHC.Types.Any>_N))
                           <GHC.Types.Double>_N)_N)_R) -}
6bd70436384152c299a240abcf274064
  $s$fShowVector_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U(U,U,U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector
                              GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   (eta2 :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n1
                      (Data.Vector.SEXP.$fShowVector_$cshow
                         @ GHC.Int.Int32
                         @ GHC.Types.Any
                         @ 'Foreign.R.Type.Int
                         GHC.Int.$fShowInt32
                         Test.Vector.$s$fShow(,)1
                           `cast`
                         (GHC.Classes.(%,,,%)
                            <Foreign.Storable.Storable GHC.Int.Int32>_N
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                               (Trans
                                    (Sym (Foreign.R.Constraints.D:R::∈[1]
                                              <'Foreign.R.Type.Int>_N
                                              <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                 'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                 'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                 'Foreign.R.Type.Raw]>_N))
                                    (Trans
                                         (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                   <'Foreign.R.Type.Int>_N
                                                   <'Foreign.R.Type.Logical>_N
                                                   <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                      'Foreign.R.Type.Complex,
                                                      'Foreign.R.Type.String,
                                                      'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                      'Foreign.R.Type.WeakRef,
                                                      'Foreign.R.Type.Raw]>_N))
                                         (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                   <'Foreign.R.Type.Int>_N
                                                   <'Foreign.R.Type.Char>_N
                                                   <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                                      'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                      'Foreign.R.Type.String,
                                                      'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                      'Foreign.R.Type.WeakRef,
                                                      'Foreign.R.Type.Raw]>_N)))))_N
                            <Data.Singletons.SingI 'Foreign.R.Type.Int>_N
                            ((Data.Type.Equality.~)
                               <*>_N
                               (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[2] <GHC.Types.Any>_N))
                               <GHC.Int.Int32>_N)_N)_R
                         eta1))
                   eta2) -}
44efbddd713cc07d2f1d269ebbd30404
  $s$fShowVector_$cshowsPrec1 ::
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U(U,U,U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector
                              GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   (eta2 :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n1
                      (Data.Vector.SEXP.$fShowVector_$cshow
                         @ GHC.Types.Double
                         @ GHC.Types.Any
                         @ 'Foreign.R.Type.Real
                         GHC.Float.$fShowDouble
                         Test.Vector.$s$fShow(,)5
                           `cast`
                         (GHC.Classes.(%,,,%)
                            <Foreign.Storable.Storable GHC.Types.Double>_N
                            (GHC.Classes.(%,%)
                               <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                               (Trans
                                    (Sym (Foreign.R.Constraints.D:R::∈[1]
                                              <'Foreign.R.Type.Real>_N
                                              <'['Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                 'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                 'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N))
                                    (Trans
                                         (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                   <'Foreign.R.Type.Real>_N
                                                   <'Foreign.R.Type.Int>_N
                                                   <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                      'Foreign.R.Type.String,
                                                      'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                      'Foreign.R.Type.WeakRef,
                                                      'Foreign.R.Type.Raw]>_N))
                                         (Trans
                                              (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                        <'Foreign.R.Type.Real>_N
                                                        <'Foreign.R.Type.Logical>_N
                                                        <'['Foreign.R.Type.Int,
                                                           'Foreign.R.Type.Real,
                                                           'Foreign.R.Type.Complex,
                                                           'Foreign.R.Type.String,
                                                           'Foreign.R.Type.Vector,
                                                           'Foreign.R.Type.Expr,
                                                           'Foreign.R.Type.WeakRef,
                                                           'Foreign.R.Type.Raw]>_N))
                                              (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                        <'Foreign.R.Type.Real>_N
                                                        <'Foreign.R.Type.Char>_N
                                                        <'['Foreign.R.Type.Logical,
                                                           'Foreign.R.Type.Int,
                                                           'Foreign.R.Type.Real,
                                                           'Foreign.R.Type.Complex,
                                                           'Foreign.R.Type.String,
                                                           'Foreign.R.Type.Vector,
                                                           'Foreign.R.Type.Expr,
                                                           'Foreign.R.Type.WeakRef,
                                                           'Foreign.R.Type.Raw]>_N))))))_N
                            <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                            ((Data.Type.Equality.~)
                               <*>_N
                               (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3] <GHC.Types.Any>_N))
                               <GHC.Types.Double>_N)_N)_R
                         eta1))
                   eta2) -}
18a774950e85b2e89bec74c8dd10148a
  $s$fShow[] :: GHC.Show.Show [GHC.Int.Int32]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Int.Int32]
                  (\ (ds :: GHC.Types.Int) -> GHC.Int.$fShowInt32_$cshowList)
                  (\ (x9 :: [GHC.Int.Int32]) ->
                   GHC.Show.showList__
                     @ GHC.Int.Int32
                     GHC.Int.$fShowInt2
                     x9
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[GHC.Int.Int32]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [GHC.Int.Int32]
                     GHC.Int.$fShowInt32_$cshowList
                     ls
                     s) -}
ecadf96dc410bd17b7ecd9af7e28b560
  $s$fShow[]1 :: GHC.Show.Show [GHC.Types.Double]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Double]
                  (\ (ds :: GHC.Types.Int) -> GHC.Float.$fShowDouble_$cshowList)
                  (\ (x9 :: [GHC.Types.Double]) ->
                   GHC.Show.showList__
                     @ GHC.Types.Double
                     GHC.Float.$fShowDouble1
                     x9
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[GHC.Types.Double]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [GHC.Types.Double]
                     GHC.Float.$fShowDouble_$cshowList
                     ls
                     s) -}
5a4d10fb84f85961dc67c9a4fb2595f5
  $s$fShow[]_$cshow :: [GHC.Int.Int32] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x9 :: [GHC.Int.Int32]) ->
                 GHC.Show.showList__
                   @ GHC.Int.Int32
                   GHC.Int.$fShowInt2
                   x9
                   (GHC.Types.[] @ GHC.Types.Char)) -}
988119ac32d7acf1ac8971bd189cdd5a
  $s$fShow[]_$cshow1 :: [GHC.Types.Double] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x9 :: [GHC.Types.Double]) ->
                 GHC.Show.showList__
                   @ GHC.Types.Double
                   GHC.Float.$fShowDouble1
                   x9
                   (GHC.Types.[] @ GHC.Types.Char)) -}
44a560658e4652950ff80ba5beaf60e5
  $s$fShow[]_$cshowList :: [[GHC.Int.Int32]] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[GHC.Int.Int32]]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [GHC.Int.Int32]
                   GHC.Int.$fShowInt32_$cshowList
                   ls
                   s) -}
d0936cd6bd2918fbe6147d0c1ddec8ed
  $s$fShow[]_$cshowList1 :: [[GHC.Types.Double]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[GHC.Types.Double]]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [GHC.Types.Double]
                   GHC.Float.$fShowDouble_$cshowList
                   ls
                   s) -}
c41e8d7c1c498d2728361ee1b340d9ca
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Test.Vector.$trModule3
                   Test.Vector.$trModule1) -}
13b77d65946c8778297c148b1150cc67
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.Vector.$trModule2) -}
75ed19d16ab28c33563904ec260a463c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test.Vector"#) -}
f549e678bebe95f6a83dff39cf30833c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.Vector.$trModule4) -}
fedde3d8e1f84b91f77d5af51425db46
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b130f2c7a27fd395aa06819c8a40b887
  $w$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (# Data.Vector.Fusion.Stream.Monadic.Stream
            Data.Vector.Fusion.Util.Id a,
          Data.Vector.Fusion.Stream.Monadic.Stream
            Data.Vector.Fusion.Util.Id
            (Data.Vector.Fusion.Bundle.Monadic.Chunk v a),
          GHC.Base.Maybe (v a), Data.Vector.Fusion.Bundle.Size.Size #)
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ v1 :: * -> *
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 let {
                   x9 :: [a]
                   = case w1
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case w2 of ww7 { GHC.Types.I# ww8 ->
                     Test.QuickCheck.Gen.$wlistOf
                       @ a
                       (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                       ww1
                       ww2
                       ww3
                       ww4
                       ww8 } }
                 } in
                 let {
                   n1 :: GHC.Types.Int
                   = case GHC.List.$wlenAcc @ a x9 0# of ww2 { DEFAULT ->
                     GHC.Types.I# ww2 }
                 } in
                 let {
                   t :: ([a], GHC.Types.Int) = (x9, n1)
                 } in
                 (# Data.Vector.Fusion.Stream.Monadic.Stream
                      @ Data.Vector.Fusion.Util.Id
                      @ a
                      @ ([a], GHC.Types.Int)
                      (Test.Vector.$fArbitraryBundle5 @ a)
                      t,
                    Data.Vector.Fusion.Stream.Monadic.Stream
                      @ Data.Vector.Fusion.Util.Id
                      @ (Data.Vector.Fusion.Bundle.Monadic.Chunk v1 a)
                      @ ([a], GHC.Types.Int)
                      (Test.Vector.$fArbitraryBundle3 @ v1 @ a)
                      t,
                    GHC.Base.Nothing @ (v1 a),
                    Data.Vector.Fusion.Bundle.Size.Max
                      (case n1 of wild { GHC.Types.I# x10 ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x10 0#) of wild2 {
                         GHC.Types.False -> wild
                         GHC.Types.True -> Test.Vector.$fArbitraryBundle2 } }) #)) -}
a2e60bc5bd82522d7c77b928682f2613
  $w$cp1AEq ::
    (Data.AEq.AEq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (# Data.Vector.SEXP.Vector s ty a
       -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool,
       Data.Vector.SEXP.Vector s ty a
       -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool #)
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A),A,A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: Data.AEq.AEq a)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 (# let {
                      w2 :: GHC.Classes.Eq a = Data.AEq.$p1AEq @ a w
                    } in
                    \ (w3 :: Data.Vector.SEXP.Vector s ty a)
                      (w4 :: Data.Vector.SEXP.Vector s ty a) ->
                    case w3 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                    case w4 of ww5 { Data.Vector.SEXP.Vector ww6 ww7 ww8 ww9 ->
                    Data.Vector.SEXP.$w$c==
                      @ a
                      @ s
                      @ ty
                      w2
                      w1
                      ww1
                      ww2
                      ww3
                      ww4
                      ww6
                      ww7
                      ww8
                      ww9 } },
                    Data.Vector.SEXP.$fEqVector_$c/=
                      @ a
                      @ s
                      @ ty
                      (Data.AEq.$p1AEq @ a w)
                      w1 #) }) -}
7f67dc4b1dfe9737947fab63946fdf4a
  $w$c~== ::
    (Data.AEq.AEq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.SEXP.Vector s ty a
    -> GHC.Types.Bool
  {- Arity: 7,
     Strictness: <L,U(A,A,C(C1(U)))><S(LLLS(S)),U(1*U(C(U(U)),A,C(C1(C1(U(A,1*U)))),A,A,A,A,A),A,A,U(U))><L,U><L,U><L,U><S,U><L,1*U(U,U,U,U)>,
     Inline: [0] -}
3684d3f542a5eee57b2b80d2b3ca2236
  $w$s$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case GHC.Magic.runRW#
                         @ ('GHC.Types.TupleRep
                              '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                              Data.Vector.SEXP.W
                                s1 'Foreign.R.Type.Int GHC.Types.Any GHC.Int.Int32 #)
                         (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case GHC.Prim.dataToTag#
                                 @ Foreign.R.Type.SEXPTYPE
                                 Test.Vector.$fArbitraryVector7
                                   `cast`
                                 (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of a# {
                            DEFAULT
                            -> let {
                                 x9 :: [GHC.Int.Int32]
                                 = Test.QuickCheck.Gen.$wlistOf
                                     @ GHC.Int.Int32
                                     Test.QuickCheck.Arbitrary.$fArbitraryBounds_$sarbitrarySizedBoundedIntegral6
                                       `cast`
                                     (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Int.Int32>_R))
                                     ww
                                     ww1
                                     ww2
                                     ww3
                                     ww4
                               } in
                               case GHC.List.$wlenAcc @ GHC.Int.Int32 x9 0# of ww5 { DEFAULT ->
                               let {
                                 $j :: GHC.Prim.Int#
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Vector.SEXP.W
                                               s1 'Foreign.R.Type.Int GHC.Types.Any GHC.Int.Int32 #)
                                   <join 1> {- Arity: 1, Strictness: <S,U> -}
                                 = \ (ww6 :: GHC.Prim.Int#)[OneShot] ->
                                   case Test.Vector.$fArbitraryVector6 of v1 { GHC.Types.I# v2 ->
                                   case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Word#
                                                                         -> GHC.Prim.Int#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Addr# #)}
                                          (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# v2))
                                          ww6
                                          s2 of wild { (#,#) ds ds1 ->
                                   case (($dReifies
                                            `cast`
                                          (Data.Reflection.N:Reifies[0]
                                               <*>_N
                                               <s1>_N
                                               <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N)
                                            @ Data.Proxy.Proxy
                                            (Data.Proxy.Proxy @ * @ s1))
                                           `cast`
                                         (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)
                                           @ 'Foreign.R.Type.Int
                                           (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                                             `cast`
                                           (Trans
                                                (GHC.Ptr.Ptr
                                                   <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                  Control.Memory.Region.V
                                                                                  'Foreign.R.Type.Int>)_R
                                                (Sym (Foreign.R.Internal.N:SEXP[0]
                                                          <Control.Memory.Region.V>_P
                                                          <'Foreign.R.Type.Int>_P))))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Foreign.R.Internal.SEXP
                                                GHC.Types.Any 'Foreign.R.Type.Int>_R)
                                          ds of ds2 { (#,#) ipv ipv1 ->
                                   case ipv1
                                          `cast`
                                        (Trans
                                             (Foreign.R.Internal.N:SEXP[0]
                                                  <GHC.Types.Any>_P <'Foreign.R.Type.Int>_P)
                                             (GHC.Ptr.Ptr
                                                <Language.R.HExp.HExp
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int, Language.R.HExp.HExp
                                                                          (Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld))
                                                                          'Foreign.R.Type.Int>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                                   let {
                                     $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> GHC.Prim.Int#
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Vector.SEXP.W
                                                     s1
                                                     'Foreign.R.Type.Int
                                                     GHC.Types.Any
                                                     GHC.Int.Int32 #)
                                       <join 2> {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                                     = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                         (ww7 :: GHC.Prim.Int#)[OneShot] ->
                                       case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld #)}
                                              dt1
                                              w of wild1 { Unit# ds3 ->
                                       case GHC.ForeignPtr.$wnewConcForeignPtr
                                              @ ()
                                              dt1
                                              (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                               case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                     -> GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld #)}
                                                      dt1
                                                      s3 of wild2 { Unit# ds4 ->
                                               (# ds4, GHC.Tuple.() #) })
                                                `cast`
                                              (Sym (GHC.Types.N:IO[0] <()>_R))
                                              ds3 of ds4 { (#,#) ipv2 ipv3 ->
                                       (# ipv2,
                                          case ipv3 of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                                          (Data.Vector.SEXP.Vector
                                             @ GHC.Types.Any
                                             @ 'Foreign.R.Type.Int
                                             @ GHC.Int.Int32
                                             dt3
                                             dt4
                                             0#
                                             (GHC.Prim.narrow32Int# ww7))
                                            `cast`
                                          (Sym (Data.Vector.SEXP.N:W[0]
                                                    <s1>_P
                                                    <'Foreign.R.Type.Int>_P
                                                    <GHC.Types.Any>_P) <GHC.Int.Int32>_N) } #) } }
                                   } in
                                   letrec {
                                     $wfoldlM'_loop :: GHC.Types.SPEC
                                                       -> GHC.Prim.Int#
                                                       -> [GHC.Int.Int32]
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.SEXP.W
                                                               s1
                                                               'Foreign.R.Type.Int
                                                               GHC.Types.Any
                                                               GHC.Int.Int32 #)
                                       <join 5> {- Arity: 5,
                                                   Strictness: <S,1*U><S,U><L,1*U><S,U><S,U>,
                                                   Inline: [0] -}
                                     = \ (w :: GHC.Types.SPEC)
                                         (ww7 :: GHC.Prim.Int#)
                                         (ww8 :: [GHC.Int.Int32])
                                         (ww9 :: GHC.Prim.Int#)
                                         (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w of ds5 { DEFAULT ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<=# ww9 0#) of wild1 {
                                         GHC.Types.False
                                         -> case ww8 of wild2 {
                                              [] -> $w$j w1 ww7
                                              : x10 xs1
                                              -> case x10 of wild4 { GHC.Int.I32# x11 ->
                                                 case GHC.Prim.writeInt32OffAddr#
                                                        @ GHC.Prim.RealWorld
                                                        (GHC.Prim.plusAddr#
                                                           (GHC.Prim.plusAddr# dt1 40#)
                                                           (GHC.Prim.*#
                                                              (GHC.Prim.narrow32Int# ww7)
                                                              4#))
                                                        0#
                                                        x11
                                                        w1 of s3 { DEFAULT ->
                                                 $wfoldlM'_loop
                                                   GHC.Types.SPEC
                                                   (GHC.Prim.+# ww7 1#)
                                                   xs1
                                                   (GHC.Prim.-# ww9 1#)
                                                   s3 } } }
                                         GHC.Types.True -> $w$j w1 ww7 } }
                                   } in
                                   $wfoldlM'_loop GHC.Types.SPEC 0# x9 ww5 ipv } } } }
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<=# ww5 0#) of wild2 {
                                 GHC.Types.False -> $j ww5 GHC.Types.True -> $j 0# } }
                            9#
                            -> case Test.Vector.$fArbitraryVector5
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Vector.SEXP.W
                                           s1 'Foreign.R.Type.Int GHC.Types.Any GHC.Int.Int32 #)
                               of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                  ipv2
                    `cast`
                  (Data.Vector.SEXP.N:W[0]
                       <s1>_P
                       <'Foreign.R.Type.Int>_P
                       <GHC.Types.Any>_P <GHC.Int.Int32>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                <Data.Vector.SEXP.Vector
                                   GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO
                                                       GHC.Types.Any)
                                                    (Data.Vector.SEXP.Vector
                                                       GHC.Types.Any
                                                       'Foreign.R.Type.Int
                                                       GHC.Int.Int32)) ((GHC.Types.Any
                                                                         -> Control.Monad.R.Internal.AcquireIO
                                                                              GHC.Types.Any)
                                                                        -> Data.Proxy.Proxy
                                                                             GHC.Types.Any
                                                                        -> Data.Vector.SEXP.Vector
                                                                             GHC.Types.Any
                                                                             'Foreign.R.Type.Int
                                                                             GHC.Int.Int32)))
                   Test.Vector.$fArbitraryVector4
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)) -}
165c9780bbf8bf4e142f87b4c8c0ffbc
  $w$s$carbitrary1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  case GHC.Magic.runRW#
                         @ ('GHC.Types.TupleRep
                              '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                         @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                              Data.Vector.SEXP.W
                                s1 'Foreign.R.Type.Real GHC.Types.Any GHC.Types.Double #)
                         (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case GHC.Prim.dataToTag#
                                 @ Foreign.R.Type.SEXPTYPE
                                 Test.Vector.$fArbitraryVector10
                                   `cast`
                                 (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of a# {
                            DEFAULT
                            -> let {
                                 x9 :: [GHC.Types.Double]
                                 = Test.QuickCheck.Gen.$wlistOf
                                     @ GHC.Types.Double
                                     Test.QuickCheck.Arbitrary.$fArbitraryDouble_$sarbitrarySizedFractional
                                       `cast`
                                     (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Double>_R))
                                     ww
                                     ww1
                                     ww2
                                     ww3
                                     ww4
                               } in
                               case GHC.List.$wlenAcc @ GHC.Types.Double x9 0# of ww5 { DEFAULT ->
                               let {
                                 $j :: GHC.Prim.Int#
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Vector.SEXP.W
                                               s1
                                               'Foreign.R.Type.Real
                                               GHC.Types.Any
                                               GHC.Types.Double #)
                                   <join 1> {- Arity: 1, Strictness: <S,U> -}
                                 = \ (ww6 :: GHC.Prim.Int#)[OneShot] ->
                                   case Test.Vector.$fArbitraryVector9 of v1 { GHC.Types.I# v2 ->
                                   case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Word#
                                                                         -> GHC.Prim.Int#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Addr# #)}
                                          (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# v2))
                                          ww6
                                          s2 of wild { (#,#) ds ds1 ->
                                   case (($dReifies
                                            `cast`
                                          (Data.Reflection.N:Reifies[0]
                                               <*>_N
                                               <s1>_N
                                               <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N)
                                            @ Data.Proxy.Proxy
                                            (Data.Proxy.Proxy @ * @ s1))
                                           `cast`
                                         (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)
                                           @ 'Foreign.R.Type.Real
                                           (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                                             `cast`
                                           (Trans
                                                (GHC.Ptr.Ptr
                                                   <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                  Control.Memory.Region.V
                                                                                  'Foreign.R.Type.Real>)_R
                                                (Sym (Foreign.R.Internal.N:SEXP[0]
                                                          <Control.Memory.Region.V>_P
                                                          <'Foreign.R.Type.Real>_P))))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Foreign.R.Internal.SEXP
                                                GHC.Types.Any 'Foreign.R.Type.Real>_R)
                                          ds of ds2 { (#,#) ipv ipv1 ->
                                   case ipv1
                                          `cast`
                                        (Trans
                                             (Foreign.R.Internal.N:SEXP[0]
                                                  <GHC.Types.Any>_P <'Foreign.R.Type.Real>_P)
                                             (GHC.Ptr.Ptr
                                                <Language.R.HExp.HExp
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real, Language.R.HExp.HExp
                                                                           (Control.Monad.Primitive.PrimState
                                                                              (GHC.ST.ST
                                                                                 GHC.Prim.RealWorld))
                                                                           'Foreign.R.Type.Real>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                                   let {
                                     $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                             -> GHC.Prim.Int#
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Vector.SEXP.W
                                                     s1
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Any
                                                     GHC.Types.Double #)
                                       <join 2> {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                                     = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                         (ww7 :: GHC.Prim.Int#)[OneShot] ->
                                       case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld #)}
                                              dt1
                                              w of wild1 { Unit# ds3 ->
                                       case GHC.ForeignPtr.$wnewConcForeignPtr
                                              @ ()
                                              dt1
                                              (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                               case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                     -> GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld #)}
                                                      dt1
                                                      s3 of wild2 { Unit# ds4 ->
                                               (# ds4, GHC.Tuple.() #) })
                                                `cast`
                                              (Sym (GHC.Types.N:IO[0] <()>_R))
                                              ds3 of ds4 { (#,#) ipv2 ipv3 ->
                                       (# ipv2,
                                          case ipv3 of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                                          (Data.Vector.SEXP.Vector
                                             @ GHC.Types.Any
                                             @ 'Foreign.R.Type.Real
                                             @ GHC.Types.Double
                                             dt3
                                             dt4
                                             0#
                                             (GHC.Prim.narrow32Int# ww7))
                                            `cast`
                                          (Sym (Data.Vector.SEXP.N:W[0]
                                                    <s1>_P
                                                    <'Foreign.R.Type.Real>_P
                                                    <GHC.Types.Any>_P) <GHC.Types.Double>_N) } #) } }
                                   } in
                                   letrec {
                                     $wfoldlM'_loop :: GHC.Types.SPEC
                                                       -> GHC.Prim.Int#
                                                       -> [GHC.Types.Double]
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.SEXP.W
                                                               s1
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Any
                                                               GHC.Types.Double #)
                                       <join 5> {- Arity: 5,
                                                   Strictness: <S,1*U><S,U><L,1*U><S,U><S,U>,
                                                   Inline: [0] -}
                                     = \ (w :: GHC.Types.SPEC)
                                         (ww7 :: GHC.Prim.Int#)
                                         (ww8 :: [GHC.Types.Double])
                                         (ww9 :: GHC.Prim.Int#)
                                         (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                       case w of ds5 { DEFAULT ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<=# ww9 0#) of wild1 {
                                         GHC.Types.False
                                         -> case ww8 of wild2 {
                                              [] -> $w$j w1 ww7
                                              : x10 xs1
                                              -> case x10 of wild4 { GHC.Types.D# x11 ->
                                                 case GHC.Prim.writeDoubleOffAddr#
                                                        @ GHC.Prim.RealWorld
                                                        (GHC.Prim.plusAddr#
                                                           (GHC.Prim.plusAddr# dt1 40#)
                                                           (GHC.Prim.*#
                                                              (GHC.Prim.narrow32Int# ww7)
                                                              8#))
                                                        0#
                                                        x11
                                                        w1 of s3 { DEFAULT ->
                                                 $wfoldlM'_loop
                                                   GHC.Types.SPEC
                                                   (GHC.Prim.+# ww7 1#)
                                                   xs1
                                                   (GHC.Prim.-# ww9 1#)
                                                   s3 } } }
                                         GHC.Types.True -> $w$j w1 ww7 } }
                                   } in
                                   $wfoldlM'_loop GHC.Types.SPEC 0# x9 ww5 ipv } } } }
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<=# ww5 0#) of wild2 {
                                 GHC.Types.False -> $j ww5 GHC.Types.True -> $j 0# } }
                            9#
                            -> case Test.Vector.$fArbitraryVector8
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.Vector.SEXP.W
                                           s1 'Foreign.R.Type.Real GHC.Types.Any GHC.Types.Double #)
                               of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                  ipv2
                    `cast`
                  (Data.Vector.SEXP.N:W[0]
                       <s1>_P
                       <'Foreign.R.Type.Real>_P
                       <GHC.Types.Any>_P <GHC.Types.Double>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                <Data.Vector.SEXP.Vector
                                   GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO
                                                       GHC.Types.Any)
                                                    (Data.Vector.SEXP.Vector
                                                       GHC.Types.Any
                                                       'Foreign.R.Type.Real
                                                       GHC.Types.Double)) ((GHC.Types.Any
                                                                            -> Control.Monad.R.Internal.AcquireIO
                                                                                 GHC.Types.Any)
                                                                           -> Data.Proxy.Proxy
                                                                                GHC.Types.Any
                                                                           -> Data.Vector.SEXP.Vector
                                                                                GHC.Types.Any
                                                                                'Foreign.R.Type.Real
                                                                                GHC.Types.Double)))
                   Test.Vector.$fArbitraryVector4
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)) -}
e805186a6a8a726dd140a9be7dd517db
  $w$s$c~== ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.SEXP.Vector
         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> Data.Monoid.All
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><L,1*U(U,U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 Test.Vector.$fAEqVector_go2
                   ((\ @ s1
                       ($dReifies :: Data.Reflection.Reifies
                                       s1
                                       (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                       (p :: Data.Proxy.Proxy s1)[OneShot] ->
                     letrec {
                       $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww4 :: GHC.Prim.Int#) ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww4 ww3) of wild {
                           GHC.Types.False
                           -> GHC.Types.:
                                @ GHC.Types.Double
                                (case GHC.Prim.touch#
                                        @ 'GHC.Types.LiftedRep
                                        @ GHC.ForeignPtr.ForeignPtrContents
                                        ww1
                                        GHC.Prim.realWorld# of s' { DEFAULT ->
                                 case GHC.Prim.readDoubleOffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr#
                                           (GHC.Prim.plusAddr# ww 40#)
                                           (GHC.Prim.*# ww2 8#))
                                        ww4
                                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                 GHC.Types.D# ipv1 } })
                                ($wgo (GHC.Prim.+# ww4 1#))
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                     } in
                     $wgo 0#)
                      `cast`
                    (Trans
                         (Sym (Data.Reflection.N:Magic[0]
                                   <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                   <[GHC.Types.Double]>_R))
                         (UnsafeCo representational (Data.Reflection.Magic
                                                       (Control.Monad.R.Internal.AcquireIO
                                                          GHC.Types.Any)
                                                       [GHC.Types.Double]) ((GHC.Types.Any
                                                                             -> Control.Monad.R.Internal.AcquireIO
                                                                                  GHC.Types.Any)
                                                                            -> Data.Proxy.Proxy
                                                                                 GHC.Types.Any
                                                                            -> [GHC.Types.Double])))
                      Test.Vector.$fAEqVector3
                        `cast`
                      (<GHC.Types.Any>_R
                       ->_R Trans
                                (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                 <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                      (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                   (Test.Vector.$fAEqVector2 w)) -}
713894ce477ad33856f1ea7824becce6
  $wf ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case x9 of wild1 {
                   DEFAULT
                   -> let {
                        lvl81 :: GHC.Int.Int32
                        = (\ @ s1
                             ($dReifies :: Data.Reflection.Reifies
                                             s1
                                             (Control.Monad.R.Internal.AcquireIO
                                                GHC.Types.Any))[OneShot]
                             (p :: Data.Proxy.Proxy s1)[OneShot] ->
                           let {
                             x10 :: GHC.Prim.Int# = GHC.Prim.-# ww3 1#
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x10 0#) of wild2 {
                             GHC.Types.False
                             -> Test.Vector.testGeneralSEXPVector11
                                  ww3
                                  x10
                                  Test.Vector.testGeneralSEXPVector10
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x10 ww3) of wild3 {
                                  GHC.Types.False
                                  -> Test.Vector.testGeneralSEXPVector11
                                       ww3
                                       x10
                                       Test.Vector.testGeneralSEXPVector10
                                  GHC.Types.True
                                  -> case GHC.Prim.touch#
                                            @ 'GHC.Types.LiftedRep
                                            @ GHC.ForeignPtr.ForeignPtrContents
                                            ww1
                                            GHC.Prim.realWorld# of s' { DEFAULT ->
                                     case GHC.Prim.readInt32OffAddr#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.plusAddr#
                                               (GHC.Prim.plusAddr# ww 40#)
                                               (GHC.Prim.*# ww2 4#))
                                            x10
                                            GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                     GHC.Int.I32# ipv1 } } } })
                            `cast`
                          (Trans
                               (Sym (Data.Reflection.N:Magic[0]
                                         <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                         <GHC.Int.Int32>_R))
                               (UnsafeCo representational (Data.Reflection.Magic
                                                             (Control.Monad.R.Internal.AcquireIO
                                                                GHC.Types.Any)
                                                             GHC.Int.Int32) ((GHC.Types.Any
                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                   GHC.Types.Any)
                                                                             -> Data.Proxy.Proxy
                                                                                  GHC.Types.Any
                                                                             -> GHC.Int.Int32)))
                            Test.Vector.testGeneralSEXPVector9
                              `cast`
                            (<GHC.Types.Any>_R
                             ->_R Trans
                                      (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                       <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                      (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                <GHC.Types.Any>_P)))
                            (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                      } in
                      letrec {
                        go :: [GHC.Int.Int32] -> GHC.Int.Int32 -> GHC.Types.Bool
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
                        = \ (ds :: [GHC.Int.Int32]) (eta :: GHC.Int.Int32) ->
                          case ds of wild2 {
                            []
                            -> case eta of wild3 { GHC.Int.I32# x10 ->
                               case lvl81 of wild4 { GHC.Int.I32# y ->
                               GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x10 y) } }
                            : y ys -> go ys y }
                      } in
                      go
                        ((\ @ s1
                            ($dReifies :: Data.Reflection.Reifies
                                            s1
                                            (Control.Monad.R.Internal.AcquireIO
                                               GHC.Types.Any))[OneShot]
                            (p :: Data.Proxy.Proxy s1)[OneShot] ->
                          letrec {
                            $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww4 :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 ww3) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Int.Int32
                                     (case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ww1
                                             GHC.Prim.realWorld# of s' { DEFAULT ->
                                      case GHC.Prim.readInt32OffAddr#
                                             @ GHC.Prim.RealWorld
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ww 40#)
                                                (GHC.Prim.*# ww2 4#))
                                             ww4
                                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                      GHC.Int.I32# ipv1 } })
                                     ($wgo (GHC.Prim.+# ww4 1#))
                                GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                          } in
                          $wgo 0#)
                           `cast`
                         (Trans
                              (Sym (Data.Reflection.N:Magic[0]
                                        <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                        <[GHC.Int.Int32]>_R))
                              (UnsafeCo representational (Data.Reflection.Magic
                                                            (Control.Monad.R.Internal.AcquireIO
                                                               GHC.Types.Any)
                                                            [GHC.Int.Int32]) ((GHC.Types.Any
                                                                               -> Control.Monad.R.Internal.AcquireIO
                                                                                    GHC.Types.Any)
                                                                              -> Data.Proxy.Proxy
                                                                                   GHC.Types.Any
                                                                              -> [GHC.Int.Int32])))
                           Test.Vector.$fAEqVector3
                             `cast`
                           (<GHC.Types.Any>_R
                            ->_R Trans
                                     (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                      <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                     (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                               <GHC.Types.Any>_P)))
                           (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                        (GHC.List.lastError @ GHC.Int.Int32)
                   0# -> GHC.Types.True } }) -}
e62acc91e8b7c31711c64d43965dc016
  $wf1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case x9 of wild1 {
                   DEFAULT
                   -> case (\ @ s1
                              ($dReifies :: Data.Reflection.Reifies
                                              s1
                                              (Control.Monad.R.Internal.AcquireIO
                                                 GHC.Types.Any))[OneShot]
                              (p :: Data.Proxy.Proxy s1)[OneShot] ->
                            letrec {
                              $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                              = \ (ww4 :: GHC.Prim.Int#) ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# ww4 ww3) of wild2 {
                                  GHC.Types.False
                                  -> GHC.Types.:
                                       @ GHC.Int.Int32
                                       (case GHC.Prim.touch#
                                               @ 'GHC.Types.LiftedRep
                                               @ GHC.ForeignPtr.ForeignPtrContents
                                               ww1
                                               GHC.Prim.realWorld# of s' { DEFAULT ->
                                        case GHC.Prim.readInt32OffAddr#
                                               @ GHC.Prim.RealWorld
                                               (GHC.Prim.plusAddr#
                                                  (GHC.Prim.plusAddr# ww 40#)
                                                  (GHC.Prim.*# ww2 4#))
                                               ww4
                                               GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                        GHC.Int.I32# ipv1 } })
                                       ($wgo (GHC.Prim.+# ww4 1#))
                                  GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                            } in
                            $wgo 0#)
                             `cast`
                           (Trans
                                (Sym (Data.Reflection.N:Magic[0]
                                          <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                          <[GHC.Int.Int32]>_R))
                                (UnsafeCo representational (Data.Reflection.Magic
                                                              (Control.Monad.R.Internal.AcquireIO
                                                                 GHC.Types.Any)
                                                              [GHC.Int.Int32]) ((GHC.Types.Any
                                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                                      GHC.Types.Any)
                                                                                -> Data.Proxy.Proxy
                                                                                     GHC.Types.Any
                                                                                -> [GHC.Int.Int32])))
                             Test.Vector.$fAEqVector3
                               `cast`
                             (<GHC.Types.Any>_R
                              ->_R Trans
                                       (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                        <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Foreign.R.Internal.SEXP
                                                         GHC.Types.Any ty1>_R))
                                       (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                 <GHC.Types.Any>_P)))
                             (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) of wild2 {
                        [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                        : x10 ds1
                        -> case x10 of wild3 { GHC.Int.I32# x11 ->
                           case (\ @ s1
                                   ($dReifies :: Data.Reflection.Reifies
                                                   s1
                                                   (Control.Monad.R.Internal.AcquireIO
                                                      GHC.Types.Any))[OneShot]
                                   (p :: Data.Proxy.Proxy s1)[OneShot] ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<# 0# ww3) of wild4 {
                                   GHC.Types.False -> Test.Vector.testGeneralSEXPVector18 ww3
                                   GHC.Types.True
                                   -> case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ww1
                                             GHC.Prim.realWorld# of s' { DEFAULT ->
                                      case GHC.Prim.readInt32OffAddr#
                                             @ GHC.Prim.RealWorld
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ww 40#)
                                                (GHC.Prim.*# ww2 4#))
                                             0#
                                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                      GHC.Int.I32# ipv1 } } })
                                  `cast`
                                (Trans
                                     (Sym (Data.Reflection.N:Magic[0]
                                               <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                               <GHC.Int.Int32>_R))
                                     (UnsafeCo representational (Data.Reflection.Magic
                                                                   (Control.Monad.R.Internal.AcquireIO
                                                                      GHC.Types.Any)
                                                                   GHC.Int.Int32) ((GHC.Types.Any
                                                                                    -> Control.Monad.R.Internal.AcquireIO
                                                                                         GHC.Types.Any)
                                                                                   -> Data.Proxy.Proxy
                                                                                        GHC.Types.Any
                                                                                   -> GHC.Int.Int32)))
                                  Test.Vector.testGeneralSEXPVector17
                                    `cast`
                                  (<GHC.Types.Any>_R
                                   ->_R Trans
                                            (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                             <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <Foreign.R.Internal.SEXP
                                                              GHC.Types.Any ty1>_R))
                                            (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                      <GHC.Types.Any>_P)))
                                  (Data.Proxy.Proxy
                                     @ GHC.Types.Any
                                     @ GHC.Types.Any) of wild4 { GHC.Int.I32# y ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x11 y) } } }
                   0# -> GHC.Types.True } }) -}
5cb0baa34ecb230b87b2e3eb3fda0892
  $wf10 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 let {
                   w2 :: GHC.Types.Bool
                   = (\ @ s1
                        ($dReifies :: Data.Reflection.Reifies
                                        s1
                                        (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                        (p :: Data.Proxy.Proxy s1)[OneShot] ->
                      case ww3 of wild3 {
                        DEFAULT
                        -> GHC.Types.False
                             `cast`
                           (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                        0#
                        -> GHC.Types.True
                             `cast`
                           (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)) })
                       `cast`
                     (Trans
                          (forall (s1 :: <*>_N).
                           <Data.Reflection.Reifies
                              s1 (Control.Monad.R.Internal.AcquireIO GHC.Types.Any)>_R
                           ->_R <Data.Proxy.Proxy s1>_R
                           ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)
                          (Trans
                               (Sym (Data.Reflection.N:Magic[0]
                                         <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                         <GHC.Types.Bool>_R))
                               (UnsafeCo representational (Data.Reflection.Magic
                                                             (Control.Monad.R.Internal.AcquireIO
                                                                GHC.Types.Any)
                                                             GHC.Types.Bool) ((GHC.Types.Any
                                                                               -> Control.Monad.R.Internal.AcquireIO
                                                                                    GHC.Types.Any)
                                                                              -> Data.Proxy.Proxy
                                                                                   GHC.Types.Any
                                                                              -> GHC.Types.Bool))))
                       Test.Vector.testGeneralSEXPVector32
                         `cast`
                       (<GHC.Types.Any>_R
                        ->_R Trans
                                 (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                  <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                 (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                       (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                 } in
                 let {
                   w3 :: GHC.Types.Bool
                   = case (\ @ s1
                             ($dReifies :: Data.Reflection.Reifies
                                             s1
                                             (Control.Monad.R.Internal.AcquireIO
                                                GHC.Types.Any))[OneShot]
                             (p :: Data.Proxy.Proxy s1)[OneShot] ->
                           letrec {
                             $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                               {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                             = \ (ww4 :: GHC.Prim.Int#) ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>=# ww4 ww3) of wild {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Double
                                      (case GHC.Prim.touch#
                                              @ 'GHC.Types.LiftedRep
                                              @ GHC.ForeignPtr.ForeignPtrContents
                                              ww1
                                              GHC.Prim.realWorld# of s' { DEFAULT ->
                                       case GHC.Prim.readDoubleOffAddr#
                                              @ GHC.Prim.RealWorld
                                              (GHC.Prim.plusAddr#
                                                 (GHC.Prim.plusAddr# ww 40#)
                                                 (GHC.Prim.*# ww2 8#))
                                              ww4
                                              GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                       GHC.Types.D# ipv1 } })
                                      ($wgo (GHC.Prim.+# ww4 1#))
                                 GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                           } in
                           $wgo 0#)
                            `cast`
                          (Trans
                               (Sym (Data.Reflection.N:Magic[0]
                                         <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                         <[GHC.Types.Double]>_R))
                               (UnsafeCo representational (Data.Reflection.Magic
                                                             (Control.Monad.R.Internal.AcquireIO
                                                                GHC.Types.Any)
                                                             [GHC.Types.Double]) ((GHC.Types.Any
                                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                                        GHC.Types.Any)
                                                                                  -> Data.Proxy.Proxy
                                                                                       GHC.Types.Any
                                                                                  -> [GHC.Types.Double])))
                            Test.Vector.$fAEqVector3
                              `cast`
                            (<GHC.Types.Any>_R
                             ->_R Trans
                                      (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                       <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                      (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                <GHC.Types.Any>_P)))
                            (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) of wild {
                       [] -> GHC.Types.True : ds1 ds2 -> GHC.Types.False }
                 } in
                 let {
                   $j :: (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
                            GHC.Base.String,
                            GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
                            GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
                            Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
                            Data.Set.Internal.Set GHC.Base.String,
                            [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
                     <join 0>
                   = let {
                       ww4 :: GHC.Base.String
                       = GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow @ GHC.Types.Bool GHC.Show.$fShowBool w2)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow @ GHC.Types.Bool GHC.Show.$fShowBool w3)))
                     } in
                     (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True, ww4,
                        GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                        GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                        Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                        Data.Set.Internal.Tip @ GHC.Base.String,
                        GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                        GHC.Types.[] @ GHC.Base.String #)
                 } in
                 case w2 of wild {
                   GHC.Types.False
                   -> case w3 of wild1 {
                        GHC.Types.False
                        -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                              GHC.Types.[] @ GHC.Types.Char,
                              GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                              GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                              Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                              Data.Set.Internal.Tip @ GHC.Base.String,
                              GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                              GHC.Types.[] @ GHC.Base.String #)
                        GHC.Types.True -> $j }
                   GHC.Types.True
                   -> case w3 of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                              GHC.Types.[] @ GHC.Types.Char,
                              GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                              GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                              Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                              Data.Set.Internal.Tip @ GHC.Base.String,
                              GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                              GHC.Types.[] @ GHC.Base.String #) } }) -}
3427851333a75c986f4534a933733257
  $wf11 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Double
                        ((\ @ s1
                            ($dReifies :: Data.Reflection.Reifies
                                            s1
                                            (Control.Monad.R.Internal.AcquireIO
                                               GHC.Types.Any))[OneShot]
                            (p :: Data.Proxy.Proxy s1)[OneShot] ->
                          letrec {
                            $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww4 :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 ww3) of wild1 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Double
                                     (case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ww1
                                             GHC.Prim.realWorld# of s' { DEFAULT ->
                                      case GHC.Prim.readDoubleOffAddr#
                                             @ GHC.Prim.RealWorld
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ww 40#)
                                                (GHC.Prim.*# ww2 8#))
                                             ww4
                                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                      GHC.Types.D# ipv1 } })
                                     ($wgo (GHC.Prim.+# ww4 1#))
                                GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                          } in
                          $wgo 0#)
                           `cast`
                         (Trans
                              (Sym (Data.Reflection.N:Magic[0]
                                        <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                        <[GHC.Types.Double]>_R))
                              (UnsafeCo representational (Data.Reflection.Magic
                                                            (Control.Monad.R.Internal.AcquireIO
                                                               GHC.Types.Any)
                                                            [GHC.Types.Double]) ((GHC.Types.Any
                                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                                       GHC.Types.Any)
                                                                                 -> Data.Proxy.Proxy
                                                                                      GHC.Types.Any
                                                                                 -> [GHC.Types.Double])))
                           Test.Vector.$fAEqVector3
                             `cast`
                           (<GHC.Types.Any>_R
                            ->_R Trans
                                     (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                      <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                     (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                               <GHC.Types.Any>_P)))
                           (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                        0# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x9 ww4) of wild1 {
                   GHC.Types.False
                   -> (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True,
                         GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow @ GHC.Types.Int GHC.Show.$fShowInt wild)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow
                                    @ GHC.Types.Int
                                    GHC.Show.$fShowInt
                                    (GHC.Types.I# ww4)))),
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #)
                   GHC.Types.True
                   -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                         GHC.Types.[] @ GHC.Types.Char,
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #) } } }) -}
eee4c3d12ff4afcb0846b80b361a5889
  $wf12 ::
    [GHC.Types.Double]
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Double]) ->
                 let {
                   w2 :: [GHC.Types.Double]
                   = (\ @ s1
                        ($dReifies :: Data.Reflection.Reifies
                                        s1
                                        (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                        (p :: Data.Proxy.Proxy s1)[OneShot] ->
                      case (\ @ s2
                              ($dReifies1 :: Data.Reflection.Reifies
                                               s2
                                               (Control.Monad.R.Internal.AcquireIO
                                                  GHC.Types.Any))[OneShot]
                              (p1 :: Data.Proxy.Proxy s2)[OneShot] ->
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.SEXP.W
                                          s2 'Foreign.R.Type.Real GHC.Types.Any GHC.Types.Double #)
                                   (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.dataToTag#
                                           @ Foreign.R.Type.SEXPTYPE
                                           Test.Vector.$fArbitraryVector10
                                             `cast`
                                           (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of a# {
                                      DEFAULT
                                      -> case GHC.List.$wlenAcc
                                                @ GHC.Types.Double
                                                w
                                                0# of ww2 { DEFAULT ->
                                         let {
                                           $j :: GHC.Prim.Int#
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.SEXP.W
                                                         s2
                                                         'Foreign.R.Type.Real
                                                         GHC.Types.Any
                                                         GHC.Types.Double #)
                                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                                           = \ (ww1 :: GHC.Prim.Int#)[OneShot] ->
                                             case Test.Vector.$fArbitraryVector9 of v1 { GHC.Types.I# v2 ->
                                             case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Word#
                                                                                   -> GHC.Prim.Int#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         GHC.Prim.Addr# #)}
                                                    (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# v2))
                                                    ww1
                                                    s3 of wild { (#,#) ds ds1 ->
                                             case (($dReifies1
                                                      `cast`
                                                    (Data.Reflection.N:Reifies[0]
                                                         <*>_N
                                                         <s2>_N
                                                         <Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any>_N)
                                                      @ Data.Proxy.Proxy
                                                      (Data.Proxy.Proxy @ * @ s2))
                                                     `cast`
                                                   (Control.Monad.R.Internal.N:AcquireIO[0]
                                                        <GHC.Types.Any>_P)
                                                     @ 'Foreign.R.Type.Real
                                                     (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                                                       `cast`
                                                     (Trans
                                                          (GHC.Ptr.Ptr
                                                             <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                            Control.Memory.Region.V
                                                                                            'Foreign.R.Type.Real>)_R
                                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                                    <Control.Memory.Region.V>_P
                                                                    <'Foreign.R.Type.Real>_P))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Foreign.R.Internal.SEXP
                                                          GHC.Types.Any 'Foreign.R.Type.Real>_R)
                                                    ds of ds2 { (#,#) ipv ipv1 ->
                                             case ipv1
                                                    `cast`
                                                  (Trans
                                                       (Foreign.R.Internal.N:SEXP[0]
                                                            <GHC.Types.Any>_P
                                                            <'Foreign.R.Type.Real>_P)
                                                       (GHC.Ptr.Ptr
                                                          <Language.R.HExp.HExp
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real, Language.R.HExp.HExp
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld))
                                                                                     'Foreign.R.Type.Real>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                                             let {
                                               $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> GHC.Prim.Int#
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.SEXP.W
                                                               s2
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Any
                                                               GHC.Types.Double #)
                                                 <join 2> {- Arity: 2, Strictness: <S,U><L,U>,
                                                             Inline: [0] -}
                                               = \ (w1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot]
                                                   (ww :: GHC.Prim.Int#)[OneShot] ->
                                                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld #)}
                                                        dt1
                                                        w1 of wild1 { Unit# ds3 ->
                                                 case GHC.ForeignPtr.$wnewConcForeignPtr
                                                        @ ()
                                                        dt1
                                                        (\ (s4 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld) ->
                                                         case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                                                dt1
                                                                s4 of wild2 { Unit# ds4 ->
                                                         (# ds4, GHC.Tuple.() #) })
                                                          `cast`
                                                        (Sym (GHC.Types.N:IO[0] <()>_R))
                                                        ds3 of ds4 { (#,#) ipv2 ipv3 ->
                                                 (# ipv2,
                                                    case ipv3 of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                                                    (Data.Vector.SEXP.Vector
                                                       @ GHC.Types.Any
                                                       @ 'Foreign.R.Type.Real
                                                       @ GHC.Types.Double
                                                       dt3
                                                       dt4
                                                       0#
                                                       (GHC.Prim.narrow32Int# ww))
                                                      `cast`
                                                    (Sym (Data.Vector.SEXP.N:W[0]
                                                              <s2>_P
                                                              <'Foreign.R.Type.Real>_P
                                                              <GHC.Types.Any>_P) <GHC.Types.Double>_N) } #) } }
                                             } in
                                             letrec {
                                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                                 -> GHC.Prim.Int#
                                                                 -> [GHC.Types.Double]
                                                                 -> GHC.Prim.Int#
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Vector.SEXP.W
                                                                         s2
                                                                         'Foreign.R.Type.Real
                                                                         GHC.Types.Any
                                                                         GHC.Types.Double #)
                                                 <join 5> {- Arity: 5,
                                                             Strictness: <S,1*U><S,U><L,1*U><S,U><S,U>,
                                                             Inline: [0] -}
                                               = \ (w1 :: GHC.Types.SPEC)
                                                   (ww :: GHC.Prim.Int#)
                                                   (ww4 :: [GHC.Types.Double])
                                                   (ww5 :: GHC.Prim.Int#)
                                                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                 case w1 of ds5 { DEFAULT ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<=# ww5 0#) of wild1 {
                                                   GHC.Types.False
                                                   -> case ww4 of wild2 {
                                                        [] -> $w$j w3 ww
                                                        : x9 xs1
                                                        -> case x9 of wild4 { GHC.Types.D# x10 ->
                                                           case GHC.Prim.writeDoubleOffAddr#
                                                                  @ GHC.Prim.RealWorld
                                                                  (GHC.Prim.plusAddr#
                                                                     (GHC.Prim.plusAddr# dt1 40#)
                                                                     (GHC.Prim.*#
                                                                        (GHC.Prim.narrow32Int# ww)
                                                                        8#))
                                                                  0#
                                                                  x10
                                                                  w3 of s4 { DEFAULT ->
                                                           $wfoldlM'_loop
                                                             GHC.Types.SPEC
                                                             (GHC.Prim.+# ww 1#)
                                                             xs1
                                                             (GHC.Prim.-# ww5 1#)
                                                             s4 } } }
                                                   GHC.Types.True -> $w$j w3 ww } }
                                             } in
                                             $wfoldlM'_loop GHC.Types.SPEC 0# w ww2 ipv } } } }
                                         } in
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.<=# ww2 0#) of wild2 {
                                           GHC.Types.False -> $j ww2 GHC.Types.True -> $j 0# } }
                                      9#
                                      -> case Test.Vector.$fArbitraryVector8
                                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Vector.SEXP.W
                                                     s2
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Any
                                                     GHC.Types.Double #)
                                         of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                            ipv2
                              `cast`
                            (Data.Vector.SEXP.N:W[0]
                                 <s2>_P
                                 <'Foreign.R.Type.Real>_P
                                 <GHC.Types.Any>_P <GHC.Types.Double>_N) })
                             `cast`
                           (Trans
                                (Sym (Data.Reflection.N:Magic[0]
                                          <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                          <Data.Vector.SEXP.Vector
                                             GHC.Types.Any
                                             'Foreign.R.Type.Real
                                             GHC.Types.Double>_R))
                                (UnsafeCo representational (Data.Reflection.Magic
                                                              (Control.Monad.R.Internal.AcquireIO
                                                                 GHC.Types.Any)
                                                              (Data.Vector.SEXP.Vector
                                                                 GHC.Types.Any
                                                                 'Foreign.R.Type.Real
                                                                 GHC.Types.Double)) ((GHC.Types.Any
                                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                                           GHC.Types.Any)
                                                                                     -> Data.Proxy.Proxy
                                                                                          GHC.Types.Any
                                                                                     -> Data.Vector.SEXP.Vector
                                                                                          GHC.Types.Any
                                                                                          'Foreign.R.Type.Real
                                                                                          GHC.Types.Double)))
                             Test.Vector.testGeneralSEXPVector46
                               `cast`
                             (<GHC.Types.Any>_R
                              ->_R Trans
                                       (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                        <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Foreign.R.Internal.SEXP
                                                         GHC.Types.Any ty1>_R))
                                       (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                 <GHC.Types.Any>_P)))
                             (Data.Proxy.Proxy
                                @ GHC.Types.Any
                                @ GHC.Types.Any) of nt { Data.Vector.SEXP.Vector ipv ipv1 ipv2 ipv3 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww ipv3) of wild {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Double
                                 (case GHC.Prim.touch#
                                         @ 'GHC.Types.LiftedRep
                                         @ GHC.ForeignPtr.ForeignPtrContents
                                         ipv1
                                         GHC.Prim.realWorld# of s' { DEFAULT ->
                                  case GHC.Prim.readDoubleOffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr#
                                            (GHC.Prim.plusAddr# ipv 40#)
                                            (GHC.Prim.*# ipv2 8#))
                                         ww
                                         GHC.Prim.realWorld# of ds2 { (#,#) ipv4 ipv5 ->
                                  GHC.Types.D# ipv5 } })
                                 ($wgo (GHC.Prim.+# ww 1#))
                            GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                      } in
                      $wgo 0# })
                       `cast`
                     (Trans
                          (Sym (Data.Reflection.N:Magic[0]
                                    <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                    <[GHC.Types.Double]>_R))
                          (UnsafeCo representational (Data.Reflection.Magic
                                                        (Control.Monad.R.Internal.AcquireIO
                                                           GHC.Types.Any)
                                                        [GHC.Types.Double]) ((GHC.Types.Any
                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                   GHC.Types.Any)
                                                                             -> Data.Proxy.Proxy
                                                                                  GHC.Types.Any
                                                                             -> [GHC.Types.Double])))
                       Test.Vector.$fAEqVector3
                         `cast`
                       (<GHC.Types.Any>_R
                        ->_R Trans
                                 (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                  <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                 (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                       (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                 } in
                 case Data.AEq.eqListsWith
                        @ GHC.Types.Double
                        Data.AEq.$fAEqDouble_$sapproxEqIEEE
                        w2
                        w of wild {
                   GHC.Types.False
                   -> (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True,
                         GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow
                                 @ [GHC.Types.Double]
                                 Test.Vector.$s$fShow[]1
                                 w2)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow
                                    @ [GHC.Types.Double]
                                    Test.Vector.$s$fShow[]1
                                    w))),
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #)
                   GHC.Types.True
                   -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                         GHC.Types.[] @ GHC.Types.Char,
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #) }) -}
4fd9211350788a25581b4f9c4c4558ef
  $wf13 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   Data.Vector.SEXP.W
                                     s1 'Foreign.R.Type.Real GHC.Types.Any GHC.Types.Double #)
                              (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.dataToTag#
                                      @ Foreign.R.Type.SEXPTYPE
                                      Test.Vector.$fArbitraryVector10
                                        `cast`
                                      (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of a# {
                                 DEFAULT
                                 -> let {
                                      xs :: [GHC.Types.Double]
                                      = (\ @ s3
                                           ($dReifies1 :: Data.Reflection.Reifies
                                                            s3
                                                            (Control.Monad.R.Internal.AcquireIO
                                                               GHC.Types.Any))[OneShot]
                                           (p1 :: Data.Proxy.Proxy s3)[OneShot] ->
                                         letrec {
                                           $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                                             {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                           = \ (ww4 :: GHC.Prim.Int#) ->
                                             case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.>=# ww4 ww3) of wild {
                                               GHC.Types.False
                                               -> GHC.Types.:
                                                    @ GHC.Types.Double
                                                    (case GHC.Prim.touch#
                                                            @ 'GHC.Types.LiftedRep
                                                            @ GHC.ForeignPtr.ForeignPtrContents
                                                            ww1
                                                            GHC.Prim.realWorld# of s' { DEFAULT ->
                                                     case GHC.Prim.readDoubleOffAddr#
                                                            @ GHC.Prim.RealWorld
                                                            (GHC.Prim.plusAddr#
                                                               (GHC.Prim.plusAddr# ww 40#)
                                                               (GHC.Prim.*# ww2 8#))
                                                            ww4
                                                            GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                                     GHC.Types.D# ipv1 } })
                                                    ($wgo (GHC.Prim.+# ww4 1#))
                                               GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                                         } in
                                         $wgo 0#)
                                          `cast`
                                        (Trans
                                             (Sym (Data.Reflection.N:Magic[0]
                                                       <Control.Monad.R.Internal.AcquireIO
                                                          GHC.Types.Any>_N
                                                       <[GHC.Types.Double]>_R))
                                             (UnsafeCo representational (Data.Reflection.Magic
                                                                           (Control.Monad.R.Internal.AcquireIO
                                                                              GHC.Types.Any)
                                                                           [GHC.Types.Double]) ((GHC.Types.Any
                                                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                                                      GHC.Types.Any)
                                                                                                -> Data.Proxy.Proxy
                                                                                                     GHC.Types.Any
                                                                                                -> [GHC.Types.Double])))
                                          Test.Vector.$fAEqVector3
                                            `cast`
                                          (<GHC.Types.Any>_R
                                           ->_R Trans
                                                    (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                                     <Foreign.R.Internal.SEXP
                                                        Control.Memory.Region.V ty1>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Foreign.R.Internal.SEXP
                                                                      GHC.Types.Any ty1>_R))
                                                    (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                              <GHC.Types.Any>_P)))
                                          (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                                    } in
                                    case GHC.List.$wlenAcc
                                           @ GHC.Types.Double
                                           xs
                                           0# of ww4 { DEFAULT ->
                                    let {
                                      $j :: GHC.Prim.Int#
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Vector.SEXP.W
                                                    s1
                                                    'Foreign.R.Type.Real
                                                    GHC.Types.Any
                                                    GHC.Types.Double #)
                                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                                      = \ (ww5 :: GHC.Prim.Int#)[OneShot] ->
                                        case Test.Vector.$fArbitraryVector9 of v1 { GHC.Types.I# v2 ->
                                        case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Word#
                                                                              -> GHC.Prim.Int#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                                               (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# v2))
                                               ww5
                                               s2 of wild { (#,#) ds ds1 ->
                                        case (($dReifies
                                                 `cast`
                                               (Data.Reflection.N:Reifies[0]
                                                    <*>_N
                                                    <s1>_N
                                                    <Control.Monad.R.Internal.AcquireIO
                                                       GHC.Types.Any>_N)
                                                 @ Data.Proxy.Proxy
                                                 (Data.Proxy.Proxy @ * @ s1))
                                                `cast`
                                              (Control.Monad.R.Internal.N:AcquireIO[0]
                                                   <GHC.Types.Any>_P)
                                                @ 'Foreign.R.Type.Real
                                                (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                                                  `cast`
                                                (Trans
                                                     (GHC.Ptr.Ptr
                                                        <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                       Control.Memory.Region.V
                                                                                       'Foreign.R.Type.Real>)_R
                                                     (Sym (Foreign.R.Internal.N:SEXP[0]
                                                               <Control.Memory.Region.V>_P
                                                               <'Foreign.R.Type.Real>_P))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Foreign.R.Internal.SEXP
                                                     GHC.Types.Any 'Foreign.R.Type.Real>_R)
                                               ds of ds2 { (#,#) ipv ipv1 ->
                                        case ipv1
                                               `cast`
                                             (Trans
                                                  (Foreign.R.Internal.N:SEXP[0]
                                                       <GHC.Types.Any>_P <'Foreign.R.Type.Real>_P)
                                                  (GHC.Ptr.Ptr
                                                     <Language.R.HExp.HExp
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real, Language.R.HExp.HExp
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                                'Foreign.R.Type.Real>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                                        let {
                                          $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> GHC.Prim.Int#
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.SEXP.W
                                                          s1
                                                          'Foreign.R.Type.Real
                                                          GHC.Types.Any
                                                          GHC.Types.Double #)
                                            <join 2> {- Arity: 2, Strictness: <S,U><L,U>,
                                                        Inline: [0] -}
                                          = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                              (ww6 :: GHC.Prim.Int#)[OneShot] ->
                                            case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld #)}
                                                   dt1
                                                   w of wild1 { Unit# ds3 ->
                                            case GHC.ForeignPtr.$wnewConcForeignPtr
                                                   @ ()
                                                   dt1
                                                   (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                    case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld #)}
                                                           dt1
                                                           s3 of wild2 { Unit# ds4 ->
                                                    (# ds4, GHC.Tuple.() #) })
                                                     `cast`
                                                   (Sym (GHC.Types.N:IO[0] <()>_R))
                                                   ds3 of ds4 { (#,#) ipv2 ipv3 ->
                                            (# ipv2,
                                               case ipv3 of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                                               (Data.Vector.SEXP.Vector
                                                  @ GHC.Types.Any
                                                  @ 'Foreign.R.Type.Real
                                                  @ GHC.Types.Double
                                                  dt3
                                                  dt4
                                                  0#
                                                  (GHC.Prim.narrow32Int# ww6))
                                                 `cast`
                                               (Sym (Data.Vector.SEXP.N:W[0]
                                                         <s1>_P
                                                         <'Foreign.R.Type.Real>_P
                                                         <GHC.Types.Any>_P) <GHC.Types.Double>_N) } #) } }
                                        } in
                                        letrec {
                                          $wfoldlM'_loop :: GHC.Types.SPEC
                                                            -> GHC.Prim.Int#
                                                            -> [GHC.Types.Double]
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.SEXP.W
                                                                    s1
                                                                    'Foreign.R.Type.Real
                                                                    GHC.Types.Any
                                                                    GHC.Types.Double #)
                                            <join 5> {- Arity: 5,
                                                        Strictness: <S,1*U><S,U><L,1*U><S,U><S,U>,
                                                        Inline: [0] -}
                                          = \ (w :: GHC.Types.SPEC)
                                              (ww6 :: GHC.Prim.Int#)
                                              (ww7 :: [GHC.Types.Double])
                                              (ww8 :: GHC.Prim.Int#)
                                              (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                            case w of ds5 { DEFAULT ->
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.<=# ww8 0#) of wild1 {
                                              GHC.Types.False
                                              -> case ww7 of wild2 {
                                                   [] -> $w$j w1 ww6
                                                   : x9 xs1
                                                   -> case x9 of wild4 { GHC.Types.D# x10 ->
                                                      case GHC.Prim.writeDoubleOffAddr#
                                                             @ GHC.Prim.RealWorld
                                                             (GHC.Prim.plusAddr#
                                                                (GHC.Prim.plusAddr# dt1 40#)
                                                                (GHC.Prim.*#
                                                                   (GHC.Prim.narrow32Int# ww6)
                                                                   8#))
                                                             0#
                                                             x10
                                                             w1 of s3 { DEFAULT ->
                                                      $wfoldlM'_loop
                                                        GHC.Types.SPEC
                                                        (GHC.Prim.+# ww6 1#)
                                                        xs1
                                                        (GHC.Prim.-# ww8 1#)
                                                        s3 } } }
                                              GHC.Types.True -> $w$j w1 ww6 } }
                                        } in
                                        $wfoldlM'_loop GHC.Types.SPEC 0# xs ww4 ipv } } } }
                                    } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<=# ww4 0#) of wild2 {
                                      GHC.Types.False -> $j ww4 GHC.Types.True -> $j 0# } }
                                 9#
                                 -> case Test.Vector.$fArbitraryVector8
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              Data.Vector.SEXP.W
                                                s1
                                                'Foreign.R.Type.Real
                                                GHC.Types.Any
                                                GHC.Types.Double #)
                                    of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                       ipv2
                         `cast`
                       (Data.Vector.SEXP.N:W[0]
                            <s1>_P
                            <'Foreign.R.Type.Real>_P
                            <GHC.Types.Any>_P <GHC.Types.Double>_N) })
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <Data.Vector.SEXP.Vector
                                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         (Data.Vector.SEXP.Vector
                                                            GHC.Types.Any
                                                            'Foreign.R.Type.Real
                                                            GHC.Types.Double)) ((GHC.Types.Any
                                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                                      GHC.Types.Any)
                                                                                -> Data.Proxy.Proxy
                                                                                     GHC.Types.Any
                                                                                -> Data.Vector.SEXP.Vector
                                                                                     GHC.Types.Any
                                                                                     'Foreign.R.Type.Real
                                                                                     GHC.Types.Double)))
                        Test.Vector.testGeneralSEXPVector46
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of ww4 { Data.Vector.SEXP.Vector ww5 ww6 ww7 ww8 ->
                 let {
                   ds :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
                   = Data.Vector.SEXP.Vector
                       @ GHC.Types.Any
                       @ 'Foreign.R.Type.Real
                       @ GHC.Types.Double
                       ww
                       ww1
                       ww2
                       ww3
                 } in
                 case (Test.Vector.$w$s$c~== ww5 ww6 ww7 ww8 ds)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False
                   -> (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True,
                         GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow
                                 @ (Data.Vector.SEXP.Vector
                                      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                                 Test.Vector.$s$fShow(,)_$s$fShowVector1
                                 ww4)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow
                                    @ (Data.Vector.SEXP.Vector
                                         GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                                    Test.Vector.$s$fShow(,)_$s$fShowVector1
                                    ds))),
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #)
                   GHC.Types.True
                   -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                         GHC.Types.[] @ GHC.Types.Char,
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #) } }) -}
a45b28dd77694bacda34d9c339acae87
  $wf2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Types.Int) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case x9 of wild1 {
                   DEFAULT
                   -> let {
                        $j :: GHC.Prim.Int# -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                        = \ (ww5 :: GHC.Prim.Int#)[OneShot] ->
                          case GHC.List.$w!!
                                 @ GHC.Int.Int32
                                 ((\ @ s1
                                     ($dReifies :: Data.Reflection.Reifies
                                                     s1
                                                     (Control.Monad.R.Internal.AcquireIO
                                                        GHC.Types.Any))[OneShot]
                                     (p :: Data.Proxy.Proxy s1)[OneShot] ->
                                   letrec {
                                     $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                       {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                     = \ (ww6 :: GHC.Prim.Int#) ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.>=# ww6 ww3) of wild2 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ GHC.Int.Int32
                                              (case GHC.Prim.touch#
                                                      @ 'GHC.Types.LiftedRep
                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                      ww1
                                                      GHC.Prim.realWorld# of s' { DEFAULT ->
                                               case GHC.Prim.readInt32OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      (GHC.Prim.plusAddr#
                                                         (GHC.Prim.plusAddr# ww 40#)
                                                         (GHC.Prim.*# ww2 4#))
                                                      ww6
                                                      GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                               GHC.Int.I32# ipv1 } })
                                              ($wgo (GHC.Prim.+# ww6 1#))
                                         GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                                   } in
                                   $wgo 0#)
                                    `cast`
                                  (Trans
                                       (Sym (Data.Reflection.N:Magic[0]
                                                 <Control.Monad.R.Internal.AcquireIO
                                                    GHC.Types.Any>_N
                                                 <[GHC.Int.Int32]>_R))
                                       (UnsafeCo representational (Data.Reflection.Magic
                                                                     (Control.Monad.R.Internal.AcquireIO
                                                                        GHC.Types.Any)
                                                                     [GHC.Int.Int32]) ((GHC.Types.Any
                                                                                        -> Control.Monad.R.Internal.AcquireIO
                                                                                             GHC.Types.Any)
                                                                                       -> Data.Proxy.Proxy
                                                                                            GHC.Types.Any
                                                                                       -> [GHC.Int.Int32])))
                                    Test.Vector.$fAEqVector3
                                      `cast`
                                    (<GHC.Types.Any>_R
                                     ->_R Trans
                                              (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                               <Foreign.R.Internal.SEXP
                                                  Control.Memory.Region.V ty1>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Foreign.R.Internal.SEXP
                                                                GHC.Types.Any ty1>_R))
                                              (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                        <GHC.Types.Any>_P)))
                                    (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                                 ww5 of wild2 { GHC.Int.I32# x10 ->
                          case (\ @ s1
                                  ($dReifies :: Data.Reflection.Reifies
                                                  s1
                                                  (Control.Monad.R.Internal.AcquireIO
                                                     GHC.Types.Any))[OneShot]
                                  (p :: Data.Proxy.Proxy s1)[OneShot] ->
                                let {
                                  file :: GHC.Prim.Addr# = "./Data/Vector/Generic.hs"#
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# ww5 0#) of wild3 {
                                  GHC.Types.False
                                  -> Test.Vector.testGeneralSEXPVector11 ww3 ww5 file
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# ww5 ww3) of wild4 {
                                       GHC.Types.False
                                       -> Test.Vector.testGeneralSEXPVector11 ww3 ww5 file
                                       GHC.Types.True
                                       -> case GHC.Prim.touch#
                                                 @ 'GHC.Types.LiftedRep
                                                 @ GHC.ForeignPtr.ForeignPtrContents
                                                 ww1
                                                 GHC.Prim.realWorld# of s' { DEFAULT ->
                                          case GHC.Prim.readInt32OffAddr#
                                                 @ GHC.Prim.RealWorld
                                                 (GHC.Prim.plusAddr#
                                                    (GHC.Prim.plusAddr# ww 40#)
                                                    (GHC.Prim.*# ww2 4#))
                                                 ww5
                                                 GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                          GHC.Int.I32# ipv1 } } } })
                                 `cast`
                               (Trans
                                    (Sym (Data.Reflection.N:Magic[0]
                                              <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                              <GHC.Int.Int32>_R))
                                    (UnsafeCo representational (Data.Reflection.Magic
                                                                  (Control.Monad.R.Internal.AcquireIO
                                                                     GHC.Types.Any)
                                                                  GHC.Int.Int32) ((GHC.Types.Any
                                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                                        GHC.Types.Any)
                                                                                  -> Data.Proxy.Proxy
                                                                                       GHC.Types.Any
                                                                                  -> GHC.Int.Int32)))
                                 Test.Vector.testGeneralSEXPVector23
                                   `cast`
                                 (<GHC.Types.Any>_R
                                  ->_R Trans
                                           (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                            <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Foreign.R.Internal.SEXP
                                                             GHC.Types.Any ty1>_R))
                                           (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                     <GHC.Types.Any>_P)))
                                 (Data.Proxy.Proxy
                                    @ GHC.Types.Any
                                    @ GHC.Types.Any) of wild3 { GHC.Int.I32# y ->
                          GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x10 y) } }
                      } in
                      case wild1 of wild2 {
                        DEFAULT
                        -> case ww4 of wild3 { GHC.Types.I# x10 ->
                           case GHC.Classes.modInt# x10 wild2 of ww5 { DEFAULT -> $j ww5 } }
                        -1# -> $j 0# }
                   0# -> GHC.Types.True } }) -}
35865f8a995ddc6c449d726faa40522c
  $wf3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 let {
                   w2 :: GHC.Types.Bool
                   = (\ @ s1
                        ($dReifies :: Data.Reflection.Reifies
                                        s1
                                        (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                        (p :: Data.Proxy.Proxy s1)[OneShot] ->
                      case ww3 of wild3 {
                        DEFAULT
                        -> GHC.Types.False
                             `cast`
                           (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R))
                        0#
                        -> GHC.Types.True
                             `cast`
                           (Sym (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)) })
                       `cast`
                     (Trans
                          (forall (s1 :: <*>_N).
                           <Data.Reflection.Reifies
                              s1 (Control.Monad.R.Internal.AcquireIO GHC.Types.Any)>_R
                           ->_R <Data.Proxy.Proxy s1>_R
                           ->_R Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R)
                          (Trans
                               (Sym (Data.Reflection.N:Magic[0]
                                         <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                         <GHC.Types.Bool>_R))
                               (UnsafeCo representational (Data.Reflection.Magic
                                                             (Control.Monad.R.Internal.AcquireIO
                                                                GHC.Types.Any)
                                                             GHC.Types.Bool) ((GHC.Types.Any
                                                                               -> Control.Monad.R.Internal.AcquireIO
                                                                                    GHC.Types.Any)
                                                                              -> Data.Proxy.Proxy
                                                                                   GHC.Types.Any
                                                                              -> GHC.Types.Bool))))
                       Test.Vector.testGeneralSEXPVector32
                         `cast`
                       (<GHC.Types.Any>_R
                        ->_R Trans
                                 (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                  <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                 (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                       (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                 } in
                 let {
                   w3 :: GHC.Types.Bool
                   = case (\ @ s1
                             ($dReifies :: Data.Reflection.Reifies
                                             s1
                                             (Control.Monad.R.Internal.AcquireIO
                                                GHC.Types.Any))[OneShot]
                             (p :: Data.Proxy.Proxy s1)[OneShot] ->
                           letrec {
                             $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                               {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                             = \ (ww4 :: GHC.Prim.Int#) ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>=# ww4 ww3) of wild {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Int.Int32
                                      (case GHC.Prim.touch#
                                              @ 'GHC.Types.LiftedRep
                                              @ GHC.ForeignPtr.ForeignPtrContents
                                              ww1
                                              GHC.Prim.realWorld# of s' { DEFAULT ->
                                       case GHC.Prim.readInt32OffAddr#
                                              @ GHC.Prim.RealWorld
                                              (GHC.Prim.plusAddr#
                                                 (GHC.Prim.plusAddr# ww 40#)
                                                 (GHC.Prim.*# ww2 4#))
                                              ww4
                                              GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                       GHC.Int.I32# ipv1 } })
                                      ($wgo (GHC.Prim.+# ww4 1#))
                                 GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                           } in
                           $wgo 0#)
                            `cast`
                          (Trans
                               (Sym (Data.Reflection.N:Magic[0]
                                         <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                         <[GHC.Int.Int32]>_R))
                               (UnsafeCo representational (Data.Reflection.Magic
                                                             (Control.Monad.R.Internal.AcquireIO
                                                                GHC.Types.Any)
                                                             [GHC.Int.Int32]) ((GHC.Types.Any
                                                                                -> Control.Monad.R.Internal.AcquireIO
                                                                                     GHC.Types.Any)
                                                                               -> Data.Proxy.Proxy
                                                                                    GHC.Types.Any
                                                                               -> [GHC.Int.Int32])))
                            Test.Vector.$fAEqVector3
                              `cast`
                            (<GHC.Types.Any>_R
                             ->_R Trans
                                      (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                       <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                      (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                <GHC.Types.Any>_P)))
                            (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) of wild {
                       [] -> GHC.Types.True : ds1 ds2 -> GHC.Types.False }
                 } in
                 let {
                   $j :: (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
                            GHC.Base.String,
                            GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
                            GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
                            Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
                            Data.Set.Internal.Set GHC.Base.String,
                            [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
                     <join 0>
                   = let {
                       ww4 :: GHC.Base.String
                       = GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow @ GHC.Types.Bool GHC.Show.$fShowBool w2)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow @ GHC.Types.Bool GHC.Show.$fShowBool w3)))
                     } in
                     (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True, ww4,
                        GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                        GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                        Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                        Data.Set.Internal.Tip @ GHC.Base.String,
                        GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                        GHC.Types.[] @ GHC.Base.String #)
                 } in
                 case w2 of wild {
                   GHC.Types.False
                   -> case w3 of wild1 {
                        GHC.Types.False
                        -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                              GHC.Types.[] @ GHC.Types.Char,
                              GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                              GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                              Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                              Data.Set.Internal.Tip @ GHC.Base.String,
                              GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                              GHC.Types.[] @ GHC.Base.String #)
                        GHC.Types.True -> $j }
                   GHC.Types.True
                   -> case w3 of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                              GHC.Types.[] @ GHC.Types.Char,
                              GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                              GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                              Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                              Data.Set.Internal.Tip @ GHC.Base.String,
                              GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                              GHC.Types.[] @ GHC.Base.String #) } }) -}
844afe4b054f46aa0560ffb32f46ccf0
  $wf4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Int.Int32
                        ((\ @ s1
                            ($dReifies :: Data.Reflection.Reifies
                                            s1
                                            (Control.Monad.R.Internal.AcquireIO
                                               GHC.Types.Any))[OneShot]
                            (p :: Data.Proxy.Proxy s1)[OneShot] ->
                          letrec {
                            $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww4 :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 ww3) of wild1 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Int.Int32
                                     (case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ww1
                                             GHC.Prim.realWorld# of s' { DEFAULT ->
                                      case GHC.Prim.readInt32OffAddr#
                                             @ GHC.Prim.RealWorld
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ww 40#)
                                                (GHC.Prim.*# ww2 4#))
                                             ww4
                                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                      GHC.Int.I32# ipv1 } })
                                     ($wgo (GHC.Prim.+# ww4 1#))
                                GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                          } in
                          $wgo 0#)
                           `cast`
                         (Trans
                              (Sym (Data.Reflection.N:Magic[0]
                                        <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                        <[GHC.Int.Int32]>_R))
                              (UnsafeCo representational (Data.Reflection.Magic
                                                            (Control.Monad.R.Internal.AcquireIO
                                                               GHC.Types.Any)
                                                            [GHC.Int.Int32]) ((GHC.Types.Any
                                                                               -> Control.Monad.R.Internal.AcquireIO
                                                                                    GHC.Types.Any)
                                                                              -> Data.Proxy.Proxy
                                                                                   GHC.Types.Any
                                                                              -> [GHC.Int.Int32])))
                           Test.Vector.$fAEqVector3
                             `cast`
                           (<GHC.Types.Any>_R
                            ->_R Trans
                                     (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                      <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                     (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                               <GHC.Types.Any>_P)))
                           (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                        0# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x9 ww4) of wild1 {
                   GHC.Types.False
                   -> (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True,
                         GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow @ GHC.Types.Int GHC.Show.$fShowInt wild)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow
                                    @ GHC.Types.Int
                                    GHC.Show.$fShowInt
                                    (GHC.Types.I# ww4)))),
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #)
                   GHC.Types.True
                   -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                         GHC.Types.[] @ GHC.Types.Char,
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #) } } }) -}
1a0291da492a61659b5f04fc79315fef
  $wf5 ::
    [GHC.Int.Int32]
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Int.Int32]) ->
                 let {
                   w2 :: [GHC.Int.Int32]
                   = (\ @ s1
                        ($dReifies :: Data.Reflection.Reifies
                                        s1
                                        (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                        (p :: Data.Proxy.Proxy s1)[OneShot] ->
                      case (\ @ s2
                              ($dReifies1 :: Data.Reflection.Reifies
                                               s2
                                               (Control.Monad.R.Internal.AcquireIO
                                                  GHC.Types.Any))[OneShot]
                              (p1 :: Data.Proxy.Proxy s2)[OneShot] ->
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.SEXP.W
                                          s2 'Foreign.R.Type.Int GHC.Types.Any GHC.Int.Int32 #)
                                   (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.dataToTag#
                                           @ Foreign.R.Type.SEXPTYPE
                                           Test.Vector.$fArbitraryVector7
                                             `cast`
                                           (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of a# {
                                      DEFAULT
                                      -> case GHC.List.$wlenAcc
                                                @ GHC.Int.Int32
                                                w
                                                0# of ww2 { DEFAULT ->
                                         let {
                                           $j :: GHC.Prim.Int#
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       Data.Vector.SEXP.W
                                                         s2
                                                         'Foreign.R.Type.Int
                                                         GHC.Types.Any
                                                         GHC.Int.Int32 #)
                                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                                           = \ (ww1 :: GHC.Prim.Int#)[OneShot] ->
                                             case Test.Vector.$fArbitraryVector6 of v1 { GHC.Types.I# v2 ->
                                             case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Word#
                                                                                   -> GHC.Prim.Int#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         GHC.Prim.Addr# #)}
                                                    (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# v2))
                                                    ww1
                                                    s3 of wild { (#,#) ds ds1 ->
                                             case (($dReifies1
                                                      `cast`
                                                    (Data.Reflection.N:Reifies[0]
                                                         <*>_N
                                                         <s2>_N
                                                         <Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any>_N)
                                                      @ Data.Proxy.Proxy
                                                      (Data.Proxy.Proxy @ * @ s2))
                                                     `cast`
                                                   (Control.Monad.R.Internal.N:AcquireIO[0]
                                                        <GHC.Types.Any>_P)
                                                     @ 'Foreign.R.Type.Int
                                                     (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                                                       `cast`
                                                     (Trans
                                                          (GHC.Ptr.Ptr
                                                             <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                            Control.Memory.Region.V
                                                                                            'Foreign.R.Type.Int>)_R
                                                          (Sym (Foreign.R.Internal.N:SEXP[0]
                                                                    <Control.Memory.Region.V>_P
                                                                    <'Foreign.R.Type.Int>_P))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Foreign.R.Internal.SEXP
                                                          GHC.Types.Any 'Foreign.R.Type.Int>_R)
                                                    ds of ds2 { (#,#) ipv ipv1 ->
                                             case ipv1
                                                    `cast`
                                                  (Trans
                                                       (Foreign.R.Internal.N:SEXP[0]
                                                            <GHC.Types.Any>_P
                                                            <'Foreign.R.Type.Int>_P)
                                                       (GHC.Ptr.Ptr
                                                          <Language.R.HExp.HExp
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int, Language.R.HExp.HExp
                                                                                    (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                    'Foreign.R.Type.Int>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                                             let {
                                               $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> GHC.Prim.Int#
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Vector.SEXP.W
                                                               s2
                                                               'Foreign.R.Type.Int
                                                               GHC.Types.Any
                                                               GHC.Int.Int32 #)
                                                 <join 2> {- Arity: 2, Strictness: <S,U><L,U>,
                                                             Inline: [0] -}
                                               = \ (w1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot]
                                                   (ww :: GHC.Prim.Int#)[OneShot] ->
                                                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld #)}
                                                        dt1
                                                        w1 of wild1 { Unit# ds3 ->
                                                 case GHC.ForeignPtr.$wnewConcForeignPtr
                                                        @ ()
                                                        dt1
                                                        (\ (s4 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld) ->
                                                         case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                                                dt1
                                                                s4 of wild2 { Unit# ds4 ->
                                                         (# ds4, GHC.Tuple.() #) })
                                                          `cast`
                                                        (Sym (GHC.Types.N:IO[0] <()>_R))
                                                        ds3 of ds4 { (#,#) ipv2 ipv3 ->
                                                 (# ipv2,
                                                    case ipv3 of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                                                    (Data.Vector.SEXP.Vector
                                                       @ GHC.Types.Any
                                                       @ 'Foreign.R.Type.Int
                                                       @ GHC.Int.Int32
                                                       dt3
                                                       dt4
                                                       0#
                                                       (GHC.Prim.narrow32Int# ww))
                                                      `cast`
                                                    (Sym (Data.Vector.SEXP.N:W[0]
                                                              <s2>_P
                                                              <'Foreign.R.Type.Int>_P
                                                              <GHC.Types.Any>_P) <GHC.Int.Int32>_N) } #) } }
                                             } in
                                             letrec {
                                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                                 -> GHC.Prim.Int#
                                                                 -> [GHC.Int.Int32]
                                                                 -> GHC.Prim.Int#
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Vector.SEXP.W
                                                                         s2
                                                                         'Foreign.R.Type.Int
                                                                         GHC.Types.Any
                                                                         GHC.Int.Int32 #)
                                                 <join 5> {- Arity: 5,
                                                             Strictness: <S,1*U><S,U><L,1*U><S,U><S,U>,
                                                             Inline: [0] -}
                                               = \ (w1 :: GHC.Types.SPEC)
                                                   (ww :: GHC.Prim.Int#)
                                                   (ww4 :: [GHC.Int.Int32])
                                                   (ww5 :: GHC.Prim.Int#)
                                                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                 case w1 of ds5 { DEFAULT ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<=# ww5 0#) of wild1 {
                                                   GHC.Types.False
                                                   -> case ww4 of wild2 {
                                                        [] -> $w$j w3 ww
                                                        : x9 xs1
                                                        -> case x9 of wild4 { GHC.Int.I32# x10 ->
                                                           case GHC.Prim.writeInt32OffAddr#
                                                                  @ GHC.Prim.RealWorld
                                                                  (GHC.Prim.plusAddr#
                                                                     (GHC.Prim.plusAddr# dt1 40#)
                                                                     (GHC.Prim.*#
                                                                        (GHC.Prim.narrow32Int# ww)
                                                                        4#))
                                                                  0#
                                                                  x10
                                                                  w3 of s4 { DEFAULT ->
                                                           $wfoldlM'_loop
                                                             GHC.Types.SPEC
                                                             (GHC.Prim.+# ww 1#)
                                                             xs1
                                                             (GHC.Prim.-# ww5 1#)
                                                             s4 } } }
                                                   GHC.Types.True -> $w$j w3 ww } }
                                             } in
                                             $wfoldlM'_loop GHC.Types.SPEC 0# w ww2 ipv } } } }
                                         } in
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.<=# ww2 0#) of wild2 {
                                           GHC.Types.False -> $j ww2 GHC.Types.True -> $j 0# } }
                                      9#
                                      -> case Test.Vector.$fArbitraryVector5
                                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Vector.SEXP.W
                                                     s2
                                                     'Foreign.R.Type.Int
                                                     GHC.Types.Any
                                                     GHC.Int.Int32 #)
                                         of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                            ipv2
                              `cast`
                            (Data.Vector.SEXP.N:W[0]
                                 <s2>_P
                                 <'Foreign.R.Type.Int>_P
                                 <GHC.Types.Any>_P <GHC.Int.Int32>_N) })
                             `cast`
                           (Trans
                                (Sym (Data.Reflection.N:Magic[0]
                                          <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                          <Data.Vector.SEXP.Vector
                                             GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                                (UnsafeCo representational (Data.Reflection.Magic
                                                              (Control.Monad.R.Internal.AcquireIO
                                                                 GHC.Types.Any)
                                                              (Data.Vector.SEXP.Vector
                                                                 GHC.Types.Any
                                                                 'Foreign.R.Type.Int
                                                                 GHC.Int.Int32)) ((GHC.Types.Any
                                                                                   -> Control.Monad.R.Internal.AcquireIO
                                                                                        GHC.Types.Any)
                                                                                  -> Data.Proxy.Proxy
                                                                                       GHC.Types.Any
                                                                                  -> Data.Vector.SEXP.Vector
                                                                                       GHC.Types.Any
                                                                                       'Foreign.R.Type.Int
                                                                                       GHC.Int.Int32)))
                             Test.Vector.testGeneralSEXPVector46
                               `cast`
                             (<GHC.Types.Any>_R
                              ->_R Trans
                                       (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                        <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Foreign.R.Internal.SEXP
                                                         GHC.Types.Any ty1>_R))
                                       (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                 <GHC.Types.Any>_P)))
                             (Data.Proxy.Proxy
                                @ GHC.Types.Any
                                @ GHC.Types.Any) of nt { Data.Vector.SEXP.Vector ipv ipv1 ipv2 ipv3 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww ipv3) of wild {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Int.Int32
                                 (case GHC.Prim.touch#
                                         @ 'GHC.Types.LiftedRep
                                         @ GHC.ForeignPtr.ForeignPtrContents
                                         ipv1
                                         GHC.Prim.realWorld# of s' { DEFAULT ->
                                  case GHC.Prim.readInt32OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr#
                                            (GHC.Prim.plusAddr# ipv 40#)
                                            (GHC.Prim.*# ipv2 4#))
                                         ww
                                         GHC.Prim.realWorld# of ds2 { (#,#) ipv4 ipv5 ->
                                  GHC.Int.I32# ipv5 } })
                                 ($wgo (GHC.Prim.+# ww 1#))
                            GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                      } in
                      $wgo 0# })
                       `cast`
                     (Trans
                          (Sym (Data.Reflection.N:Magic[0]
                                    <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                    <[GHC.Int.Int32]>_R))
                          (UnsafeCo representational (Data.Reflection.Magic
                                                        (Control.Monad.R.Internal.AcquireIO
                                                           GHC.Types.Any)
                                                        [GHC.Int.Int32]) ((GHC.Types.Any
                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                GHC.Types.Any)
                                                                          -> Data.Proxy.Proxy
                                                                               GHC.Types.Any
                                                                          -> [GHC.Int.Int32])))
                       Test.Vector.$fAEqVector3
                         `cast`
                       (<GHC.Types.Any>_R
                        ->_R Trans
                                 (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                  <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                 (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                       (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                 } in
                 case Data.AEq.eqListsWith
                        @ GHC.Int.Int32
                        GHC.Int.eqInt32
                        w2
                        w of wild {
                   GHC.Types.False
                   -> (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True,
                         GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow
                                 @ [GHC.Int.Int32]
                                 Test.Vector.$s$fShow[]
                                 w2)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow
                                    @ [GHC.Int.Int32]
                                    Test.Vector.$s$fShow[]
                                    w))),
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #)
                   GHC.Types.True
                   -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                         GHC.Types.[] @ GHC.Types.Char,
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #) }) -}
304fe34c0adf771feb467fc15e8575dc
  $wf6 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Base.Maybe GHC.Types.Bool, GHC.Types.Bool,
          GHC.Base.String,
          GHC.Base.Maybe Test.QuickCheck.Exception.AnException,
          GHC.Types.Bool, GHC.Base.Maybe GHC.Types.Int,
          Data.Map.Internal.Map GHC.Base.String GHC.Types.Int,
          Data.Set.Internal.Set GHC.Base.String,
          [Test.QuickCheck.Property.Callback], [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   Data.Vector.SEXP.W
                                     s1 'Foreign.R.Type.Int GHC.Types.Any GHC.Int.Int32 #)
                              (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.dataToTag#
                                      @ Foreign.R.Type.SEXPTYPE
                                      Test.Vector.$fArbitraryVector7
                                        `cast`
                                      (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0])) of a# {
                                 DEFAULT
                                 -> let {
                                      xs :: [GHC.Int.Int32]
                                      = (\ @ s3
                                           ($dReifies1 :: Data.Reflection.Reifies
                                                            s3
                                                            (Control.Monad.R.Internal.AcquireIO
                                                               GHC.Types.Any))[OneShot]
                                           (p1 :: Data.Proxy.Proxy s3)[OneShot] ->
                                         letrec {
                                           $wgo :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                             {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                           = \ (ww4 :: GHC.Prim.Int#) ->
                                             case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.>=# ww4 ww3) of wild {
                                               GHC.Types.False
                                               -> GHC.Types.:
                                                    @ GHC.Int.Int32
                                                    (case GHC.Prim.touch#
                                                            @ 'GHC.Types.LiftedRep
                                                            @ GHC.ForeignPtr.ForeignPtrContents
                                                            ww1
                                                            GHC.Prim.realWorld# of s' { DEFAULT ->
                                                     case GHC.Prim.readInt32OffAddr#
                                                            @ GHC.Prim.RealWorld
                                                            (GHC.Prim.plusAddr#
                                                               (GHC.Prim.plusAddr# ww 40#)
                                                               (GHC.Prim.*# ww2 4#))
                                                            ww4
                                                            GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                                     GHC.Int.I32# ipv1 } })
                                                    ($wgo (GHC.Prim.+# ww4 1#))
                                               GHC.Types.True -> GHC.Types.[] @ GHC.Int.Int32 }
                                         } in
                                         $wgo 0#)
                                          `cast`
                                        (Trans
                                             (Sym (Data.Reflection.N:Magic[0]
                                                       <Control.Monad.R.Internal.AcquireIO
                                                          GHC.Types.Any>_N
                                                       <[GHC.Int.Int32]>_R))
                                             (UnsafeCo representational (Data.Reflection.Magic
                                                                           (Control.Monad.R.Internal.AcquireIO
                                                                              GHC.Types.Any)
                                                                           [GHC.Int.Int32]) ((GHC.Types.Any
                                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                                   GHC.Types.Any)
                                                                                             -> Data.Proxy.Proxy
                                                                                                  GHC.Types.Any
                                                                                             -> [GHC.Int.Int32])))
                                          Test.Vector.$fAEqVector3
                                            `cast`
                                          (<GHC.Types.Any>_R
                                           ->_R Trans
                                                    (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                                     <Foreign.R.Internal.SEXP
                                                        Control.Memory.Region.V ty1>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Foreign.R.Internal.SEXP
                                                                      GHC.Types.Any ty1>_R))
                                                    (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                              <GHC.Types.Any>_P)))
                                          (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                                    } in
                                    case GHC.List.$wlenAcc @ GHC.Int.Int32 xs 0# of ww4 { DEFAULT ->
                                    let {
                                      $j :: GHC.Prim.Int#
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Vector.SEXP.W
                                                    s1
                                                    'Foreign.R.Type.Int
                                                    GHC.Types.Any
                                                    GHC.Int.Int32 #)
                                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                                      = \ (ww5 :: GHC.Prim.Int#)[OneShot] ->
                                        case Test.Vector.$fArbitraryVector6 of v1 { GHC.Types.I# v2 ->
                                        case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Word#
                                                                              -> GHC.Prim.Int#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Addr# #)}
                                               (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# v2))
                                               ww5
                                               s2 of wild { (#,#) ds ds1 ->
                                        case (($dReifies
                                                 `cast`
                                               (Data.Reflection.N:Reifies[0]
                                                    <*>_N
                                                    <s1>_N
                                                    <Control.Monad.R.Internal.AcquireIO
                                                       GHC.Types.Any>_N)
                                                 @ Data.Proxy.Proxy
                                                 (Data.Proxy.Proxy @ * @ s1))
                                                `cast`
                                              (Control.Monad.R.Internal.N:AcquireIO[0]
                                                   <GHC.Types.Any>_P)
                                                @ 'Foreign.R.Type.Int
                                                (GHC.Ptr.Ptr @ Foreign.R.Internal.SEXPREC ds1)
                                                  `cast`
                                                (Trans
                                                     (GHC.Ptr.Ptr
                                                        <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                                                       Control.Memory.Region.V
                                                                                       'Foreign.R.Type.Int>)_R
                                                     (Sym (Foreign.R.Internal.N:SEXP[0]
                                                               <Control.Memory.Region.V>_P
                                                               <'Foreign.R.Type.Int>_P))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Foreign.R.Internal.SEXP
                                                     GHC.Types.Any 'Foreign.R.Type.Int>_R)
                                               ds of ds2 { (#,#) ipv ipv1 ->
                                        case ipv1
                                               `cast`
                                             (Trans
                                                  (Foreign.R.Internal.N:SEXP[0]
                                                       <GHC.Types.Any>_P <'Foreign.R.Type.Int>_P)
                                                  (GHC.Ptr.Ptr
                                                     <Language.R.HExp.HExp
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int, Language.R.HExp.HExp
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               'Foreign.R.Type.Int>)_R) of dt { GHC.Ptr.Ptr dt1 ->
                                        let {
                                          $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> GHC.Prim.Int#
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.SEXP.W
                                                          s1
                                                          'Foreign.R.Type.Int
                                                          GHC.Types.Any
                                                          GHC.Int.Int32 #)
                                            <join 2> {- Arity: 2, Strictness: <S,U><L,U>,
                                                        Inline: [0] -}
                                          = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                              (ww6 :: GHC.Prim.Int#)[OneShot] ->
                                            case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld #)}
                                                   dt1
                                                   w of wild1 { Unit# ds3 ->
                                            case GHC.ForeignPtr.$wnewConcForeignPtr
                                                   @ ()
                                                   dt1
                                                   (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                    case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld #)}
                                                           dt1
                                                           s3 of wild2 { Unit# ds4 ->
                                                    (# ds4, GHC.Tuple.() #) })
                                                     `cast`
                                                   (Sym (GHC.Types.N:IO[0] <()>_R))
                                                   ds3 of ds4 { (#,#) ipv2 ipv3 ->
                                            (# ipv2,
                                               case ipv3 of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                                               (Data.Vector.SEXP.Vector
                                                  @ GHC.Types.Any
                                                  @ 'Foreign.R.Type.Int
                                                  @ GHC.Int.Int32
                                                  dt3
                                                  dt4
                                                  0#
                                                  (GHC.Prim.narrow32Int# ww6))
                                                 `cast`
                                               (Sym (Data.Vector.SEXP.N:W[0]
                                                         <s1>_P
                                                         <'Foreign.R.Type.Int>_P
                                                         <GHC.Types.Any>_P) <GHC.Int.Int32>_N) } #) } }
                                        } in
                                        letrec {
                                          $wfoldlM'_loop :: GHC.Types.SPEC
                                                            -> GHC.Prim.Int#
                                                            -> [GHC.Int.Int32]
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.SEXP.W
                                                                    s1
                                                                    'Foreign.R.Type.Int
                                                                    GHC.Types.Any
                                                                    GHC.Int.Int32 #)
                                            <join 5> {- Arity: 5,
                                                        Strictness: <S,1*U><S,U><L,1*U><S,U><S,U>,
                                                        Inline: [0] -}
                                          = \ (w :: GHC.Types.SPEC)
                                              (ww6 :: GHC.Prim.Int#)
                                              (ww7 :: [GHC.Int.Int32])
                                              (ww8 :: GHC.Prim.Int#)
                                              (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                            case w of ds5 { DEFAULT ->
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.<=# ww8 0#) of wild1 {
                                              GHC.Types.False
                                              -> case ww7 of wild2 {
                                                   [] -> $w$j w1 ww6
                                                   : x9 xs1
                                                   -> case x9 of wild4 { GHC.Int.I32# x10 ->
                                                      case GHC.Prim.writeInt32OffAddr#
                                                             @ GHC.Prim.RealWorld
                                                             (GHC.Prim.plusAddr#
                                                                (GHC.Prim.plusAddr# dt1 40#)
                                                                (GHC.Prim.*#
                                                                   (GHC.Prim.narrow32Int# ww6)
                                                                   4#))
                                                             0#
                                                             x10
                                                             w1 of s3 { DEFAULT ->
                                                      $wfoldlM'_loop
                                                        GHC.Types.SPEC
                                                        (GHC.Prim.+# ww6 1#)
                                                        xs1
                                                        (GHC.Prim.-# ww8 1#)
                                                        s3 } } }
                                              GHC.Types.True -> $w$j w1 ww6 } }
                                        } in
                                        $wfoldlM'_loop GHC.Types.SPEC 0# xs ww4 ipv } } } }
                                    } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<=# ww4 0#) of wild2 {
                                      GHC.Types.False -> $j ww4 GHC.Types.True -> $j 0# } }
                                 9#
                                 -> case Test.Vector.$fArbitraryVector5
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              Data.Vector.SEXP.W
                                                s1
                                                'Foreign.R.Type.Int
                                                GHC.Types.Any
                                                GHC.Int.Int32 #)
                                    of {} }) of ds1 { (#,#) ipv1 ipv2 ->
                       ipv2
                         `cast`
                       (Data.Vector.SEXP.N:W[0]
                            <s1>_P
                            <'Foreign.R.Type.Int>_P
                            <GHC.Types.Any>_P <GHC.Int.Int32>_N) })
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <Data.Vector.SEXP.Vector
                                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         (Data.Vector.SEXP.Vector
                                                            GHC.Types.Any
                                                            'Foreign.R.Type.Int
                                                            GHC.Int.Int32)) ((GHC.Types.Any
                                                                              -> Control.Monad.R.Internal.AcquireIO
                                                                                   GHC.Types.Any)
                                                                             -> Data.Proxy.Proxy
                                                                                  GHC.Types.Any
                                                                             -> Data.Vector.SEXP.Vector
                                                                                  GHC.Types.Any
                                                                                  'Foreign.R.Type.Int
                                                                                  GHC.Int.Int32)))
                        Test.Vector.testGeneralSEXPVector46
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of ww4 { Data.Vector.SEXP.Vector ww5 ww6 ww7 ww8 ->
                 let {
                   ds :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                   = Data.Vector.SEXP.Vector
                       @ GHC.Types.Any
                       @ 'Foreign.R.Type.Int
                       @ GHC.Int.Int32
                       ww
                       ww1
                       ww2
                       ww3
                 } in
                 case Test.Vector.$w$c~==
                        @ GHC.Int.Int32
                        @ GHC.Types.Any
                        @ 'Foreign.R.Type.Int
                        Data.AEq.$fAEqInt32
                        Test.Vector.testGeneralSEXPVector53
                        ww5
                        ww6
                        ww7
                        ww8
                        ds of wild {
                   GHC.Types.False
                   -> (# Test.QuickCheck.Property.$fTestable()3, GHC.Types.True,
                         GHC.CString.unpackAppendCString#
                           Test.Vector.testGeneralSEXPVector31
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Text.Show.Pretty.ppShow
                                 @ (Data.Vector.SEXP.Vector
                                      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                                 Test.Vector.$s$fShow(,)_$s$fShowVector
                                 ww4)
                              (GHC.CString.unpackAppendCString#
                                 Test.Vector.testGeneralSEXPVector30
                                 (Text.Show.Pretty.ppShow
                                    @ (Data.Vector.SEXP.Vector
                                         GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                                    Test.Vector.$s$fShow(,)_$s$fShowVector
                                    ds))),
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #)
                   GHC.Types.True
                   -> (# Test.QuickCheck.Property.succeeded1, GHC.Types.True,
                         GHC.Types.[] @ GHC.Types.Char,
                         GHC.Base.Nothing @ Test.QuickCheck.Exception.AnException,
                         GHC.Types.True, GHC.Base.Nothing @ GHC.Types.Int,
                         Data.Map.Internal.Tip @ GHC.Base.String @ GHC.Types.Int,
                         Data.Set.Internal.Tip @ GHC.Base.String,
                         GHC.Types.[] @ Test.QuickCheck.Property.Callback,
                         GHC.Types.[] @ GHC.Base.String #) } }) -}
01caadb2cd3a47aaede587c1f2e3a6c0
  $wf7 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case x9 of wild1 {
                   DEFAULT
                   -> let {
                        lvl81 :: GHC.Types.Double
                        = (\ @ s1
                             ($dReifies :: Data.Reflection.Reifies
                                             s1
                                             (Control.Monad.R.Internal.AcquireIO
                                                GHC.Types.Any))[OneShot]
                             (p :: Data.Proxy.Proxy s1)[OneShot] ->
                           let {
                             x10 :: GHC.Prim.Int# = GHC.Prim.-# ww3 1#
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x10 0#) of wild2 {
                             GHC.Types.False
                             -> Test.Vector.testGeneralSEXPVector69
                                  ww3
                                  x10
                                  Test.Vector.testGeneralSEXPVector10
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x10 ww3) of wild3 {
                                  GHC.Types.False
                                  -> Test.Vector.testGeneralSEXPVector69
                                       ww3
                                       x10
                                       Test.Vector.testGeneralSEXPVector10
                                  GHC.Types.True
                                  -> case GHC.Prim.touch#
                                            @ 'GHC.Types.LiftedRep
                                            @ GHC.ForeignPtr.ForeignPtrContents
                                            ww1
                                            GHC.Prim.realWorld# of s' { DEFAULT ->
                                     case GHC.Prim.readDoubleOffAddr#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.plusAddr#
                                               (GHC.Prim.plusAddr# ww 40#)
                                               (GHC.Prim.*# ww2 8#))
                                            x10
                                            GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                     GHC.Types.D# ipv1 } } } })
                            `cast`
                          (Trans
                               (Sym (Data.Reflection.N:Magic[0]
                                         <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                         <GHC.Types.Double>_R))
                               (UnsafeCo representational (Data.Reflection.Magic
                                                             (Control.Monad.R.Internal.AcquireIO
                                                                GHC.Types.Any)
                                                             GHC.Types.Double) ((GHC.Types.Any
                                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                                      GHC.Types.Any)
                                                                                -> Data.Proxy.Proxy
                                                                                     GHC.Types.Any
                                                                                -> GHC.Types.Double)))
                            Test.Vector.testGeneralSEXPVector9
                              `cast`
                            (<GHC.Types.Any>_R
                             ->_R Trans
                                      (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                       <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                      (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                <GHC.Types.Any>_P)))
                            (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)
                      } in
                      letrec {
                        go :: [GHC.Types.Double] -> GHC.Types.Double -> GHC.Types.Bool
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
                        = \ (ds :: [GHC.Types.Double]) (eta :: GHC.Types.Double) ->
                          case ds of wild2 {
                            []
                            -> case eta of wild3 { GHC.Types.D# x10 ->
                               case lvl81 of wild4 { GHC.Types.D# y ->
                               GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==## x10 y) } }
                            : y ys -> go ys y }
                      } in
                      go
                        ((\ @ s1
                            ($dReifies :: Data.Reflection.Reifies
                                            s1
                                            (Control.Monad.R.Internal.AcquireIO
                                               GHC.Types.Any))[OneShot]
                            (p :: Data.Proxy.Proxy s1)[OneShot] ->
                          letrec {
                            $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww4 :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 ww3) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Double
                                     (case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ww1
                                             GHC.Prim.realWorld# of s' { DEFAULT ->
                                      case GHC.Prim.readDoubleOffAddr#
                                             @ GHC.Prim.RealWorld
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ww 40#)
                                                (GHC.Prim.*# ww2 8#))
                                             ww4
                                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                      GHC.Types.D# ipv1 } })
                                     ($wgo (GHC.Prim.+# ww4 1#))
                                GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                          } in
                          $wgo 0#)
                           `cast`
                         (Trans
                              (Sym (Data.Reflection.N:Magic[0]
                                        <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                        <[GHC.Types.Double]>_R))
                              (UnsafeCo representational (Data.Reflection.Magic
                                                            (Control.Monad.R.Internal.AcquireIO
                                                               GHC.Types.Any)
                                                            [GHC.Types.Double]) ((GHC.Types.Any
                                                                                  -> Control.Monad.R.Internal.AcquireIO
                                                                                       GHC.Types.Any)
                                                                                 -> Data.Proxy.Proxy
                                                                                      GHC.Types.Any
                                                                                 -> [GHC.Types.Double])))
                           Test.Vector.$fAEqVector3
                             `cast`
                           (<GHC.Types.Any>_R
                            ->_R Trans
                                     (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                      <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                     (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                               <GHC.Types.Any>_P)))
                           (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                        (GHC.List.lastError @ GHC.Types.Double)
                   0# -> GHC.Types.True } }) -}
ffbc5e90af5999e70c0c366b96a080be
  $wf8 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case x9 of wild1 {
                   DEFAULT
                   -> case (\ @ s1
                              ($dReifies :: Data.Reflection.Reifies
                                              s1
                                              (Control.Monad.R.Internal.AcquireIO
                                                 GHC.Types.Any))[OneShot]
                              (p :: Data.Proxy.Proxy s1)[OneShot] ->
                            letrec {
                              $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                                {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                              = \ (ww4 :: GHC.Prim.Int#) ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# ww4 ww3) of wild2 {
                                  GHC.Types.False
                                  -> GHC.Types.:
                                       @ GHC.Types.Double
                                       (case GHC.Prim.touch#
                                               @ 'GHC.Types.LiftedRep
                                               @ GHC.ForeignPtr.ForeignPtrContents
                                               ww1
                                               GHC.Prim.realWorld# of s' { DEFAULT ->
                                        case GHC.Prim.readDoubleOffAddr#
                                               @ GHC.Prim.RealWorld
                                               (GHC.Prim.plusAddr#
                                                  (GHC.Prim.plusAddr# ww 40#)
                                                  (GHC.Prim.*# ww2 8#))
                                               ww4
                                               GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                        GHC.Types.D# ipv1 } })
                                       ($wgo (GHC.Prim.+# ww4 1#))
                                  GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                            } in
                            $wgo 0#)
                             `cast`
                           (Trans
                                (Sym (Data.Reflection.N:Magic[0]
                                          <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                          <[GHC.Types.Double]>_R))
                                (UnsafeCo representational (Data.Reflection.Magic
                                                              (Control.Monad.R.Internal.AcquireIO
                                                                 GHC.Types.Any)
                                                              [GHC.Types.Double]) ((GHC.Types.Any
                                                                                    -> Control.Monad.R.Internal.AcquireIO
                                                                                         GHC.Types.Any)
                                                                                   -> Data.Proxy.Proxy
                                                                                        GHC.Types.Any
                                                                                   -> [GHC.Types.Double])))
                             Test.Vector.$fAEqVector3
                               `cast`
                             (<GHC.Types.Any>_R
                              ->_R Trans
                                       (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                        <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Foreign.R.Internal.SEXP
                                                         GHC.Types.Any ty1>_R))
                                       (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                 <GHC.Types.Any>_P)))
                             (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any) of wild2 {
                        [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                        : x10 ds1
                        -> case x10 of wild3 { GHC.Types.D# x11 ->
                           case (\ @ s1
                                   ($dReifies :: Data.Reflection.Reifies
                                                   s1
                                                   (Control.Monad.R.Internal.AcquireIO
                                                      GHC.Types.Any))[OneShot]
                                   (p :: Data.Proxy.Proxy s1)[OneShot] ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<# 0# ww3) of wild4 {
                                   GHC.Types.False -> Test.Vector.testGeneralSEXPVector72 ww3
                                   GHC.Types.True
                                   -> case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ww1
                                             GHC.Prim.realWorld# of s' { DEFAULT ->
                                      case GHC.Prim.readDoubleOffAddr#
                                             @ GHC.Prim.RealWorld
                                             (GHC.Prim.plusAddr#
                                                (GHC.Prim.plusAddr# ww 40#)
                                                (GHC.Prim.*# ww2 8#))
                                             0#
                                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                      GHC.Types.D# ipv1 } } })
                                  `cast`
                                (Trans
                                     (Sym (Data.Reflection.N:Magic[0]
                                               <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                               <GHC.Types.Double>_R))
                                     (UnsafeCo representational (Data.Reflection.Magic
                                                                   (Control.Monad.R.Internal.AcquireIO
                                                                      GHC.Types.Any)
                                                                   GHC.Types.Double) ((GHC.Types.Any
                                                                                       -> Control.Monad.R.Internal.AcquireIO
                                                                                            GHC.Types.Any)
                                                                                      -> Data.Proxy.Proxy
                                                                                           GHC.Types.Any
                                                                                      -> GHC.Types.Double)))
                                  Test.Vector.testGeneralSEXPVector17
                                    `cast`
                                  (<GHC.Types.Any>_R
                                   ->_R Trans
                                            (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                             <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <Foreign.R.Internal.SEXP
                                                              GHC.Types.Any ty1>_R))
                                            (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                      <GHC.Types.Any>_P)))
                                  (Data.Proxy.Proxy
                                     @ GHC.Types.Any
                                     @ GHC.Types.Any) of wild4 { GHC.Types.D# y ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==## x11 y) } } }
                   0# -> GHC.Types.True } }) -}
7973716636d87d9a24f094e55cd4b9a0
  $wf9 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Types.Int) ->
                 case (\ @ s1
                         ($dReifies :: Data.Reflection.Reifies
                                         s1
                                         (Control.Monad.R.Internal.AcquireIO
                                            GHC.Types.Any))[OneShot]
                         (p :: Data.Proxy.Proxy s1)[OneShot] ->
                       GHC.Types.I# ww3)
                        `cast`
                      (Trans
                           (Sym (Data.Reflection.N:Magic[0]
                                     <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                     <GHC.Types.Int>_R))
                           (UnsafeCo representational (Data.Reflection.Magic
                                                         (Control.Monad.R.Internal.AcquireIO
                                                            GHC.Types.Any)
                                                         GHC.Types.Int) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> GHC.Types.Int)))
                        Test.Vector.testGeneralSEXPVector12
                          `cast`
                        (<GHC.Types.Any>_R
                         ->_R Trans
                                  (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                   <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                  (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                        (Data.Proxy.Proxy
                           @ GHC.Types.Any
                           @ GHC.Types.Any) of wild { GHC.Types.I# x9 ->
                 case x9 of wild1 {
                   DEFAULT
                   -> let {
                        $j :: GHC.Prim.Int# -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                        = \ (ww5 :: GHC.Prim.Int#)[OneShot] ->
                          case GHC.List.$w!!
                                 @ GHC.Types.Double
                                 ((\ @ s1
                                     ($dReifies :: Data.Reflection.Reifies
                                                     s1
                                                     (Control.Monad.R.Internal.AcquireIO
                                                        GHC.Types.Any))[OneShot]
                                     (p :: Data.Proxy.Proxy s1)[OneShot] ->
                                   letrec {
                                     $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                                       {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                     = \ (ww6 :: GHC.Prim.Int#) ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.>=# ww6 ww3) of wild2 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ GHC.Types.Double
                                              (case GHC.Prim.touch#
                                                      @ 'GHC.Types.LiftedRep
                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                      ww1
                                                      GHC.Prim.realWorld# of s' { DEFAULT ->
                                               case GHC.Prim.readDoubleOffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      (GHC.Prim.plusAddr#
                                                         (GHC.Prim.plusAddr# ww 40#)
                                                         (GHC.Prim.*# ww2 8#))
                                                      ww6
                                                      GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                               GHC.Types.D# ipv1 } })
                                              ($wgo (GHC.Prim.+# ww6 1#))
                                         GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                                   } in
                                   $wgo 0#)
                                    `cast`
                                  (Trans
                                       (Sym (Data.Reflection.N:Magic[0]
                                                 <Control.Monad.R.Internal.AcquireIO
                                                    GHC.Types.Any>_N
                                                 <[GHC.Types.Double]>_R))
                                       (UnsafeCo representational (Data.Reflection.Magic
                                                                     (Control.Monad.R.Internal.AcquireIO
                                                                        GHC.Types.Any)
                                                                     [GHC.Types.Double]) ((GHC.Types.Any
                                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                                GHC.Types.Any)
                                                                                          -> Data.Proxy.Proxy
                                                                                               GHC.Types.Any
                                                                                          -> [GHC.Types.Double])))
                                    Test.Vector.$fAEqVector3
                                      `cast`
                                    (<GHC.Types.Any>_R
                                     ->_R Trans
                                              (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                               <Foreign.R.Internal.SEXP
                                                  Control.Memory.Region.V ty1>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Foreign.R.Internal.SEXP
                                                                GHC.Types.Any ty1>_R))
                                              (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                        <GHC.Types.Any>_P)))
                                    (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                                 ww5 of wild2 { GHC.Types.D# x10 ->
                          case (\ @ s1
                                  ($dReifies :: Data.Reflection.Reifies
                                                  s1
                                                  (Control.Monad.R.Internal.AcquireIO
                                                     GHC.Types.Any))[OneShot]
                                  (p :: Data.Proxy.Proxy s1)[OneShot] ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# ww5 0#) of wild3 {
                                  GHC.Types.False
                                  -> Test.Vector.testGeneralSEXPVector69
                                       ww3
                                       ww5
                                       Test.Vector.testGeneralSEXPVector10
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# ww5 ww3) of wild4 {
                                       GHC.Types.False
                                       -> Test.Vector.testGeneralSEXPVector69
                                            ww3
                                            ww5
                                            Test.Vector.testGeneralSEXPVector10
                                       GHC.Types.True
                                       -> case GHC.Prim.touch#
                                                 @ 'GHC.Types.LiftedRep
                                                 @ GHC.ForeignPtr.ForeignPtrContents
                                                 ww1
                                                 GHC.Prim.realWorld# of s' { DEFAULT ->
                                          case GHC.Prim.readDoubleOffAddr#
                                                 @ GHC.Prim.RealWorld
                                                 (GHC.Prim.plusAddr#
                                                    (GHC.Prim.plusAddr# ww 40#)
                                                    (GHC.Prim.*# ww2 8#))
                                                 ww5
                                                 GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                          GHC.Types.D# ipv1 } } } })
                                 `cast`
                               (Trans
                                    (Sym (Data.Reflection.N:Magic[0]
                                              <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                              <GHC.Types.Double>_R))
                                    (UnsafeCo representational (Data.Reflection.Magic
                                                                  (Control.Monad.R.Internal.AcquireIO
                                                                     GHC.Types.Any)
                                                                  GHC.Types.Double) ((GHC.Types.Any
                                                                                      -> Control.Monad.R.Internal.AcquireIO
                                                                                           GHC.Types.Any)
                                                                                     -> Data.Proxy.Proxy
                                                                                          GHC.Types.Any
                                                                                     -> GHC.Types.Double)))
                                 Test.Vector.testGeneralSEXPVector23
                                   `cast`
                                 (<GHC.Types.Any>_R
                                  ->_R Trans
                                           (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                            <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Foreign.R.Internal.SEXP
                                                             GHC.Types.Any ty1>_R))
                                           (Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                                     <GHC.Types.Any>_P)))
                                 (Data.Proxy.Proxy
                                    @ GHC.Types.Any
                                    @ GHC.Types.Any) of wild3 { GHC.Types.D# y ->
                          GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==## x10 y) } }
                      } in
                      case wild1 of wild2 {
                        DEFAULT
                        -> case ww4 of wild3 { GHC.Types.I# x10 ->
                           case GHC.Classes.modInt# x10 wild2 of ww5 { DEFAULT -> $j ww5 } }
                        -1# -> $j 0# }
                   0# -> GHC.Types.True } }) -}
66545d5d40825a926998cc263eb1872e
  $wlvl ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [GHC.Types.Double]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  letrec {
                    $wgo :: GHC.Prim.Int# -> [GHC.Types.Double]
                      {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                    = \ (ww4 :: GHC.Prim.Int#) ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww4 ww3) of wild {
                        GHC.Types.False
                        -> GHC.Types.:
                             @ GHC.Types.Double
                             (case GHC.Prim.touch#
                                     @ 'GHC.Types.LiftedRep
                                     @ GHC.ForeignPtr.ForeignPtrContents
                                     ww1
                                     GHC.Prim.realWorld# of s' { DEFAULT ->
                              case GHC.Prim.readDoubleOffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr#
                                        (GHC.Prim.plusAddr# ww 40#)
                                        (GHC.Prim.*# ww2 8#))
                                     ww4
                                     GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                              GHC.Types.D# ipv1 } })
                             ($wgo (GHC.Prim.+# ww4 1#))
                        GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                  } in
                  $wgo 0#)
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                <[GHC.Types.Double]>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO
                                                       GHC.Types.Any)
                                                    [GHC.Types.Double]) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               GHC.Types.Any)
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> [GHC.Types.Double])))
                   Test.Vector.$fAEqVector3
                     `cast`
                   (<GHC.Types.Any>_R
                    ->_R Trans
                             (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                   (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any)) -}
105930139faddb669b4a7c55140ec385
  $wlvl1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   @ GHC.Types.Bool
                   Test.Vector.$s$fShow(,)_$s$fShowVector
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Int
                                                         GHC.Int.Int32
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                   Test.Vector.$fArbitraryVector1
                   Test.Vector.testGeneralSEXPVector_f
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
7aad504a3cfdf4f9eca62ebf2fdf0914
  $wlvl10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   @ GHC.Types.Bool
                   Test.Vector.$s$fShow(,)_$s$fShowVector1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Real
                                                         GHC.Types.Double
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Double
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                   Test.Vector.$fArbitraryVector2
                   Test.Vector.testGeneralSEXPVector_f7
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
0179926c92c8bee8d1fccbdaf0649411
  $wlvl11 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   @ GHC.Types.Bool
                   Test.Vector.$s$fShow(,)_$s$fShowVector1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Real
                                                         GHC.Types.Double
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Double
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                   Test.Vector.$fArbitraryVector2
                   Test.Vector.testGeneralSEXPVector_f8
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
ad817baf2324f15195f1c2944aa0fb30
  $wlvl12 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                      GHC.Types.Int)
                   @ GHC.Types.Bool
                   Test.Vector.$s$fShow(,)4
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double,
                                                 GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double,
                                                      GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <(Data.Vector.SEXP.Vector
                                                          GHC.Types.Any
                                                          'Foreign.R.Type.Real
                                                          GHC.Types.Double,
                                                        GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double,
                                                 GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double,
                                                      GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <(Data.Vector.SEXP.Vector
                                                      GHC.Types.Any
                                                      'Foreign.R.Type.Real
                                                      GHC.Types.Double,
                                                    GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.testGeneralSEXPVector76
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(Data.Vector.SEXP.Vector
                                 GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                               GHC.Types.Int)>_R))
                   Test.Vector.testGeneralSEXPVector75
                   Test.Vector.testGeneralSEXPVector_f9
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
fb141824a189bd1c467d12790f7cb4f3
  $wlvl13 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> GHC.Types.Int
    -> [(Data.Vector.SEXP.Vector
           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
         GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   (ww1 :: GHC.Types.Int) ->
                 let {
                   z :: [(Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                          GHC.Types.Int)]
                   = case ww1 of ww2 { GHC.Types.I# ww3 ->
                     letrec {
                       go :: [GHC.Types.Int]
                             -> [(Data.Vector.SEXP.Vector
                                    GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                                  GHC.Types.Int)]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [GHC.Types.Int]) ->
                         case ds of wild {
                           []
                           -> GHC.Types.[]
                                @ (Data.Vector.SEXP.Vector
                                     GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                                   GHC.Types.Int)
                           : y ys
                           -> GHC.Types.:
                                @ (Data.Vector.SEXP.Vector
                                     GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                                   GHC.Types.Int)
                                (ww, y)
                                (go ys) }
                     } in
                     go (Test.QuickCheck.Arbitrary.$w$sshrinkIntegral ww3) }
                 } in
                 letrec {
                   go :: [Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double]
                         -> [(Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                              GHC.Types.Int)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Vector.SEXP.Vector
                                 GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Types.:
                            @ (Data.Vector.SEXP.Vector
                                 GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                               GHC.Types.Int)
                            (y, ww1)
                            (go ys) }
                 } in
                 go
                   (GHC.Types.[]
                      @ (Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double))) -}
109f3aedef878b2fea87b220ba05eaba
  $wlvl14 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Data.Vector.SEXP.Vector
            GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
          GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Test.Vector.$fArbitraryVector_$s$carbitrary1
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
1c1788074f2429b39063ff7050097202
  $wlvl15 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow(,)_$s$fShowVector1
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Real
                                                         GHC.Types.Double
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Double
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                   Test.Vector.$fArbitraryVector2
                   Test.Vector.testGeneralSEXPVector_f10
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
c7417b6522e55e9d20dedb0986fc1133
  $wlvl16 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow(,)_$s$fShowVector1
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Real
                                                         GHC.Types.Double
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Double
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                   Test.Vector.$fArbitraryVector2
                   Test.Vector.testGeneralSEXPVector_f11
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
33c59971b99a284a6c63a3ae0957f8a5
  $wlvl17 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Double]
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow[]1
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Double]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Double]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[GHC.Types.Double]
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Double]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Double]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <[GHC.Types.Double]
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.testGeneralSEXPVector87
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Double]>_R))
                   Test.Vector.testGeneralSEXPVector86
                   Test.Vector.testGeneralSEXPVector_f12
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
e8a912347beb1cc0853ddcc5bc527192
  $wlvl18 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow(,)_$s$fShowVector1
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Real
                                                         GHC.Types.Double
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Real
                                                   GHC.Types.Double)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Real
                                                        GHC.Types.Double)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any
                                                     'Foreign.R.Type.Real
                                                     GHC.Types.Double
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double>_R))
                   Test.Vector.$fArbitraryVector2
                   Test.Vector.testGeneralSEXPVector_f13
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
981fa32712334e5ccaabed794f7c53d6
  $wlvl2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   @ GHC.Types.Bool
                   Test.Vector.$s$fShow(,)_$s$fShowVector
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Int
                                                         GHC.Int.Int32
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                   Test.Vector.$fArbitraryVector1
                   Test.Vector.testGeneralSEXPVector_f1
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
cfa7191cf5505b934a3b7f27fce6595e
  $wlvl3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                      GHC.Types.Int)
                   @ GHC.Types.Bool
                   Test.Vector.$s$fShow(,)
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                                                 GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32,
                                                      GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <(Data.Vector.SEXP.Vector
                                                          GHC.Types.Any
                                                          'Foreign.R.Type.Int
                                                          GHC.Int.Int32,
                                                        GHC.Types.Int)
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                                                 GHC.Types.Int)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32,
                                                      GHC.Types.Int)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <(Data.Vector.SEXP.Vector
                                                      GHC.Types.Any
                                                      'Foreign.R.Type.Int
                                                      GHC.Int.Int32,
                                                    GHC.Types.Int)
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.testGeneralSEXPVector25
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(Data.Vector.SEXP.Vector
                                 GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                               GHC.Types.Int)>_R))
                   Test.Vector.testGeneralSEXPVector24
                   Test.Vector.testGeneralSEXPVector_f2
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
d20f833ee58e58db7c5be5a067d3ea2f
  $wlvl4 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> GHC.Types.Int
    -> [(Data.Vector.SEXP.Vector
           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
         GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   (ww1 :: GHC.Types.Int) ->
                 let {
                   z :: [(Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                          GHC.Types.Int)]
                   = case ww1 of ww2 { GHC.Types.I# ww3 ->
                     letrec {
                       go :: [GHC.Types.Int]
                             -> [(Data.Vector.SEXP.Vector
                                    GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                                  GHC.Types.Int)]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [GHC.Types.Int]) ->
                         case ds of wild {
                           []
                           -> GHC.Types.[]
                                @ (Data.Vector.SEXP.Vector
                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                                   GHC.Types.Int)
                           : y ys
                           -> GHC.Types.:
                                @ (Data.Vector.SEXP.Vector
                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                                   GHC.Types.Int)
                                (ww, y)
                                (go ys) }
                     } in
                     go (Test.QuickCheck.Arbitrary.$w$sshrinkIntegral ww3) }
                 } in
                 letrec {
                   go :: [Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32]
                         -> [(Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                              GHC.Types.Int)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Vector.SEXP.Vector
                                 GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Types.:
                            @ (Data.Vector.SEXP.Vector
                                 GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                               GHC.Types.Int)
                            (y, ww1)
                            (go ys) }
                 } in
                 go
                   (GHC.Types.[]
                      @ (Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32))) -}
b3ae0302c926cebebc456dbc81f91ebc
  $wlvl5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Data.Vector.SEXP.Vector
            GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
          GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Test.Vector.$fArbitraryVector_$s$carbitrary
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
3721be106f23fc6482542a7be9dc4cff
  $wlvl6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow(,)_$s$fShowVector
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Int
                                                         GHC.Int.Int32
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                   Test.Vector.$fArbitraryVector1
                   Test.Vector.testGeneralSEXPVector_f3
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
e44730f6f2bc2d02e0562be4d8d2e9be
  $wlvl7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow(,)_$s$fShowVector
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Int
                                                         GHC.Int.Int32
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                   Test.Vector.$fArbitraryVector1
                   Test.Vector.testGeneralSEXPVector_f4
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
cd1ea690bc1e58e93d5bdd383a145164
  $wlvl8 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Int.Int32]
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow[]
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Int.Int32]>_R
                                             ->_R <GHC.Show.Show [GHC.Int.Int32]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[GHC.Int.Int32]
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary [GHC.Int.Int32]>_R
                                             ->_R <GHC.Show.Show [GHC.Int.Int32]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <[GHC.Int.Int32]
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.testGeneralSEXPVector48
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Int.Int32]>_R))
                   Test.Vector.testGeneralSEXPVector47
                   Test.Vector.testGeneralSEXPVector_f5
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
d8eabac3607aadd5ef6f2cf5e6804e96
  $wlvl9 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Data.Vector.SEXP.Vector
                        GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                   @ Test.QuickCheck.Property.Result
                   Test.Vector.$s$fShow(,)_$s$fShowVector
                   Test.QuickCheck.Property.$fTestableResult_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Result>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <Data.Vector.SEXP.Vector
                                                         GHC.Types.Any
                                                         'Foreign.R.Type.Int
                                                         GHC.Int.Int32
                                                       -> Test.QuickCheck.Property.Result>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (Data.Vector.SEXP.Vector
                                                   GHC.Types.Any
                                                   'Foreign.R.Type.Int
                                                   GHC.Int.Int32)>_R
                                             ->_R <GHC.Show.Show
                                                     (Data.Vector.SEXP.Vector
                                                        GHC.Types.Any
                                                        'Foreign.R.Type.Int
                                                        GHC.Int.Int32)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     Test.QuickCheck.Property.Result>_R
                                             ->_R <Data.Vector.SEXP.Vector
                                                     GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                                   -> Test.QuickCheck.Property.Result>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.Vector.$fArbitraryVector_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Data.Vector.SEXP.Vector
                                GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32>_R))
                   Test.Vector.$fArbitraryVector1
                   Test.Vector.testGeneralSEXPVector_f6
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
ad0889efafc39e65631410449f55e254
  $wr ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
9e57206a71f31f0f322c0d75bf556c74
  $wtestGeneralSEXPVector ::
    (GHC.Show.Show a, Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a
    -> (# Test.Tasty.Core.TestName, [Test.Tasty.Core.TestTree] #)
  {- Arity: 5,
     Strictness: <L,U(A,A,U)><L,U(C(C1(U)),C(U))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,U(1*U(C(C1(U)),A),A,C(C1(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: GHC.Show.Show a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w2 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w3 :: Data.AEq.AEq a)
                   (w4 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 (# Test.Vector.testGeneralSEXPVector59,
                    (GHC.Types.:
                       @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                       (Test.Vector.$wtestIdentity @ a @ s @ ty w w1 w2 w3 w4)
                         `cast`
                       (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                       (GHC.Types.:
                          @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                          (Test.Vector.$wtestPolymorphicFunctions @ a @ s @ ty w w1 w2 w3 w4)
                            `cast`
                          (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                          (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))))
                      `cast`
                    ([Sub (GHC.Exts.D:R:Item[][0]
                               <Test.Tasty.Core.TestTree>_N)])_R #) }) -}
851c454864e96fb875c999113211786a
  $wtestIdentity ::
    (GHC.Show.Show a, Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a -> Test.Tasty.Core.TestTree
  {- Arity: 4,
     Strictness: <L,U(A,A,U)><L,U(C(C1(U)),C(U))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,U(A,A,C(C1(U)))>,
     Inline: [0] -}
0ed421af9755de1679a0c179c92d0526
  $wtestPolymorphicFunctions ::
    (GHC.Show.Show a, Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a -> Test.Tasty.Core.TestTree
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C1(U)))><L,U(C(C1(U)),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,1*U(1*U(C(C1(U)),A),A,A)>,
     Inline: [0] -}
495435778ed08e33a5d113487e193a44
  fromListLength :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Test.Vector.fromListLength7
                   Test.Vector.fromListLength1
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
46b662d2e54b2045be8363bc74e15048
  fromListLength1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# s of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             Test.Vector.fromListLength6
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ ()
                             Test.Vector.fromListLength4
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, GHC.Types.[] @ GHC.Types.Char #) }
                   1#
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             Test.Vector.fromListLength2
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } } } }) -}
6fc24f446d68b22429fc16cfa22bcda6
  fromListLength2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.Prim.maskUninterruptible#
                   @ ()
                   Test.Vector.fromListLength3) -}
6da1bed53924b7873b5d9bb86c977a75
  fromListLength3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case Test.Vector.$wr s1 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild { () -> ds3 } }) -}
00dd2e79fb4de249f5c1a2e83585d732
  fromListLength4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        Language.R.Instance.runRegion3
                        s1 of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.catch#
                        @ ()
                        @ GHC.Exception.SomeException
                        Test.Vector.fromListLength5
                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Types.Int
                                ipv3
                                s2 of ds3 { (#,#) ipv4 ipv5 ->
                         case ipv5 of wild { GHC.Types.I# x# ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld #)}
                                (GHC.Prim.narrow32Int# x#)
                                ipv4 of wild1 { Unit# ds4 ->
                         GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 ds4 } } })
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv3
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 case ipv8 of wild { GHC.Types.I# x# ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        (GHC.Prim.narrow32Int# x#)
                        ipv7 of wild1 { Unit# ds5 ->
                 (# ds5, ipv5 #) } } } } }) -}
4555a72499f227be61f76fedfccc0462
  fromListLength5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.Prim.unmaskAsyncExceptions#
                   @ ()
                   Test.Vector.fromListLength3) -}
1be8f92ef5d12add32f704fea845ff17
  fromListLength6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.Prim.maskAsyncExceptions#
                   @ ()
                   Test.Vector.fromListLength3) -}
8e52a5fef6f5f42fca00f80b292aaf64
  fromListLength7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.fromListLength8) -}
3dad6b83a113ade9a57fcc73e319e9bc
  fromListLength8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fromList should have correct length"#) -}
cac49d91b0137afb9bc697443e47250e
  testGeneralSEXPVector ::
    (GHC.Classes.Eq a, GHC.Show.Show a,
     Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a -> Test.Tasty.Core.TestTree
  {- Arity: 6,
     Strictness: <L,A><L,U(A,A,U)><L,U(C(C1(U)),C(U))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,U(U(C(C1(U)),A),A,C(C1(U)))><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w3 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w4 :: Data.AEq.AEq a)
                   (w5 :: Data.Vector.SEXP.Vector s ty a) ->
                 case Test.Vector.$wtestGeneralSEXPVector
                        @ a
                        @ s
                        @ ty
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 Test.Tasty.Core.TestGroup ww1 ww2 }) -}
aa1e3a23e7e72556cf2d1447edf91abf
  testGeneralSEXPVector1 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testGeneralSEXPVector39
                   Test.Vector.testGeneralSEXPVector2
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
87376efe2062dc92f33387dd00846d92
  testGeneralSEXPVector10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("./Data/Vector/Generic.hs"#) -}
a94bfb06155a9d6b3abc27769e1e8c9c
  testGeneralSEXPVector11 ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Addr# -> GHC.Int.Int32
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
9456e11a5297f9c85735538ea5d56fd5
  testGeneralSEXPVector12 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
4e74a39b40e1b47090f057b3669fca48
  testGeneralSEXPVector13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector14) -}
5ccfbb8b668fb5570327027845c64f5d
  testGeneralSEXPVector14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop_last"#) -}
978eb7379dc3baa61defb434c5424080
  testGeneralSEXPVector15 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector19
                   Test.Vector.testGeneralSEXPVector16
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Int
                                                               GHC.Int.Int32
                                                             -> GHC.Types.Bool>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Int
                                                                        GHC.Int.Int32
                                                                      -> GHC.Types.Bool>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                        -> GHC.Types.Bool>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
f9738badb5e9bdc0f73cd16fdf91da5d
  testGeneralSEXPVector16 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl2 ww1 ww2 ww3 ww4 w1 }) -}
66d441877ef93c67ca98d358c2d97436
  testGeneralSEXPVector17 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
ce497d400cc3818c12fd18122e74d3ad
  testGeneralSEXPVector18 :: GHC.Prim.Int# -> GHC.Int.Int32
  {- Arity: 1, Strictness: <B,U>x -}
4c64d1bbe058ffb9c90d24bff98c5de3
  testGeneralSEXPVector19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector20) -}
066736c0fcdec648780d73be5f100176
  testGeneralSEXPVector2 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector35
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector3) -}
45649993ee2bf5a18312f813b9046879
  testGeneralSEXPVector20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop_head"#) -}
ca1a718562f94602ca485dbef77484a2
  testGeneralSEXPVector21 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector26
                   Test.Vector.testGeneralSEXPVector22
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32,
                                                           GHC.Types.Int)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32,
                                                                GHC.Types.Int)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R <(Data.Vector.SEXP.Vector
                                                                GHC.Types.Any
                                                                'Foreign.R.Type.Int
                                                                GHC.Int.Int32,
                                                              GHC.Types.Int)
                                                             -> GHC.Types.Bool>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32,
                                                           GHC.Types.Int)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32,
                                                                GHC.Types.Int)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <(Data.Vector.SEXP.Vector
                                                                         GHC.Types.Any
                                                                         'Foreign.R.Type.Int
                                                                         GHC.Int.Int32,
                                                                       GHC.Types.Int)
                                                                      -> GHC.Types.Bool>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <(Data.Vector.SEXP.Vector
                                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                                         GHC.Types.Int)
                                        -> GHC.Types.Bool>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
277de2bc11ead25629ba2f86b98c591c
  testGeneralSEXPVector22 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl3 ww1 ww2 ww3 ww4 w1 }) -}
0df73f2ad628ac16225b3d538b84ff83
  testGeneralSEXPVector23 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
d483eeeb69b047140d5c9f7a5fe25094
  testGeneralSEXPVector24 ::
    (Data.Vector.SEXP.Vector
       GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
     GHC.Types.Int)
    -> [(Data.Vector.SEXP.Vector
           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
         GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                          GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 -> Test.Vector.$wlvl4 ww1 ww2 }) -}
7e530f83343ebe7cc983ea2209ed3a27
  testGeneralSEXPVector25 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (Data.Vector.SEXP.Vector
          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
        GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Test.Vector.$wlvl5
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
ea4baf60a8618854d5dfb9594aceed1a
  testGeneralSEXPVector26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector27) -}
ce518e77e27c5c1863f67357262a07bc
  testGeneralSEXPVector27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop_index"#) -}
675616ccc08b6792a98e0b504109c522
  testGeneralSEXPVector28 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector33
                   Test.Vector.testGeneralSEXPVector29
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Int
                                                               GHC.Int.Int32
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Int
                                                                        GHC.Int.Int32
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                        -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
9d9b51e6d8c026a4091c976d460240de
  testGeneralSEXPVector29 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl6 ww1 ww2 ww3 ww4 w1 }) -}
9e81c7fa90635cad1dbdbf931987d026
  testGeneralSEXPVector3 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector28
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector4) -}
82b4e255b810148bbd257af8406d12b7
  testGeneralSEXPVector30 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \>>>>>>>>>>>>>> should be almost equal to\n"#) -}
292e64e643f1de3dfcc45c817c217f52
  testGeneralSEXPVector31 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \>>>>>>>>>>>>>> The value\n"#) -}
a73d69c0fbd3954fa7a9c586bfc1898a
  testGeneralSEXPVector32 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
8fdaacfb28eb4aa6440fa19b0035e5f0
  testGeneralSEXPVector33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector34) -}
6d115528f684609463b0db617ae1d18b
  testGeneralSEXPVector34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop_null"#) -}
96b503d5344acce42d8b580bc48c8f59
  testGeneralSEXPVector35 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector37
                   Test.Vector.testGeneralSEXPVector36
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Int
                                                               GHC.Int.Int32
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Int
                                                                        GHC.Int.Int32
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                        -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
08f0134decb048015aba180b054bb2d0
  testGeneralSEXPVector36 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl7 ww1 ww2 ww3 ww4 w1 }) -}
c5f4274f12a62b995f809650d9a2991d
  testGeneralSEXPVector37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector38) -}
892225656c310139bf7df0a3f56a7d24
  testGeneralSEXPVector38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop_length"#) -}
ea4f701013c21446ab64e65457e49549
  testGeneralSEXPVector39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector40) -}
7b3e3b914ebedf1ed733648dee893917
  testGeneralSEXPVector4 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector21
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector5) -}
1404855af51f827bafd96b42da947712
  testGeneralSEXPVector40 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Polymorphic functions."#) -}
7b185a459e96612ac02e7f3f90a78348
  testGeneralSEXPVector41 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testGeneralSEXPVector57
                   Test.Vector.testGeneralSEXPVector42
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
4b59b9d3459e45609b40d1baab442d38
  testGeneralSEXPVector42 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector51
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector43) -}
9e45fc49a331fee25d09009529294516
  testGeneralSEXPVector43 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector44
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
081a44b841f631950c0befbfa248fb37
  testGeneralSEXPVector44 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector49
                   Test.Vector.testGeneralSEXPVector45
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          [GHC.Int.Int32]>_R
                                                       ->_R <GHC.Show.Show [GHC.Int.Int32]>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <[GHC.Int.Int32]
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          [GHC.Int.Int32]>_R
                                                       ->_R <GHC.Show.Show [GHC.Int.Int32]>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <[GHC.Int.Int32]
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <[GHC.Int.Int32] -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
f0f53e43352c714173478eeaa7e414ce
  testGeneralSEXPVector45 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl8 ww1 ww2 ww3 ww4 w1 }) -}
ba5d858212c3f05a53c6560e63c2beed
  testGeneralSEXPVector46 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
64ab34a7ed50dd11354cc36874b9cc09
  testGeneralSEXPVector47 :: [GHC.Int.Int32] -> [[GHC.Int.Int32]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Int.Int32]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Int.Int32
                   Test.QuickCheck.Arbitrary.shrinkIntegral_$sshrinkIntegral3
                   eta) -}
77952323a90ebdc2d2271e8feb4ea379
  testGeneralSEXPVector48 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Int.Int32]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Int.Int32
                   Test.QuickCheck.Arbitrary.$fArbitraryBounds_$sarbitrarySizedBoundedIntegral6
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Int.Int32>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
58b3f2907c142ba706e09d4ba8a5ee5b
  testGeneralSEXPVector49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector50) -}
107ffb10df05cae5a3993988c26c51b3
  testGeneralSEXPVector5 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector15
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector6) -}
251fffa25b1ecf04e1a721fcadfbe08c
  testGeneralSEXPVector50 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toList.fromList == id"#) -}
c09649cb8083ff830daf870219e6dfbd
  testGeneralSEXPVector51 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector55
                   Test.Vector.testGeneralSEXPVector52
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Int
                                                               GHC.Int.Int32
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Int
                                                                        GHC.Int.Int32
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                        -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
69e62dcac752ad40b90fb13ad7b4b81d
  testGeneralSEXPVector52 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl9 ww1 ww2 ww3 ww4 w1 }) -}
8be848a61f75f0356952da23c8c40ff6
  testGeneralSEXPVector53 ::
    (Foreign.Storable.Storable GHC.Int.Int32,
     (Data.Singletons.SingI 'Foreign.R.Type.Int,
      'Foreign.R.Type.Int
      Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                 'Foreign.R.Type.Logical, 'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                 'Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                 'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                 'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]),
     Data.Singletons.SingI 'Foreign.R.Type.Int,
     (Data.Vector.SEXP.Base.ElemRep
        GHC.Types.Any 'Foreign.R.Type.Int :: *)
     Data.Type.Equality.~
     (GHC.Int.Int32 :: *))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.Storable.$fStorableInt32,
                  Test.Vector.testGeneralSEXPVector54,
                  Foreign.R.Type.$fSingISEXPTYPEInt1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                  Test.Vector.testGeneralSEXPVector_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Data.Vector.SEXP.Base.ElemRep
                                      GHC.Types.Any 'Foreign.R.Type.Int>_N <GHC.Int.Int32>_N))) -}
f64e6a501e0c1acb28d11e56c286a658
  testGeneralSEXPVector54 ::
    (Data.Singletons.SingI 'Foreign.R.Type.Int,
     'Foreign.R.Type.Int
     Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                'Foreign.R.Type.Logical, 'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                'Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Foreign.R.Type.$fSingISEXPTYPEInt1
                    `cast`
                  (Trans
                       (Sym (Foreign.R.Type.D:R:SingSEXPTYPEz0[0]))
                       (Sym (Data.Singletons.N:SingI[0]) <Foreign.R.Type.SEXPTYPE>_N) <'Foreign.R.Type.Int>_N),
                  GHC.Classes.C:(%%)
                    `cast`
                  (Trans
                       (Sub (Sym (Foreign.R.Constraints.D:R::∈[1]
                                      <'Foreign.R.Type.Int>_N
                                      <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                         'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                         'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                         'Foreign.R.Type.Raw]>_N)))
                       (Trans
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[2]
                                           <'Foreign.R.Type.Int>_N
                                           <'Foreign.R.Type.Logical>_N
                                           <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                              'Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                              'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                              'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N)))
                            (Sub (Sym (Foreign.R.Constraints.D:R::∈[2]
                                           <'Foreign.R.Type.Int>_N
                                           <'Foreign.R.Type.Char>_N
                                           <'['Foreign.R.Type.Logical, 'Foreign.R.Type.Int,
                                              'Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                              'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                              'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                              'Foreign.R.Type.Raw]>_N))))))) -}
4fe39fdfe631fff325d3ba441a2127a9
  testGeneralSEXPVector55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector56) -}
b3b3c35d03cd29ba6133a0bb4fdd27bb
  testGeneralSEXPVector56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fromList.toList == id"#) -}
287bd23abb7dc51d05640c584e6189d2
  testGeneralSEXPVector57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector58) -}
60a1133b18fca1665ed1828b954ec3a3
  testGeneralSEXPVector58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test identities"#) -}
d8c5fad1ad661c86f4cade350806bc7e
  testGeneralSEXPVector59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testGeneralSEXPVector60) -}
3ab56c9ae8a1310c2b5450f074dda038
  testGeneralSEXPVector6 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector7
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
a81ba7e0432e08ffebc6a7167819b533
  testGeneralSEXPVector60 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("General Vector"#) -}
7671e51e341438b8bab01024e1cc3a4d
  testGeneralSEXPVector61 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testGeneralSEXPVector39
                   Test.Vector.testGeneralSEXPVector62
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
49dea48230241e084ac465a329415756
  testGeneralSEXPVector62 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector79
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector63) -}
c3ed1615755a91a8cbe0143d37687cba
  testGeneralSEXPVector63 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector77
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector64) -}
3a9be73bb2942f2cc99a0c185d319fdb
  testGeneralSEXPVector64 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector73
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector65) -}
b0aab91a1728faccd952bf3b0e191520
  testGeneralSEXPVector65 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector70
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector66) -}
d0893ee4488de799105929051dd11292
  testGeneralSEXPVector66 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector67
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
a44bfe7ae1092a46dc890bfd90905e4e
  testGeneralSEXPVector67 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector13
                   Test.Vector.testGeneralSEXPVector68
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Double
                                                             -> GHC.Types.Bool>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real
                                                                        GHC.Types.Double
                                                                      -> GHC.Types.Bool>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
                                        -> GHC.Types.Bool>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
79f2192b9a94396f4f3f894297e8fda3
  testGeneralSEXPVector68 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl10 ww1 ww2 ww3 ww4 w1 }) -}
2aa333d9456d8295ccb989ae2939f4f1
  testGeneralSEXPVector69 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Addr# -> GHC.Types.Double
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
4f301ce3a1023bbfdf8a8061356f8582
  testGeneralSEXPVector7 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector13
                   Test.Vector.testGeneralSEXPVector8
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Int
                                                               GHC.Int.Int32
                                                             -> GHC.Types.Bool>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Int
                                                             GHC.Int.Int32)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Int
                                                                  GHC.Int.Int32)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Int
                                                                        GHC.Int.Int32
                                                                      -> GHC.Types.Bool>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
                                        -> GHC.Types.Bool>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
9d75576e71218387793f8db126d2fe75
  testGeneralSEXPVector70 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector19
                   Test.Vector.testGeneralSEXPVector71
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Double
                                                             -> GHC.Types.Bool>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real
                                                                        GHC.Types.Double
                                                                      -> GHC.Types.Bool>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
                                        -> GHC.Types.Bool>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
c6ad39a634fa5aff05fada90825a109e
  testGeneralSEXPVector71 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl11 ww1 ww2 ww3 ww4 w1 }) -}
4cae596cf60c17e294e7196fef68e715
  testGeneralSEXPVector72 :: GHC.Prim.Int# -> GHC.Types.Double
  {- Arity: 1, Strictness: <B,U>x -}
ff8c43d89f17363fd7e8a0a029c3a917
  testGeneralSEXPVector73 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector26
                   Test.Vector.testGeneralSEXPVector74
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double,
                                                           GHC.Types.Int)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double,
                                                                GHC.Types.Int)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R <(Data.Vector.SEXP.Vector
                                                                GHC.Types.Any
                                                                'Foreign.R.Type.Real
                                                                GHC.Types.Double,
                                                              GHC.Types.Int)
                                                             -> GHC.Types.Bool>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double,
                                                           GHC.Types.Int)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double,
                                                                GHC.Types.Int)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               GHC.Types.Bool>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <(Data.Vector.SEXP.Vector
                                                                         GHC.Types.Any
                                                                         'Foreign.R.Type.Real
                                                                         GHC.Types.Double,
                                                                       GHC.Types.Int)
                                                                      -> GHC.Types.Bool>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <(Data.Vector.SEXP.Vector
                                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                                         GHC.Types.Int)
                                        -> GHC.Types.Bool>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
130357ff0b0e6f9402b97a54743b36b7
  testGeneralSEXPVector74 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl12 ww1 ww2 ww3 ww4 w1 }) -}
0c5f13815605e9e1e2307dd9601b4046
  testGeneralSEXPVector75 ::
    (Data.Vector.SEXP.Vector
       GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
     GHC.Types.Int)
    -> [(Data.Vector.SEXP.Vector
           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
         GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                          GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 -> Test.Vector.$wlvl13 ww1 ww2 }) -}
df67252b2ee632a09e006421d42930d0
  testGeneralSEXPVector76 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (Data.Vector.SEXP.Vector
          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
        GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Test.Vector.$wlvl14
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
26c691e77a4d8dba4dab0648168be648
  testGeneralSEXPVector77 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector33
                   Test.Vector.testGeneralSEXPVector78
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Double
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real
                                                                        GHC.Types.Double
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
                                        -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
03d3a80538a0cfd65e6394be8c94d90a
  testGeneralSEXPVector78 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl15 ww1 ww2 ww3 ww4 w1 }) -}
3202816e7fb26767e1c84ff17648667a
  testGeneralSEXPVector79 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector37
                   Test.Vector.testGeneralSEXPVector80
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Double
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real
                                                                        GHC.Types.Double
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
                                        -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
a46e16e1087506538ae30f276fe2ff4b
  testGeneralSEXPVector8 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl1 ww1 ww2 ww3 ww4 w1 }) -}
b22f7e5a428bb0381e86c14be657ae5a
  testGeneralSEXPVector80 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl16 ww1 ww2 ww3 ww4 w1 }) -}
c5d41cd5be9d71da32f5b1e1617119f6
  testGeneralSEXPVector81 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testGeneralSEXPVector57
                   Test.Vector.testGeneralSEXPVector82
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
98c7779d73f8c79fa0634bc14e686b25
  testGeneralSEXPVector82 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector88
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.testGeneralSEXPVector83) -}
422ef1a43ad9637a0c2f350a591b4f17
  testGeneralSEXPVector83 ::
    [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector84
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
3be62e5bb5c36ea611a205235fc159ff
  testGeneralSEXPVector84 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector49
                   Test.Vector.testGeneralSEXPVector85
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          [GHC.Types.Double]>_R
                                                       ->_R <GHC.Show.Show [GHC.Types.Double]>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <[GHC.Types.Double]
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          [GHC.Types.Double]>_R
                                                       ->_R <GHC.Show.Show [GHC.Types.Double]>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <[GHC.Types.Double]
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <[GHC.Types.Double] -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
3fa65aa0d1efc8a9c2699c3ddc4cee21
  testGeneralSEXPVector85 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl17 ww1 ww2 ww3 ww4 w1 }) -}
6ef9c333a6aed91efb5a0611ca8a84e0
  testGeneralSEXPVector86 ::
    [GHC.Types.Double] -> [[GHC.Types.Double]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Double]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Double
                   Test.QuickCheck.Arbitrary.$fArbitraryDouble_$sshrinkRealFrac
                   eta) -}
80e0e17da679104231a8b96425440b83
  testGeneralSEXPVector87 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Double]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Double
                   Test.QuickCheck.Arbitrary.$fArbitraryDouble_$sarbitrarySizedFractional
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Double>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
51438f1dc59bc7cb9de043b950230be4
  testGeneralSEXPVector88 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Test.Vector.testGeneralSEXPVector55
                   Test.Vector.testGeneralSEXPVector89
                     `cast`
                   (Trans
                        (Nth:3
                             (Trans
                                  (Nth:3
                                       (Nth:3
                                            (Nth:3
                                                 (Trans
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R <Data.Vector.SEXP.Vector
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Real
                                                               GHC.Types.Double
                                                             -> Test.QuickCheck.Property.Result>_R
                                                       ->_R Trans
                                                                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                          (Test.QuickCheck.Property.N:Prop[0])))
                                                                (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                      (<Test.QuickCheck.Arbitrary.Arbitrary
                                                          (Data.Vector.SEXP.Vector
                                                             GHC.Types.Any
                                                             'Foreign.R.Type.Real
                                                             GHC.Types.Double)>_R
                                                       ->_R <GHC.Show.Show
                                                               (Data.Vector.SEXP.Vector
                                                                  GHC.Types.Any
                                                                  'Foreign.R.Type.Real
                                                                  GHC.Types.Double)>_R
                                                       ->_R <Test.QuickCheck.Property.Testable
                                                               Test.QuickCheck.Property.Result>_R
                                                       ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                     <Data.Vector.SEXP.Vector
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real
                                                                        GHC.Types.Double
                                                                      -> Test.QuickCheck.Property.Result>_N))))))
                                  (Test.QuickCheck.Property.N:Testable[0]
                                       <Data.Vector.SEXP.Vector
                                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
                                        -> Test.QuickCheck.Property.Result>_N)))
                        (Sym (Test.Tasty.QuickCheck.N:QC[0])))) -}
4f74ebc45d498d88dfc37cd5a7271220
  testGeneralSEXPVector89 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.Vector.$wlvl18 ww1 ww2 ww3 ww4 w1 }) -}
408fa31de5c03208a040254551c61dce
  testGeneralSEXPVector9 ::
    GHC.Types.Any
    -> forall (ty1 :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty1
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP GHC.Types.Any ty1 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Any)
                   @ ty1 :: Foreign.R.Type.SEXPTYPE
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty1)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty1>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty1, Foreign.R.Internal.SEXPREC>)_R) of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds2
                        eta1 of wild { Unit# ds3 ->
                 (# ds3,
                    ds1
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp
                                                           GHC.Types.Any ty1>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0]
                                   <GHC.Types.Any>_P <ty1>_P))) #) } }) -}
a0d3a595535f5f9bcd0b3ff3879fa94d
  testGeneralSEXPVector_$d~~ ::
    (Data.Vector.SEXP.Base.ElemRep
       GHC.Types.Any 'Foreign.R.Type.Int :: *)
    GHC.Types.~~
    (GHC.Int.Int32 :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ (Data.Vector.SEXP.Base.ElemRep GHC.Types.Any 'Foreign.R.Type.Int)
                   @ GHC.Int.Int32
                   @~ (Data.Vector.SEXP.Base.D:R:ElemRep[2] <GHC.Types.Any>_N)) -}
e4c30ea5191935c3b2a2778da88e3537
  testGeneralSEXPVector_f ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Test.Vector.$wf ww1 ww2 ww3 ww4 }) -}
384a84c794d46c7662ca1aca687602c3
  testGeneralSEXPVector_f1 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Test.Vector.$wf1 ww1 ww2 ww3 ww4 }) -}
65b3ca943452b30c428c34fdfb120d52
  testGeneralSEXPVector_f10 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case Test.Vector.$wf10
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,,,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Test.QuickCheck.Property.MkResult
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } }) -}
778e0e7b20a91d8082cc5b410bcd5dbc
  testGeneralSEXPVector_f11 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case Test.Vector.$wf11
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,,,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Test.QuickCheck.Property.MkResult
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } }) -}
ecacd18f445f24d5d328be1ad8031452
  testGeneralSEXPVector_f12 ::
    [GHC.Types.Double] -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Double]) ->
                 case Test.Vector.$wf12
                        w of ww { (#,,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Test.QuickCheck.Property.MkResult
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10 }) -}
45d0f548187c394968a73f70dfdf9d17
  testGeneralSEXPVector_f13 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case Test.Vector.$wf13
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,,,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Test.QuickCheck.Property.MkResult
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } }) -}
dc9e9f3e5d58f4cf3c78afac6893c08b
  testGeneralSEXPVector_f2 ::
    (Data.Vector.SEXP.Vector
       GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
     GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S(SLSS)L),1*U(1*U(U,U,U,U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32,
                          GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Data.Vector.SEXP.Vector ww4 ww5 ww6 ww7 ->
                 Test.Vector.$wf2 ww4 ww5 ww6 ww7 ww2 } }) -}
fdc48773641a98e4765f37b8e647fc24
  testGeneralSEXPVector_f3 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case Test.Vector.$wf3
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,,,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Test.QuickCheck.Property.MkResult
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } }) -}
f573e45ede1d92eb4fe89499bec45cea
  testGeneralSEXPVector_f4 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case Test.Vector.$wf4
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,,,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Test.QuickCheck.Property.MkResult
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } }) -}
2c7a2d7197b9fee81111c2e0167570aa
  testGeneralSEXPVector_f5 ::
    [GHC.Int.Int32] -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Int.Int32]) ->
                 case Test.Vector.$wf5
                        w of ww { (#,,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Test.QuickCheck.Property.MkResult
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10 }) -}
ee3d026a3a3ac8498b869fe9e4984977
  testGeneralSEXPVector_f6 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32
    -> Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case Test.Vector.$wf6
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,,,,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Test.QuickCheck.Property.MkResult
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } }) -}
36d10d9ace736d4fb5496cf8f50990e3
  testGeneralSEXPVector_f7 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Test.Vector.$wf7 ww1 ww2 ww3 ww4 }) -}
213d900617f8f3f230eb3f38fa5ccc9e
  testGeneralSEXPVector_f8 ::
    Data.Vector.SEXP.Vector
      GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.SEXP.Vector
                           GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Test.Vector.$wf8 ww1 ww2 ww3 ww4 }) -}
bdff124aa0d93ad8dea921b322bb7564
  testGeneralSEXPVector_f9 ::
    (Data.Vector.SEXP.Vector
       GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
     GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S(SLSS)L),1*U(1*U(U,U,U,U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Vector.SEXP.Vector
                            GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double,
                          GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Data.Vector.SEXP.Vector ww4 ww5 ww6 ww7 ->
                 Test.Vector.$wf9 ww4 ww5 ww6 ww7 ww2 } }) -}
95e10301dba58d3f96c6ff1e197e6a07
  testIdentity ::
    (GHC.Classes.Eq a, GHC.Show.Show a,
     Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a -> Test.Tasty.Core.TestTree
  {- Arity: 5,
     Strictness: <L,A><L,U(A,A,U)><L,U(C(C1(U)),C(U))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,U(A,A,C(C1(U)))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w3 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w4 :: Data.AEq.AEq a) ->
                 Test.Vector.$wtestIdentity @ a @ s @ ty w1 w2 w3 w4) -}
93a8c9f4442548ae40a17d26613fd651
  testNumericSEXPVector ::
    (GHC.Classes.Eq a, GHC.Show.Show a,
     Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a -> Test.Tasty.Core.TestTree
  {- Arity: 6,
     Strictness: <L,A><L,U(A,A,U)><L,U(C(C1(U)),C(U))><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,U(U(C(C1(U)),A),A,C(C1(U)))><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w3 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w4 :: Data.AEq.AEq a)
                   (w5 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ ((Data.Vector.SEXP.Base.ElemRep s ty :: *)
                              Data.Type.Equality.~
                              (a :: *))
                           w3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox { DEFAULT ->
                 Test.Tasty.Core.TestGroup
                   Test.Vector.testNumericSEXPVector1
                   (GHC.Types.:
                      @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                      (case Test.Vector.$wtestGeneralSEXPVector
                              @ a
                              @ s
                              @ ty
                              w1
                              w2
                              w3
                              w4
                              w5 of ww { (#,#) ww1 ww2 ->
                       (Test.Tasty.Core.TestGroup ww1 ww2)
                         `cast`
                       (Sub (Sym (GHC.Exts.D:R:Item[][0]
                                      <Test.Tasty.Core.TestTree>_N))) })
                      (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])))
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0]
                              <Test.Tasty.Core.TestTree>_N)])_R }) -}
8c66e32293ed83bad57cfc7c3b70a67d
  testNumericSEXPVector1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.testNumericSEXPVector2) -}
96da462cfe454a19b60169e2e57a1a41
  testNumericSEXPVector2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test Numeric Vector"#) -}
e9429ab9beca62f7bc56e70413e7b96f
  testPolymorphicFunctions ::
    (GHC.Classes.Eq a, GHC.Show.Show a,
     Test.QuickCheck.Arbitrary.Arbitrary a,
     Data.Vector.SEXP.Base.VECTOR s ty a, Data.AEq.AEq a) =>
    Data.Vector.SEXP.Vector s ty a -> Test.Tasty.Core.TestTree
  {- Arity: 5,
     Strictness: <L,A><L,U(A,A,C(C1(U)))><L,U(C(C1(U)),A)><S(LLLS(S)),U(U(C(U(U)),A,C(C1(C1(U(A,1*U)))),C(C1(C1(C1(U(U,A))))),A,A,A,A),U(U,A),A,U(U))><L,1*U(1*U(C(C1(U)),A),A,A)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ s
                   @ ty :: Foreign.R.Type.SEXPTYPE
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w3 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w4 :: Data.AEq.AEq a) ->
                 Test.Vector.$wtestPolymorphicFunctions @ a @ s @ ty w1 w2 w3 w4) -}
3b78633a87ef01f35baa4aa8d436f2d7
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.tests28
                   Test.Vector.tests1
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
fe0fd6a892587ac09c346729958ecb7c
  tests1 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests19
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.tests2) -}
b961ab580b8f257725efa23392a3e3ed
  tests10 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.tests17
                   Test.Vector.tests11
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
2f2d3c0fba173715a62990c3abec4fa1
  tests11 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests12
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
f74733df63d132d476999ef328538683
  tests12 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testNumericSEXPVector1
                   Test.Vector.tests13
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
2fd275ef185ce614367ba1ecf7c75c4a
  tests13 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests14
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
ef5f4d77ae00306322f2284454b55d19
  tests14 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testGeneralSEXPVector59
                   Test.Vector.tests15
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
f0b8cb4b1d8544b23fdd3f14ff798864
  tests15 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector81
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.tests16) -}
e9a4d2eb0afccd63b6429a427732b3cc
  tests16 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector61
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
a0ae6889ba99da93e721c3254796f766
  tests17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.Vector.tests18) -}
aa467bceaefe829f41b8ce1c157feb15
  tests18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Data.Vector.Storable.Vector (Double)"#) -}
18a25c65f2aabf559e827e52152e6251
  tests19 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.tests26
                   Test.Vector.tests20
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
e35ba4e227d11d96114b1ab378defeca
  tests2 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests10
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.tests3) -}
ba4323053f6aacbdc12a54506e0d7b6f
  tests20 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests21
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
9d578578ef9ba04dc356d99922a2d9fc
  tests21 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testNumericSEXPVector1
                   Test.Vector.tests22
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
5a9f2fe27fd84a15b01553f81435bbab
  tests22 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests23
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
f91911cc558852279211dbe438638f21
  tests23 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.testGeneralSEXPVector59
                   Test.Vector.tests24
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
770b4eb344c4495012cb5d92b70e9be6
  tests24 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector41
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.tests25) -}
b0988dd52b0e9bed1aa1b242ca4d333f
  tests25 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.testGeneralSEXPVector1
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
f2844caf7ca5751b9a0bc9bf2f8982d5
  tests26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.Vector.tests27) -}
3b9ae060be3da967352957378f1158b3
  tests27 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Data.Vector.Storable.Vector (Int32)"#) -}
af2ddcab11135ba620e2e88715213188
  tests28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.Vector.tests29) -}
916b0540a2bf7af1f34b4678b253cc29
  tests29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tests."#) -}
89acac9d1469c28aebbc3db1d87c90e2
  tests3 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.tests4
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
c49dca3696036474efe2a11ea5720b00
  tests4 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Test.Vector.tests8
                   Test.Vector.tests5
                     `cast`
                   ([Sub (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)])_R) -}
1fa3bb095ba5c8f3833599c81711319f
  tests5 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.fromListLength
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.tests6) -}
d981e4c64dbc44bbbc895e554496460b
  tests6 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.vectorIsImmutable
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   Test.Vector.tests7) -}
15541b7dc95d7b1fa328caf395e8f7ac
  tests7 :: [GHC.Exts.Item [Test.Tasty.Core.TestTree]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Exts.Item [Test.Tasty.Core.TestTree])
                   Test.Vector.vectorCopy
                     `cast`
                   (Sub (Sym (GHC.Exts.D:R:Item[][0] <Test.Tasty.Core.TestTree>_N)))
                   (GHC.Types.[] @ (GHC.Exts.Item [Test.Tasty.Core.TestTree]))) -}
c692a27b6119aa0b9e49b35f6f33d9dd
  tests8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Test.Vector.tests9) -}
2b56488bafdb2562116bd3dd0298b757
  tests9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Regression tests"#) -}
b9fd2bd4a8f2b29679a1977022d12218
  vectorCopy :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Test.Vector.vectorCopy4
                   Test.Vector.vectorCopy1
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
6289c12d1279ff570a5d0f7d42d4b57c
  vectorCopy1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# s of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ ()
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case Test.Vector.vectorCopy3
                                        (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                          `cast`
                                        (Trans
                                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                             (Nth:2
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                 <*>_N
                                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                                 <GHC.Types.IO>_R
                                                                 <()>_N))
                                                       (Nth:3
                                                            (Nth:3
                                                                 (Trans
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  ()>_R
                                                                       ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                <*>_N
                                                                                <GHC.IORef.IORef
                                                                                   GHC.Types.Int>_R
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  ()>_R
                                                                       ->_R <GHC.IORef.IORef
                                                                               GHC.Types.Int>_R
                                                                       ->_R GHC.Types.N:IO[0]
                                                                                <()>_R)))))))
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of wild { () -> ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ ()
                             Test.Vector.vectorCopy2
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, GHC.Types.[] @ GHC.Types.Char #) }
                   1#
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ ()
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case Test.Vector.vectorCopy3
                                        (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                          `cast`
                                        (Trans
                                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                             (Nth:2
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                 <*>_N
                                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                                 <GHC.Types.IO>_R
                                                                 <()>_N))
                                                       (Nth:3
                                                            (Nth:3
                                                                 (Trans
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  ()>_R
                                                                       ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                <*>_N
                                                                                <GHC.IORef.IORef
                                                                                   GHC.Types.Int>_R
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SomeSEXP
                                                                             GHC.Types.Any)>_R
                                                                       ->_R <Foreign.R.Internal.SomeSEXP
                                                                               GHC.Types.Any
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  ()>_R
                                                                       ->_R <GHC.IORef.IORef
                                                                               GHC.Types.Int>_R
                                                                       ->_R GHC.Types.N:IO[0]
                                                                                <()>_R)))))))
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of wild { () -> ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } } } }) -}
77aacbb69baeeb70c0aa23d9abde3647
  vectorCopy2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        Language.R.Instance.runRegion3
                        s1 of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.catch#
                        @ ()
                        @ GHC.Exception.SomeException
                        (GHC.Prim.unmaskAsyncExceptions#
                           @ ()
                           (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Test.Vector.vectorCopy3
                                   (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                     `cast`
                                   (Trans
                                        (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                        (Nth:2
                                             (Trans
                                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                            <*>_N
                                                            <GHC.IORef.IORef GHC.Types.Int>_R
                                                            <GHC.Types.IO>_R
                                                            <()>_N))
                                                  (Nth:3
                                                       (Nth:3
                                                            (Trans
                                                                 (<Control.Monad.Trans.Reader.ReaderT
                                                                     (GHC.IORef.IORef GHC.Types.Int)
                                                                     GHC.Types.IO
                                                                     (Foreign.R.Internal.SomeSEXP
                                                                        GHC.Types.Any)>_R
                                                                  ->_R <Foreign.R.Internal.SomeSEXP
                                                                          GHC.Types.Any
                                                                        -> Control.Monad.Trans.Reader.ReaderT
                                                                             (GHC.IORef.IORef
                                                                                GHC.Types.Int)
                                                                             GHC.Types.IO
                                                                             ()>_R
                                                                  ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                           <*>_N
                                                                           <GHC.IORef.IORef
                                                                              GHC.Types.Int>_R
                                                                           <GHC.Types.IO>_R
                                                                           <()>_N)
                                                                 (<Control.Monad.Trans.Reader.ReaderT
                                                                     (GHC.IORef.IORef GHC.Types.Int)
                                                                     GHC.Types.IO
                                                                     (Foreign.R.Internal.SomeSEXP
                                                                        GHC.Types.Any)>_R
                                                                  ->_R <Foreign.R.Internal.SomeSEXP
                                                                          GHC.Types.Any
                                                                        -> Control.Monad.Trans.Reader.ReaderT
                                                                             (GHC.IORef.IORef
                                                                                GHC.Types.Int)
                                                                             GHC.Types.IO
                                                                             ()>_R
                                                                  ->_R <GHC.IORef.IORef
                                                                          GHC.Types.Int>_R
                                                                  ->_R GHC.Types.N:IO[0]
                                                                           <()>_R)))))))
                                   s2 of ds3 { (#,#) ipv4 ipv5 ->
                            case ipv5 of wild { () -> ds3 } }))
                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Types.Int
                                ipv3
                                s2 of ds3 { (#,#) ipv4 ipv5 ->
                         case ipv5 of wild { GHC.Types.I# x# ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld #)}
                                (GHC.Prim.narrow32Int# x#)
                                ipv4 of wild1 { Unit# ds4 ->
                         GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 ds4 } } })
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv3
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 case ipv8 of wild { GHC.Types.I# x# ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        (GHC.Prim.narrow32Int# x#)
                        ipv7 of wild1 { Unit# ds5 ->
                 (# ds5, ipv5 #) } } } } }) -}
eecfa784daf5da551f1b97aaeb86b09d
  vectorCopy3 ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><L,U> -}
980c4a3a858b75e672808b6061314a23
  vectorCopy4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.vectorCopy5) -}
b296eeac21cfd320f50cee36f2066cc0
  vectorCopy5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Copying vector of doubles works"#) -}
806481769548a804f7fba9055e4cd8e5
  vectorIsImmutable :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Test.Vector.vectorIsImmutable8
                   Test.Vector.vectorIsImmutable1
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
a20af173915b5e1e102949080e68229a
  vectorIsImmutable1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# s of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Double
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ GHC.Types.Double
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case Test.Vector.vectorIsImmutable3
                                        (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                          `cast`
                                        (Trans
                                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                             (Nth:2
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                 <*>_N
                                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                                 <GHC.Types.IO>_R
                                                                 <GHC.Types.Double>_N))
                                                       (Nth:3
                                                            (Nth:3
                                                                 (Trans
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SEXP
                                                                             GHC.Types.Any
                                                                             'Foreign.R.Type.Real)>_R
                                                                       ->_R <Foreign.R.Internal.SEXP
                                                                               GHC.Types.Any
                                                                               'Foreign.R.Type.Real
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                <*>_N
                                                                                <GHC.IORef.IORef
                                                                                   GHC.Types.Int>_R
                                                                                <GHC.Types.IO>_R
                                                                                <GHC.Types.Double>_N)
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SEXP
                                                                             GHC.Types.Any
                                                                             'Foreign.R.Type.Real)>_R
                                                                       ->_R <Foreign.R.Internal.SEXP
                                                                               GHC.Types.Any
                                                                               'Foreign.R.Type.Real
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R <GHC.IORef.IORef
                                                                               GHC.Types.Int>_R
                                                                       ->_R GHC.Types.N:IO[0]
                                                                                <GHC.Types.Double>_R)))))))
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of ds4 { GHC.Types.D# ipv7 -> ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Double
                                e1
                                ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      case ipv5 of wild2 { GHC.Types.D# x9 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x9 1.0##) of wild3 {
                        GHC.Types.False
                        -> case Test.Vector.vectorIsImmutable7 wild2 ds5
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True
                        -> (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ GHC.Types.Double
                             Test.Vector.vectorIsImmutable2
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild { GHC.Types.D# x9 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x9 1.0##) of wild1 {
                        GHC.Types.False
                        -> case Test.Vector.vectorIsImmutable7 wild ipv2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #) } } }
                   1#
                   -> case GHC.Prim.newMutVar#
                             @ GHC.Types.Int
                             @ GHC.Prim.RealWorld
                             Language.R.Instance.runRegion3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Double
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ GHC.Types.Double
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case Test.Vector.vectorIsImmutable3
                                        (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                          `cast`
                                        (Trans
                                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                             (Nth:2
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                 <*>_N
                                                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                                                 <GHC.Types.IO>_R
                                                                 <GHC.Types.Double>_N))
                                                       (Nth:3
                                                            (Nth:3
                                                                 (Trans
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SEXP
                                                                             GHC.Types.Any
                                                                             'Foreign.R.Type.Real)>_R
                                                                       ->_R <Foreign.R.Internal.SEXP
                                                                               GHC.Types.Any
                                                                               'Foreign.R.Type.Real
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                <*>_N
                                                                                <GHC.IORef.IORef
                                                                                   GHC.Types.Int>_R
                                                                                <GHC.Types.IO>_R
                                                                                <GHC.Types.Double>_N)
                                                                      (<Control.Monad.Trans.Reader.ReaderT
                                                                          (GHC.IORef.IORef
                                                                             GHC.Types.Int)
                                                                          GHC.Types.IO
                                                                          (Foreign.R.Internal.SEXP
                                                                             GHC.Types.Any
                                                                             'Foreign.R.Type.Real)>_R
                                                                       ->_R <Foreign.R.Internal.SEXP
                                                                               GHC.Types.Any
                                                                               'Foreign.R.Type.Real
                                                                             -> Control.Monad.Trans.Reader.ReaderT
                                                                                  (GHC.IORef.IORef
                                                                                     GHC.Types.Int)
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.Double>_R
                                                                       ->_R <GHC.IORef.IORef
                                                                               GHC.Types.Int>_R
                                                                       ->_R GHC.Types.N:IO[0]
                                                                                <GHC.Types.Double>_R)))))))
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case ipv5 of ds4 { GHC.Types.D# ipv7 -> ds3 } }))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ipv3
                                     s1 of ds3 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild { GHC.Types.I# x# ->
                              case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                     (GHC.Prim.narrow32Int# x#)
                                     ipv4 of wild1 { Unit# ds4 ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Double
                                e1
                                ds4 } } })
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv3
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild { GHC.Types.I# x# ->
                      case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld #)}
                             (GHC.Prim.narrow32Int# x#)
                             ipv7 of wild1 { Unit# ds5 ->
                      case ipv5 of wild2 { GHC.Types.D# x9 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x9 1.0##) of wild3 {
                        GHC.Types.False
                        -> case Test.Vector.vectorIsImmutable7 wild2 ds5
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True
                        -> (# ds5, GHC.Types.[] @ GHC.Types.Char #) } } } } } } } } }) -}
2f1e970a6ec3c49092910e16134a424a
  vectorIsImmutable2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        Language.R.Instance.runRegion3
                        s1 of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Double
                        @ GHC.Exception.SomeException
                        (GHC.Prim.unmaskAsyncExceptions#
                           @ GHC.Types.Double
                           (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Test.Vector.vectorIsImmutable3
                                   (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                                     `cast`
                                   (Trans
                                        (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                                        (Nth:2
                                             (Trans
                                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                            <*>_N
                                                            <GHC.IORef.IORef GHC.Types.Int>_R
                                                            <GHC.Types.IO>_R
                                                            <GHC.Types.Double>_N))
                                                  (Nth:3
                                                       (Nth:3
                                                            (Trans
                                                                 (<Control.Monad.Trans.Reader.ReaderT
                                                                     (GHC.IORef.IORef GHC.Types.Int)
                                                                     GHC.Types.IO
                                                                     (Foreign.R.Internal.SEXP
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real)>_R
                                                                  ->_R <Foreign.R.Internal.SEXP
                                                                          GHC.Types.Any
                                                                          'Foreign.R.Type.Real
                                                                        -> Control.Monad.Trans.Reader.ReaderT
                                                                             (GHC.IORef.IORef
                                                                                GHC.Types.Int)
                                                                             GHC.Types.IO
                                                                             GHC.Types.Double>_R
                                                                  ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                           <*>_N
                                                                           <GHC.IORef.IORef
                                                                              GHC.Types.Int>_R
                                                                           <GHC.Types.IO>_R
                                                                           <GHC.Types.Double>_N)
                                                                 (<Control.Monad.Trans.Reader.ReaderT
                                                                     (GHC.IORef.IORef GHC.Types.Int)
                                                                     GHC.Types.IO
                                                                     (Foreign.R.Internal.SEXP
                                                                        GHC.Types.Any
                                                                        'Foreign.R.Type.Real)>_R
                                                                  ->_R <Foreign.R.Internal.SEXP
                                                                          GHC.Types.Any
                                                                          'Foreign.R.Type.Real
                                                                        -> Control.Monad.Trans.Reader.ReaderT
                                                                             (GHC.IORef.IORef
                                                                                GHC.Types.Int)
                                                                             GHC.Types.IO
                                                                             GHC.Types.Double>_R
                                                                  ->_R <GHC.IORef.IORef
                                                                          GHC.Types.Int>_R
                                                                  ->_R GHC.Types.N:IO[0]
                                                                           <GHC.Types.Double>_R)))))))
                                   s2 of ds3 { (#,#) ipv4 ipv5 ->
                            case ipv5 of ds1 { GHC.Types.D# ipv -> ds3 } }))
                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Types.Int
                                ipv3
                                s2 of ds3 { (#,#) ipv4 ipv5 ->
                         case ipv5 of wild { GHC.Types.I# x# ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld #)}
                                (GHC.Prim.narrow32Int# x#)
                                ipv4 of wild1 { Unit# ds4 ->
                         GHC.Prim.raiseIO#
                           @ GHC.Exception.SomeException
                           @ GHC.Types.Double
                           e1
                           ds4 } } })
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv3
                        ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                 case ipv8 of wild { GHC.Types.I# x# ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        (GHC.Prim.narrow32Int# x#)
                        ipv7 of wild1 { Unit# ds5 ->
                 (# ds5, ipv5 #) } } } } }) -}
2a613f89931865809e7a45bb52864e69
  vectorIsImmutable3 ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (r1 :: GHC.IORef.IORef GHC.Types.Int)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Foreign.R.Internal.SomeSEXP Control.Memory.Region.V #)
                        Test.Vector.vectorIsImmutable4 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Foreign.R.Internal.SomeSEXP a dt ->
                 case Language.R.Globals.nilValue
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.G>_P <'Foreign.R.Type.Nil>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.G
                                 'Foreign.R.Type.Nil, Foreign.R.Internal.SEXPREC>)_R) of ds2 { GHC.Ptr.Ptr ds3 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        dt
                        ds3
                        s of wild1 { (#,#) ds4 ds5 ->
                 case ((Language.R.$wevalEnv
                          @ (Language.R.Instance.R GHC.Types.Any)
                          @ Control.Memory.Region.V
                          @ 'Foreign.R.Type.Lang
                          (Language.R.Instance.$fMonadRR @ GHC.Types.Any)
                          ds5
                          Language.R.Globals.globalEnv
                            `cast`
                          (Trans
                               (Foreign.R.Internal.N:SEXP[0]
                                    <Control.Memory.Region.G>_P <'Foreign.R.Type.Env>_P)
                               (Trans
                                    (GHC.Ptr.Ptr
                                       <Language.R.HExp.HExp
                                          Control.Memory.Region.G
                                          'Foreign.R.Type.Env, Language.R.HExp.HExp
                                                                 Control.Memory.Region.V
                                                                 'Foreign.R.Type.Env>)_R
                                    (Sym (Foreign.R.Internal.N:SEXP[0]
                                              <Control.Memory.Region.V>_P
                                              <'Foreign.R.Type.Env>_P)))))
                         `cast`
                       (Trans
                            (Nth:3
                                 (Trans
                                      (<Foreign.R.Internal.SEXP
                                          Control.Memory.Region.V 'Foreign.R.Type.Lang>_R
                                       ->_R (Language.R.Instance.R
                                               <GHC.Types.Any>_P
                                               (Foreign.R.Internal.SomeSEXP
                                                  (Language.R.Instance.D:R:PrimStateR[0]
                                                       <GHC.Types.Any>_N))_N)_R)
                                      (Trans
                                           (<Foreign.R.Internal.SEXP
                                               Control.Memory.Region.V 'Foreign.R.Type.Lang>_R
                                            ->_R Language.R.Instance.N:R[0]
                                                     <GHC.Types.Any>_P <Foreign.R.Internal.SomeSEXP
                                                                          GHC.Types.Any>_N)
                                           (Nth:2
                                                (Nth:3
                                                     (Trans
                                                          (<Control.Monad.Trans.Reader.ReaderT
                                                              (GHC.IORef.IORef GHC.Types.Int)
                                                              GHC.Types.IO
                                                              (Foreign.R.Internal.SEXP
                                                                 Control.Memory.Region.V
                                                                 'Foreign.R.Type.Lang)>_R
                                                           ->_R <Foreign.R.Internal.SEXP
                                                                   Control.Memory.Region.V
                                                                   'Foreign.R.Type.Lang
                                                                 -> Control.Monad.Trans.Reader.ReaderT
                                                                      (GHC.IORef.IORef
                                                                         GHC.Types.Int)
                                                                      GHC.Types.IO
                                                                      (Foreign.R.Internal.SomeSEXP
                                                                         GHC.Types.Any)>_R
                                                           ->_R Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                    <*>_N
                                                                    <GHC.IORef.IORef
                                                                       GHC.Types.Int>_R
                                                                    <GHC.Types.IO>_R
                                                                    <Foreign.R.Internal.SomeSEXP
                                                                       GHC.Types.Any>_N)
                                                          (<Control.Monad.Trans.Reader.ReaderT
                                                              (GHC.IORef.IORef GHC.Types.Int)
                                                              GHC.Types.IO
                                                              (Foreign.R.Internal.SEXP
                                                                 Control.Memory.Region.V
                                                                 'Foreign.R.Type.Lang)>_R
                                                           ->_R <Foreign.R.Internal.SEXP
                                                                   Control.Memory.Region.V
                                                                   'Foreign.R.Type.Lang
                                                                 -> Control.Monad.Trans.Reader.ReaderT
                                                                      (GHC.IORef.IORef
                                                                         GHC.Types.Int)
                                                                      GHC.Types.IO
                                                                      (Foreign.R.Internal.SomeSEXP
                                                                         GHC.Types.Any)>_R
                                                           ->_R <GHC.IORef.IORef GHC.Types.Int>_R
                                                           ->_R GHC.Types.N:IO[0]
                                                                    <Foreign.R.Internal.SomeSEXP
                                                                       GHC.Types.Any>_R)))))))
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <GHC.IORef.IORef GHC.Types.Int>_R
                                 <GHC.Types.IO>_R
                                 <Foreign.R.Internal.SomeSEXP GHC.Types.Any>_N))
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <Foreign.R.Internal.SomeSEXP GHC.Types.Any>_R)
                        ds4 of ds1 { (#,#) ipv2 ipv3 ->
                 case Foreign.R.Internal.$wunsafeCast
                        @ GHC.Types.Any
                        @ 'Foreign.R.Type.Real
                        Test.Vector.$fArbitraryVector10
                          `cast`
                        (Sub (Foreign.R.Type.D:R:DemoteSEXPTYPE[0]))
                        ipv3 of ww { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int32 #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate#
                                @ GHC.Prim.RealWorld
                                s1 of s' { DEFAULT ->
                         case GHC.Prim.readInt32OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# ww 32#)
                                0#
                                s' of ds8 { (#,#) ipv4 ipv5 ->
                         (# ipv4,
                            GHC.Int.I32#
                              (GHC.Prim.narrow32Int# ipv5) #) } }) of ds8 { (#,#) ipv4 ipv5 ->
                 case ipv5 of dt1 { GHC.Int.I32# dt2 ->
                 case Data.Vector.SEXP.$wfromSEXP
                        @ GHC.Types.Any
                        @ 'Foreign.R.Type.Real
                        @ GHC.Types.Double
                        Test.Vector.$s$fShow(,)5
                          `cast`
                        (GHC.Classes.(%,,,%)
                           <Foreign.Storable.Storable GHC.Types.Double>_N
                           (GHC.Classes.(%,%)
                              <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                              (Trans
                                   (Sym (Foreign.R.Constraints.D:R::∈[1]
                                             <'Foreign.R.Type.Real>_N
                                             <'['Foreign.R.Type.Complex, 'Foreign.R.Type.String,
                                                'Foreign.R.Type.Vector, 'Foreign.R.Type.Expr,
                                                'Foreign.R.Type.WeakRef, 'Foreign.R.Type.Raw]>_N))
                                   (Trans
                                        (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                  <'Foreign.R.Type.Real>_N
                                                  <'Foreign.R.Type.Int>_N
                                                  <'['Foreign.R.Type.Real, 'Foreign.R.Type.Complex,
                                                     'Foreign.R.Type.String, 'Foreign.R.Type.Vector,
                                                     'Foreign.R.Type.Expr, 'Foreign.R.Type.WeakRef,
                                                     'Foreign.R.Type.Raw]>_N))
                                        (Trans
                                             (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                       <'Foreign.R.Type.Real>_N
                                                       <'Foreign.R.Type.Logical>_N
                                                       <'['Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw]>_N))
                                             (Sym (Foreign.R.Constraints.D:R::∈[2]
                                                       <'Foreign.R.Type.Real>_N
                                                       <'Foreign.R.Type.Char>_N
                                                       <'['Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw]>_N))))))_N
                           <Data.Singletons.SingI 'Foreign.R.Type.Real>_N
                           ((Data.Type.Equality.~)
                              <*>_N
                              (Sym (Data.Vector.SEXP.Base.D:R:ElemRep[3] <GHC.Types.Any>_N))
                              <GHC.Types.Double>_N)_N)_R
                        ww of immV { Data.Vector.SEXP.Vector ipv6 ipv7 ipv8 ipv9 ->
                 case (((\ @ s1
                           ($dReifies :: Data.Reflection.Reifies
                                           s1
                                           (Control.Monad.R.Internal.AcquireIO
                                              (Control.Monad.R.Class.Region
                                                 (Language.R.Instance.R GHC.Types.Any))))[OneShot]
                           (p :: Data.Proxy.Proxy s1)[OneShot]
                           (eta :: GHC.IORef.IORef GHC.Types.Int)[OneShot]
                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.writeDoubleOffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# ww 40#)
                                0#
                                7.0##
                                eta1 of s2 { DEFAULT ->
                         (# s2, GHC.Tuple.() #) })
                          `cast`
                        (Trans
                             (forall (s1 :: <*>_N).
                              <Data.Reflection.Reifies
                                 s1
                                 (Control.Monad.R.Internal.AcquireIO
                                    (Control.Monad.R.Class.Region
                                       (Language.R.Instance.R GHC.Types.Any)))>_R
                              ->_R <Data.Proxy.Proxy s1>_R
                              ->_R Trans
                                       (<GHC.IORef.IORef GHC.Types.Int>_R
                                        ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N
                                                      <GHC.IORef.IORef GHC.Types.Int>_R
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Sym (Language.R.Instance.N:R[0]
                                                      <GHC.Types.Any>_P) <()>_N)))
                             (Trans
                                  (Sym (Data.Reflection.N:Magic[0]
                                            <Control.Monad.R.Internal.AcquireIO
                                               (Control.Monad.Primitive.PrimState
                                                  (Language.R.Instance.R GHC.Types.Any))>_N
                                            <Language.R.Instance.R GHC.Types.Any ()>_R))
                                  (UnsafeCo representational (Data.Reflection.Magic
                                                                (Control.Monad.R.Internal.AcquireIO
                                                                   (Control.Monad.Primitive.PrimState
                                                                      (Language.R.Instance.R
                                                                         GHC.Types.Any)))
                                                                (Language.R.Instance.R
                                                                   GHC.Types.Any
                                                                   ())) ((GHC.Types.Any
                                                                          -> Control.Monad.R.Internal.AcquireIO
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (Language.R.Instance.R
                                                                                     GHC.Types.Any)))
                                                                         -> Data.Proxy.Proxy
                                                                              GHC.Types.Any
                                                                         -> Language.R.Instance.R
                                                                              GHC.Types.Any ()))))
                          (\ (ds9 :: GHC.Types.Any)
                             @ ty :: Foreign.R.Type.SEXPTYPE
                             (eta1 :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                             (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta1
                                  `cast`
                                (Foreign.R.Internal.N:SEXP[0]
                                     <Control.Memory.Region.V>_P <ty>_P) of ww1 { GHC.Ptr.Ptr ww2 ->
                           Language.R.Instance.$w$cacquire
                             @ GHC.Types.Any
                             @ Control.Memory.Region.V
                             @ ty
                             Control.Monad.R.Internal.withAcquire_$d~~
                               `cast`
                             (Sym (Data.Type.Equality.N:~[0]
                                       <*>_N) <Control.Memory.Region.Void>_N <Control.Memory.Region.Void>_N)
                             ww2
                             r1
                             eta })
                            `cast`
                          (Trans
                               (<GHC.Types.Any>_R
                                ->_R forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                                     <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Foreign.R.Internal.SEXP
                                                      (Control.Monad.R.Class.Region
                                                         (Language.R.Instance.R GHC.Types.Any))
                                                      ty>_R))
                               (<GHC.Types.Any>_R
                                ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0]
                                              <Control.Monad.Primitive.PrimState
                                                 (Language.R.Instance.R GHC.Types.Any)>_P)))
                          (Data.Proxy.Proxy @ GHC.Types.Any @ GHC.Types.Any))
                         `cast`
                       (Trans
                            (Language.R.Instance.N:R[0] <GHC.Types.Any>_P <()>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <GHC.IORef.IORef GHC.Types.Int>_R <GHC.Types.IO>_R <()>_N))
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds9 { (#,#) ipv10 ipv11 ->
                 (# ipv10,
                    (\ @ s1
                       ($dReifies :: Data.Reflection.Reifies
                                       s1
                                       (Control.Monad.R.Internal.AcquireIO GHC.Types.Any))[OneShot]
                       (p :: Data.Proxy.Proxy s1)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# 0# ipv9) of wild3 {
                       GHC.Types.False -> Test.Vector.testGeneralSEXPVector72 ipv9
                       GHC.Types.True
                       -> case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 ipv7
                                 GHC.Prim.realWorld# of s' { DEFAULT ->
                          case GHC.Prim.readDoubleOffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr#
                                    (GHC.Prim.plusAddr# ipv6 40#)
                                    (GHC.Prim.*# ipv8 8#))
                                 0#
                                 GHC.Prim.realWorld# of ds10 { (#,#) ipv12 ipv13 ->
                          GHC.Types.D# ipv13 } } })
                      `cast`
                    (Trans
                         (Sym (Data.Reflection.N:Magic[0]
                                   <Control.Monad.R.Internal.AcquireIO GHC.Types.Any>_N
                                   <GHC.Types.Double>_R))
                         (UnsafeCo representational (Data.Reflection.Magic
                                                       (Control.Monad.R.Internal.AcquireIO
                                                          GHC.Types.Any)
                                                       GHC.Types.Double) ((GHC.Types.Any
                                                                           -> Control.Monad.R.Internal.AcquireIO
                                                                                GHC.Types.Any)
                                                                          -> Data.Proxy.Proxy
                                                                               GHC.Types.Any
                                                                          -> GHC.Types.Double)))
                      Test.Vector.testGeneralSEXPVector23
                        `cast`
                      (<GHC.Types.Any>_R
                       ->_R Trans
                                (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                 <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Foreign.R.Internal.SEXP GHC.Types.Any ty1>_R))
                                (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <GHC.Types.Any>_P)))
                      (Data.Proxy.Proxy
                         @ GHC.Types.Any
                         @ GHC.Types.Any) #) } } } } } } } } } }) -}
fc943c1158c6475eb78933f1a7e3d352
  vectorIsImmutable4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SomeSEXP Control.Memory.Region.V #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.noDuplicate#
                        @ GHC.Prim.RealWorld
                        s of s' { DEFAULT ->
                 case Language.R.QQ.parse1
                        Test.Vector.vectorIsImmutable5
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case ipv1
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.V>_P <'Foreign.R.Type.Expr>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 'Foreign.R.Type.Expr, Foreign.R.Internal.SEXPREC>)_R) of ds { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds2
                        0#
                        ipv of wild1 { (#,#) ds3 ds4 ->
                 case Language.R.Globals.globalEnv
                        `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0]
                                <Control.Memory.Region.G>_P <'Foreign.R.Type.Env>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.G
                                 'Foreign.R.Type.Env, Foreign.R.Internal.SEXPREC>)_R) of ds5 { GHC.Ptr.Ptr ds6 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Addr# #)}
                        ds4
                        ds6
                        ds3 of wild { (#,#) ds7 ds8 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds8
                        ds7 of wild2 { Unit# ds9 ->
                 (# ds9,
                    Foreign.R.Internal.SomeSEXP
                      @ Control.Memory.Region.V
                      @ GHC.Types.Any
                      ds8 #) } } } } } } }) -}
2d69f42ac1e6fdf0ec377a1aa2357e98
  vectorIsImmutable5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.vectorIsImmutable6) -}
b9a47eeeeeaf3f1eca36e9bf20da32d3
  vectorIsImmutable6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("function(){ c(1.0,2.0,3.0) }"#) -}
f1af0a69fda6f2b7c332539105d9ac63
  vectorIsImmutable7 ::
    GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
441a2143348a8a6beb668883d850f435
  vectorIsImmutable8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Test.Vector.vectorIsImmutable9) -}
3311222b1ceb6d3dbca6a9afba85cfdd
  vectorIsImmutable9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("immutable vector, should not be affected by SEXP changes"#) -}
instance [orphan] Data.AEq.AEq [Data.Vector.SEXP.Vector]
  = Test.Vector.$fAEqVector
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Data.Vector.Fusion.Bundle.Monadic.Bundle]
  = Test.Vector.$fArbitraryBundle
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Data.Vector.SEXP.Vector]
  = Test.Vector.$fArbitraryVector
"SPEC $carbitrary @ Double @ Any @ 'Real" forall ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                                                 GHC.Types.Any
                                                                 'Foreign.R.Type.Real
                                                                 GHC.Types.Double)
                                                 ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   GHC.Types.Double)
  Test.Vector.$fArbitraryVector3 @ GHC.Types.Double
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Real
                                 $dArbitrary
                                 $d(%,,,%)
  = Test.Vector.$fArbitraryVector_$s$carbitrary1
"SPEC $carbitrary @ Int32 @ Any @ 'Int" forall ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                                               GHC.Types.Any
                                                               'Foreign.R.Type.Int
                                                               GHC.Int.Int32)
                                               ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                 GHC.Int.Int32)
  Test.Vector.$fArbitraryVector3 @ GHC.Int.Int32
                                 @ GHC.Types.Any
                                 @ 'Foreign.R.Type.Int
                                 $dArbitrary
                                 $d(%,,,%)
  = Test.Vector.$fArbitraryVector_$s$carbitrary
"SPEC $cshrink @ Double @ Any @ 'Real" forall ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                                              GHC.Types.Any
                                                              'Foreign.R.Type.Real
                                                              GHC.Types.Double)
                                              ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                GHC.Types.Double)
  Test.Vector.$fArbitraryVector_$cshrink @ GHC.Types.Double
                                         @ GHC.Types.Any
                                         @ 'Foreign.R.Type.Real
                                         $dArbitrary
                                         $d(%,,,%)
  = Test.Vector.$fArbitraryVector2
"SPEC $cshrink @ Int32 @ Any @ 'Int" forall ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                                            GHC.Types.Any
                                                            'Foreign.R.Type.Int
                                                            GHC.Int.Int32)
                                            ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                              GHC.Int.Int32)
  Test.Vector.$fArbitraryVector_$cshrink @ GHC.Int.Int32
                                         @ GHC.Types.Any
                                         @ 'Foreign.R.Type.Int
                                         $dArbitrary
                                         $d(%,,,%)
  = Test.Vector.$fArbitraryVector1
"SPEC/Test.Vector $fShow(,) @ (Vector Any 'Int Int32) @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                                                      GHC.Types.Int)
                                                                             (v2 :: GHC.Show.Show
                                                                                      (Data.Vector.SEXP.Vector
                                                                                         GHC.Types.Any
                                                                                         'Foreign.R.Type.Int
                                                                                         GHC.Int.Int32))
  GHC.Show.$fShow(,) @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Int GHC.Int.Int32)
                     @ GHC.Types.Int
                     v2
                     v1
  = Test.Vector.$s$fShow(,)
"SPEC/Test.Vector $fShow(,) @ (Vector Any 'Real Double) @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                                                        GHC.Types.Int)
                                                                               (v2 :: GHC.Show.Show
                                                                                        (Data.Vector.SEXP.Vector
                                                                                           GHC.Types.Any
                                                                                           'Foreign.R.Type.Real
                                                                                           GHC.Types.Double))
  GHC.Show.$fShow(,) @ (Data.Vector.SEXP.Vector
                          GHC.Types.Any 'Foreign.R.Type.Real GHC.Types.Double)
                     @ GHC.Types.Int
                     v2
                     v1
  = Test.Vector.$s$fShow(,)4
"SPEC/Test.Vector $fShowVector @ Double @ Any @ 'Real" [orphan] forall (v1 :: Data.Vector.SEXP.Base.VECTOR
                                                                                GHC.Types.Any
                                                                                'Foreign.R.Type.Real
                                                                                GHC.Types.Double)
                                                                       (v2 :: GHC.Show.Show
                                                                                GHC.Types.Double)
  Data.Vector.SEXP.$fShowVector @ GHC.Types.Double
                                @ GHC.Types.Any
                                @ 'Foreign.R.Type.Real
                                v2
                                v1
  = Test.Vector.$s$fShow(,)_$s$fShowVector1
"SPEC/Test.Vector $fShowVector @ Int32 @ Any @ 'Int" [orphan] forall (v1 :: Data.Vector.SEXP.Base.VECTOR
                                                                              GHC.Types.Any
                                                                              'Foreign.R.Type.Int
                                                                              GHC.Int.Int32)
                                                                     (v2 :: GHC.Show.Show
                                                                              GHC.Int.Int32)
  Data.Vector.SEXP.$fShowVector @ GHC.Int.Int32
                                @ GHC.Types.Any
                                @ 'Foreign.R.Type.Int
                                v2
                                v1
  = Test.Vector.$s$fShow(,)_$s$fShowVector
"SPEC/Test.Vector $fShowVector_$cshowsPrec @ Double @ Any @ 'Real" [orphan] forall ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                                                                                   GHC.Types.Any
                                                                                                   'Foreign.R.Type.Real
                                                                                                   GHC.Types.Double)
                                                                                   ($dShow :: GHC.Show.Show
                                                                                                GHC.Types.Double)
  Data.Vector.SEXP.$fShowVector_$cshowsPrec @ GHC.Types.Double
                                            @ GHC.Types.Any
                                            @ 'Foreign.R.Type.Real
                                            $dShow
                                            $d(%,,,%)
  = Test.Vector.$s$fShowVector_$cshowsPrec1
"SPEC/Test.Vector $fShowVector_$cshowsPrec @ Int32 @ Any @ 'Int" [orphan] forall ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                                                                                 GHC.Types.Any
                                                                                                 'Foreign.R.Type.Int
                                                                                                 GHC.Int.Int32)
                                                                                 ($dShow :: GHC.Show.Show
                                                                                              GHC.Int.Int32)
  Data.Vector.SEXP.$fShowVector_$cshowsPrec @ GHC.Int.Int32
                                            @ GHC.Types.Any
                                            @ 'Foreign.R.Type.Int
                                            $dShow
                                            $d(%,,,%)
  = Test.Vector.$s$fShowVector_$cshowsPrec
"SPEC/Test.Vector $fShow[] @ Double" [orphan] forall (v1 :: GHC.Show.Show
                                                              GHC.Types.Double)
  GHC.Show.$fShow[] @ GHC.Types.Double v1 = Test.Vector.$s$fShow[]1
"SPEC/Test.Vector $fShow[] @ Int32" [orphan] forall (v1 :: GHC.Show.Show
                                                             GHC.Int.Int32)
  GHC.Show.$fShow[] @ GHC.Int.Int32 v1 = Test.Vector.$s$fShow[]
"SPEC/Test.Vector $fShow[]_$cshow @ Double" [orphan] forall ($dShow :: GHC.Show.Show
                                                                         GHC.Types.Double)
  GHC.Show.$fShow[]_$cshow @ GHC.Types.Double $dShow
  = Test.Vector.$s$fShow[]_$cshow1
"SPEC/Test.Vector $fShow[]_$cshow @ Int32" [orphan] forall ($dShow :: GHC.Show.Show
                                                                        GHC.Int.Int32)
  GHC.Show.$fShow[]_$cshow @ GHC.Int.Int32 $dShow
  = Test.Vector.$s$fShow[]_$cshow
"SPEC/Test.Vector $fShow[]_$cshowList @ Double" [orphan] forall ($dShow :: GHC.Show.Show
                                                                             GHC.Types.Double)
  GHC.Show.$fShow[]_$cshowList @ GHC.Types.Double $dShow
  = Test.Vector.$s$fShow[]_$cshowList1
"SPEC/Test.Vector $fShow[]_$cshowList @ Int32" [orphan] forall ($dShow :: GHC.Show.Show
                                                                            GHC.Int.Int32)
  GHC.Show.$fShow[]_$cshowList @ GHC.Int.Int32 $dShow
  = Test.Vector.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

