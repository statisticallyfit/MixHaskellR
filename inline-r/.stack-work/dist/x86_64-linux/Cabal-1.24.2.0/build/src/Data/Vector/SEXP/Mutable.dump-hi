
==================== FINAL INTERFACE ====================
2017-12-28 08:02:26.301992 UTC

interface inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs:Data.Vector.SEXP.Mutable 8002
  interface hash: 07e25e6a5bceb48c7e98914c5758aa18
  ABI hash: 59c2ce6d13b7c9ceacbeeb67be8da248
  export-list hash: b44b49b93a2463cf278cc6756978a50a
  orphan hash: 51b959377e39ffdf0ecdc4dc2a6ce7bd
  flag hash: 5089c8053c89cc20f6153b2b836fadb0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Vector.SEXP.Mutable.clear
  Data.Vector.SEXP.Mutable.clone
  Data.Vector.SEXP.Mutable.copy
  Data.Vector.SEXP.Mutable.drop
  Data.Vector.SEXP.Mutable.fromSEXP
  Data.Vector.SEXP.Mutable.init
  Data.Vector.SEXP.Mutable.length
  Data.Vector.SEXP.Mutable.move
  Data.Vector.SEXP.Mutable.new
  Data.Vector.SEXP.Mutable.null
  Data.Vector.SEXP.Mutable.overlaps
  Data.Vector.SEXP.Mutable.read
  Data.Vector.SEXP.Mutable.replicate
  Data.Vector.SEXP.Mutable.replicateM
  Data.Vector.SEXP.Mutable.set
  Data.Vector.SEXP.Mutable.slice
  Data.Vector.SEXP.Mutable.splitAt
  Data.Vector.SEXP.Mutable.swap
  Data.Vector.SEXP.Mutable.tail
  Data.Vector.SEXP.Mutable.take
  Data.Vector.SEXP.Mutable.toSEXP
  Data.Vector.SEXP.Mutable.unsafeCopy
  Data.Vector.SEXP.Mutable.unsafeDrop
  Data.Vector.SEXP.Mutable.unsafeInit
  Data.Vector.SEXP.Mutable.unsafeMove
  Data.Vector.SEXP.Mutable.unsafeNew
  Data.Vector.SEXP.Mutable.unsafeRead
  Data.Vector.SEXP.Mutable.unsafeSlice
  Data.Vector.SEXP.Mutable.unsafeSwap
  Data.Vector.SEXP.Mutable.unsafeTail
  Data.Vector.SEXP.Mutable.unsafeTake
  Data.Vector.SEXP.Mutable.unsafeWrite
  Data.Vector.SEXP.Mutable.write
  Data.Vector.SEXP.Mutable.Internal.release
  Data.Vector.SEXP.Mutable.Internal.unsafeRelease
  Data.Vector.SEXP.Mutable.Internal.MVector
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP.Base
                     Data.Vector.SEXP.Mutable.Internal Foreign.R Foreign.R.Constraints
                     Foreign.R.Internal Foreign.R.Type Internal.Error
                     Language.R.HExp [boot]
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-desugar-1.6@th-desugar-1.6-4xe2xTMQQiAGUPVUAkAZhp
                      th-expand-syns-0.4.3.0@th-expand-syns-0.4.3.0-A2GRp9XTxmBCMfV7DnYdn0
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-A7sWuFC2KLsFTBmLagoRSX
                      th-orphans-0.13.4@th-orphans-0.13.4-IGsCpZ5u2Ab1MvGd5biF2z
                      th-reify-many-0.1.8@th-reify-many-0.1.8-5ZNbfXxMl3y5DMJznTzmN9
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Decide
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Instances
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.TypeLits
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.TypeLits.Internal
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-A7sWuFC2KLsFTBmLagoRSX:Instances.TH.Lift
         th-orphans-0.13.4@th-orphans-0.13.4-IGsCpZ5u2Ab1MvGd5biF2z:Language.Haskell.TH.Instances
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs:Control.Memory.Region
                         inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs:Foreign.R.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Bool
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Eq
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Instances
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Num
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Ord
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Syntax
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.TypeLits.Internal
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-desugar-1.6@th-desugar-1.6-4xe2xTMQQiAGUPVUAkAZhp:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Arrow 70754b538e7d75521cd68162917b6946
import  -/  base-4.9.1.0:Control.Category 74288f70105bf6db5ff51d18c3e2c349
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Proxy d7f87a37cf7ec5ca87c59c8d2859031f
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Control.Monad.R.Class cad819d8a5243541d9a0f1421f7ef4d8
  exports: 7b258842783caee6f8995be87e582334
  MonadR 1f397b618ab35a4d9191d2514797ac03
  Region 9ddc10a1fcce4af410d9af5cec63780b
import  -/  Control.Monad.R.Internal e86ff55415b5cf4a4b45773ec8435141
  exports: 7d4cac02ee004d8eaf6eeb6af347c8eb
  AcquireIO 5a9f026e88c0b6cd8569f0af1dc562d3
  AcquireIO c39851170d1b482f78433de5d5762977
  withAcquire 548792489dd0dbfe817e1fabf293af46
import  -/  Data.Vector.SEXP.Base 4fee69f30bb73a3bab2a9c4037daa643
  exports: aa30f1c2f3261c65181cdb6d644559bf
  VECTOR 93c7fea9b59e1a69c8899e0c05cdaf3f
import  -/  Data.Vector.SEXP.Mutable.Internal 294a79ed9866077cadcc4d24a50cf544
  exports: 2b5a2e3df559b634f76cebea6fa4dda5
  MVector d45f3fc048382257cca397e68283ed8e
  MVector 058ff4e1ccef46a392b9d8c04bf76ce0
  W c07f2e23ff947603b9b6b556f6af2d0f
  W c809a609adf266113603d7eff94a84d1
  proxyW b558f1f833137be47549c0774449c602
  release 18c0086ff684e97b748c90f34a3dd768
  unW c809a609adf266113603d7eff94a84d1
  unsafeRelease 6a9c16c3587e0f414675d7db547a6d78
  withW 7b9ecde0bdb8722405d39293d8d3f53b
import  -/  Foreign.R 76af03c75eee17c66f999e9a2952a2da
  exports: 48f78775472e7fa46d6f356ef53096ba
import  -/  Foreign.R.Internal 94b91017c41283795b0b9850baa548e1
  SEXP e854911eaf3995eafd7923a39be3730e
  length 7b00fa24a3705c784a67bedc5d336182
import  -/  Internal.Error 4ff915c9ecc9112f8c436f5ab8665640
  exports: 1cf446c8d06e4ccec0c56e44b9f9480d
  violation b92cf54c20f120b4da4d6d9cb1af1079
import  -/  reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection e8ed21fc086f07e13656de2c3828f8a9
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Mutable c96042d36416e177dccaa53d194ed45c
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
33b024e019a26988a1c8ec5408e971d0
  $s>>> :: (a -> b) -> (b -> c) -> a -> c
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c (f :: a -> b) (g :: b -> c) (eta :: a) ->
                 g (f eta)) -}
c4b14899ccaa484afe4fad4df428bc17
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Vector.SEXP.Mutable.$trModule2
                   Data.Vector.SEXP.Mutable.$trModule1) -}
04bb3882d59cea0f7b5f78e724f68f26
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Vector.SEXP.Mutable"#) -}
50cf70bfe833caa11f6f1e9274784a7c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs"#) -}
4a77bad7c4f97c925b4990b9a371dc4f
  $wtoSEXP ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> m (Foreign.R.Internal.SEXP (Control.Monad.R.Class.Region m) ty)
  {- Arity: 5,
     Strictness: <L,U(A,U(U(U,U,U,U,U),U),A,A,U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><L,U><S,U><L,U>,
     Inline: [0] -}
615d6ddd1092fd05c650ac2300a70ac4
  clear ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,A,A,U(U))><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicInitialize
                      @ s
                      @ (Control.Monad.Primitive.PrimState m)
                      @ ty
                      @ a
                      $dReifies
                      $d(%,,,%)
                      @ m
                      $dPrimMonad
                      (Data.Vector.SEXP.Mutable.Internal.withW
                         @ Data.Proxy.Proxy
                         @ s
                         @ (Control.Monad.R.Class.Region m)
                         @ ty
                         @ a
                         p
                         eta)) }) -}
132bf8b6412b598b6010b4f9f75e1872
  clone ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(U,U,U,U,U),U),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><L,U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a))
                      @ (Data.Proxy.Proxy s
                         -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                                 (Control.Monad.R.Class.Region m) ty a))
                      (Data.Vector.SEXP.Mutable.Internal.proxyW
                         @ m
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a
                         @ Data.Proxy.Proxy
                         $dMonad)
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         (let {
                            n :: GHC.Types.Int
                            = case GHC.Types.HEq_sc
                                     @ *
                                     @ *
                                     @ (Data.Vector.SEXP.Base.ElemRep
                                          (Control.Monad.Primitive.PrimState m) ty)
                                     @ a
                                     (GHC.Classes.$p4(%,,,%)
                                        @ (Foreign.Storable.Storable a)
                                        @ (Foreign.R.Type.IsVector ty)
                                        @ (Data.Singletons.SingI ty)
                                        @ (Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty
                                           Data.Type.Equality.~ a)
                                        $d(%,,,%))
                                       `cast`
                                     (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                         (Control.Monad.Primitive.PrimState
                                                                            m)
                                                                         ty>_N <a>_N) of cobox1 { DEFAULT ->
                              case Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     eta
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.R.Class.Region
                                                  m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                              GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2) } }
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a))
                            @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a))
                            (Data.Vector.Internal.Check.checkLength
                               @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                       s ty (Control.Monad.Primitive.PrimState m) a))
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 591#)
                               Data.Vector.Internal.Check.Unsafe
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeNew"#))
                               n)
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             let {
                               $d(%,%) :: Foreign.R.Type.IsVector ty
                               = GHC.Classes.$p2(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ (Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty
                                      Data.Type.Equality.~ a)
                                   $d(%,,,%)
                             } in
                             let {
                               $dSingI :: Data.Singletons.SingI ty
                               = GHC.Classes.$p1(%,%)
                                   @ (Data.Singletons.SingI ty)
                                   @ (ty
                                      Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                                 'Foreign.R.Type.Logical,
                                                                 'Foreign.R.Type.Int,
                                                                 'Foreign.R.Type.Real,
                                                                 'Foreign.R.Type.Complex,
                                                                 'Foreign.R.Type.String,
                                                                 'Foreign.R.Type.Vector,
                                                                 'Foreign.R.Type.Expr,
                                                                 'Foreign.R.Type.WeakRef,
                                                                 'Foreign.R.Type.Raw])
                                   $d(%,%)
                             } in
                             let {
                               $dMonad2 :: GHC.Base.Monad m
                               = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                             } in
                             case Foreign.R.Type.$fEqSEXPTYPE_$c==
                                    (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                       @ ty
                                       $dSingI
                                         `cast`
                                       (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                      `cast`
                                    (Sub (Foreign.R.Type.D:R:DemoteRepSEXPTYPE[0]))
                                    Foreign.R.Type.Char of wild {
                               GHC.Types.False
                               -> GHC.Base.>>=
                                    @ m
                                    $dMonad2
                                    @ (Foreign.R.Internal.SEXP
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a)
                                    (Control.Monad.Primitive.primitive
                                       @ m
                                       $dPrimMonad
                                       @ (Foreign.R.Internal.SEXP
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$s=<<
                                          @ (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                                          @ (Foreign.R.Internal.SEXP
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          (($dReifies
                                              `cast`
                                            (Data.Reflection.N:Reifies[0]
                                                 <*>_N
                                                 <s>_N
                                                 <Control.Monad.R.Internal.AcquireIO
                                                    (Control.Monad.Primitive.PrimState m)>_N)
                                              @ Data.Proxy.Proxy
                                              (Data.Proxy.Proxy @ * @ s))
                                             `cast`
                                           (Control.Monad.R.Internal.N:AcquireIO[0]
                                                <Control.Monad.Primitive.PrimState m>_P)
                                             @ ty)
                                          (Foreign.R.allocVector
                                             @ ty
                                             $d(%,%)
                                             $dSingI
                                               `cast`
                                             (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                             n))
                                         `cast`
                                       (Trans
                                            (GHC.Types.N:IO[0]
                                                 <Foreign.R.Internal.SEXP
                                                    (Control.Monad.Primitive.PrimState m) ty>_R)
                                            ((GHC.Prim.State#
                                                (Trans
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                     (Control.Monad.Primitive.PrimState
                                                        (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                             ->_R ((#,#)
                                                     <'GHC.Types.VoidRep>_R
                                                     <'GHC.Types.PtrRepLifted>_R
                                                     (GHC.Prim.State#
                                                        (Trans
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                             (Control.Monad.Primitive.PrimState
                                                                (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                     <Foreign.R.Internal.SEXP
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_R)_R)))
                                    (\ (sx :: Foreign.R.Internal.SEXP
                                                (Control.Monad.Primitive.PrimState m) ty) ->
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a)
                                       @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                               s ty (Control.Monad.Primitive.PrimState m) a))
                                       (GHC.Base.return
                                          @ m
                                          $dMonad2
                                          @ (Data.Vector.SEXP.Mutable.Internal.W
                                               s ty (Control.Monad.Primitive.PrimState m) a))
                                       (GHC.Base.$
                                          @ 'GHC.Types.PtrRepLifted
                                          @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                               (Control.Monad.Primitive.PrimState m) ty a)
                                          @ (Data.Vector.SEXP.Mutable.Internal.W
                                               s ty (Control.Monad.Primitive.PrimState m) a)
                                          (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                       (Control.Monad.Primitive.PrimState m)
                                                       ty
                                                       a) ->
                                           tpl)
                                            `cast`
                                          (<Data.Vector.SEXP.Mutable.Internal.MVector
                                              (Control.Monad.Primitive.PrimState m) ty a>_R
                                           ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                         <s>_P
                                                         <ty>_P
                                                         <Control.Monad.Primitive.PrimState
                                                            m>_P) <a>_N)
                                          (case (Foreign.R.Internal.unsafeRelease
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   @ ty
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   sx)
                                                  `cast`
                                                (Foreign.R.Internal.N:SEXP[0]
                                                     <Control.Monad.Primitive.PrimState m>_P
                                                     <ty>_P) of dt { GHC.Ptr.Ptr dt1 ->
                                           case GHC.Int.$fBitsInt32_$cfromInteger
                                                  0 of dt2 { GHC.Int.I32# dt3 ->
                                           case GHC.Base.id
                                                  @ GHC.Types.Int
                                                  n of wild1 { GHC.Types.I# x# ->
                                           Data.Vector.SEXP.Mutable.Internal.MVector
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ ty
                                             @ a
                                             dt1
                                             dt3
                                             (GHC.Prim.narrow32Int# x#) } } })))
                               GHC.Types.True
                               -> Internal.Error.failure
                                    @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.SEXP.Mutable.new"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "R character vectors are immutable and globally cached. Use 'mkChar' instead."#)) } }))
                         (\ (v' :: Data.Vector.SEXP.Mutable.Internal.W
                                     s ty (Control.Monad.Primitive.PrimState m) a) ->
                          GHC.Base.>>
                            @ m
                            $dMonad1
                            @ ()
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a)
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (m ())
                               @ (m ())
                               (Data.Vector.Internal.Check.check
                                  @ (m ())
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Vector/Generic/Mutable.hs"#))
                                  (GHC.Types.I# 802#)
                                  Data.Vector.Internal.Check.Unsafe
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                                  (case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.unW
                                          @ s
                                          @ ty
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ a
                                          v' of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.unW
                                          @ s
                                          @ ty
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ a
                                          eta
                                            `cast`
                                          (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                    <s>_P
                                                    <ty>_P
                                                    <Control.Monad.R.Class.Region
                                                       m>_P) <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                                   GHC.Classes.eqInt
                                     (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                                     (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (m ())
                                  @ (m ())
                                  (Data.Vector.Internal.Check.check
                                     @ (m ())
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "./Data/Vector/Generic/Mutable.hs"#))
                                     (GHC.Types.I# 804#)
                                     Data.Vector.Internal.Check.Unsafe
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "overlapping vectors"#))
                                     (GHC.Classes.not
                                        (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                                           @ s
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           @ a
                                           $dReifies
                                           $d(%,,,%)
                                           @ (Control.Monad.Primitive.PrimState m)
                                           v'
                                           eta
                                             `cast`
                                           (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                     <s>_P
                                                     <ty>_P
                                                     <Control.Monad.R.Class.Region m>_P) <a>_N))))
                                  (case v'
                                          `cast`
                                        (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                             <s>_P
                                             <ty>_P
                                             <Control.Monad.Primitive.PrimState
                                                m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                                   case eta of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                                   case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                                   let {
                                     $dStorable :: Foreign.Storable.Storable a
                                     = GHC.Classes.$p1(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ (Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty
                                            Data.Type.Equality.~ a)
                                         $d(%,,,%)
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (GHC.Types.IO ())
                                     @ (m ())
                                     (Control.Monad.Primitive.unsafePrimToPrim
                                        @ GHC.Types.IO
                                        @ m
                                        @ ()
                                        Control.Monad.Primitive.$fPrimBaseIO
                                        $dPrimMonad)
                                     (Foreign.Marshal.Array.copyArray
                                        @ a
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                           @ a
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unW
                                              @ s
                                              @ ty
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ a
                                              nt
                                                `cast`
                                              (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                        <s>_P
                                                        <ty>_P
                                                        <Control.Monad.Primitive.PrimState
                                                           m>_P) <a>_N)))
                                        (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                           @ a
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unW
                                              @ s
                                              @ ty
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ a
                                              nt1
                                                `cast`
                                              (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                        <s>_P
                                                        <ty>_P
                                                        <Control.Monad.Primitive.PrimState
                                                           m>_P) <a>_N)))
                                        (case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty
                                                      Data.Type.Equality.~ a)
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox2 { DEFAULT ->
                                         case Data.Vector.SEXP.Mutable.Internal.unW
                                                @ s
                                                @ ty
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ a
                                                nt
                                                  `cast`
                                                (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                          <s>_P
                                                          <ty>_P
                                                          <Control.Monad.Primitive.PrimState
                                                             m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                         GHC.Base.id
                                           @ GHC.Types.Int
                                           (GHC.Types.I# dt2) } })) } } })))
                            (GHC.Base.return
                               @ m
                               $dMonad1
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a)
                               v')))) }) -}
a10f99d1e68db793aaf333392d11eaea
  copy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      dst :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      src :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.check
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 776#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "copy"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "overlapping vectors"#))
                         (GHC.Classes.not
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                               @ s
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ (Control.Monad.Primitive.PrimState m)
                               dst
                               src)))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.check
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 778#)
                            Data.Vector.Internal.Check.Bounds
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "copy"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    dst of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    src of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                             GHC.Classes.eqInt
                               (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                               (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (m ())
                            @ (m ())
                            (Data.Vector.Internal.Check.check
                               @ (m ())
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 802#)
                               Data.Vector.Internal.Check.Unsafe
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                               (case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.unW
                                       @ s
                                       @ ty
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ a
                                       dst of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.unW
                                       @ s
                                       @ ty
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ a
                                       src of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                                GHC.Classes.eqInt
                                  (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                                  (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (m ())
                               @ (m ())
                               (Data.Vector.Internal.Check.check
                                  @ (m ())
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Vector/Generic/Mutable.hs"#))
                                  (GHC.Types.I# 804#)
                                  Data.Vector.Internal.Check.Unsafe
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString# @ b "overlapping vectors"#))
                                  (GHC.Classes.not
                                     (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                                        @ s
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        @ a
                                        $dReifies
                                        $d(%,,,%)
                                        @ (Control.Monad.Primitive.PrimState m)
                                        dst
                                        src)))
                               (case dst
                                       `cast`
                                     (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                          <s>_P
                                          <ty>_P
                                          <Control.Monad.Primitive.PrimState
                                             m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                                case src
                                       `cast`
                                     (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                          <s>_P
                                          <ty>_P
                                          <Control.Monad.Primitive.PrimState
                                             m>_P <a>_N) of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                                let {
                                  $dStorable :: Foreign.Storable.Storable a
                                  = GHC.Classes.$p1(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ (Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty
                                         Data.Type.Equality.~ a)
                                      $d(%,,,%)
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (GHC.Types.IO ())
                                  @ (m ())
                                  (Control.Monad.Primitive.unsafePrimToPrim
                                     @ GHC.Types.IO
                                     @ m
                                     @ ()
                                     Control.Monad.Primitive.$fPrimBaseIO
                                     $dPrimMonad)
                                  (Foreign.Marshal.Array.copyArray
                                     @ a
                                     $dStorable
                                     (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                        @ a
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unW
                                           @ s
                                           @ ty
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ a
                                           nt
                                             `cast`
                                           (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                     <s>_P
                                                     <ty>_P
                                                     <Control.Monad.Primitive.PrimState
                                                        m>_P) <a>_N)))
                                     (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                        @ a
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unW
                                           @ s
                                           @ ty
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ a
                                           nt1
                                             `cast`
                                           (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                     <s>_P
                                                     <ty>_P
                                                     <Control.Monad.Primitive.PrimState
                                                        m>_P) <a>_N)))
                                     (case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox2 { DEFAULT ->
                                      case Data.Vector.SEXP.Mutable.Internal.unW
                                             @ s
                                             @ ty
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ a
                                             nt
                                               `cast`
                                             (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                       <s>_P
                                                       <ty>_P
                                                       <Control.Monad.Primitive.PrimState
                                                          m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                      GHC.Base.id
                                        @ GHC.Types.Int
                                        (GHC.Types.I# dt2) } })) } } }))))) }) -}
4eb620dd489b1c5f526f64faa1c00fc0
  drop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      m :: GHC.Types.Int
                      = case GHC.Types.HEq_sc
                               @ *
                               @ *
                               @ (Data.Vector.SEXP.Base.ElemRep s ty)
                               @ a
                               (GHC.Classes.$p4(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                  $d(%,,,%))
                                 `cast`
                               (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                   s
                                                                   ty>_N <a>_N) of cobox1 { DEFAULT ->
                        case Data.Vector.SEXP.Mutable.Internal.unW
                               @ t
                               @ ty
                               @ s
                               @ a
                               x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                        GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2) } }
                    } in
                    let {
                      n' :: GHC.Types.Int
                      = GHC.Classes.$fOrdInt_$cmax eta (GHC.Types.I# 0#)
                    } in
                    let {
                      i :: GHC.Types.Int = GHC.Classes.$fOrdInt_$cmin m n'
                    } in
                    let {
                      n1 :: GHC.Types.Int
                      = GHC.Classes.$fOrdInt_$cmax
                          (GHC.Types.I# 0#)
                          (GHC.Num.$fNumInt_$c- m n')
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            i
                            n1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeSlice
                            @ t
                            @ s
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ s
                            i
                            n1
                            x)))
                   eta1 }) -}
138341f66ecfc579ce658579378886a4
  drop1 ::
    GHC.Prim.Any
    -> forall (ty :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty
       -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Arity: 1, Strictness: <L,U>x -}
aa8c2a7c8b23cee696a5d96281bb5798
  drop2 ::
    Foreign.R.Internal.SEXP Control.Memory.Region.V ty
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Strictness: x -}
548292713b95129cf9394e7438c01070
  fromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Foreign.R.Internal.SEXP s ty
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Int.Int32
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate# s1 of s' { DEFAULT ->
                         case GHC.Prim.readInt32OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# ww1 32#)
                                0#
                                s' of ds2 { (#,#) ipv ipv1 ->
                         (# ipv,
                            GHC.Int.I32#
                              (GHC.Prim.narrow32Int# ipv1) #) } }) of ds { (#,#) ipv ipv1 ->
                 case ipv1 of dt { GHC.Int.I32# dt1 ->
                 Data.Vector.SEXP.Mutable.Internal.MVector
                   @ s
                   @ ty
                   @ a
                   ww1
                   0#
                   dt1 } } } }) -}
a337244ef6a3d3d5ea9f759f0e471649
  init ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      i :: GHC.Types.Int = GHC.Types.I# 0#
                    } in
                    let {
                      n :: GHC.Types.Int
                      = GHC.Num.$fNumInt_$c-
                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                             @ s
                             x)
                          (GHC.Types.I# 1#)
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 513#)
                            Data.Vector.Internal.Check.Bounds
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "slice"#))
                            i
                            n
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (Data.Vector.Internal.Check.checkSlice
                               @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 552#)
                               Data.Vector.Internal.Check.Unsafe
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                               i
                               n
                               (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                  @ t
                                  @ s
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  @ s
                                  x))
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ t
                                    @ ty
                                    @ s
                                    @ a
                                    x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                               @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                               (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                                tpl)
                                 `cast`
                               (<Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                                ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                              <t>_P <ty>_P <s>_P) <a>_N)
                               (case GHC.Base.id @ GHC.Types.Int i of wild1 { GHC.Types.I# x# ->
                                case GHC.Int.$fNumInt32_$c+
                                       (GHC.Int.I32# dt1)
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int# x#)) of dt3 { GHC.Int.I32# dt4 ->
                                case GHC.Base.id @ GHC.Types.Int n of wild2 { GHC.Types.I# x#1 ->
                                Data.Vector.SEXP.Mutable.Internal.MVector
                                  @ s
                                  @ ty
                                  @ a
                                  dt
                                  dt4
                                  (GHC.Prim.narrow32Int# x#1) } } }) } }))))
                   eta }) -}
72c8f4e08315beda96690e178c6e8975
  length ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(LLS),1*U(A,A,U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ GHC.Types.Int
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (eta1 :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                      @ t
                      @ s
                      @ ty
                      @ a
                      $dReifies
                      $d(%,,,%)
                      @ s
                      eta1)
                   eta }) -}
6d61eef66be1e9586b7bcb2973ef83bd
  move ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      dst :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      src :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.check
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 792#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "move"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 dst of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 src of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                          GHC.Classes.eqInt
                            (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                            (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.check
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 819#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeMove"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    dst of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    src of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                             GHC.Classes.eqInt
                               (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                               (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                         (case dst
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <s>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                          case src
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <s>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (GHC.Types.IO ())
                            @ (m ())
                            (Control.Monad.Primitive.unsafePrimToPrim
                               @ GHC.Types.IO
                               @ m
                               @ ()
                               Control.Monad.Primitive.$fPrimBaseIO
                               $dPrimMonad)
                            (Foreign.Marshal.Array.moveArray
                               @ a
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     nt
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     nt1
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                               (case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.unW
                                       @ s
                                       @ ty
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ a
                                       nt
                                         `cast`
                                       (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState
                                                    m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2) } })) } } }))) }) -}
338700829a08e385b8e35fe4b55e2aa9
  new ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(U,U,U,U,U),U),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,U,A,U(U))><L,U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a))
                      @ (Data.Proxy.Proxy s
                         -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                                 (Control.Monad.R.Class.Region m) ty a))
                      (Data.Vector.SEXP.Mutable.Internal.proxyW
                         @ m
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a
                         @ Data.Proxy.Proxy
                         $dMonad)
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a))
                         @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a))
                         (Data.Vector.Internal.Check.checkLength
                            @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 585#)
                            Data.Vector.Internal.Check.Bounds
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                            eta)
                         (GHC.Base.>>=
                            @ m
                            $dMonad1
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a)
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                       s ty (Control.Monad.Primitive.PrimState m) a))
                               @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                       s ty (Control.Monad.Primitive.PrimState m) a))
                               (Data.Vector.Internal.Check.checkLength
                                  @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                          s ty (Control.Monad.Primitive.PrimState m) a))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Vector/Generic/Mutable.hs"#))
                                  (GHC.Types.I# 591#)
                                  Data.Vector.Internal.Check.Unsafe
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeNew"#))
                                  eta)
                               (case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                                let {
                                  $d(%,%) :: Foreign.R.Type.IsVector ty
                                  = GHC.Classes.$p2(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ (Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty
                                         Data.Type.Equality.~ a)
                                      $d(%,,,%)
                                } in
                                let {
                                  $dSingI :: Data.Singletons.SingI ty
                                  = GHC.Classes.$p1(%,%)
                                      @ (Data.Singletons.SingI ty)
                                      @ (ty
                                         Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                                    'Foreign.R.Type.Logical,
                                                                    'Foreign.R.Type.Int,
                                                                    'Foreign.R.Type.Real,
                                                                    'Foreign.R.Type.Complex,
                                                                    'Foreign.R.Type.String,
                                                                    'Foreign.R.Type.Vector,
                                                                    'Foreign.R.Type.Expr,
                                                                    'Foreign.R.Type.WeakRef,
                                                                    'Foreign.R.Type.Raw])
                                      $d(%,%)
                                } in
                                let {
                                  $dMonad2 :: GHC.Base.Monad m
                                  = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                                } in
                                case Foreign.R.Type.$fEqSEXPTYPE_$c==
                                       (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                          @ ty
                                          $dSingI
                                            `cast`
                                          (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                         `cast`
                                       (Sub (Foreign.R.Type.D:R:DemoteRepSEXPTYPE[0]))
                                       Foreign.R.Type.Char of wild {
                                  GHC.Types.False
                                  -> GHC.Base.>>=
                                       @ m
                                       $dMonad2
                                       @ (Foreign.R.Internal.SEXP
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a)
                                       (Control.Monad.Primitive.primitive
                                          @ m
                                          $dPrimMonad
                                          @ (Foreign.R.Internal.SEXP
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$s=<<
                                             @ (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                                             @ (Foreign.R.Internal.SEXP
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             (($dReifies
                                                 `cast`
                                               (Data.Reflection.N:Reifies[0]
                                                    <*>_N
                                                    <s>_N
                                                    <Control.Monad.R.Internal.AcquireIO
                                                       (Control.Monad.Primitive.PrimState m)>_N)
                                                 @ Data.Proxy.Proxy
                                                 (Data.Proxy.Proxy @ * @ s))
                                                `cast`
                                              (Control.Monad.R.Internal.N:AcquireIO[0]
                                                   <Control.Monad.Primitive.PrimState m>_P)
                                                @ ty)
                                             (Foreign.R.allocVector
                                                @ ty
                                                $d(%,%)
                                                $dSingI
                                                  `cast`
                                                (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                                eta))
                                            `cast`
                                          (Trans
                                               (GHC.Types.N:IO[0]
                                                    <Foreign.R.Internal.SEXP
                                                       (Control.Monad.Primitive.PrimState m) ty>_R)
                                               ((GHC.Prim.State#
                                                   (Trans
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                        (Control.Monad.Primitive.PrimState
                                                           (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                ->_R ((#,#)
                                                        <'GHC.Types.VoidRep>_R
                                                        <'GHC.Types.PtrRepLifted>_R
                                                        (GHC.Prim.State#
                                                           (Trans
                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                                (Control.Monad.Primitive.PrimState
                                                                   (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                        <Foreign.R.Internal.SEXP
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_R)_R)))
                                       (\ (sx :: Foreign.R.Internal.SEXP
                                                   (Control.Monad.Primitive.PrimState m) ty) ->
                                        GHC.Base.$
                                          @ 'GHC.Types.PtrRepLifted
                                          @ (Data.Vector.SEXP.Mutable.Internal.W
                                               s ty (Control.Monad.Primitive.PrimState m) a)
                                          @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                                  s ty (Control.Monad.Primitive.PrimState m) a))
                                          (GHC.Base.return
                                             @ m
                                             $dMonad2
                                             @ (Data.Vector.SEXP.Mutable.Internal.W
                                                  s ty (Control.Monad.Primitive.PrimState m) a))
                                          (GHC.Base.$
                                             @ 'GHC.Types.PtrRepLifted
                                             @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                  (Control.Monad.Primitive.PrimState m) ty a)
                                             @ (Data.Vector.SEXP.Mutable.Internal.W
                                                  s ty (Control.Monad.Primitive.PrimState m) a)
                                             (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                          (Control.Monad.Primitive.PrimState m)
                                                          ty
                                                          a) ->
                                              tpl)
                                               `cast`
                                             (<Data.Vector.SEXP.Mutable.Internal.MVector
                                                 (Control.Monad.Primitive.PrimState m) ty a>_R
                                              ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                            <s>_P
                                                            <ty>_P
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_P) <a>_N)
                                             (case (Foreign.R.Internal.unsafeRelease
                                                      @ (Control.Monad.Primitive.PrimState m)
                                                      @ ty
                                                      @ (Control.Monad.Primitive.PrimState m)
                                                      sx)
                                                     `cast`
                                                   (Foreign.R.Internal.N:SEXP[0]
                                                        <Control.Monad.Primitive.PrimState m>_P
                                                        <ty>_P) of dt { GHC.Ptr.Ptr dt1 ->
                                              case GHC.Int.$fBitsInt32_$cfromInteger
                                                     0 of dt2 { GHC.Int.I32# dt3 ->
                                              case GHC.Base.id
                                                     @ GHC.Types.Int
                                                     eta of wild1 { GHC.Types.I# x# ->
                                              Data.Vector.SEXP.Mutable.Internal.MVector
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ ty
                                                @ a
                                                dt1
                                                dt3
                                                (GHC.Prim.narrow32Int# x#) } } })))
                                  GHC.Types.True
                                  -> Internal.Error.failure
                                       @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                               s ty (Control.Monad.Primitive.PrimState m) a))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.SEXP.Mutable.new"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "R character vectors are immutable and globally cached. Use 'mkChar' instead."#)) } }))
                            (\ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                                        s ty (Control.Monad.Primitive.PrimState m) a) ->
                             GHC.Base.>>
                               @ m
                               $dMonad1
                               @ ()
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a)
                               (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicInitialize
                                  @ s
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  @ m
                                  $dPrimMonad
                                  v1)
                               (GHC.Base.return
                                  @ m
                                  $dMonad1
                                  @ (Data.Vector.SEXP.Mutable.Internal.W
                                       s ty (Control.Monad.Primitive.PrimState m) a)
                                  v1))))) }) -}
aa41f8e3dab188f8aa4d1a41b82b69c3
  null ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(LLS),1*U(A,A,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ GHC.Types.Bool
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot] ->
                    Data.Vector.Generic.Mutable.null
                      @ (Data.Vector.SEXP.Mutable.Internal.W t ty)
                      @ a
                      @ s
                      (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                         @ t
                         @ s
                         @ ty
                         @ a
                         $dReifies
                         $d(%,,,%)))
                   eta }) -}
b7e0e9008f1c1a9023a6098830942f2c
  overlaps ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony2
                   @ s
                   @ ty
                   @ a
                   @ GHC.Types.Bool
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (eta2 :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot]
                      (eta3 :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                      @ t
                      @ s
                      @ ty
                      @ a
                      $dReifies
                      $d(%,,,%)
                      @ s
                      eta2
                      eta3)
                   eta
                   eta1 }) -}
36142ff75e2adc97fcbd62e553ff7c2b
  overlaps1 ::
    GHC.Prim.Any
    -> forall (ty :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty
       -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Arity: 1, Strictness: <L,U>x -}
3f9ce7dd3dd70ffcc1fe2165def0a097
  overlaps2 ::
    Foreign.R.Internal.SEXP Control.Memory.Region.V ty
    -> GHC.Types.IO (Foreign.R.Internal.SEXP s ty)
  {- Strictness: x -}
10efc2d68e0ac53ac9f7667f85b8080b
  phony ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (forall t.
     Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
     Data.Vector.SEXP.Mutable.Internal.W t ty s a -> b)
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a -> b
  {- Arity: 3,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: forall t.
                           Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                           Data.Vector.SEXP.Mutable.Internal.W t ty s a -> b)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  eta
                    @ s1
                    $dReifies
                    eta1
                      `cast`
                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s1>_P <ty>_P <s>_P) <a>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    b) ((GHC.Prim.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Prim.Any -> b)))
                   (Data.Vector.SEXP.Mutable.drop1 @ s)
                     `cast`
                   (<GHC.Prim.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Prim.Any @ GHC.Prim.Any) }) -}
34ac4ed9547d1f31140a2a0a41f6f212
  phony2 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (forall t.
     Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
     Data.Vector.SEXP.Mutable.Internal.W t ty s a
     -> Data.Vector.SEXP.Mutable.Internal.W t ty s a -> b)
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: forall t.
                           Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                           Data.Vector.SEXP.Mutable.Internal.W t ty s a
                           -> Data.Vector.SEXP.Mutable.Internal.W t ty s a -> b)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   (eta2 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (ds :: Data.Proxy.Proxy s1)[OneShot] ->
                  case ds of wild { Data.Proxy.Proxy ->
                  eta
                    @ s1
                    $dReifies
                    eta1
                      `cast`
                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s1>_P <ty>_P <s>_P) <a>_N)
                    eta2
                      `cast`
                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s1>_P <ty>_P <s>_P) <a>_N) })
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <b>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    b) ((GHC.Prim.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Prim.Any -> b)))
                   (Data.Vector.SEXP.Mutable.overlaps1 @ s)
                     `cast`
                   (<GHC.Prim.Any>_R
                    ->_R Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P))
                   (Data.Proxy.Proxy @ GHC.Prim.Any @ GHC.Prim.Any) }) -}
d7a37fdd49a983e92e0efc46154370d8
  read ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m a)
                   @ (m a)
                   (Control.Monad.R.Internal.withAcquire @ m @ a $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      v1 :: Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m a)
                      @ (m a)
                      (Data.Vector.Internal.Check.checkIndex
                         @ (m a)
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 691#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "read"#))
                         eta1
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ (Control.Monad.Primitive.PrimState m)
                            v1))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m a)
                         @ (m a)
                         (Data.Vector.Internal.Check.checkIndex
                            @ (m a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 722#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeRead"#))
                            eta1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ s
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ (Control.Monad.Primitive.PrimState m)
                               v1))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (GHC.Types.IO a)
                            @ (m a)
                            (Control.Monad.Primitive.unsafePrimToPrim
                               @ GHC.Types.IO
                               @ m
                               @ a
                               Control.Monad.Primitive.$fPrimBaseIO
                               $dPrimMonad)
                            (Foreign.Storable.peekElemOff
                               @ a
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     v1))
                               eta1) }))) }) -}
0c512752726908058b2905924976f23f
  replicate ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(U,U,U,U,U),U),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a))
                      @ (Data.Proxy.Proxy s
                         -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                                 (Control.Monad.R.Class.Region m) ty a))
                      (Data.Vector.SEXP.Mutable.Internal.proxyW
                         @ m
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a
                         @ Data.Proxy.Proxy
                         $dMonad)
                      (let {
                         eta2 :: GHC.Types.Int
                         = Data.Vector.Fusion.Util.delay_inline
                             @ GHC.Types.Int
                             @ (GHC.Types.Int -> GHC.Types.Int)
                             GHC.Classes.$fOrdInt_$cmax
                             (GHC.Types.I# 0#)
                             eta
                       } in
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty
                                    Data.Type.Equality.~ a)
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          let {
                            $d(%,%) :: Foreign.R.Type.IsVector ty
                            = GHC.Classes.$p2(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          let {
                            $dSingI :: Data.Singletons.SingI ty
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Singletons.SingI ty)
                                @ (ty
                                   Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                              'Foreign.R.Type.Logical,
                                                              'Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw])
                                $d(%,%)
                          } in
                          let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          case Foreign.R.Type.$fEqSEXPTYPE_$c==
                                 (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                    @ ty
                                    $dSingI
                                      `cast`
                                    (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                   `cast`
                                 (Sub (Foreign.R.Type.D:R:DemoteRepSEXPTYPE[0]))
                                 Foreign.R.Type.Char of wild {
                            GHC.Types.False
                            -> GHC.Base.>>=
                                 @ m
                                 $dMonad2
                                 @ (Foreign.R.Internal.SEXP
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a)
                                 (Control.Monad.Primitive.primitive
                                    @ m
                                    $dPrimMonad
                                    @ (Foreign.R.Internal.SEXP
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$s=<<
                                       @ (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                                       @ (Foreign.R.Internal.SEXP
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       (($dReifies
                                           `cast`
                                         (Data.Reflection.N:Reifies[0]
                                              <*>_N
                                              <s>_N
                                              <Control.Monad.R.Internal.AcquireIO
                                                 (Control.Monad.Primitive.PrimState m)>_N)
                                           @ Data.Proxy.Proxy
                                           (Data.Proxy.Proxy @ * @ s))
                                          `cast`
                                        (Control.Monad.R.Internal.N:AcquireIO[0]
                                             <Control.Monad.Primitive.PrimState m>_P)
                                          @ ty)
                                       (Foreign.R.allocVector
                                          @ ty
                                          $d(%,%)
                                          $dSingI
                                            `cast`
                                          (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                          eta2))
                                      `cast`
                                    (Trans
                                         (GHC.Types.N:IO[0]
                                              <Foreign.R.Internal.SEXP
                                                 (Control.Monad.Primitive.PrimState m) ty>_R)
                                         ((GHC.Prim.State#
                                             (Trans
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                  (Control.Monad.Primitive.PrimState
                                                     (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.VoidRep>_R
                                                  <'GHC.Types.PtrRepLifted>_R
                                                  (GHC.Prim.State#
                                                     (Trans
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                          (Control.Monad.Primitive.PrimState
                                                             (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                  <Foreign.R.Internal.SEXP
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_R)_R)))
                                 (\ (sx :: Foreign.R.Internal.SEXP
                                             (Control.Monad.Primitive.PrimState m) ty) ->
                                  GHC.Base.$
                                    @ 'GHC.Types.PtrRepLifted
                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a)
                                    @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a))
                                    (GHC.Base.return
                                       @ m
                                       $dMonad2
                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a))
                                    (GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                            (Control.Monad.Primitive.PrimState m) ty a)
                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a)
                                       (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                    (Control.Monad.Primitive.PrimState m) ty a) ->
                                        tpl)
                                         `cast`
                                       (<Data.Vector.SEXP.Mutable.Internal.MVector
                                           (Control.Monad.Primitive.PrimState m) ty a>_R
                                        ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                      <s>_P
                                                      <ty>_P
                                                      <Control.Monad.Primitive.PrimState
                                                         m>_P) <a>_N)
                                       (case (Foreign.R.Internal.unsafeRelease
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ ty
                                                @ (Control.Monad.Primitive.PrimState m)
                                                sx)
                                               `cast`
                                             (Foreign.R.Internal.N:SEXP[0]
                                                  <Control.Monad.Primitive.PrimState m>_P
                                                  <ty>_P) of dt { GHC.Ptr.Ptr dt1 ->
                                        case GHC.Int.$fBitsInt32_$cfromInteger
                                               0 of dt2 { GHC.Int.I32# dt3 ->
                                        case GHC.Base.id
                                               @ GHC.Types.Int
                                               eta2 of wild1 { GHC.Types.I# x# ->
                                        Data.Vector.SEXP.Mutable.Internal.MVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ ty
                                          @ a
                                          dt1
                                          dt3
                                          (GHC.Prim.narrow32Int# x#) } } })))
                            GHC.Types.True
                            -> Internal.Error.failure
                                 @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Data.Vector.SEXP.Mutable.new"#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "R character vectors are immutable and globally cached. Use 'mkChar' instead."#)) } })
                         (\ (v1 :: Data.Vector.SEXP.Mutable.Internal.W
                                     s ty (Control.Monad.Primitive.PrimState m) a) ->
                          GHC.Base.>>
                            @ m
                            $dMonad1
                            @ ()
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a)
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                             let {
                               $dMonad2 :: GHC.Base.Monad m
                               = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                             } in
                             case v1
                                    `cast`
                                  (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                       <s>_P
                                       <ty>_P
                                       <Control.Monad.Primitive.PrimState
                                          m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox3 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    nt
                                      `cast`
                                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                              <s>_P
                                              <ty>_P
                                              <Control.Monad.Primitive.PrimState
                                                 m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             case GHC.Base.id
                                    @ GHC.Types.Int
                                    (GHC.Types.I# dt2) of n { GHC.Types.I# ipv3 ->
                             letrec {
                               do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                               = \ (i :: GHC.Types.Int) ->
                                 case GHC.Classes.ltInt
                                        (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                        n of wild1 {
                                   GHC.Types.False
                                   -> let {
                                        eta3 :: Data.Vector.SEXP.Mutable.Internal.W
                                                  s ty (Control.Monad.Primitive.PrimState m) a
                                        = case GHC.Types.HEq_sc
                                                 @ *
                                                 @ *
                                                 @ (Data.Vector.SEXP.Base.ElemRep
                                                      (Control.Monad.Primitive.PrimState m) ty)
                                                 @ a
                                                 (GHC.Classes.$p4(%,,,%)
                                                    @ (Foreign.Storable.Storable a)
                                                    @ (Foreign.R.Type.IsVector ty)
                                                    @ (Data.Singletons.SingI ty)
                                                    @ (Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m) ty
                                                       Data.Type.Equality.~ a)
                                                    $d(%,,,%))
                                                   `cast`
                                                 (Data.Type.Equality.N:~[0]
                                                      <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox4 { DEFAULT ->
                                          case Data.Vector.SEXP.Mutable.Internal.unW
                                                 @ s
                                                 @ ty
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ a
                                                 nt
                                                   `cast`
                                                 (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                           <s>_P
                                                           <ty>_P
                                                           <Control.Monad.Primitive.PrimState
                                                              m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                          GHC.Base.$
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                 (Control.Monad.Primitive.PrimState m) ty a)
                                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                                 s ty (Control.Monad.Primitive.PrimState m) a)
                                            (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                         (Control.Monad.Primitive.PrimState m)
                                                         ty
                                                         a) ->
                                             tpl)
                                              `cast`
                                            (<Data.Vector.SEXP.Mutable.Internal.MVector
                                                (Control.Monad.Primitive.PrimState m) ty a>_R
                                             ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                           <s>_P
                                                           <ty>_P
                                                           <Control.Monad.Primitive.PrimState
                                                              m>_P) <a>_N)
                                            (case GHC.Base.id
                                                    @ GHC.Types.Int
                                                    i of wild3 { GHC.Types.I# x# ->
                                             case GHC.Int.$fNumInt32_$c+
                                                    (GHC.Int.I32# dt4)
                                                    (GHC.Int.I32#
                                                       (GHC.Prim.narrow32Int#
                                                          x#)) of dt6 { GHC.Int.I32# dt7 ->
                                             case GHC.Base.id
                                                    @ GHC.Types.Int
                                                    (GHC.Num.$fNumInt_$c-
                                                       n
                                                       i) of wild4 { GHC.Types.I# x#1 ->
                                             Data.Vector.SEXP.Mutable.Internal.MVector
                                               @ (Control.Monad.Primitive.PrimState m)
                                               @ ty
                                               @ a
                                               dt3
                                               dt7
                                               (GHC.Prim.narrow32Int# x#1) } } }) } }
                                      } in
                                      case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox4 { DEFAULT ->
                                      let {
                                        $dStorable :: Foreign.Storable.Storable a
                                        = GHC.Classes.$p1(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ (Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty
                                               Data.Type.Equality.~ a)
                                            $d(%,,,%)
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (GHC.Types.IO ())
                                        @ (m ())
                                        (Control.Monad.Primitive.unsafePrimToPrim
                                           @ GHC.Types.IO
                                           @ m
                                           @ ()
                                           Control.Monad.Primitive.$fPrimBaseIO
                                           $dPrimMonad)
                                        (Foreign.Marshal.Array.copyArray
                                           @ a
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                              @ a
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unW
                                                 @ s
                                                 @ ty
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ a
                                                 eta3))
                                           (case GHC.Types.HEq_sc
                                                   @ *
                                                   @ *
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   @ a
                                                   (GHC.Classes.$p4(%,,,%)
                                                      @ (Foreign.Storable.Storable a)
                                                      @ (Foreign.R.Type.IsVector ty)
                                                      @ (Data.Singletons.SingI ty)
                                                      @ (Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m) ty
                                                         Data.Type.Equality.~ a)
                                                      $d(%,,,%))
                                                     `cast`
                                                   (Data.Type.Equality.N:~[0]
                                                        <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty>_N <a>_N) of cobox5 { DEFAULT ->
                                            case Data.Vector.SEXP.Mutable.Internal.unW
                                                   @ s
                                                   @ ty
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   @ a
                                                   nt
                                                     `cast`
                                                   (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                             <s>_P
                                                             <ty>_P
                                                             <Control.Monad.Primitive.PrimState
                                                                m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                            Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                              @ a
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unW
                                                 @ s
                                                 @ ty
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ a
                                                 (GHC.Base.$
                                                    @ 'GHC.Types.PtrRepLifted
                                                    @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                         (Control.Monad.Primitive.PrimState m) ty a)
                                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                                         s
                                                         ty
                                                         (Control.Monad.Primitive.PrimState m)
                                                         a)
                                                    (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty
                                                                 a) ->
                                                     tpl)
                                                      `cast`
                                                    (<Data.Vector.SEXP.Mutable.Internal.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty
                                                        a>_R
                                                     ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                                   <s>_P
                                                                   <ty>_P
                                                                   <Control.Monad.Primitive.PrimState
                                                                      m>_P) <a>_N)
                                                    (case GHC.Base.id
                                                            @ GHC.Types.Int
                                                            (GHC.Types.I#
                                                               0#) of wild3 { GHC.Types.I# x# ->
                                                     case GHC.Int.$fNumInt32_$c+
                                                            (GHC.Int.I32# dt4)
                                                            (GHC.Int.I32#
                                                               (GHC.Prim.narrow32Int#
                                                                  x#)) of dt6 { GHC.Int.I32# dt7 ->
                                                     case GHC.Base.id
                                                            @ GHC.Types.Int
                                                            (GHC.Num.$fNumInt_$c-
                                                               n
                                                               i) of wild4 { GHC.Types.I# x#1 ->
                                                     Data.Vector.SEXP.Mutable.Internal.MVector
                                                       @ (Control.Monad.Primitive.PrimState m)
                                                       @ ty
                                                       @ a
                                                       dt3
                                                       dt7
                                                       (GHC.Prim.narrow32Int# x#1) } } }))) } })
                                           (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                              @ s
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              @ a
                                              $dReifies
                                              $d(%,,,%)
                                              @ (Control.Monad.Primitive.PrimState m)
                                              eta3)) }
                                   GHC.Types.True
                                   -> GHC.Base.>>
                                        @ m
                                        $dMonad2
                                        @ ()
                                        @ ()
                                        (let {
                                           eta3 :: Data.Vector.SEXP.Mutable.Internal.W
                                                     s ty (Control.Monad.Primitive.PrimState m) a
                                           = case GHC.Types.HEq_sc
                                                    @ *
                                                    @ *
                                                    @ (Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m) ty)
                                                    @ a
                                                    (GHC.Classes.$p4(%,,,%)
                                                       @ (Foreign.Storable.Storable a)
                                                       @ (Foreign.R.Type.IsVector ty)
                                                       @ (Data.Singletons.SingI ty)
                                                       @ (Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.Primitive.PrimState m) ty
                                                          Data.Type.Equality.~ a)
                                                       $d(%,,,%))
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox4 { DEFAULT ->
                                             case Data.Vector.SEXP.Mutable.Internal.unW
                                                    @ s
                                                    @ ty
                                                    @ (Control.Monad.Primitive.PrimState m)
                                                    @ a
                                                    nt
                                                      `cast`
                                                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                              <s>_P
                                                              <ty>_P
                                                              <Control.Monad.Primitive.PrimState
                                                                 m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                             GHC.Base.$
                                               @ 'GHC.Types.PtrRepLifted
                                               @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                    (Control.Monad.Primitive.PrimState m) ty a)
                                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                                    s ty (Control.Monad.Primitive.PrimState m) a)
                                               (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                            (Control.Monad.Primitive.PrimState m)
                                                            ty
                                                            a) ->
                                                tpl)
                                                 `cast`
                                               (<Data.Vector.SEXP.Mutable.Internal.MVector
                                                   (Control.Monad.Primitive.PrimState m) ty a>_R
                                                ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                              <s>_P
                                                              <ty>_P
                                                              <Control.Monad.Primitive.PrimState
                                                                 m>_P) <a>_N)
                                               (case GHC.Base.id
                                                       @ GHC.Types.Int
                                                       i of wild3 { GHC.Types.I# x# ->
                                                case GHC.Int.$fNumInt32_$c+
                                                       (GHC.Int.I32# dt4)
                                                       (GHC.Int.I32#
                                                          (GHC.Prim.narrow32Int#
                                                             x#)) of dt6 { GHC.Int.I32# dt7 ->
                                                case GHC.Base.id
                                                       @ GHC.Types.Int
                                                       i of wild4 { GHC.Types.I# x#1 ->
                                                Data.Vector.SEXP.Mutable.Internal.MVector
                                                  @ (Control.Monad.Primitive.PrimState m)
                                                  @ ty
                                                  @ a
                                                  dt3
                                                  dt7
                                                  (GHC.Prim.narrow32Int# x#1) } } }) } }
                                         } in
                                         case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty
                                                      Data.Type.Equality.~ a)
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox4 { DEFAULT ->
                                         let {
                                           $dStorable :: Foreign.Storable.Storable a
                                           = GHC.Classes.$p1(%,,,%)
                                               @ (Foreign.Storable.Storable a)
                                               @ (Foreign.R.Type.IsVector ty)
                                               @ (Data.Singletons.SingI ty)
                                               @ (Data.Vector.SEXP.Base.ElemRep
                                                    (Control.Monad.Primitive.PrimState m) ty
                                                  Data.Type.Equality.~ a)
                                               $d(%,,,%)
                                         } in
                                         GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (GHC.Types.IO ())
                                           @ (m ())
                                           (Control.Monad.Primitive.unsafePrimToPrim
                                              @ GHC.Types.IO
                                              @ m
                                              @ ()
                                              Control.Monad.Primitive.$fPrimBaseIO
                                              $dPrimMonad)
                                           (Foreign.Marshal.Array.copyArray
                                              @ a
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                                 @ a
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ ty
                                                 $dStorable
                                                 (Data.Vector.SEXP.Mutable.Internal.unW
                                                    @ s
                                                    @ ty
                                                    @ (Control.Monad.Primitive.PrimState m)
                                                    @ a
                                                    eta3))
                                              (case GHC.Types.HEq_sc
                                                      @ *
                                                      @ *
                                                      @ (Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m) ty)
                                                      @ a
                                                      (GHC.Classes.$p4(%,,,%)
                                                         @ (Foreign.Storable.Storable a)
                                                         @ (Foreign.R.Type.IsVector ty)
                                                         @ (Data.Singletons.SingI ty)
                                                         @ (Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty
                                                            Data.Type.Equality.~ a)
                                                         $d(%,,,%))
                                                        `cast`
                                                      (Data.Type.Equality.N:~[0]
                                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                    (Control.Monad.Primitive.PrimState
                                                                       m)
                                                                    ty>_N <a>_N) of cobox5 { DEFAULT ->
                                               case Data.Vector.SEXP.Mutable.Internal.unW
                                                      @ s
                                                      @ ty
                                                      @ (Control.Monad.Primitive.PrimState m)
                                                      @ a
                                                      nt
                                                        `cast`
                                                      (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                                <s>_P
                                                                <ty>_P
                                                                <Control.Monad.Primitive.PrimState
                                                                   m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                               Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                                 @ a
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ ty
                                                 $dStorable
                                                 (Data.Vector.SEXP.Mutable.Internal.unW
                                                    @ s
                                                    @ ty
                                                    @ (Control.Monad.Primitive.PrimState m)
                                                    @ a
                                                    (GHC.Base.$
                                                       @ 'GHC.Types.PtrRepLifted
                                                       @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                            (Control.Monad.Primitive.PrimState m)
                                                            ty
                                                            a)
                                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                                            s
                                                            ty
                                                            (Control.Monad.Primitive.PrimState m)
                                                            a)
                                                       (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                                    (Control.Monad.Primitive.PrimState
                                                                       m)
                                                                    ty
                                                                    a) ->
                                                        tpl)
                                                         `cast`
                                                       (<Data.Vector.SEXP.Mutable.Internal.MVector
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty
                                                           a>_R
                                                        ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                                      <s>_P
                                                                      <ty>_P
                                                                      <Control.Monad.Primitive.PrimState
                                                                         m>_P) <a>_N)
                                                       (case GHC.Base.id
                                                               @ GHC.Types.Int
                                                               (GHC.Types.I#
                                                                  0#) of wild3 { GHC.Types.I# x# ->
                                                        case GHC.Int.$fNumInt32_$c+
                                                               (GHC.Int.I32# dt4)
                                                               (GHC.Int.I32#
                                                                  (GHC.Prim.narrow32Int#
                                                                     x#)) of dt6 { GHC.Int.I32# dt7 ->
                                                        case GHC.Base.id
                                                               @ GHC.Types.Int
                                                               i of wild4 { GHC.Types.I# x#1 ->
                                                        Data.Vector.SEXP.Mutable.Internal.MVector
                                                          @ (Control.Monad.Primitive.PrimState m)
                                                          @ ty
                                                          @ a
                                                          dt3
                                                          dt7
                                                          (GHC.Prim.narrow32Int# x#1) } } }))) } })
                                              (case GHC.Types.HEq_sc
                                                      @ *
                                                      @ *
                                                      @ (Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m) ty)
                                                      @ a
                                                      (GHC.Classes.$p4(%,,,%)
                                                         @ (Foreign.Storable.Storable a)
                                                         @ (Foreign.R.Type.IsVector ty)
                                                         @ (Data.Singletons.SingI ty)
                                                         @ (Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty
                                                            Data.Type.Equality.~ a)
                                                         $d(%,,,%))
                                                        `cast`
                                                      (Data.Type.Equality.N:~[0]
                                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                    (Control.Monad.Primitive.PrimState
                                                                       m)
                                                                    ty>_N <a>_N) of cobox5 { DEFAULT ->
                                               case Data.Vector.SEXP.Mutable.Internal.unW
                                                      @ s
                                                      @ ty
                                                      @ (Control.Monad.Primitive.PrimState m)
                                                      @ a
                                                      eta3 of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                               GHC.Base.id
                                                 @ GHC.Types.Int
                                                 (GHC.Types.I# dt5) } })) })
                                        (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                             } in
                             case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild1 {
                               GHC.Types.False
                               -> GHC.Base.>>
                                    @ m
                                    $dMonad2
                                    @ ()
                                    @ ()
                                    (case GHC.Types.HEq_sc
                                            @ *
                                            @ *
                                            @ (Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty)
                                            @ a
                                            (GHC.Classes.$p4(%,,,%)
                                               @ (Foreign.Storable.Storable a)
                                               @ (Foreign.R.Type.IsVector ty)
                                               @ (Data.Singletons.SingI ty)
                                               @ (Data.Vector.SEXP.Base.ElemRep
                                                    (Control.Monad.Primitive.PrimState m) ty
                                                  Data.Type.Equality.~ a)
                                               $d(%,,,%))
                                              `cast`
                                            (Data.Type.Equality.N:~[0]
                                                 <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                          (Control.Monad.Primitive.PrimState m)
                                                          ty>_N <a>_N) of cobox4 { DEFAULT ->
                                     let {
                                       $dStorable :: Foreign.Storable.Storable a
                                       = GHC.Classes.$p1(%,,,%)
                                           @ (Foreign.Storable.Storable a)
                                           @ (Foreign.R.Type.IsVector ty)
                                           @ (Data.Singletons.SingI ty)
                                           @ (Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty
                                              Data.Type.Equality.~ a)
                                           $d(%,,,%)
                                     } in
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (GHC.Types.IO ())
                                       @ (m ())
                                       (Control.Monad.Primitive.unsafePrimToPrim
                                          @ GHC.Types.IO
                                          @ m
                                          @ ()
                                          Control.Monad.Primitive.$fPrimBaseIO
                                          $dPrimMonad)
                                       (Foreign.Storable.pokeElemOff
                                          @ a
                                          $dStorable
                                          (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                             @ a
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ ty
                                             $dStorable
                                             (Data.Vector.SEXP.Mutable.Internal.unW
                                                @ s
                                                @ ty
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ a
                                                nt
                                                  `cast`
                                                (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                          <s>_P
                                                          <ty>_P
                                                          <Control.Monad.Primitive.PrimState
                                                             m>_P) <a>_N)))
                                          (GHC.Types.I# 0#)
                                          eta1) })
                                    (do_set (GHC.Types.I# 1#))
                               GHC.Types.True
                               -> GHC.Base.return @ m $dMonad2 @ () GHC.Tuple.() } } } } } })
                            (GHC.Base.return
                               @ m
                               $dMonad1
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a)
                               v1)) })) }) -}
e18982933bc76fec3e2eb7f94654a03b
  replicateM ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> m a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(U,U,U,U,U),U),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: m a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a))
                      @ (Data.Proxy.Proxy s
                         -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                                 (Control.Monad.R.Class.Region m) ty a))
                      (Data.Vector.SEXP.Mutable.Internal.proxyW
                         @ m
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a
                         @ Data.Proxy.Proxy
                         $dMonad)
                      (Data.Vector.Generic.Mutable.munstream
                         @ m
                         @ (Data.Vector.SEXP.Mutable.Internal.W s ty)
                         @ a
                         @ GHC.Prim.Any
                         $dPrimMonad
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%))
                         (Data.Vector.Fusion.Bundle.Monadic.replicateM
                            @ m
                            @ a
                            @ GHC.Prim.Any
                            (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                            eta
                            eta1))) }) -}
b518eade11b7fdebf67f57a9ee45f690
  set ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> a -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty
                                 Data.Type.Equality.~ a)
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox1 { DEFAULT ->
                    let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    case (Data.Vector.SEXP.Mutable.Internal.withW
                            @ Data.Proxy.Proxy
                            @ s
                            @ (Control.Monad.R.Class.Region m)
                            @ ty
                            @ a
                            p
                            eta)
                           `cast`
                         (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                              <s>_P
                              <ty>_P
                              <Control.Monad.Primitive.PrimState
                                 m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.Primitive.PrimState m) ty)
                           @ a
                           (GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty
                                 Data.Type.Equality.~ a)
                              $d(%,,,%))
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               (Control.Monad.Primitive.PrimState m)
                                                               ty>_N <a>_N) of cobox2 { DEFAULT ->
                    case Data.Vector.SEXP.Mutable.Internal.unW
                           @ s
                           @ ty
                           @ (Control.Monad.Primitive.PrimState m)
                           @ a
                           nt
                             `cast`
                           (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                     <s>_P
                                     <ty>_P
                                     <Control.Monad.Primitive.PrimState
                                        m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                    case GHC.Base.id
                           @ GHC.Types.Int
                           (GHC.Types.I# dt2) of n { GHC.Types.I# ipv3 ->
                    letrec {
                      do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                      = \ (i :: GHC.Types.Int) ->
                        case GHC.Classes.ltInt
                               (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                               n of wild1 {
                          GHC.Types.False
                          -> let {
                               eta3 :: Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a
                               = case GHC.Types.HEq_sc
                                        @ *
                                        @ *
                                        @ (Data.Vector.SEXP.Base.ElemRep
                                             (Control.Monad.Primitive.PrimState m) ty)
                                        @ a
                                        (GHC.Classes.$p4(%,,,%)
                                           @ (Foreign.Storable.Storable a)
                                           @ (Foreign.R.Type.IsVector ty)
                                           @ (Data.Singletons.SingI ty)
                                           @ (Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty
                                              Data.Type.Equality.~ a)
                                           $d(%,,,%))
                                          `cast`
                                        (Data.Type.Equality.N:~[0]
                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                      (Control.Monad.Primitive.PrimState m)
                                                      ty>_N <a>_N) of cobox3 { DEFAULT ->
                                 case Data.Vector.SEXP.Mutable.Internal.unW
                                        @ s
                                        @ ty
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ a
                                        nt
                                          `cast`
                                        (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                  <s>_P
                                                  <ty>_P
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                 GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                        (Control.Monad.Primitive.PrimState m) ty a)
                                   @ (Data.Vector.SEXP.Mutable.Internal.W
                                        s ty (Control.Monad.Primitive.PrimState m) a)
                                   (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                (Control.Monad.Primitive.PrimState m) ty a) ->
                                    tpl)
                                     `cast`
                                   (<Data.Vector.SEXP.Mutable.Internal.MVector
                                       (Control.Monad.Primitive.PrimState m) ty a>_R
                                    ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                  <s>_P
                                                  <ty>_P
                                                  <Control.Monad.Primitive.PrimState m>_P) <a>_N)
                                   (case GHC.Base.id @ GHC.Types.Int i of wild3 { GHC.Types.I# x# ->
                                    case GHC.Int.$fNumInt32_$c+
                                           (GHC.Int.I32# dt4)
                                           (GHC.Int.I32#
                                              (GHC.Prim.narrow32Int#
                                                 x#)) of dt6 { GHC.Int.I32# dt7 ->
                                    case GHC.Base.id
                                           @ GHC.Types.Int
                                           (GHC.Num.$fNumInt_$c- n i) of wild4 { GHC.Types.I# x#1 ->
                                    Data.Vector.SEXP.Mutable.Internal.MVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ ty
                                      @ a
                                      dt3
                                      dt7
                                      (GHC.Prim.narrow32Int# x#1) } } }) } }
                             } in
                             case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox3 { DEFAULT ->
                             let {
                               $dStorable :: Foreign.Storable.Storable a
                               = GHC.Classes.$p1(%,,,%)
                                   @ (Foreign.Storable.Storable a)
                                   @ (Foreign.R.Type.IsVector ty)
                                   @ (Data.Singletons.SingI ty)
                                   @ (Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty
                                      Data.Type.Equality.~ a)
                                   $d(%,,,%)
                             } in
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO ())
                               @ (m ())
                               (Control.Monad.Primitive.unsafePrimToPrim
                                  @ GHC.Types.IO
                                  @ m
                                  @ ()
                                  Control.Monad.Primitive.$fPrimBaseIO
                                  $dPrimMonad)
                               (Foreign.Marshal.Array.copyArray
                                  @ a
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                     @ a
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     $dStorable
                                     (Data.Vector.SEXP.Mutable.Internal.unW
                                        @ s
                                        @ ty
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ a
                                        eta3))
                                  (case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox4 { DEFAULT ->
                                   case Data.Vector.SEXP.Mutable.Internal.unW
                                          @ s
                                          @ ty
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ a
                                          nt
                                            `cast`
                                          (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                    <s>_P
                                                    <ty>_P
                                                    <Control.Monad.Primitive.PrimState
                                                       m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                   Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                     @ a
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     $dStorable
                                     (Data.Vector.SEXP.Mutable.Internal.unW
                                        @ s
                                        @ ty
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ a
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                (Control.Monad.Primitive.PrimState m) ty a)
                                           @ (Data.Vector.SEXP.Mutable.Internal.W
                                                s ty (Control.Monad.Primitive.PrimState m) a)
                                           (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty
                                                        a) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.SEXP.Mutable.Internal.MVector
                                               (Control.Monad.Primitive.PrimState m) ty a>_R
                                            ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                          <s>_P
                                                          <ty>_P
                                                          <Control.Monad.Primitive.PrimState
                                                             m>_P) <a>_N)
                                           (case GHC.Base.id
                                                   @ GHC.Types.Int
                                                   (GHC.Types.I# 0#) of wild3 { GHC.Types.I# x# ->
                                            case GHC.Int.$fNumInt32_$c+
                                                   (GHC.Int.I32# dt4)
                                                   (GHC.Int.I32#
                                                      (GHC.Prim.narrow32Int#
                                                         x#)) of dt6 { GHC.Int.I32# dt7 ->
                                            case GHC.Base.id
                                                   @ GHC.Types.Int
                                                   (GHC.Num.$fNumInt_$c-
                                                      n
                                                      i) of wild4 { GHC.Types.I# x#1 ->
                                            Data.Vector.SEXP.Mutable.Internal.MVector
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              @ a
                                              dt3
                                              dt7
                                              (GHC.Prim.narrow32Int# x#1) } } }))) } })
                                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                     @ s
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     @ a
                                     $dReifies
                                     $d(%,,,%)
                                     @ (Control.Monad.Primitive.PrimState m)
                                     eta3)) }
                          GHC.Types.True
                          -> GHC.Base.>>
                               @ m
                               $dMonad
                               @ ()
                               @ ()
                               (let {
                                  eta3 :: Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a
                                  = case GHC.Types.HEq_sc
                                           @ *
                                           @ *
                                           @ (Data.Vector.SEXP.Base.ElemRep
                                                (Control.Monad.Primitive.PrimState m) ty)
                                           @ a
                                           (GHC.Classes.$p4(%,,,%)
                                              @ (Foreign.Storable.Storable a)
                                              @ (Foreign.R.Type.IsVector ty)
                                              @ (Data.Singletons.SingI ty)
                                              @ (Data.Vector.SEXP.Base.ElemRep
                                                   (Control.Monad.Primitive.PrimState m) ty
                                                 Data.Type.Equality.~ a)
                                              $d(%,,,%))
                                             `cast`
                                           (Data.Type.Equality.N:~[0]
                                                <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                         (Control.Monad.Primitive.PrimState m)
                                                         ty>_N <a>_N) of cobox3 { DEFAULT ->
                                    case Data.Vector.SEXP.Mutable.Internal.unW
                                           @ s
                                           @ ty
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ a
                                           nt
                                             `cast`
                                           (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                     <s>_P
                                                     <ty>_P
                                                     <Control.Monad.Primitive.PrimState
                                                        m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                    GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                           (Control.Monad.Primitive.PrimState m) ty a)
                                      @ (Data.Vector.SEXP.Mutable.Internal.W
                                           s ty (Control.Monad.Primitive.PrimState m) a)
                                      (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                   (Control.Monad.Primitive.PrimState m) ty a) ->
                                       tpl)
                                        `cast`
                                      (<Data.Vector.SEXP.Mutable.Internal.MVector
                                          (Control.Monad.Primitive.PrimState m) ty a>_R
                                       ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                     <s>_P
                                                     <ty>_P
                                                     <Control.Monad.Primitive.PrimState m>_P) <a>_N)
                                      (case GHC.Base.id
                                              @ GHC.Types.Int
                                              i of wild3 { GHC.Types.I# x# ->
                                       case GHC.Int.$fNumInt32_$c+
                                              (GHC.Int.I32# dt4)
                                              (GHC.Int.I32#
                                                 (GHC.Prim.narrow32Int#
                                                    x#)) of dt6 { GHC.Int.I32# dt7 ->
                                       case GHC.Base.id
                                              @ GHC.Types.Int
                                              i of wild4 { GHC.Types.I# x#1 ->
                                       Data.Vector.SEXP.Mutable.Internal.MVector
                                         @ (Control.Monad.Primitive.PrimState m)
                                         @ ty
                                         @ a
                                         dt3
                                         dt7
                                         (GHC.Prim.narrow32Int# x#1) } } }) } }
                                } in
                                case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox3 { DEFAULT ->
                                let {
                                  $dStorable :: Foreign.Storable.Storable a
                                  = GHC.Classes.$p1(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ (Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty
                                         Data.Type.Equality.~ a)
                                      $d(%,,,%)
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (GHC.Types.IO ())
                                  @ (m ())
                                  (Control.Monad.Primitive.unsafePrimToPrim
                                     @ GHC.Types.IO
                                     @ m
                                     @ ()
                                     Control.Monad.Primitive.$fPrimBaseIO
                                     $dPrimMonad)
                                  (Foreign.Marshal.Array.copyArray
                                     @ a
                                     $dStorable
                                     (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                        @ a
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unW
                                           @ s
                                           @ ty
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ a
                                           eta3))
                                     (case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox4 { DEFAULT ->
                                      case Data.Vector.SEXP.Mutable.Internal.unW
                                             @ s
                                             @ ty
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ a
                                             nt
                                               `cast`
                                             (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                       <s>_P
                                                       <ty>_P
                                                       <Control.Monad.Primitive.PrimState
                                                          m>_P) <a>_N) of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                      Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                        @ a
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unW
                                           @ s
                                           @ ty
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ a
                                           (GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                   (Control.Monad.Primitive.PrimState m) ty a)
                                              @ (Data.Vector.SEXP.Mutable.Internal.W
                                                   s ty (Control.Monad.Primitive.PrimState m) a)
                                              (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty
                                                           a) ->
                                               tpl)
                                                `cast`
                                              (<Data.Vector.SEXP.Mutable.Internal.MVector
                                                  (Control.Monad.Primitive.PrimState m) ty a>_R
                                               ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                             <s>_P
                                                             <ty>_P
                                                             <Control.Monad.Primitive.PrimState
                                                                m>_P) <a>_N)
                                              (case GHC.Base.id
                                                      @ GHC.Types.Int
                                                      (GHC.Types.I#
                                                         0#) of wild3 { GHC.Types.I# x# ->
                                               case GHC.Int.$fNumInt32_$c+
                                                      (GHC.Int.I32# dt4)
                                                      (GHC.Int.I32#
                                                         (GHC.Prim.narrow32Int#
                                                            x#)) of dt6 { GHC.Int.I32# dt7 ->
                                               case GHC.Base.id
                                                      @ GHC.Types.Int
                                                      i of wild4 { GHC.Types.I# x#1 ->
                                               Data.Vector.SEXP.Mutable.Internal.MVector
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ ty
                                                 @ a
                                                 dt3
                                                 dt7
                                                 (GHC.Prim.narrow32Int# x#1) } } }))) } })
                                     (case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox4 { DEFAULT ->
                                      case Data.Vector.SEXP.Mutable.Internal.unW
                                             @ s
                                             @ ty
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ a
                                             eta3 of wild2 { Data.Vector.SEXP.Mutable.Internal.MVector dt3 dt4 dt5 ->
                                      GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt5) } })) })
                               (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                    } in
                    case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild1 {
                      GHC.Types.False
                      -> GHC.Base.>>
                           @ m
                           $dMonad
                           @ ()
                           @ ()
                           (case GHC.Types.HEq_sc
                                   @ *
                                   @ *
                                   @ (Data.Vector.SEXP.Base.ElemRep
                                        (Control.Monad.Primitive.PrimState m) ty)
                                   @ a
                                   (GHC.Classes.$p4(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ (Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty
                                         Data.Type.Equality.~ a)
                                      $d(%,,,%))
                                     `cast`
                                   (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                       (Control.Monad.Primitive.PrimState
                                                                          m)
                                                                       ty>_N <a>_N) of cobox3 { DEFAULT ->
                            let {
                              $dStorable :: Foreign.Storable.Storable a
                              = GHC.Classes.$p1(%,,,%)
                                  @ (Foreign.Storable.Storable a)
                                  @ (Foreign.R.Type.IsVector ty)
                                  @ (Data.Singletons.SingI ty)
                                  @ (Data.Vector.SEXP.Base.ElemRep
                                       (Control.Monad.Primitive.PrimState m) ty
                                     Data.Type.Equality.~ a)
                                  $d(%,,,%)
                            } in
                            GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ (GHC.Types.IO ())
                              @ (m ())
                              (Control.Monad.Primitive.unsafePrimToPrim
                                 @ GHC.Types.IO
                                 @ m
                                 @ ()
                                 Control.Monad.Primitive.$fPrimBaseIO
                                 $dPrimMonad)
                              (Foreign.Storable.pokeElemOff
                                 @ a
                                 $dStorable
                                 (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                    @ a
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ ty
                                    $dStorable
                                    (Data.Vector.SEXP.Mutable.Internal.unW
                                       @ s
                                       @ ty
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ a
                                       nt
                                         `cast`
                                       (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                                 (GHC.Types.I# 0#)
                                 eta1) })
                           (do_set (GHC.Types.I# 1#))
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } } } } }) }) -}
24517305dd603555ab0a0a10b9ed8e5d
  slice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(S),U(U)><S(SSS),U(U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 513#)
                            Data.Vector.Internal.Check.Bounds
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "slice"#))
                            eta
                            eta1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (Data.Vector.Internal.Check.checkSlice
                               @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 552#)
                               Data.Vector.Internal.Check.Unsafe
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                               eta
                               eta1
                               (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                  @ t
                                  @ s
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  @ s
                                  x))
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeSlice
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               eta
                               eta1
                               x))))
                   eta2 }) -}
b2d2a60f8310464fd2fc632d727abce7
  splitAt ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> (Data.Vector.SEXP.Mutable.Internal.MVector s ty a,
        Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><L,1*U(U)><L,U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a,
                      Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot] ->
                    Data.Vector.SEXP.Mutable.$s>>>
                      @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                      @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a,
                         Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a,
                         Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                      (Data.Vector.Generic.Mutable.splitAt
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty)
                         @ a
                         @ s
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                            @ t
                            @ s
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%))
                         eta)
                      (Control.Arrow.$fArrow(->)_$c***
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                         (Data.Vector.SEXP.Mutable.Internal.unW @ t @ ty @ s @ a)
                         (Data.Vector.SEXP.Mutable.Internal.unW @ t @ ty @ s @ a)))
                   eta1 }) -}
6d30036ecdc333286e0660d093376696
  swap ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> GHC.Types.Int -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      v1 :: Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.checkIndex
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 709#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "swap"#))
                         eta1
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ (Control.Monad.Primitive.PrimState m)
                            v1))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.checkIndex
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 710#)
                            Data.Vector.Internal.Check.Bounds
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "swap"#))
                            eta2
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ s
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ (Control.Monad.Primitive.PrimState m)
                               v1))
                         (let {
                            $dMonad :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (m ())
                            @ (m ())
                            (Data.Vector.Internal.Check.checkIndex
                               @ (m ())
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 743#)
                               Data.Vector.Internal.Check.Unsafe
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSwap"#))
                               eta1
                               (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                  @ s
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  @ (Control.Monad.Primitive.PrimState m)
                                  v1))
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (m ())
                               @ (m ())
                               (Data.Vector.Internal.Check.checkIndex
                                  @ (m ())
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Vector/Generic/Mutable.hs"#))
                                  (GHC.Types.I# 744#)
                                  Data.Vector.Internal.Check.Unsafe
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSwap"#))
                                  eta2
                                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                     @ s
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     @ a
                                     $dReifies
                                     $d(%,,,%)
                                     @ (Control.Monad.Primitive.PrimState m)
                                     v1))
                               (GHC.Base.>>=
                                  @ m
                                  $dMonad
                                  @ a
                                  @ ()
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (m a)
                                     @ (m a)
                                     (Data.Vector.Internal.Check.checkIndex
                                        @ (m a)
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "./Data/Vector/Generic/Mutable.hs"#))
                                        (GHC.Types.I# 722#)
                                        Data.Vector.Internal.Check.Unsafe
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "unsafeRead"#))
                                        eta1
                                        (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                           @ s
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           @ a
                                           $dReifies
                                           $d(%,,,%)
                                           @ (Control.Monad.Primitive.PrimState m)
                                           v1))
                                     (case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox1 { DEFAULT ->
                                      let {
                                        $dStorable :: Foreign.Storable.Storable a
                                        = GHC.Classes.$p1(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ (Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty
                                               Data.Type.Equality.~ a)
                                            $d(%,,,%)
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (GHC.Types.IO a)
                                        @ (m a)
                                        (Control.Monad.Primitive.unsafePrimToPrim
                                           @ GHC.Types.IO
                                           @ m
                                           @ a
                                           Control.Monad.Primitive.$fPrimBaseIO
                                           $dPrimMonad)
                                        (Foreign.Storable.peekElemOff
                                           @ a
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                              @ a
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unW
                                                 @ s
                                                 @ ty
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ a
                                                 v1))
                                           eta1) }))
                                  (\ (x :: a) ->
                                   GHC.Base.>>=
                                     @ m
                                     $dMonad
                                     @ a
                                     @ ()
                                     (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (m a)
                                        @ (m a)
                                        (Data.Vector.Internal.Check.checkIndex
                                           @ (m a)
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "./Data/Vector/Generic/Mutable.hs"#))
                                           (GHC.Types.I# 722#)
                                           Data.Vector.Internal.Check.Unsafe
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString# @ b "unsafeRead"#))
                                           eta2
                                           (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                              @ s
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              @ a
                                              $dReifies
                                              $d(%,,,%)
                                              @ (Control.Monad.Primitive.PrimState m)
                                              v1))
                                        (case GHC.Types.HEq_sc
                                                @ *
                                                @ *
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty)
                                                @ a
                                                (GHC.Classes.$p4(%,,,%)
                                                   @ (Foreign.Storable.Storable a)
                                                   @ (Foreign.R.Type.IsVector ty)
                                                   @ (Data.Singletons.SingI ty)
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty
                                                      Data.Type.Equality.~ a)
                                                   $d(%,,,%))
                                                  `cast`
                                                (Data.Type.Equality.N:~[0]
                                                     <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                              (Control.Monad.Primitive.PrimState m)
                                                              ty>_N <a>_N) of cobox1 { DEFAULT ->
                                         let {
                                           $dStorable :: Foreign.Storable.Storable a
                                           = GHC.Classes.$p1(%,,,%)
                                               @ (Foreign.Storable.Storable a)
                                               @ (Foreign.R.Type.IsVector ty)
                                               @ (Data.Singletons.SingI ty)
                                               @ (Data.Vector.SEXP.Base.ElemRep
                                                    (Control.Monad.Primitive.PrimState m) ty
                                                  Data.Type.Equality.~ a)
                                               $d(%,,,%)
                                         } in
                                         GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (GHC.Types.IO a)
                                           @ (m a)
                                           (Control.Monad.Primitive.unsafePrimToPrim
                                              @ GHC.Types.IO
                                              @ m
                                              @ a
                                              Control.Monad.Primitive.$fPrimBaseIO
                                              $dPrimMonad)
                                           (Foreign.Storable.peekElemOff
                                              @ a
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                                 @ a
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ ty
                                                 $dStorable
                                                 (Data.Vector.SEXP.Mutable.Internal.unW
                                                    @ s
                                                    @ ty
                                                    @ (Control.Monad.Primitive.PrimState m)
                                                    @ a
                                                    v1))
                                              eta2) }))
                                     (\ (y :: a) ->
                                      GHC.Base.>>
                                        @ m
                                        $dMonad
                                        @ ()
                                        @ ()
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (m ())
                                           @ (m ())
                                           (Data.Vector.Internal.Check.checkIndex
                                              @ (m ())
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "./Data/Vector/Generic/Mutable.hs"#))
                                              (GHC.Types.I# 729#)
                                              Data.Vector.Internal.Check.Unsafe
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "unsafeWrite"#))
                                              eta1
                                              (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                                 @ s
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ ty
                                                 @ a
                                                 $dReifies
                                                 $d(%,,,%)
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 v1))
                                           (case GHC.Types.HEq_sc
                                                   @ *
                                                   @ *
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   @ a
                                                   (GHC.Classes.$p4(%,,,%)
                                                      @ (Foreign.Storable.Storable a)
                                                      @ (Foreign.R.Type.IsVector ty)
                                                      @ (Data.Singletons.SingI ty)
                                                      @ (Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m) ty
                                                         Data.Type.Equality.~ a)
                                                      $d(%,,,%))
                                                     `cast`
                                                   (Data.Type.Equality.N:~[0]
                                                        <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty>_N <a>_N) of cobox1 { DEFAULT ->
                                            let {
                                              $dStorable :: Foreign.Storable.Storable a
                                              = GHC.Classes.$p1(%,,,%)
                                                  @ (Foreign.Storable.Storable a)
                                                  @ (Foreign.R.Type.IsVector ty)
                                                  @ (Data.Singletons.SingI ty)
                                                  @ (Data.Vector.SEXP.Base.ElemRep
                                                       (Control.Monad.Primitive.PrimState m) ty
                                                     Data.Type.Equality.~ a)
                                                  $d(%,,,%)
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (GHC.Types.IO ())
                                              @ (m ())
                                              (Control.Monad.Primitive.unsafePrimToPrim
                                                 @ GHC.Types.IO
                                                 @ m
                                                 @ ()
                                                 Control.Monad.Primitive.$fPrimBaseIO
                                                 $dPrimMonad)
                                              (Foreign.Storable.pokeElemOff
                                                 @ a
                                                 $dStorable
                                                 (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                                    @ a
                                                    @ (Control.Monad.Primitive.PrimState m)
                                                    @ ty
                                                    $dStorable
                                                    (Data.Vector.SEXP.Mutable.Internal.unW
                                                       @ s
                                                       @ ty
                                                       @ (Control.Monad.Primitive.PrimState m)
                                                       @ a
                                                       v1))
                                                 eta1
                                                 y) }))
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (m ())
                                           @ (m ())
                                           (Data.Vector.Internal.Check.checkIndex
                                              @ (m ())
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "./Data/Vector/Generic/Mutable.hs"#))
                                              (GHC.Types.I# 729#)
                                              Data.Vector.Internal.Check.Unsafe
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "unsafeWrite"#))
                                              eta2
                                              (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                                 @ s
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ ty
                                                 @ a
                                                 $dReifies
                                                 $d(%,,,%)
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 v1))
                                           (case GHC.Types.HEq_sc
                                                   @ *
                                                   @ *
                                                   @ (Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m) ty)
                                                   @ a
                                                   (GHC.Classes.$p4(%,,,%)
                                                      @ (Foreign.Storable.Storable a)
                                                      @ (Foreign.R.Type.IsVector ty)
                                                      @ (Data.Singletons.SingI ty)
                                                      @ (Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m) ty
                                                         Data.Type.Equality.~ a)
                                                      $d(%,,,%))
                                                     `cast`
                                                   (Data.Type.Equality.N:~[0]
                                                        <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                 (Control.Monad.Primitive.PrimState
                                                                    m)
                                                                 ty>_N <a>_N) of cobox1 { DEFAULT ->
                                            let {
                                              $dStorable :: Foreign.Storable.Storable a
                                              = GHC.Classes.$p1(%,,,%)
                                                  @ (Foreign.Storable.Storable a)
                                                  @ (Foreign.R.Type.IsVector ty)
                                                  @ (Data.Singletons.SingI ty)
                                                  @ (Data.Vector.SEXP.Base.ElemRep
                                                       (Control.Monad.Primitive.PrimState m) ty
                                                     Data.Type.Equality.~ a)
                                                  $d(%,,,%)
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (GHC.Types.IO ())
                                              @ (m ())
                                              (Control.Monad.Primitive.unsafePrimToPrim
                                                 @ GHC.Types.IO
                                                 @ m
                                                 @ ()
                                                 Control.Monad.Primitive.$fPrimBaseIO
                                                 $dPrimMonad)
                                              (Foreign.Storable.pokeElemOff
                                                 @ a
                                                 $dStorable
                                                 (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                                    @ a
                                                    @ (Control.Monad.Primitive.PrimState m)
                                                    @ ty
                                                    $dStorable
                                                    (Data.Vector.SEXP.Mutable.Internal.unW
                                                       @ s
                                                       @ ty
                                                       @ (Control.Monad.Primitive.PrimState m)
                                                       @ a
                                                       v1))
                                                 eta2
                                                 x) }))))))))) }) -}
1d3b2928d391ce1fd376fd1be2a7f5f6
  tail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      i :: GHC.Types.Int = GHC.Types.I# 1#
                    } in
                    let {
                      n :: GHC.Types.Int
                      = GHC.Num.$fNumInt_$c-
                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                             @ s
                             x)
                          (GHC.Types.I# 1#)
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 513#)
                            Data.Vector.Internal.Check.Bounds
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "slice"#))
                            i
                            n
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (Data.Vector.Internal.Check.checkSlice
                               @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "./Data/Vector/Generic/Mutable.hs"#))
                               (GHC.Types.I# 552#)
                               Data.Vector.Internal.Check.Unsafe
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                               i
                               n
                               (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                  @ t
                                  @ s
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  @ s
                                  x))
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ t
                                    @ ty
                                    @ s
                                    @ a
                                    x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                               @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                               (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                                tpl)
                                 `cast`
                               (<Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                                ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                              <t>_P <ty>_P <s>_P) <a>_N)
                               (case GHC.Base.id @ GHC.Types.Int i of wild1 { GHC.Types.I# x# ->
                                case GHC.Int.$fNumInt32_$c+
                                       (GHC.Int.I32# dt1)
                                       (GHC.Int.I32#
                                          (GHC.Prim.narrow32Int# x#)) of dt3 { GHC.Int.I32# dt4 ->
                                case GHC.Base.id @ GHC.Types.Int n of wild2 { GHC.Types.I# x#1 ->
                                Data.Vector.SEXP.Mutable.Internal.MVector
                                  @ s
                                  @ ty
                                  @ a
                                  dt
                                  dt4
                                  (GHC.Prim.narrow32Int# x#1) } } }) } }))))
                   eta }) -}
40a7232307df9bf285660dd31aa33c17
  take ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      i :: GHC.Types.Int = GHC.Types.I# 0#
                    } in
                    let {
                      n1 :: GHC.Types.Int
                      = GHC.Classes.$fOrdInt_$cmin
                          (GHC.Classes.$fOrdInt_$cmax eta (GHC.Types.I# 0#))
                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                             @ s
                             x)
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            i
                            n1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ t
                                 @ ty
                                 @ s
                                 @ a
                                 x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                             tpl)
                              `cast`
                            (<Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                             ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                           <t>_P <ty>_P <s>_P) <a>_N)
                            (case GHC.Base.id @ GHC.Types.Int i of wild1 { GHC.Types.I# x# ->
                             case GHC.Int.$fNumInt32_$c+
                                    (GHC.Int.I32# dt1)
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int# x#)) of dt3 { GHC.Int.I32# dt4 ->
                             case GHC.Base.id @ GHC.Types.Int n1 of wild2 { GHC.Types.I# x#1 ->
                             Data.Vector.SEXP.Mutable.Internal.MVector
                               @ s
                               @ ty
                               @ a
                               dt
                               dt4
                               (GHC.Prim.narrow32Int# x#1) } } }) } })))
                   eta1 }) -}
de980db5b0c9ffbbb0166f2e6b55c36e
  toSEXP ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Foreign.R.Internal.SEXP (Control.Monad.R.Class.Region m) ty)
  {- Arity: 3,
     Strictness: <L,U(A,U(U(U,U,U,U,U),U),A,A,U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Control.Monad.R.Class.MonadR m)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR
                            (Control.Monad.R.Class.Region m) ty a)
                   (w2 :: Data.Vector.SEXP.Mutable.Internal.MVector
                            (Control.Monad.R.Class.Region m) ty a) ->
                 case w2 of ww { Data.Vector.SEXP.Mutable.Internal.MVector ww1 ww2 ww3 ->
                 Data.Vector.SEXP.Mutable.$wtoSEXP
                   @ m
                   @ ty
                   @ a
                   w
                   w1
                   ww1
                   ww2
                   ww3 }) -}
825fd930c9e770f6aa3ae08365506b8b
  unsafeCopy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U,U,A)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      dst :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      src :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.check
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 802#)
                         Data.Vector.Internal.Check.Unsafe
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 dst of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 src of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                          GHC.Classes.eqInt
                            (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                            (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.check
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 804#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "overlapping vectors"#))
                            (GHC.Classes.not
                               (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicOverlaps
                                  @ s
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  @ (Control.Monad.Primitive.PrimState m)
                                  dst
                                  src)))
                         (case dst
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <s>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                          case src
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <s>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (GHC.Types.IO ())
                            @ (m ())
                            (Control.Monad.Primitive.unsafePrimToPrim
                               @ GHC.Types.IO
                               @ m
                               @ ()
                               Control.Monad.Primitive.$fPrimBaseIO
                               $dPrimMonad)
                            (Foreign.Marshal.Array.copyArray
                               @ a
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     nt
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     nt1
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                               (case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                                case Data.Vector.SEXP.Mutable.Internal.unW
                                       @ s
                                       @ ty
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ a
                                       nt
                                         `cast`
                                       (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState
                                                    m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2) } })) } } }))) }) -}
cb4a3fd9324fbb9763b2de08e1e20491
  unsafeDrop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      n1 :: GHC.Types.Int
                      = GHC.Num.$fNumInt_$c-
                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                             @ s
                             x)
                          eta
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            eta
                            n1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeSlice
                            @ t
                            @ s
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ s
                            eta
                            n1
                            x)))
                   eta1 }) -}
23f8336e376252a92ebe17a443b84150
  unsafeInit ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      i :: GHC.Types.Int = GHC.Types.I# 0#
                    } in
                    let {
                      n :: GHC.Types.Int
                      = GHC.Num.$fNumInt_$c-
                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                             @ s
                             x)
                          (GHC.Types.I# 1#)
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            i
                            n
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ t
                                 @ ty
                                 @ s
                                 @ a
                                 x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                             tpl)
                              `cast`
                            (<Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                             ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                           <t>_P <ty>_P <s>_P) <a>_N)
                            (case GHC.Base.id @ GHC.Types.Int i of wild1 { GHC.Types.I# x# ->
                             case GHC.Int.$fNumInt32_$c+
                                    (GHC.Int.I32# dt1)
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int# x#)) of dt3 { GHC.Int.I32# dt4 ->
                             case GHC.Base.id @ GHC.Types.Int n of wild2 { GHC.Types.I# x#1 ->
                             Data.Vector.SEXP.Mutable.Internal.MVector
                               @ s
                               @ ty
                               @ a
                               dt
                               dt4
                               (GHC.Prim.narrow32Int# x#1) } } }) } })))
                   eta }) -}
6f2ea39f3dd6279d8d7de500a561d74d
  unsafeMove ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector
         (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U,U,A)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      dst :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      src :: Data.Vector.SEXP.Mutable.Internal.W
                               s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.check
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 819#)
                         Data.Vector.Internal.Check.Unsafe
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeMove"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 dst of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox2 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 src of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt4 dt5 dt6 ->
                          GHC.Classes.eqInt
                            (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2))
                            (GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt6)) } } } }))
                      (case dst
                              `cast`
                            (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                 <s>_P
                                 <ty>_P
                                 <Control.Monad.Primitive.PrimState
                                    m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                       case src
                              `cast`
                            (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                 <s>_P
                                 <ty>_P
                                 <Control.Monad.Primitive.PrimState
                                    m>_P <a>_N) of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty
                                    Data.Type.Equality.~ a)
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dStorable :: Foreign.Storable.Storable a
                         = GHC.Classes.$p1(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ (Data.Vector.SEXP.Base.ElemRep
                                  (Control.Monad.Primitive.PrimState m) ty
                                Data.Type.Equality.~ a)
                             $d(%,,,%)
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Types.IO ())
                         @ (m ())
                         (Control.Monad.Primitive.unsafePrimToPrim
                            @ GHC.Types.IO
                            @ m
                            @ ()
                            Control.Monad.Primitive.$fPrimBaseIO
                            $dPrimMonad)
                         (Foreign.Marshal.Array.moveArray
                            @ a
                            $dStorable
                            (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                               @ a
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unW
                                  @ s
                                  @ ty
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ a
                                  nt
                                    `cast`
                                  (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                            <s>_P
                                            <ty>_P
                                            <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                            (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                               @ a
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unW
                                  @ s
                                  @ ty
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ a
                                  nt1
                                    `cast`
                                  (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                            <s>_P
                                            <ty>_P
                                            <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty
                                          Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        (Control.Monad.Primitive.PrimState
                                                                           m)
                                                                        ty>_N <a>_N) of cobox2 { DEFAULT ->
                             case Data.Vector.SEXP.Mutable.Internal.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    nt
                                      `cast`
                                    (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                              <s>_P
                                              <ty>_P
                                              <Control.Monad.Primitive.PrimState
                                                 m>_P) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                             GHC.Base.id @ GHC.Types.Int (GHC.Types.I# dt2) } })) } } })) }) -}
4c7a7c6f043ae7b7b605492f1d1ecaa9
  unsafeNew ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    GHC.Types.Int
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(U,U,U,U,U),U),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,U,A,U(U))><L,U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m (Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a))
                      @ (Data.Proxy.Proxy s
                         -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                                 (Control.Monad.R.Class.Region m) ty a))
                      (Data.Vector.SEXP.Mutable.Internal.proxyW
                         @ m
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a
                         @ Data.Proxy.Proxy
                         $dMonad)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a))
                         @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                 s ty (Control.Monad.Primitive.PrimState m) a))
                         (Data.Vector.Internal.Check.checkLength
                            @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                    s ty (Control.Monad.Primitive.PrimState m) a))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 591#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeNew"#))
                            eta)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $d(%,%) :: Foreign.R.Type.IsVector ty
                            = GHC.Classes.$p2(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          let {
                            $dSingI :: Data.Singletons.SingI ty
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Singletons.SingI ty)
                                @ (ty
                                   Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                              'Foreign.R.Type.Logical,
                                                              'Foreign.R.Type.Int,
                                                              'Foreign.R.Type.Real,
                                                              'Foreign.R.Type.Complex,
                                                              'Foreign.R.Type.String,
                                                              'Foreign.R.Type.Vector,
                                                              'Foreign.R.Type.Expr,
                                                              'Foreign.R.Type.WeakRef,
                                                              'Foreign.R.Type.Raw])
                                $d(%,%)
                          } in
                          let {
                            $dMonad1 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          case Foreign.R.Type.$fEqSEXPTYPE_$c==
                                 (Foreign.R.Type.$fSingKindSEXPTYPE_$cfromSing
                                    @ ty
                                    $dSingI
                                      `cast`
                                    (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N))
                                   `cast`
                                 (Sub (Foreign.R.Type.D:R:DemoteRepSEXPTYPE[0]))
                                 Foreign.R.Type.Char of wild {
                            GHC.Types.False
                            -> GHC.Base.>>=
                                 @ m
                                 $dMonad1
                                 @ (Foreign.R.Internal.SEXP
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ (Data.Vector.SEXP.Mutable.Internal.W
                                      s ty (Control.Monad.Primitive.PrimState m) a)
                                 (Control.Monad.Primitive.primitive
                                    @ m
                                    $dPrimMonad
                                    @ (Foreign.R.Internal.SEXP
                                         (Control.Monad.Primitive.PrimState m) ty)
                                    (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$s=<<
                                       @ (Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                                       @ (Foreign.R.Internal.SEXP
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       (($dReifies
                                           `cast`
                                         (Data.Reflection.N:Reifies[0]
                                              <*>_N
                                              <s>_N
                                              <Control.Monad.R.Internal.AcquireIO
                                                 (Control.Monad.Primitive.PrimState m)>_N)
                                           @ Data.Proxy.Proxy
                                           (Data.Proxy.Proxy @ * @ s))
                                          `cast`
                                        (Control.Monad.R.Internal.N:AcquireIO[0]
                                             <Control.Monad.Primitive.PrimState m>_P)
                                          @ ty)
                                       (Foreign.R.allocVector
                                          @ ty
                                          $d(%,%)
                                          $dSingI
                                            `cast`
                                          (Data.Singletons.N:SingI[0] <Foreign.R.Type.SEXPTYPE>_N <ty>_N)
                                          eta))
                                      `cast`
                                    (Trans
                                         (GHC.Types.N:IO[0]
                                              <Foreign.R.Internal.SEXP
                                                 (Control.Monad.Primitive.PrimState m) ty>_R)
                                         ((GHC.Prim.State#
                                             (Trans
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                  (Control.Monad.Primitive.PrimState
                                                     (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                          ->_R ((#,#)
                                                  <'GHC.Types.VoidRep>_R
                                                  <'GHC.Types.PtrRepLifted>_R
                                                  (GHC.Prim.State#
                                                     (Trans
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                                          (Control.Monad.Primitive.PrimState
                                                             (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                  <Foreign.R.Internal.SEXP
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_R)_R)))
                                 (\ (sx :: Foreign.R.Internal.SEXP
                                             (Control.Monad.Primitive.PrimState m) ty) ->
                                  GHC.Base.$
                                    @ 'GHC.Types.PtrRepLifted
                                    @ (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a)
                                    @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a))
                                    (GHC.Base.return
                                       @ m
                                       $dMonad1
                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a))
                                    (GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                            (Control.Monad.Primitive.PrimState m) ty a)
                                       @ (Data.Vector.SEXP.Mutable.Internal.W
                                            s ty (Control.Monad.Primitive.PrimState m) a)
                                       (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector
                                                    (Control.Monad.Primitive.PrimState m) ty a) ->
                                        tpl)
                                         `cast`
                                       (<Data.Vector.SEXP.Mutable.Internal.MVector
                                           (Control.Monad.Primitive.PrimState m) ty a>_R
                                        ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                      <s>_P
                                                      <ty>_P
                                                      <Control.Monad.Primitive.PrimState
                                                         m>_P) <a>_N)
                                       (case (Foreign.R.Internal.unsafeRelease
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ ty
                                                @ (Control.Monad.Primitive.PrimState m)
                                                sx)
                                               `cast`
                                             (Foreign.R.Internal.N:SEXP[0]
                                                  <Control.Monad.Primitive.PrimState m>_P
                                                  <ty>_P) of dt { GHC.Ptr.Ptr dt1 ->
                                        case GHC.Int.$fBitsInt32_$cfromInteger
                                               0 of dt2 { GHC.Int.I32# dt3 ->
                                        case GHC.Base.id
                                               @ GHC.Types.Int
                                               eta of wild1 { GHC.Types.I# x# ->
                                        Data.Vector.SEXP.Mutable.Internal.MVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ ty
                                          @ a
                                          dt1
                                          dt3
                                          (GHC.Prim.narrow32Int# x#) } } })))
                            GHC.Types.True
                            -> Internal.Error.failure
                                 @ (m (Data.Vector.SEXP.Mutable.Internal.W
                                         s ty (Control.Monad.Primitive.PrimState m) a))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Data.Vector.SEXP.Mutable.new"#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "R character vectors are immutable and globally cached. Use 'mkChar' instead."#)) } }))) }) -}
403b46bb6a06469d6c0090a589191073
  unsafeRead ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,A)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m a)
                   @ (m a)
                   (Control.Monad.R.Internal.withAcquire @ m @ a $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      v1 :: Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m a)
                      @ (m a)
                      (Data.Vector.Internal.Check.checkIndex
                         @ (m a)
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 722#)
                         Data.Vector.Internal.Check.Unsafe
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeRead"#))
                         eta1
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ (Control.Monad.Primitive.PrimState m)
                            v1))
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty
                                    Data.Type.Equality.~ a)
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dStorable :: Foreign.Storable.Storable a
                         = GHC.Classes.$p1(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ (Data.Vector.SEXP.Base.ElemRep
                                  (Control.Monad.Primitive.PrimState m) ty
                                Data.Type.Equality.~ a)
                             $d(%,,,%)
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Types.IO a)
                         @ (m a)
                         (Control.Monad.Primitive.unsafePrimToPrim
                            @ GHC.Types.IO
                            @ m
                            @ a
                            Control.Monad.Primitive.$fPrimBaseIO
                            $dPrimMonad)
                         (Foreign.Storable.peekElemOff
                            @ a
                            $dStorable
                            (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                               @ a
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unW
                                  @ s
                                  @ ty
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ a
                                  v1))
                            eta1) })) }) -}
498050d8492901c9593196b51230bf45
  unsafeSlice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(S),1*U(U)><S(SSL),1*U(U,U,A)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            eta
                            eta1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicUnsafeSlice
                            @ t
                            @ s
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ s
                            eta
                            eta1
                            x)))
                   eta2 }) -}
0b9244255a0c37a9bd1ebad1d61e1aaf
  unsafeSwap ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> GHC.Types.Int -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,A)><L,U><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      eta3 :: Data.Vector.SEXP.Mutable.Internal.W
                                s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.checkIndex
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 743#)
                         Data.Vector.Internal.Check.Unsafe
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSwap"#))
                         eta1
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ (Control.Monad.Primitive.PrimState m)
                            eta3))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.checkIndex
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 744#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSwap"#))
                            eta2
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ s
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ (Control.Monad.Primitive.PrimState m)
                               eta3))
                         (GHC.Base.>>=
                            @ m
                            $dMonad
                            @ a
                            @ ()
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (m a)
                               @ (m a)
                               (Data.Vector.Internal.Check.checkIndex
                                  @ (m a)
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Vector/Generic/Mutable.hs"#))
                                  (GHC.Types.I# 722#)
                                  Data.Vector.Internal.Check.Unsafe
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeRead"#))
                                  eta1
                                  (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                     @ s
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     @ a
                                     $dReifies
                                     $d(%,,,%)
                                     @ (Control.Monad.Primitive.PrimState m)
                                     eta3))
                               (case GHC.Types.HEq_sc
                                       @ *
                                       @ *
                                       @ (Data.Vector.SEXP.Base.ElemRep
                                            (Control.Monad.Primitive.PrimState m) ty)
                                       @ a
                                       (GHC.Classes.$p4(%,,,%)
                                          @ (Foreign.Storable.Storable a)
                                          @ (Foreign.R.Type.IsVector ty)
                                          @ (Data.Singletons.SingI ty)
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty
                                             Data.Type.Equality.~ a)
                                          $d(%,,,%))
                                         `cast`
                                       (Data.Type.Equality.N:~[0]
                                            <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m)
                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                                let {
                                  $dStorable :: Foreign.Storable.Storable a
                                  = GHC.Classes.$p1(%,,,%)
                                      @ (Foreign.Storable.Storable a)
                                      @ (Foreign.R.Type.IsVector ty)
                                      @ (Data.Singletons.SingI ty)
                                      @ (Data.Vector.SEXP.Base.ElemRep
                                           (Control.Monad.Primitive.PrimState m) ty
                                         Data.Type.Equality.~ a)
                                      $d(%,,,%)
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (GHC.Types.IO a)
                                  @ (m a)
                                  (Control.Monad.Primitive.unsafePrimToPrim
                                     @ GHC.Types.IO
                                     @ m
                                     @ a
                                     Control.Monad.Primitive.$fPrimBaseIO
                                     $dPrimMonad)
                                  (Foreign.Storable.peekElemOff
                                     @ a
                                     $dStorable
                                     (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                        @ a
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unW
                                           @ s
                                           @ ty
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ a
                                           eta3))
                                     eta1) }))
                            (\ (x :: a) ->
                             GHC.Base.>>=
                               @ m
                               $dMonad
                               @ a
                               @ ()
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (m a)
                                  @ (m a)
                                  (Data.Vector.Internal.Check.checkIndex
                                     @ (m a)
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "./Data/Vector/Generic/Mutable.hs"#))
                                     (GHC.Types.I# 722#)
                                     Data.Vector.Internal.Check.Unsafe
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString# @ b "unsafeRead"#))
                                     eta2
                                     (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                        @ s
                                        @ (Control.Monad.Primitive.PrimState m)
                                        @ ty
                                        @ a
                                        $dReifies
                                        $d(%,,,%)
                                        @ (Control.Monad.Primitive.PrimState m)
                                        eta3))
                                  (case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep
                                               (Control.Monad.Primitive.PrimState m) ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        (Control.Monad.Primitive.PrimState m)
                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                                   let {
                                     $dStorable :: Foreign.Storable.Storable a
                                     = GHC.Classes.$p1(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ (Data.Vector.SEXP.Base.ElemRep
                                              (Control.Monad.Primitive.PrimState m) ty
                                            Data.Type.Equality.~ a)
                                         $d(%,,,%)
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (GHC.Types.IO a)
                                     @ (m a)
                                     (Control.Monad.Primitive.unsafePrimToPrim
                                        @ GHC.Types.IO
                                        @ m
                                        @ a
                                        Control.Monad.Primitive.$fPrimBaseIO
                                        $dPrimMonad)
                                     (Foreign.Storable.peekElemOff
                                        @ a
                                        $dStorable
                                        (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                           @ a
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unW
                                              @ s
                                              @ ty
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ a
                                              eta3))
                                        eta2) }))
                               (\ (y :: a) ->
                                GHC.Base.>>
                                  @ m
                                  $dMonad
                                  @ ()
                                  @ ()
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (m ())
                                     @ (m ())
                                     (Data.Vector.Internal.Check.checkIndex
                                        @ (m ())
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "./Data/Vector/Generic/Mutable.hs"#))
                                        (GHC.Types.I# 729#)
                                        Data.Vector.Internal.Check.Unsafe
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "unsafeWrite"#))
                                        eta1
                                        (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                           @ s
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           @ a
                                           $dReifies
                                           $d(%,,,%)
                                           @ (Control.Monad.Primitive.PrimState m)
                                           eta3))
                                     (case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox1 { DEFAULT ->
                                      let {
                                        $dStorable :: Foreign.Storable.Storable a
                                        = GHC.Classes.$p1(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ (Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty
                                               Data.Type.Equality.~ a)
                                            $d(%,,,%)
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (GHC.Types.IO ())
                                        @ (m ())
                                        (Control.Monad.Primitive.unsafePrimToPrim
                                           @ GHC.Types.IO
                                           @ m
                                           @ ()
                                           Control.Monad.Primitive.$fPrimBaseIO
                                           $dPrimMonad)
                                        (Foreign.Storable.pokeElemOff
                                           @ a
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                              @ a
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unW
                                                 @ s
                                                 @ ty
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ a
                                                 eta3))
                                           eta1
                                           y) }))
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (m ())
                                     @ (m ())
                                     (Data.Vector.Internal.Check.checkIndex
                                        @ (m ())
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "./Data/Vector/Generic/Mutable.hs"#))
                                        (GHC.Types.I# 729#)
                                        Data.Vector.Internal.Check.Unsafe
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "unsafeWrite"#))
                                        eta2
                                        (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                                           @ s
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ ty
                                           @ a
                                           $dReifies
                                           $d(%,,,%)
                                           @ (Control.Monad.Primitive.PrimState m)
                                           eta3))
                                     (case GHC.Types.HEq_sc
                                             @ *
                                             @ *
                                             @ (Data.Vector.SEXP.Base.ElemRep
                                                  (Control.Monad.Primitive.PrimState m) ty)
                                             @ a
                                             (GHC.Classes.$p4(%,,,%)
                                                @ (Foreign.Storable.Storable a)
                                                @ (Foreign.R.Type.IsVector ty)
                                                @ (Data.Singletons.SingI ty)
                                                @ (Data.Vector.SEXP.Base.ElemRep
                                                     (Control.Monad.Primitive.PrimState m) ty
                                                   Data.Type.Equality.~ a)
                                                $d(%,,,%))
                                               `cast`
                                             (Data.Type.Equality.N:~[0]
                                                  <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                           (Control.Monad.Primitive.PrimState m)
                                                           ty>_N <a>_N) of cobox1 { DEFAULT ->
                                      let {
                                        $dStorable :: Foreign.Storable.Storable a
                                        = GHC.Classes.$p1(%,,,%)
                                            @ (Foreign.Storable.Storable a)
                                            @ (Foreign.R.Type.IsVector ty)
                                            @ (Data.Singletons.SingI ty)
                                            @ (Data.Vector.SEXP.Base.ElemRep
                                                 (Control.Monad.Primitive.PrimState m) ty
                                               Data.Type.Equality.~ a)
                                            $d(%,,,%)
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (GHC.Types.IO ())
                                        @ (m ())
                                        (Control.Monad.Primitive.unsafePrimToPrim
                                           @ GHC.Types.IO
                                           @ m
                                           @ ()
                                           Control.Monad.Primitive.$fPrimBaseIO
                                           $dPrimMonad)
                                        (Foreign.Storable.pokeElemOff
                                           @ a
                                           $dStorable
                                           (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                              @ a
                                              @ (Control.Monad.Primitive.PrimState m)
                                              @ ty
                                              $dStorable
                                              (Data.Vector.SEXP.Mutable.Internal.unW
                                                 @ s
                                                 @ ty
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 @ a
                                                 eta3))
                                           eta2
                                           x) }))))))) }) -}
6ec3616feb968e040aa1cc9cb9ed1197
  unsafeTail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      i :: GHC.Types.Int = GHC.Types.I# 1#
                    } in
                    let {
                      n :: GHC.Types.Int
                      = GHC.Num.$fNumInt_$c-
                          (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                             @ s
                             x)
                          (GHC.Types.I# 1#)
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            i
                            n
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ t
                                 @ ty
                                 @ s
                                 @ a
                                 x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                             tpl)
                              `cast`
                            (<Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                             ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                           <t>_P <ty>_P <s>_P) <a>_N)
                            (case GHC.Base.id @ GHC.Types.Int i of wild1 { GHC.Types.I# x# ->
                             case GHC.Int.$fNumInt32_$c+
                                    (GHC.Int.I32# dt1)
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int# x#)) of dt3 { GHC.Int.I32# dt4 ->
                             case GHC.Base.id @ GHC.Types.Int n of wild2 { GHC.Types.I# x#1 ->
                             Data.Vector.SEXP.Mutable.Internal.MVector
                               @ s
                               @ ty
                               @ a
                               dt
                               dt4
                               (GHC.Prim.narrow32Int# x#1) } } }) } })))
                   eta }) -}
7ce899864d6bfb29b1d7bb5d3ebc0ece
  unsafeTake ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
    -> Data.Vector.SEXP.Mutable.Internal.MVector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SSL),1*U(U,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.Mutable.phony
                   @ s
                   @ ty
                   @ a
                   @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                   $d(%,,,%)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                      (x :: Data.Vector.SEXP.Mutable.Internal.W t ty s a)[OneShot] ->
                    let {
                      i :: GHC.Types.Int = GHC.Types.I# 0#
                    } in
                    Data.Vector.SEXP.Mutable.Internal.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                         (Data.Vector.Internal.Check.checkSlice
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 552#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeSlice"#))
                            i
                            eta
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ t
                               @ s
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ s
                               x))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ t
                                 @ ty
                                 @ s
                                 @ a
                                 x of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.MVector s ty a)
                            @ (Data.Vector.SEXP.Mutable.Internal.W t ty s a)
                            (\ (tpl :: Data.Vector.SEXP.Mutable.Internal.MVector s ty a) ->
                             tpl)
                              `cast`
                            (<Data.Vector.SEXP.Mutable.Internal.MVector s ty a>_R
                             ->_R Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                           <t>_P <ty>_P <s>_P) <a>_N)
                            (case GHC.Base.id @ GHC.Types.Int i of wild1 { GHC.Types.I# x# ->
                             case GHC.Int.$fNumInt32_$c+
                                    (GHC.Int.I32# dt1)
                                    (GHC.Int.I32#
                                       (GHC.Prim.narrow32Int# x#)) of dt3 { GHC.Int.I32# dt4 ->
                             case GHC.Base.id @ GHC.Types.Int eta of wild2 { GHC.Types.I# x#1 ->
                             Data.Vector.SEXP.Mutable.Internal.MVector
                               @ s
                               @ ty
                               @ a
                               dt
                               dt4
                               (GHC.Prim.narrow32Int# x#1) } } }) } })))
                   eta1 }) -}
ecbf397ae04b6caecf08b89f7716a663
  unsafeWrite ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> a -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,A)><L,U><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      v1 :: Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.checkIndex
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 729#)
                         Data.Vector.Internal.Check.Unsafe
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeWrite"#))
                         eta1
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ (Control.Monad.Primitive.PrimState m)
                            v1))
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty
                                    Data.Type.Equality.~ a)
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dStorable :: Foreign.Storable.Storable a
                         = GHC.Classes.$p1(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ (Data.Vector.SEXP.Base.ElemRep
                                  (Control.Monad.Primitive.PrimState m) ty
                                Data.Type.Equality.~ a)
                             $d(%,,,%)
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Types.IO ())
                         @ (m ())
                         (Control.Monad.Primitive.unsafePrimToPrim
                            @ GHC.Types.IO
                            @ m
                            @ ()
                            Control.Monad.Primitive.$fPrimBaseIO
                            $dPrimMonad)
                         (Foreign.Storable.pokeElemOff
                            @ a
                            $dStorable
                            (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                               @ a
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unW
                                  @ s
                                  @ ty
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ a
                                  v1))
                            eta1
                            eta2) })) }) -}
4aef3bd542d572970139c32724c25f81
  write ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> GHC.Types.Int -> a -> m ()
  {- Arity: 5,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U)><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    let {
                      v1 :: Data.Vector.SEXP.Mutable.Internal.W
                              s ty (Control.Monad.Primitive.PrimState m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.checkIndex
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               "./Data/Vector/Generic/Mutable.hs"#))
                         (GHC.Types.I# 697#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "write"#))
                         eta1
                         (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                            @ s
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            @ a
                            $dReifies
                            $d(%,,,%)
                            @ (Control.Monad.Primitive.PrimState m)
                            v1))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.checkIndex
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "./Data/Vector/Generic/Mutable.hs"#))
                            (GHC.Types.I# 729#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeWrite"#))
                            eta1
                            (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa_$cbasicLength
                               @ s
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               @ (Control.Monad.Primitive.PrimState m)
                               v1))
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (GHC.Types.IO ())
                            @ (m ())
                            (Control.Monad.Primitive.unsafePrimToPrim
                               @ GHC.Types.IO
                               @ m
                               @ ()
                               Control.Monad.Primitive.$fPrimBaseIO
                               $dPrimMonad)
                            (Foreign.Storable.pokeElemOff
                               @ a
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     v1))
                               eta1
                               eta2) }))) }) -}
"SPEC/Data.Vector.SEXP.Mutable >>> @ * @ (->) _ _ _" [ALWAYS] forall @ a
                                                                     @ b
                                                                     @ c
                                                                     ($dCategory :: Control.Category.Category
                                                                                      (->))
  Control.Category.>>> @ * @ (->) @ a @ b @ c $dCategory
  = Data.Vector.SEXP.Mutable.$s>>> @ a @ b @ c
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

