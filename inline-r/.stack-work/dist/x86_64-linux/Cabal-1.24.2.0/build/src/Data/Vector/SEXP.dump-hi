
==================== FINAL INTERFACE ====================
2017-12-28 08:02:42.389427 UTC

interface inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs:Data.Vector.SEXP [family instance module] 8002
  interface hash: 5f5d2c49ec628fae319caeb1c5b542ee
  ABI hash: f3382934389ac09b3b6a3233ff740f5d
  export-list hash: 1a9edc4c4b74d90c3be54c98c7ed5206
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8b68426e1e8d7c99bec0e4f29d1d824b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Vector.SEXP.!
  Data.Vector.SEXP.!?
  Data.Vector.SEXP.++
  Data.Vector.SEXP.//
  Data.Vector.SEXP.accum
  Data.Vector.SEXP.all
  Data.Vector.SEXP.any
  Data.Vector.SEXP.break
  Data.Vector.SEXP.concat
  Data.Vector.SEXP.concatMap
  Data.Vector.SEXP.cons
  Data.Vector.SEXP.constructN
  Data.Vector.SEXP.constructrN
  Data.Vector.SEXP.copy
  Data.Vector.SEXP.create
  Data.Vector.SEXP.drop
  Data.Vector.SEXP.dropWhile
  Data.Vector.SEXP.elem
  Data.Vector.SEXP.elemIndex
  Data.Vector.SEXP.empty
  Data.Vector.SEXP.enumFromN
  Data.Vector.SEXP.enumFromStepN
  Data.Vector.SEXP.enumFromThenTo
  Data.Vector.SEXP.enumFromTo
  Data.Vector.SEXP.filter
  Data.Vector.SEXP.filterM
  Data.Vector.SEXP.find
  Data.Vector.SEXP.findIndex
  Data.Vector.SEXP.fold1M
  Data.Vector.SEXP.fold1M'
  Data.Vector.SEXP.fold1M'_
  Data.Vector.SEXP.fold1M_
  Data.Vector.SEXP.foldM
  Data.Vector.SEXP.foldM'
  Data.Vector.SEXP.foldM'_
  Data.Vector.SEXP.foldM_
  Data.Vector.SEXP.foldl
  Data.Vector.SEXP.foldl'
  Data.Vector.SEXP.foldl1
  Data.Vector.SEXP.foldl1'
  Data.Vector.SEXP.foldr
  Data.Vector.SEXP.foldr'
  Data.Vector.SEXP.foldr1
  Data.Vector.SEXP.foldr1'
  Data.Vector.SEXP.forM
  Data.Vector.SEXP.forM_
  Data.Vector.SEXP.force
  Data.Vector.SEXP.freeze
  Data.Vector.SEXP.fromList
  Data.Vector.SEXP.fromListN
  Data.Vector.SEXP.fromSEXP
  Data.Vector.SEXP.generate
  Data.Vector.SEXP.generateM
  Data.Vector.SEXP.head
  Data.Vector.SEXP.headM
  Data.Vector.SEXP.ifilter
  Data.Vector.SEXP.ifoldl
  Data.Vector.SEXP.ifoldl'
  Data.Vector.SEXP.ifoldr
  Data.Vector.SEXP.ifoldr'
  Data.Vector.SEXP.imap
  Data.Vector.SEXP.indexM
  Data.Vector.SEXP.init
  Data.Vector.SEXP.iterateN
  Data.Vector.SEXP.izipWith
  Data.Vector.SEXP.izipWith3
  Data.Vector.SEXP.izipWith4
  Data.Vector.SEXP.izipWith5
  Data.Vector.SEXP.izipWith6
  Data.Vector.SEXP.last
  Data.Vector.SEXP.lastM
  Data.Vector.SEXP.length
  Data.Vector.SEXP.map
  Data.Vector.SEXP.mapM
  Data.Vector.SEXP.mapM_
  Data.Vector.SEXP.maxIndex
  Data.Vector.SEXP.maxIndexBy
  Data.Vector.SEXP.maximum
  Data.Vector.SEXP.maximumBy
  Data.Vector.SEXP.minIndex
  Data.Vector.SEXP.minIndexBy
  Data.Vector.SEXP.minimum
  Data.Vector.SEXP.minimumBy
  Data.Vector.SEXP.notElem
  Data.Vector.SEXP.null
  Data.Vector.SEXP.partition
  Data.Vector.SEXP.postscanl
  Data.Vector.SEXP.postscanl'
  Data.Vector.SEXP.postscanr
  Data.Vector.SEXP.postscanr'
  Data.Vector.SEXP.prescanl
  Data.Vector.SEXP.prescanl'
  Data.Vector.SEXP.prescanr
  Data.Vector.SEXP.prescanr'
  Data.Vector.SEXP.product
  Data.Vector.SEXP.replicate
  Data.Vector.SEXP.replicateM
  Data.Vector.SEXP.reverse
  Data.Vector.SEXP.scanl
  Data.Vector.SEXP.scanl'
  Data.Vector.SEXP.scanl1
  Data.Vector.SEXP.scanl1'
  Data.Vector.SEXP.scanr
  Data.Vector.SEXP.scanr'
  Data.Vector.SEXP.scanr1
  Data.Vector.SEXP.scanr1'
  Data.Vector.SEXP.singleton
  Data.Vector.SEXP.slice
  Data.Vector.SEXP.snoc
  Data.Vector.SEXP.span
  Data.Vector.SEXP.splitAt
  Data.Vector.SEXP.sum
  Data.Vector.SEXP.tail
  Data.Vector.SEXP.take
  Data.Vector.SEXP.takeWhile
  Data.Vector.SEXP.thaw
  Data.Vector.SEXP.toByteString
  Data.Vector.SEXP.toList
  Data.Vector.SEXP.toSEXP
  Data.Vector.SEXP.toString
  Data.Vector.SEXP.unfoldr
  Data.Vector.SEXP.unfoldrN
  Data.Vector.SEXP.unsafeAccum
  Data.Vector.SEXP.unsafeCopy
  Data.Vector.SEXP.unsafeDrop
  Data.Vector.SEXP.unsafeFreeze
  Data.Vector.SEXP.unsafeFromSEXP
  Data.Vector.SEXP.unsafeHead
  Data.Vector.SEXP.unsafeHeadM
  Data.Vector.SEXP.unsafeIndex
  Data.Vector.SEXP.unsafeIndexM
  Data.Vector.SEXP.unsafeInit
  Data.Vector.SEXP.unsafeLast
  Data.Vector.SEXP.unsafeLastM
  Data.Vector.SEXP.unsafeSlice
  Data.Vector.SEXP.unsafeTail
  Data.Vector.SEXP.unsafeTake
  Data.Vector.SEXP.unsafeThaw
  Data.Vector.SEXP.unsafeToSEXP
  Data.Vector.SEXP.unsafeUpd
  Data.Vector.SEXP.unstablePartition
  Data.Vector.SEXP.zipWith
  Data.Vector.SEXP.zipWith3
  Data.Vector.SEXP.zipWith4
  Data.Vector.SEXP.zipWith5
  Data.Vector.SEXP.zipWith6
  Data.Vector.SEXP.zipWithM
  Data.Vector.SEXP.zipWithM_
  Data.Vector.SEXP.Vector{Data.Vector.SEXP.Vector vectorBase vectorLength vectorOffset}
  Data.Vector.SEXP.Base.ElemRep
  Data.Vector.SEXP.Base.VECTOR
  Data.Vector.SEXP.Mutable.Internal.MVector{Data.Vector.SEXP.Mutable.Internal.MVector mvectorBase mvectorLength mvectorOffset}
module dependencies: Control.Memory.Region Control.Monad.R.Class
                     Control.Monad.R.Internal Data.Vector.SEXP.Base
                     Data.Vector.SEXP.Mutable Data.Vector.SEXP.Mutable.Internal
                     Foreign.R Foreign.R.Constraints Foreign.R.Internal Foreign.R.Type
                     Internal.Error Language.R.HExp [boot]
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-desugar-1.6@th-desugar-1.6-4xe2xTMQQiAGUPVUAkAZhp
                      th-expand-syns-0.4.3.0@th-expand-syns-0.4.3.0-A2GRp9XTxmBCMfV7DnYdn0
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-A7sWuFC2KLsFTBmLagoRSX
                      th-orphans-0.13.4@th-orphans-0.13.4-IGsCpZ5u2Ab1MvGd5biF2z
                      th-reify-many-0.1.8@th-reify-many-0.1.8-5ZNbfXxMl3y5DMJznTzmN9
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Decide
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Instances
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.TypeLits
         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.TypeLits.Internal
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-A7sWuFC2KLsFTBmLagoRSX:Instances.TH.Lift
         th-orphans-0.13.4@th-orphans-0.13.4-IGsCpZ5u2Ab1MvGd5biF2z:Language.Haskell.TH.Instances
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs:Control.Memory.Region
                         inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs:Foreign.R.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Bool
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Eq
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Instances
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Num
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Prelude.Ord
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.Syntax
                         singletons-2.2@singletons-2.2-F6aalBFPo1F9ebvy1Wkuj3:Data.Singletons.TypeLits.Internal
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-desugar-1.6@th-desugar-1.6-4xe2xTMQQiAGUPVUAkAZhp:Language.Haskell.TH.Desugar.Core
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad.ST 83a3db630a9de9e3c076a0ccd04b989f
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Int 07f5a36c488acfe0ac32e81c7536b8ff
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Proxy d7f87a37cf7ec5ca87c59c8d2859031f
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Data.Word 77f42e01d0fb6b071f1ea2176d87fa6c
import  -/  base-4.9.1.0:Foreign b4bee334aade4f33021057fdecf4a495
import  -/  base-4.9.1.0:Foreign.ForeignPtr a57f95ad34cceecd3d53cb6caf640c90
import  -/  base-4.9.1.0:Foreign.ForeignPtr.Imp 983e41bceaf3a479584f5f15468ec17c
import  -/  base-4.9.1.0:Foreign.Marshal.Array 63114b8be90ae825866d45b38d8798ce
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Exts 26da1d42716da321d2d8df514b70012a
import  -/  base-4.9.1.0:GHC.Foreign de3d96134515831e87168a99ec5c2e52
import  -/  base-4.9.1.0:GHC.ForeignPtr 20e761047d2a09f17f566a747b24664a
import  -/  base-4.9.1.0:GHC.IO.Encoding.UTF8 f6440a715bcff7bc7c96faebcd7b3f81
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.ST bfbcef094754c989576126584d4dedc4
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 43e99fdac51908da414a28958688da64
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 89cda42ec946d9d6577dd41ab95d523e
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Control.Memory.Region 308182c83bf046edf073fad284bcd617
  exports: 0c21e32b92bdaf94d0d4d90814626648
  V 761191645162463b83c4dd72888da9ec
import  -/  Control.Monad.R.Class cad819d8a5243541d9a0f1421f7ef4d8
  exports: 7b258842783caee6f8995be87e582334
  MonadR 1f397b618ab35a4d9191d2514797ac03
  Region 9ddc10a1fcce4af410d9af5cec63780b
import  -/  Control.Monad.R.Internal e86ff55415b5cf4a4b45773ec8435141
  exports: 7d4cac02ee004d8eaf6eeb6af347c8eb
  AcquireIO 5a9f026e88c0b6cd8569f0af1dc562d3
  AcquireIO c39851170d1b482f78433de5d5762977
  withAcquire 548792489dd0dbfe817e1fabf293af46
import  -/  Data.Vector.SEXP.Base 4fee69f30bb73a3bab2a9c4037daa643
  exports: aa30f1c2f3261c65181cdb6d644559bf
  ElemRep 8e4dd549ff2b82b8535f8cd92bb19531
  VECTOR 93c7fea9b59e1a69c8899e0c05cdaf3f
import  -/  Data.Vector.SEXP.Mutable 59c2ce6d13b7c9ceacbeeb67be8da248
  exports: b44b49b93a2463cf278cc6756978a50a
import  -/  Data.Vector.SEXP.Mutable.Internal 294a79ed9866077cadcc4d24a50cf544
  exports: 2b5a2e3df559b634f76cebea6fa4dda5
  MVector d45f3fc048382257cca397e68283ed8e
  MVector 058ff4e1ccef46a392b9d8c04bf76ce0
  W c809a609adf266113603d7eff94a84d1
  mvectorBase 6aa73c417b74826c67450d186ebf9a53
  mvectorLength b3adfe0543ed53d29e8763f165622717
  mvectorOffset d3a9d4c78f8b74a80fb890aa9cc946c7
  unW c809a609adf266113603d7eff94a84d1
  unsafeToPtr d36fc1d26e6a8b372d0dd6942e30f2c8
  withW 7b9ecde0bdb8722405d39293d8d3f53b
import  -/  Foreign.R 76af03c75eee17c66f999e9a2952a2da
  exports: 48f78775472e7fa46d6f356ef53096ba
  preserveObject 0e08bf189a187a4aa853b52f9b16edb2
  releaseObject 711c01c373517f31ca14144579814386
import  -/  Foreign.R.Internal 94b91017c41283795b0b9850baa548e1
  SEXP fc0be32d064254795db93fc76b1941a7
  SEXP e854911eaf3995eafd7923a39be3730e
  length 7b00fa24a3705c784a67bedc5d336182
  release 5116a27e38d30bf46ba100a28ca95c3e
  sexp 1268627fcf8e40c2ecce670fbe030f70
  unsafeRelease 9fd97ad066a257ca40faf80b46003d47
import  -/  Foreign.R.Type 87886be580abef21e3eb082d49bd5e09
  exports: 4a9e8ba576dbff5e9a94102d7ea58a6b
  Char 5a1ac22d2987bdd3eece5f743d2cb5f4
  SEXPTYPE afeb9caa0ff491cd3c753bbb63a08899
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive 6f29f7c5aeee7400d08244e0179fc37e
import  -/  reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection e8ed21fc086f07e13656de2c3828f8a9
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle 1581039b9467255c51a8388eb8f23ef9
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle.Monadic f654858e55724f43b0055b176d03c8b0
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle.Size 970947ad1c9a054d5411bd5bbf715d43
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Stream.Monadic 4a9bcc15f69beca4a4a313cec59743e6
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic a46330d7de2e0b42909dfd32f5d6e1c7
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Base cc8aa91ea5282728711af3acbbd89d22
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.New 1e75da4b40008af733515098b09da683
addDependentFile "/datascience/bin/stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
fixities infixr 5 ++, infix 4 elem, infix 4 notElem
3e892e42734cf48fd412c11a79679872
  (!) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(1*U,A,A,U(U))><S(LLLS),1*U(U,U,U,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (\ (ds :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Generic.!
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         ds
                         eta1)
                      eta) }) -}
f95f4120f54c2085415947fb8da18e33
  !1 ::
    GHC.Prim.Any
    -> forall (ty :: Foreign.R.Type.SEXPTYPE).
       Foreign.R.Internal.SEXP Control.Memory.Region.V ty
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Foreign.R.Internal.SEXP s ty #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ s
                   (ds :: GHC.Prim.Any)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   (eta :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Data.Vector.SEXP.!2 @ s @ ty eta eta1) -}
5d3265539cbf4475ce5ee86f9db16bb0
  !2 ::
    Foreign.R.Internal.SEXP Control.Memory.Region.V ty
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.R.Internal.SEXP s ty #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   (x :: Foreign.R.Internal.SEXP Control.Memory.Region.V ty)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case x `cast`
                      (Trans
                           (Foreign.R.Internal.N:SEXP[0] <Control.Memory.Region.V>_P <ty>_P)
                           (GHC.Ptr.Ptr
                              <Language.R.HExp.HExp
                                 Control.Memory.Region.V
                                 ty, Foreign.R.Internal.SEXPREC>)_R) of ds { GHC.Ptr.Ptr ds1 ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs R_PreserveObject GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld #)}
                        ds1
                        eta of wild { Unit# ds2 ->
                 (# ds2,
                    ds
                      `cast`
                    (Trans
                         (GHC.Ptr.Ptr
                            <Foreign.R.Internal.SEXPREC, Language.R.HExp.HExp s ty>)_R
                         (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) #) } }) -}
e41b07e804fdd859cbfbd6524fc3d7b9
  (!?) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> GHC.Base.Maybe a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U,A,A,U(U))><L,1*U(U,U,U,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Base.Maybe a)
                   @ (GHC.Base.Maybe a)
                   (Data.Vector.SEXP.phony @ s @ (GHC.Base.Maybe a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (GHC.Base.Maybe a)
                      @ Data.Proxy.Proxy
                      (\ (ds :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Generic.!?
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         ds
                         eta1)
                      eta) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fEqVector ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Classes.Eq (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(U,A,A,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ s
                      @ (ty :: Foreign.R.Type.SEXPTYPE)
                      ($dEq :: GHC.Classes.Eq a)
                      ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Data.Vector.SEXP.$fEqVector_$c== @ a @ s @ ty $dEq $d(%,,,%))
                  (Data.Vector.SEXP.$fEqVector_$c/= @ a @ s @ ty $dEq $d(%,,,%)) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fEqVector_$c/= ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><S(LLLS(S)),U(U,A,A,U(U))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   ($dEq :: GHC.Classes.Eq a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Classes.not
                   (Data.Vector.SEXP.$fEqVector_$c==
                      @ a
                      @ s
                      @ ty
                      $dEq
                      $d(%,,,%)
                      eta
                      eta1) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fEqVector_$c== ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS),1*U(U,U,U,U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w2 :: Data.Vector.SEXP.Vector s ty a)
                   (w3 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w2 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 case w3 of ww5 { Data.Vector.SEXP.Vector ww6 ww7 ww8 ww9 ->
                 Data.Vector.SEXP.$w$c==
                   @ a
                   @ s
                   @ ty
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fIsListVector ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Exts.IsList (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,A,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s
                      @ (ty :: Foreign.R.Type.SEXPTYPE)
                      @ a
                      ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Data.Vector.SEXP.$fIsListVector_$cfromList @ s @ ty @ a $d(%,,,%))
                  (Data.Vector.SEXP.$fIsListVector_$cfromListN
                     @ s
                     @ ty
                     @ a
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fIsListVector_$ctoList
                     @ s
                     @ ty
                     @ a
                     $d(%,,,%)) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fIsListVector_$cfromList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.fromList
                   @ s
                   @ ty
                   @ a
                   $d(%,,,%)
                   eta
                     `cast`
                   ([Sub (Data.Vector.SEXP.D:R:ItemVector[0]
                              <a>_N <ty>_N <s>_N)])_R }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fIsListVector_$cfromListN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 Data.Vector.SEXP.fromListN
                   @ s
                   @ ty
                   @ a
                   $d(%,,,%)
                   eta
                   eta1
                     `cast`
                   ([Sub (Data.Vector.SEXP.D:R:ItemVector[0]
                              <a>_N <ty>_N <s>_N)])_R }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fIsListVector_$ctoList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> [GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a)]
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 (Data.Vector.SEXP.toList @ s @ ty @ a $d(%,,,%) eta)
                   `cast`
                 ([Sub (Sym (Data.Vector.SEXP.D:R:ItemVector[0]
                                 <a>_N <ty>_N <s>_N))])_R }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fShowVector ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Show.Show (Data.Vector.SEXP.Vector s ty a)
  DFunId
  {- Arity: 2, Strictness: <L,U(A,A,C(C1(U)))><L,U(U,A,A,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ s
                      @ (ty :: Foreign.R.Type.SEXPTYPE)
                      ($dShow :: GHC.Show.Show a)
                      ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.Vector s ty a)
                  (Data.Vector.SEXP.$fShowVector_$cshowsPrec
                     @ a
                     @ s
                     @ ty
                     $dShow
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fShowVector_$cshow
                     @ a
                     @ s
                     @ ty
                     $dShow
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fShowVector_$cshowList
                     @ a
                     @ s
                     @ ty
                     $dShow
                     $d(%,,,%)) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fShowVector_$cshow ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*C1(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,1*U(U,U,U,U)>,
     Unfolding: (\ @ a
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   ($dShow :: GHC.Show.Show a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.CString.unpackAppendCString#
                   "fromList "#
                   (GHC.Show.showList
                      @ a
                      $dShow
                      ((\ @ s1
                          ($dReifies :: Data.Reflection.Reifies
                                          s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                          (p :: Data.Proxy.Proxy s1)[OneShot] ->
                        case eta of nt { Data.Vector.SEXP.Vector ipv ipv1 ipv2 ipv3 ->
                        let {
                          $dStorable :: Foreign.Storable.Storable a
                          = GHC.Classes.$p1(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                              $d(%,,,%)
                        } in
                        let {
                          lvl66 :: GHC.Ptr.Ptr a
                          = case GHC.Prim.touch#
                                   @ 'GHC.Types.PtrRepLifted
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   ipv1
                                   GHC.Prim.realWorld# of s' { DEFAULT ->
                            case Foreign.Storable.sizeOf
                                   @ a
                                   $dStorable
                                   (Foreign.Marshal.Array.advancePtr1
                                      @ a) of wild2 { GHC.Types.I# y ->
                            GHC.Ptr.Ptr
                              @ a
                              (GHC.Prim.plusAddr#
                                 (GHC.Prim.plusAddr# ipv 40#)
                                 (GHC.Prim.*# ipv2 y)) } }
                        } in
                        let {
                          lvl67 :: Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a
                          = GHC.Classes.$p4(%,,,%)
                              @ (Foreign.Storable.Storable a)
                              @ (Foreign.R.Type.IsVector ty)
                              @ (Data.Singletons.SingI ty)
                              @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                              $d(%,,,%)
                        } in
                        letrec {
                          $wgo :: GHC.Prim.Int# -> [a]
                            {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                          = \ (ww :: GHC.Prim.Int#) ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.>=# ww ipv3) of wild {
                              GHC.Types.False
                              -> case GHC.Types.HEq_sc
                                        @ *
                                        @ *
                                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                        @ a
                                        lvl67
                                          `cast`
                                        (Data.Type.Equality.N:~[0]
                                             <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                      s ty>_N <a>_N) of cobox1 { DEFAULT ->
                                 GHC.Types.:
                                   @ a
                                   (case (Foreign.Storable.peekElemOff
                                            @ a
                                            $dStorable
                                            lvl66
                                            (GHC.Types.I# ww))
                                           `cast`
                                         (Trans
                                              (GHC.Types.N:IO[0] <a>_R)
                                              ((GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                               ->_R ((#,#)
                                                       <'GHC.Types.VoidRep>_R
                                                       <'GHC.Types.PtrRepLifted>_R
                                                       (GHC.Prim.State#
                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                       <a>_R)_R))
                                           GHC.Prim.realWorld#
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds { (#,#) ipv4 ipv5 ->
                                    ipv5 })
                                   ($wgo (GHC.Prim.+# ww 1#)) }
                              GHC.Types.True -> GHC.Types.[] @ a }
                        } in
                        $wgo 0# })
                         `cast`
                       (Trans
                            (Sym (Data.Reflection.N:Magic[0]
                                      <Control.Monad.R.Internal.AcquireIO s>_N <[a]>_R))
                            (UnsafeCo representational (Data.Reflection.Magic
                                                          (Control.Monad.R.Internal.AcquireIO s)
                                                          [a]) ((GHC.Prim.Any
                                                                 -> Control.Monad.R.Internal.AcquireIO
                                                                      s)
                                                                -> Data.Proxy.Proxy GHC.Prim.Any
                                                                -> [a])))
                         (Data.Vector.SEXP.!1 @ s)
                           `cast`
                         (<GHC.Prim.Any>_R
                          ->_R Trans
                                   (forall (ty1 :: <Foreign.R.Type.SEXPTYPE>_N).
                                    <Foreign.R.Internal.SEXP Control.Memory.Region.V ty1>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty1>_R))
                                   (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                         (Data.Proxy.Proxy @ GHC.Prim.Any @ GHC.Prim.Any))
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fShowVector_$cshowList ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    [Data.Vector.SEXP.Vector s ty a] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><S,1*U><L,U>,
     Unfolding: (\ @ a
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   ($dShow :: GHC.Show.Show a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: [Data.Vector.SEXP.Vector s ty a])
                   (eta1 :: GHC.Base.String) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   lvl66 :: Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a
                   = GHC.Classes.$p4(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                       $d(%,,,%)
                 } in
                 GHC.Show.showList__
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (\ (eta2 :: Data.Vector.SEXP.Vector s ty a)
                      (eta3 :: GHC.Base.String)[OneShot] ->
                    case GHC.Types.HEq_sc
                           @ *
                           @ *
                           @ (Data.Vector.SEXP.Base.ElemRep s ty)
                           @ a
                           lvl66
                             `cast`
                           (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                               s ty>_N <a>_N) of cobox1 { DEFAULT ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Data.Vector.SEXP.$fShowVector_$cshow
                         @ a
                         @ s
                         @ ty
                         $dShow
                         $d(%,,,%)
                         eta2)
                      eta3 })
                   eta
                   eta1 }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fShowVector_$cshowsPrec ::
    (GHC.Show.Show a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(A,A,1*C1(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,A><L,1*U(U,U,U,U)><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   ($dShow :: GHC.Show.Show a)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a)
                   (eta2 :: GHC.Base.String) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.Vector.SEXP.$fShowVector_$cshow
                         @ a
                         @ s
                         @ ty
                         $dShow
                         $d(%,,,%)
                         eta1))
                   eta2 }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
  DFunId
  {- Arity: 2,
     Strictness: <L,C(C1(C1(U(U,U(U)))))><L,U(U,U,A,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ t
                      @ s
                      @ (ty :: Foreign.R.Type.SEXPTYPE)
                      @ a
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s))
                      ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a).
                  @ (Data.Vector.SEXP.W t ty s)
                  @ a
                  (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeFreeze
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeThaw
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$cbasicLength
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeSlice
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeIndexM
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$cbasicUnsafeCopy
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%))
                  (Data.Vector.SEXP.$fVectorWa_$celemseq
                     @ t
                     @ s
                     @ ty
                     @ a
                     $dReifies
                     $d(%,,,%)) -}
2d5ab77727175ee5734c92f4aee6515b
  $fVectorWa1 ::
    Data.Vector.SEXP.ForeignSEXP ty
    -> (Foreign.R.Internal.SEXP s ty -> GHC.Types.IO r)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,U)><C(C(S(SL))),1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ s
                   @ r
                   (ds :: Data.Vector.SEXP.ForeignSEXP ty)
                   (f :: Foreign.R.Internal.SEXP s ty -> GHC.Types.IO r)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (f (case ds
                                 `cast`
                               (Data.Vector.SEXP.N:ForeignSEXP[0]
                                    <ty>_P) of wild { GHC.ForeignPtr.ForeignPtr fo ds1 ->
                          (GHC.Ptr.Ptr @ () fo)
                            `cast`
                          (Trans
                               (GHC.Ptr.Ptr <(), Language.R.HExp.HExp s ty>)_R
                               (Sym (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P))) }))
                        `cast`
                      (GHC.Types.N:IO[0] <r>_R)
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 case ds
                        `cast`
                      (Data.Vector.SEXP.N:ForeignSEXP[0]
                           <ty>_P) of wild { GHC.ForeignPtr.ForeignPtr ds2 r1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv of s' { DEFAULT ->
                 (# s', ipv1 #) } } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cbasicLength ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.W t ty s a -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LLLS),1*U(A,A,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.W t ty s a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 case eta
                        `cast`
                      (Data.Vector.SEXP.N:W[0]
                           <t>_P
                           <ty>_P
                           <s>_P <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Types.I# dt3 } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cbasicUnsafeCopy ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      (Data.Vector.SEXP.W t ty s) (Control.Monad.Primitive.PrimState m) a
    -> Data.Vector.SEXP.W t ty s a -> m ()
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U,A,A,U(U))><S(LC(S)),1*U(A,1*C1(U))><L,U(U,U,A)><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   @ (m :: * -> *)
                   (eta :: Control.Monad.Primitive.PrimMonad m)
                   (eta1 :: Data.Vector.Generic.Base.Mutable
                              (Data.Vector.SEXP.W t ty s)
                              (Control.Monad.Primitive.PrimState m)
                              a)
                   (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                       $d(%,,,%)
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO ())
                   @ (m ())
                   (Control.Monad.Primitive.unsafePrimToPrim
                      @ GHC.Types.IO
                      @ m
                      @ ()
                      Control.Monad.Primitive.$fPrimBaseIO
                      eta)
                   (Foreign.Marshal.Array.copyArray
                      @ a
                      $dStorable
                      (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                         @ a
                         @ (Control.Monad.Primitive.PrimState m)
                         @ ty
                         $dStorable
                         (Data.Vector.SEXP.Mutable.Internal.unW
                            @ t
                            @ ty
                            @ (Control.Monad.Primitive.PrimState m)
                            @ a
                            eta1
                              `cast`
                            (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                      <s>_N <ty>_N <t>_N) <Control.Monad.Primitive.PrimState
                                                             m>_N <a>_N)))
                      (case Data.Vector.SEXP.unW
                              @ t
                              @ ty
                              @ s
                              @ a
                              eta2 of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                         @ (GHC.Ptr.Ptr a)
                         (Control.Monad.Primitive.unsafeInlineIO @ (GHC.Ptr.Ptr a))
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Foreign.R.Internal.SEXP GHC.Prim.Any ty
                               -> GHC.Types.IO (GHC.Ptr.Ptr a))
                            @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                            (Data.Vector.SEXP.withForeignSEXP
                               @ ty
                               @ GHC.Prim.Any
                               @ (GHC.Ptr.Ptr a)
                               (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)))
                            (\ (sx :: Foreign.R.Internal.SEXP GHC.Prim.Any ty) ->
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Ptr.Ptr a)
                               @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                               (GHC.Base.returnIO @ (GHC.Ptr.Ptr a))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.SEXP.Mutable.Internal.MVector GHC.Prim.Any ty a)
                                  @ (GHC.Ptr.Ptr a)
                                  (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                     @ a
                                     @ GHC.Prim.Any
                                     @ ty
                                     $dStorable)
                                  (case sx
                                          `cast`
                                        (Foreign.R.Internal.N:SEXP[0]
                                             <GHC.Prim.Any>_P <ty>_P) of dt4 { GHC.Ptr.Ptr dt5 ->
                                   Data.Vector.SEXP.Mutable.Internal.MVector
                                     @ GHC.Prim.Any
                                     @ ty
                                     @ a
                                     dt5
                                     dt2
                                     dt3 })))) })
                      (Data.Vector.SEXP.$fVectorWa_$cbasicLength
                         @ t
                         @ s
                         @ ty
                         @ a
                         $dReifies
                         $d(%,,,%)
                         eta2)) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cbasicUnsafeFreeze ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      (Data.Vector.SEXP.W t ty s) (Control.Monad.Primitive.PrimState m) a
    -> m (Data.Vector.SEXP.W t ty s a)
  {- Arity: 4,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(SL),U(1*U,1*C1(U))><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   @ (m :: * -> *)
                   (eta :: Control.Monad.Primitive.PrimMonad m)
                   (eta1 :: Data.Vector.Generic.Base.Mutable
                              (Data.Vector.SEXP.W t ty s)
                              (Control.Monad.Primitive.PrimState m)
                              a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m eta
                 } in
                 case Data.Vector.SEXP.Mutable.Internal.unW
                        @ t
                        @ ty
                        @ (Control.Monad.Primitive.PrimState m)
                        @ a
                        eta1
                          `cast`
                        (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                  <s>_N <ty>_N <t>_N) <Control.Monad.Primitive.PrimState
                                                         m>_N <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.SEXP.ForeignSEXP ty)
                   @ (Data.Vector.SEXP.W t ty s a)
                   (Data.Vector.SEXP.foreignSEXP
                      @ m
                      @ (Control.Monad.Primitive.PrimState m)
                      @ ty
                      eta
                      (GHC.Ptr.Ptr
                         @ (Language.R.HExp.HExp (Control.Monad.Primitive.PrimState m) ty)
                         dt)
                        `cast`
                      (Sym (Foreign.R.Internal.N:SEXP[0]
                                <Control.Monad.Primitive.PrimState m>_P <ty>_P)))
                   (\ (fp :: Data.Vector.SEXP.ForeignSEXP ty) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Vector.SEXP.W t ty s a)
                      @ (m (Data.Vector.SEXP.W t ty s a))
                      (GHC.Base.return @ m $dMonad @ (Data.Vector.SEXP.W t ty s a))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.Vector s ty a)
                         @ (Data.Vector.SEXP.W t ty s a)
                         (\ (tpl :: Data.Vector.SEXP.Vector s ty a) -> tpl)
                           `cast`
                         (<Data.Vector.SEXP.Vector s ty a>_R
                          ->_R Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N)
                         (case fp
                                 `cast`
                               (Data.Vector.SEXP.N:ForeignSEXP[0]
                                    <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                          Data.Vector.SEXP.Vector @ s @ ty @ a dt4 dt5 dt1 dt2 }))) } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cbasicUnsafeIndexM ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    Data.Vector.SEXP.W t ty s a -> GHC.Types.Int -> m a
  {- Arity: 5,
     Strictness: <L,A><S(LLLS(S)),U(1*U,A,A,1*U(1*U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(U,U,U,A)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   @ (m :: * -> *)
                   (eta :: GHC.Base.Monad m)
                   (eta1 :: Data.Vector.SEXP.W t ty s a)
                   (eta2 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dStorable :: Foreign.Storable.Storable a
                   = GHC.Classes.$p1(%,,,%)
                       @ (Foreign.Storable.Storable a)
                       @ (Foreign.R.Type.IsVector ty)
                       @ (Data.Singletons.SingI ty)
                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                       $d(%,,,%)
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO a)
                   @ (m a)
                   (let {
                      f :: a -> m a = GHC.Base.return @ m eta @ a
                    } in
                    \ (x :: GHC.Types.IO a) ->
                    f (Control.Monad.Primitive.unsafeInlineIO @ a x))
                   (Foreign.Storable.peekElemOff
                      @ a
                      $dStorable
                      (case Data.Vector.SEXP.unW
                              @ t
                              @ ty
                              @ s
                              @ a
                              eta1 of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                         @ (GHC.Ptr.Ptr a)
                         (Control.Monad.Primitive.unsafeInlineIO @ (GHC.Ptr.Ptr a))
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Foreign.R.Internal.SEXP GHC.Prim.Any ty
                               -> GHC.Types.IO (GHC.Ptr.Ptr a))
                            @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                            (Data.Vector.SEXP.withForeignSEXP
                               @ ty
                               @ GHC.Prim.Any
                               @ (GHC.Ptr.Ptr a)
                               (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)))
                            (\ (sx :: Foreign.R.Internal.SEXP GHC.Prim.Any ty) ->
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Ptr.Ptr a)
                               @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                               (GHC.Base.returnIO @ (GHC.Ptr.Ptr a))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.SEXP.Mutable.Internal.MVector GHC.Prim.Any ty a)
                                  @ (GHC.Ptr.Ptr a)
                                  (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                     @ a
                                     @ GHC.Prim.Any
                                     @ ty
                                     $dStorable)
                                  (case sx
                                          `cast`
                                        (Foreign.R.Internal.N:SEXP[0]
                                             <GHC.Prim.Any>_P <ty>_P) of dt4 { GHC.Ptr.Ptr dt5 ->
                                   Data.Vector.SEXP.Mutable.Internal.MVector
                                     @ GHC.Prim.Any
                                     @ ty
                                     @ a
                                     dt5
                                     dt2
                                     dt3 })))) })
                      eta2) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cbasicUnsafeSlice ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.W t ty s a
    -> Data.Vector.SEXP.W t ty s a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)><S(S),1*U(U)><S(SLSL),1*U(U,U,U,A)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 case Data.Vector.SEXP.unW
                        @ t
                        @ ty
                        @ s
                        @ a
                        eta2 of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.W t ty s a)
                   (\ (tpl :: Data.Vector.SEXP.Vector s ty a) -> tpl)
                     `cast`
                   (<Data.Vector.SEXP.Vector s ty a>_R
                    ->_R Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N)
                   (case GHC.Base.id @ GHC.Types.Int eta of wild1 { GHC.Types.I# x# ->
                    case GHC.Int.$fNumInt32_$c+
                           (GHC.Int.I32# dt2)
                           (GHC.Int.I32#
                              (GHC.Prim.narrow32Int# x#)) of dt4 { GHC.Int.I32# dt5 ->
                    case GHC.Base.id
                           @ GHC.Types.Int
                           eta1 of wild2 { GHC.Types.I# x#1 ->
                    Data.Vector.SEXP.Vector
                      @ s
                      @ ty
                      @ a
                      dt
                      dt1
                      dt5
                      (GHC.Prim.narrow32Int# x#1) } } }) } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cbasicUnsafeThaw ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall (m :: * -> *).
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.SEXP.W t ty s a
    -> m (Data.Vector.Generic.Base.Mutable
            (Data.Vector.SEXP.W t ty s)
            (Control.Monad.Primitive.PrimState m)
            a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(U(U,1*U(U)))))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   @ (m :: * -> *)
                   (eta :: Control.Monad.Primitive.PrimMonad m)
                   (eta1 :: Data.Vector.SEXP.W t ty s a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 case Data.Vector.SEXP.unW
                        @ t
                        @ ty
                        @ s
                        @ a
                        eta1 of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 let {
                   ds :: Control.Monad.R.Internal.AcquireIO s
                   = $dReifies
                       `cast`
                     (Data.Reflection.N:Reifies[0]
                          <*>_N <t>_N <Control.Monad.R.Internal.AcquireIO s>_N)
                       @ Data.Proxy.Proxy
                       (Data.Proxy.Proxy @ * @ t)
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO
                        (Data.Vector.SEXP.Mutable.Internal.W
                           t ty (Control.Monad.Primitive.PrimState m) a))
                   @ (m (Data.Vector.Generic.Base.Mutable
                           (Data.Vector.SEXP.W t ty s)
                           (Control.Monad.Primitive.PrimState m)
                           a))
                   (Control.Monad.Primitive.unsafePrimToPrim
                      @ GHC.Types.IO
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           t ty (Control.Monad.Primitive.PrimState m) a)
                      Control.Monad.Primitive.$fPrimBaseIO
                      eta)
                     `cast`
                   (<GHC.Types.IO
                       (Data.Vector.SEXP.Mutable.Internal.W
                          t ty (Control.Monad.Primitive.PrimState m) a)>_R
                    ->_R <m>_R (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                         <s>_N <ty>_N <t>_N) <Control.Monad.Primitive.PrimState
                                                                m>_N <a>_N))
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Foreign.R.Internal.SEXP GHC.Prim.Any ty
                         -> GHC.Types.IO
                              (Data.Vector.SEXP.Mutable.Internal.W
                                 t ty (Control.Monad.Primitive.PrimState m) a))
                      @ (GHC.Types.IO
                           (Data.Vector.SEXP.Mutable.Internal.W
                              t ty (Control.Monad.Primitive.PrimState m) a))
                      (Data.Vector.SEXP.withForeignSEXP
                         @ ty
                         @ GHC.Prim.Any
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              t ty (Control.Monad.Primitive.PrimState m) a)
                         (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                           `cast`
                         (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)))
                      (\ (ptr :: Foreign.R.Internal.SEXP GHC.Prim.Any ty) ->
                       GHC.Base.bindIO
                         @ (Foreign.R.Internal.SEXP s ty)
                         @ (Data.Vector.SEXP.Mutable.Internal.W
                              t ty (Control.Monad.Primitive.PrimState m) a)
                         (ds `cast` (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)
                            @ ty
                            (Foreign.R.Internal.release
                               @ Control.Memory.Region.V
                               @ GHC.Prim.Any
                               @ ty
                               GHC.Classes.C:(%%)
                                 `cast`
                               (Sub (Sym (Control.Memory.Region.D:R:<=Voidb[0] <GHC.Prim.Any>_N)))
                               ptr))
                         (\ (sx' :: Foreign.R.Internal.SEXP s ty) ->
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.Mutable.Internal.W
                                 t ty (Control.Monad.Primitive.PrimState m) a)
                            @ (GHC.Types.IO
                                 (Data.Vector.SEXP.Mutable.Internal.W
                                    t ty (Control.Monad.Primitive.PrimState m) a))
                            (GHC.Base.returnIO
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    t ty (Control.Monad.Primitive.PrimState m) a))
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                    (Control.Monad.Primitive.PrimState m) ty a)
                               @ (Data.Vector.SEXP.Mutable.Internal.W
                                    t ty (Control.Monad.Primitive.PrimState m) a)
                               (Data.Vector.SEXP.Mutable.Internal.withW
                                  @ Data.Proxy.Proxy
                                  @ t
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  (Data.Proxy.Proxy @ * @ t))
                               (case (Foreign.R.Internal.unsafeRelease
                                        @ s
                                        @ ty
                                        @ (Control.Monad.Primitive.PrimState m)
                                        sx')
                                       `cast`
                                     (Foreign.R.Internal.N:SEXP[0]
                                          <Control.Monad.Primitive.PrimState m>_P
                                          <ty>_P) of dt4 { GHC.Ptr.Ptr dt5 ->
                                Data.Vector.SEXP.Mutable.Internal.MVector
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  dt5
                                  dt2
                                  dt3 }))))) } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$celemseq ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    forall b. Data.Vector.SEXP.W t ty s a -> a -> b -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   @ b
                   (eta :: Data.Vector.SEXP.W t ty s a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Prim.seq @ a @ b }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  $fVectorWa_$cp1Vector ::
    (Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s),
     Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.Generic.Mutable.Base.MVector
      (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s)) a
  {- Arity: 2,
     Strictness: <L,C(C1(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dReifies :: Data.Reflection.Reifies
                                   t (Control.Monad.R.Internal.AcquireIO s))
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 (Data.Vector.SEXP.Mutable.Internal.$fMVectorWa
                    @ t
                    @ s
                    @ ty
                    @ a
                    $dReifies
                    $d(%,,,%))
                   `cast`
                 (Data.Vector.Generic.Mutable.Base.MVector
                    (Sym (Data.Vector.SEXP.D:R:MutableW[0] <s>_N <ty>_N <t>_N))
                    <a>_N)_R }) -}
c8196d254773606c9428845b540dcd6e
  $tc'ForeignSEXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17873223789971760445##
                   8773919881821762701##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tc'ForeignSEXP1) -}
d6849f489bb1c38d5320964334081c9b
  $tc'ForeignSEXP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ForeignSEXP"#) -}
17cc57461c5597bae50e30d1094c1249
  $tc'Vector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   216351026527229826##
                   2548906082690079684##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tc'Vector1) -}
cae06ced6559ba47be1bc1277ab9b46a
  $tc'Vector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vector"#) -}
1207a1a0e214e3610f6f25c831460262
  $tc'W :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8095873533218348050##
                   4780568154564090295##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tc'W1) -}
c9b30c2aecaecffd0e75149abe3d92e1
  $tc'W1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'W"#) -}
10adfbf3efd11204a115abffc76e8095
  $tcForeignSEXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2751080833144529332##
                   15988983015863326117##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tcForeignSEXP1) -}
a547a4dcb1cca519be9ba3e3aa4381dc
  $tcForeignSEXP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ForeignSEXP"#) -}
d14e2baf8361d112f4a25535588820ce
  $tcVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12104830033800992395##
                   5431280734730646823##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tcVector1) -}
70f0c38533574b2ad8b05954e59a63e3
  $tcVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vector"#) -}
b287c84b3c7e017b066a73779fc3ba03
  $tcW :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9604794579084214217##
                   1295789680653189886##
                   Data.Vector.SEXP.$trModule
                   Data.Vector.SEXP.$tcW1) -}
d8705a761fb4c0d4c940e43520fc22fe
  $tcW1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "W"#) -}
050881fad9e4cd879bc8fa7fd8be4c2c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Vector.SEXP.$trModule2
                   Data.Vector.SEXP.$trModule1) -}
af8c31ae9b50fa2a4de41f989dbc94c7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Vector.SEXP"#) -}
971e14bb58e7a5ed04cccbf3a2a4f2d4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs"#) -}
e133b546c75d6936868534ef778d8d04
  $w$c== ::
    (GHC.Classes.Eq a, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 10,
     Strictness: <L,U(C(C1(U)),A)><S(LLLS(S)),U(U,A,A,U(U))><L,U><L,U><L,U><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
06ef4c7054d28724c292b0cdacbb67f4
  $wfromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Prim.Addr# -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S,U>,
     Inline: [0] -}
d6e45b89bfb5dd3d560cb093a92cc01a
  $wtoSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Foreign.R.Internal.SEXP s ty
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
5767ff688d4c62c27005868d987d27ec
  $wtoString ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0] -}
6bdf558b7a41b9e524ec0ea0348be46f
  $wunsafeToSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> Foreign.R.Internal.SEXP s ty
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Foreign.R.Internal.SEXP s ty)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate# s1 of s' { DEFAULT ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.ForeignPtr.ForeignPtrContents
                                ww1
                                s' of s'1 { DEFAULT ->
                         (# s'1,
                            (GHC.Ptr.Ptr @ () ww)
                              `cast`
                            (Trans
                                 (GHC.Ptr.Ptr <(), Language.R.HExp.HExp s ty>)_R
                                 (Sym (Foreign.R.Internal.N:SEXP[0]
                                           <s>_P <ty>_P))) #) } }) of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
a9443a1523d8907b88db808548f6b18c
  (++) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS),1*U(U,U,U,U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a
                            -> Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 2 -}
                      = Data.Vector.Generic.++ @ (Data.Vector.SEXP.W t ty s) @ a g
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW2
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ ty
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta
                         eta1
                         x)) }) -}
a402c4b7d3efefa6af9a6874db1aed6d
  (//) ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, a)] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: [(GHC.Types.Int, a)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (ds :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.modifyWithBundle
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             @ GHC.Prim.Any
                             @ (GHC.Types.Int, a)
                             (\ @ s1 ->
                              Data.Vector.Generic.Mutable.update
                                @ (GHC.ST.ST s1)
                                @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s))
                                @ a
                                @ GHC.Prim.Any
                                (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                   @ t
                                   @ s
                                   @ ty
                                   @ a
                                   $dReifies
                                   $d(%,,,%)))
                               `cast`
                             (forall (s1 :: <GHC.Types.*>_N).
                              (Data.Vector.Generic.Base.Mutable
                                 <Data.Vector.SEXP.W t ty s>_N
                                 (Control.Monad.Primitive.D:R:PrimStateST[0] <s1>_N)
                                 <a>_N)_R
                              ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                      Data.Vector.Fusion.Util.Id GHC.Prim.Any (GHC.Types.Int, a)
                                    -> GHC.ST.ST s1 ()>_R)
                             (Data.Vector.Generic.clone
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                ds)
                             (Data.Vector.Fusion.Bundle.$sfromList
                                @ (GHC.Types.Int, a)
                                @ GHC.Prim.Any
                                eta1))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta
                         x)) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  axiom D:R:ItemVector::
    [a, (ty :: Foreign.R.Type.SEXPTYPE), s]
      GHC.Exts.Item (Data.Vector.SEXP.Vector s ty a) = a
5a4969675eb1cadbaf3eeb53aa5ed01a
  axiom D:R:MutableW::
    [s, (ty :: Foreign.R.Type.SEXPTYPE), t]
      Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s)
        = Data.Vector.SEXP.Mutable.Internal.W t ty
a04953b06e58657b32df156b23b835d4
  type role ForeignSEXP phantom
  newtype ForeignSEXP (ty :: Foreign.R.Type.SEXPTYPE)
    = ForeignSEXP (GHC.ForeignPtr.ForeignPtr ())
5a4969675eb1cadbaf3eeb53aa5ed01a
  type role Vector phantom phantom phantom
  data Vector s (ty :: Foreign.R.Type.SEXPTYPE) a
    = Vector {vectorBase :: ! {-# UNPACK #-}(Data.Vector.SEXP.N:ForeignSEXP[0]
                                                 <ty>_P)Data.Vector.SEXP.ForeignSEXP ty,
              vectorOffset :: {-# UNPACK #-}GHC.Int.Int32,
              vectorLength :: {-# UNPACK #-}GHC.Int.Int32}
5a4969675eb1cadbaf3eeb53aa5ed01a
  type role W phantom phantom phantom phantom
  newtype W t (ty :: Foreign.R.Type.SEXPTYPE) s a
    = W {unW :: Data.Vector.SEXP.Vector s ty a}
38f6611f0d84f7fee5b13dd71df93b89
  accum ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> a)
    -> Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, b)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> b -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a)
                   (eta2 :: [(GHC.Types.Int, b)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (w :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.modifyWithBundle
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             @ GHC.Prim.Any
                             @ (GHC.Types.Int, b)
                             (\ @ s1 ->
                              Data.Vector.Generic.Mutable.accum
                                @ (GHC.ST.ST s1)
                                @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s))
                                @ a
                                @ b
                                @ GHC.Prim.Any
                                (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                   @ t
                                   @ s
                                   @ ty
                                   @ a
                                   $dReifies
                                   $d(%,,,%))
                                eta)
                               `cast`
                             (forall (s1 :: <GHC.Types.*>_N).
                              (Data.Vector.Generic.Base.Mutable
                                 <Data.Vector.SEXP.W t ty s>_N
                                 (Control.Monad.Primitive.D:R:PrimStateST[0] <s1>_N)
                                 <a>_N)_R
                              ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                      Data.Vector.Fusion.Util.Id GHC.Prim.Any (GHC.Types.Int, b)
                                    -> GHC.ST.ST s1 ()>_R)
                             (Data.Vector.Generic.clone
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                w)
                             (Data.Vector.Fusion.Bundle.$sfromList
                                @ (GHC.Types.Int, b)
                                @ GHC.Prim.Any
                                eta2))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
1c7982069e506a9aae47cb7f3eb3c98d
  all ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Bool)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Vector.Fusion.Util.unId
                      @ GHC.Types.Bool
                      (Data.Vector.Fusion.Bundle.Monadic.and
                         @ Data.Vector.Fusion.Util.Id
                         @ (Data.Vector.SEXP.W t ty s)
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.mapM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ GHC.Types.Bool
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (x :: a) ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ GHC.Types.Bool
                               (eta x))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               (Data.Vector.SEXP.withW
                                  @ Data.Proxy.Proxy
                                  @ t
                                  @ s
                                  @ ty
                                  @ a
                                  p
                                  eta1))))) }) -}
5ae4d4d4538f55e983b57d72d20c7379
  all1 ::
    proxy t
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ (proxy :: * -> *)
                   @ t
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (ds :: proxy t)
                   (v :: Data.Vector.SEXP.Vector s ty a) ->
                 v) -}
5ef7c2ae92a3bbbb82b463718c661606
  any ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Bool)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Vector.Fusion.Util.unId
                      @ GHC.Types.Bool
                      (Data.Vector.Fusion.Bundle.Monadic.or
                         @ Data.Vector.Fusion.Util.Id
                         @ (Data.Vector.SEXP.W t ty s)
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.mapM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ GHC.Types.Bool
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (x :: a) ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ GHC.Types.Bool
                               (eta x))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               (Data.Vector.SEXP.withW
                                  @ Data.Proxy.Proxy
                                  @ t
                                  @ s
                                  @ ty
                                  @ a
                                  p
                                  eta1))))) }) -}
9768c41d61a72742eab8f94656568801
  break ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t
                      -> (Data.Vector.SEXP.Vector s ty a,
                          Data.Vector.SEXP.Vector s ty a))
                   @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony
                      @ s
                      @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a
                            -> (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                        {- Arity: 1 -}
                      = Data.Vector.Generic.break @ (Data.Vector.SEXP.W t ty s) @ a g eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    case Data.Vector.SEXP.proxyFW
                           @ t
                           @ ty
                           @ s
                           @ a
                           @ (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                           @ Data.Proxy.Proxy
                           g1
                           eta1
                           x of wild { (,) a1 b ->
                    (Data.Vector.SEXP.unW @ t @ ty @ s @ a a1,
                     Data.Vector.SEXP.unW @ t @ ty @ s @ a b) }) }) -}
d8b34ca62b88ac2f1f10887149d04214
  concat ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    [Data.Vector.SEXP.Vector s ty a] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: [Data.Vector.SEXP.Vector s ty a]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Vector.SEXP.W t ty s a)
                      @ (Data.Vector.SEXP.Vector s ty a)
                      (Data.Vector.SEXP.unW @ t @ ty @ s @ a)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ [Data.Vector.SEXP.W t ty s a]
                         @ (Data.Vector.SEXP.W t ty s a)
                         (\ (x :: [Data.Vector.SEXP.W t ty s a]) ->
                          Data.Vector.Generic.new
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Generic.New.unstream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               (Data.Vector.Fusion.Bundle.Monadic.fromVectors
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  $dVector
                                  x)))
                         (GHC.Base.build
                            @ (Data.Vector.SEXP.W t ty s a)
                            (\ @ b1
                               (c :: Data.Vector.SEXP.W t ty s a -> b1 -> b1)[OneShot]
                               (n :: b1)[OneShot] ->
                             GHC.Base.foldr
                               @ (Data.Vector.SEXP.Vector s ty a)
                               @ b1
                               (GHC.Base.mapFB
                                  @ (Data.Vector.SEXP.W t ty s a)
                                  @ b1
                                  @ (Data.Vector.SEXP.Vector s ty a)
                                  c
                                  (Data.Vector.SEXP.withW @ Data.Proxy.Proxy @ t @ s @ ty @ a p))
                               n
                               eta)))) }) -}
e7a81767cbf792cff8d90c6ff07407e9
  concatMap ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b) =>
    (a -> Data.Vector.SEXP.Vector s tyb b)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(U(U,U,U,U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   (eta :: a -> Data.Vector.SEXP.Vector s tyb b)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyb b)
                   @ (Data.Vector.SEXP.Vector s tyb b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyb b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyb
                      @ s
                      @ b
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyb s) b)
                         @ (Data.Vector.SEXP.W t tyb s b)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyb s)
                            @ b
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.concatMapM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ a
                                 @ b
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (x :: a) ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ (Data.Vector.Fusion.Stream.Monadic.Stream
                                         Data.Vector.Fusion.Util.Id b)
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       (Data.Vector.Generic.stream
                                          @ (Data.Vector.SEXP.W t tyb s)
                                          @ b
                                          $dVector
                                          (Data.Vector.SEXP.withW
                                             @ Data.Proxy.Proxy
                                             @ t
                                             @ s
                                             @ tyb
                                             @ b
                                             p
                                             (eta x)))))
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tya s)
                                    @ a
                                    (Data.Vector.Generic.stream
                                       @ (Data.Vector.SEXP.W t tya s)
                                       @ a
                                       $dVector1
                                       (Data.Vector.SEXP.withW
                                          @ Data.Proxy.Proxy
                                          @ t
                                          @ s
                                          @ tya
                                          @ a
                                          p
                                          eta1))) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyb s)
                            @ b
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ b
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyb s) b)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 b)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyb s) b))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 b)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyb s) b))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyb s) b)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyb s) b)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyb s) b)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyb s)
                                                @ b
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector2 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyb s) b)
                                                   (eta2 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyb s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              b) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyb s))
                                                   @ b
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyb s)
                                                      @ b
                                                      $dVector2)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta2
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyb s) b)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyb s) b) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyb s b))
                            Data.Vector.Fusion.Bundle.Size.Unknown }))
                      p) } }) -}
98dc4d0bf147132dae981e875cda6e93
  cons ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    a
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.cons @ (Data.Vector.SEXP.W t ty s) @ a g eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta1
                         x)) }) -}
8912f94b1c9e59c9a82fc250135539e8
  constructN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (Data.Vector.SEXP.Vector s ty a -> a)
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(S),1*U(U)><L,C(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a -> a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       let {
                         $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                        (Data.Vector.Generic.Base.Mutable
                                           (Data.Vector.SEXP.W t ty s))
                                        a
                         = Data.Vector.SEXP.$fVectorWa_$cp1Vector
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                       } in
                       case eta of n { GHC.Types.I# ipv ->
                       letrec {
                         fill :: forall s1.
                                 Data.Vector.SEXP.W t ty s a
                                 -> GHC.Types.Int -> GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a)
                           {- Arity: 2 -}
                         = \ @ s1
                             (v1 :: Data.Vector.SEXP.W t ty s a)
                             (i :: GHC.Types.Int) ->
                           case v1
                                  `cast`
                                (Data.Vector.SEXP.N:W[0]
                                     <t>_P
                                     <ty>_P
                                     <s>_P <a>_N) of nt { Data.Vector.SEXP.Vector ipv1 ipv2 ipv3 ipv4 ->
                           case GHC.Classes.ltInt i n of wild {
                             GHC.Types.False
                             -> GHC.ST.$fMonadST_$creturn
                                  @ s1
                                  @ (Data.Vector.SEXP.W t ty s a)
                                  nt `cast` (Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N)
                             GHC.Types.True
                             -> let {
                                  x :: a
                                  = eta1
                                      (Data.Vector.SEXP.unW
                                         @ t
                                         @ ty
                                         @ s
                                         @ a
                                         (Data.Vector.Generic.unsafeSlice
                                            @ (Data.Vector.SEXP.W t ty s)
                                            @ a
                                            $dVector
                                            (GHC.Types.I# 0#)
                                            i
                                            nt
                                              `cast`
                                            (Sym (Data.Vector.SEXP.N:W[0]
                                                      <t>_P <ty>_P <s>_P) <a>_N)))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                  @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                  (case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep s ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        s ty>_N <a>_N) of cobox1 { DEFAULT ->
                                   GHC.Prim.seq
                                     @ a
                                     @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                     x })
                                  (\ (s2 :: GHC.Prim.State# s1)[OneShot] ->
                                   case (Data.Vector.Generic.unsafeThaw
                                           @ (GHC.ST.ST s1)
                                           @ (Data.Vector.SEXP.W t ty s)
                                           @ a
                                           (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                           $dVector
                                           nt
                                             `cast`
                                           (Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N))
                                          `cast`
                                        (GHC.ST.N:ST[0]
                                             <s1>_N
                                             (Data.Vector.Generic.Base.Mutable
                                                <Data.Vector.SEXP.W t ty s>_N
                                                (Control.Monad.Primitive.D:R:PrimStateST[0] <s1>_N)
                                                <a>_N)_R)
                                          s2 of ds1 { (#,#) ipv5 ipv6 ->
                                   (GHC.ST.$fMonadST_$c>>
                                      @ s1
                                      @ ()
                                      @ (Data.Vector.SEXP.W t ty s a)
                                      (GHC.Base.$
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (GHC.ST.ST s1 ())
                                         @ (GHC.ST.ST s1 ())
                                         (Data.Vector.Internal.Check.checkIndex
                                            @ (GHC.ST.ST s1 ())
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Generic/Mutable.hs"#))
                                            (GHC.Types.I# 729#)
                                            Data.Vector.Internal.Check.Unsafe
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "unsafeWrite"#))
                                            i
                                            (Data.Vector.Generic.Mutable.Base.basicLength
                                               @ (Data.Vector.Generic.Base.Mutable
                                                    (Data.Vector.SEXP.W t ty s))
                                               @ a
                                               $dMVector
                                               @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s1))
                                               ipv6
                                                 `cast`
                                               (Data.Vector.Generic.Base.Mutable
                                                  <Data.Vector.SEXP.W t ty s>_N
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                            <s1>_N))
                                                  <a>_N)_R))
                                         (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W t ty s))
                                            @ a
                                            $dMVector
                                            @ (GHC.ST.ST s1)
                                            (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                            ipv6
                                              `cast`
                                            (Data.Vector.Generic.Base.Mutable
                                               <Data.Vector.SEXP.W t ty s>_N
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <s1>_N))
                                               <a>_N)_R
                                            i
                                            x))
                                      (\ (s3 :: GHC.Prim.State# s1)[OneShot] ->
                                       case GHC.Types.HEq_sc
                                              @ *
                                              @ *
                                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                              @ a
                                              (GHC.Classes.$p4(%,,,%)
                                                 @ (Foreign.Storable.Storable a)
                                                 @ (Foreign.R.Type.IsVector ty)
                                                 @ (Data.Singletons.SingI ty)
                                                 @ (Data.Vector.SEXP.Base.ElemRep s ty
                                                    Data.Type.Equality.~ a)
                                                 $d(%,,,%))
                                                `cast`
                                              (Data.Type.Equality.N:~[0]
                                                   <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                                       case Data.Vector.SEXP.Mutable.Internal.unW
                                              @ t
                                              @ ty
                                              @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s1))
                                              @ a
                                              ipv6
                                                `cast`
                                              (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                        <s>_N
                                                        <ty>_N
                                                        <t>_N) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                         <s1>_N)) <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                       case (Data.Vector.SEXP.foreignSEXP
                                               @ (GHC.ST.ST s1)
                                               @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s1))
                                               @ ty
                                               (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                               (GHC.Ptr.Ptr
                                                  @ (Language.R.HExp.HExp
                                                       (Control.Monad.Primitive.PrimState
                                                          (GHC.ST.ST s1))
                                                       ty)
                                                  dt)
                                                 `cast`
                                               (Sym (Foreign.R.Internal.N:SEXP[0]
                                                         <Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST s1)>_P
                                                         <ty>_P)))
                                              `cast`
                                            (GHC.ST.N:ST[0]
                                                 <s1>_N <Data.Vector.SEXP.ForeignSEXP ty>_R)
                                              s3 of ds2 { (#,#) ipv7 ipv8 ->
                                       case (GHC.Base.$
                                               @ 'GHC.Types.PtrRepLifted
                                               @ (Data.Vector.SEXP.W t ty s a)
                                               @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                               (GHC.ST.$fMonadST_$creturn
                                                  @ s1
                                                  @ (Data.Vector.SEXP.W t ty s a))
                                               (GHC.Base.$
                                                  @ 'GHC.Types.PtrRepLifted
                                                  @ (Data.Vector.SEXP.Vector s ty a)
                                                  @ (Data.Vector.SEXP.W t ty s a)
                                                  (\ (tpl :: Data.Vector.SEXP.Vector s ty a) -> tpl)
                                                    `cast`
                                                  (<Data.Vector.SEXP.Vector s ty a>_R
                                                   ->_R Sym (Data.Vector.SEXP.N:W[0]
                                                                 <t>_P <ty>_P <s>_P) <a>_N)
                                                  (case ipv8
                                                          `cast`
                                                        (Data.Vector.SEXP.N:ForeignSEXP[0]
                                                             <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                                                   Data.Vector.SEXP.Vector
                                                     @ s
                                                     @ ty
                                                     @ a
                                                     dt4
                                                     dt5
                                                     dt1
                                                     dt2 })))
                                              `cast`
                                            (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)
                                              ipv7 of ds3 { (#,#) ipv9 ipv10 ->
                                       (fill @ s1 ipv10 (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# 1#)))
                                         `cast`
                                       (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)
                                         ipv9 } } } })
                                        `cast`
                                      (Sym (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)))
                                     `cast`
                                   (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)
                                     ipv5 })
                                    `cast`
                                  (Sym (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)) } }
                       } in
                       case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ (Data.Vector.SEXP.W t ty s a)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case (GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (GHC.ST.ST
                                            GHC.Prim.RealWorld
                                            (Data.Vector.Generic.Base.Mutable
                                               (Data.Vector.SEXP.W t ty s)
                                               (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                               a))
                                       @ (GHC.ST.ST
                                            GHC.Prim.RealWorld
                                            (Data.Vector.Generic.Base.Mutable
                                               (Data.Vector.SEXP.W t ty s)
                                               (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                               a))
                                       (Data.Vector.Internal.Check.checkLength
                                          @ (GHC.ST.ST
                                               GHC.Prim.RealWorld
                                               (Data.Vector.Generic.Base.Mutable
                                                  (Data.Vector.SEXP.W t ty s)
                                                  (Control.Monad.Primitive.PrimState
                                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                                  a))
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "./Data/Vector/Generic/Mutable.hs"#))
                                          (GHC.Types.I# 585#)
                                          Data.Vector.Internal.Check.Bounds
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                                          n)
                                       (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (GHC.ST.ST
                                                     GHC.Prim.RealWorld
                                                     (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t ty s)
                                                        (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                        a))
                                                @ (GHC.ST.ST
                                                     GHC.Prim.RealWorld
                                                     (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t ty s)
                                                        (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                        a))
                                                (Data.Vector.Internal.Check.checkLength
                                                   @ (GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Vector.Generic.Base.Mutable
                                                           (Data.Vector.SEXP.W t ty s)
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           a))
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "./Data/Vector/Generic/Mutable.hs"#))
                                                   (GHC.Types.I# 591#)
                                                   Data.Vector.Internal.Check.Unsafe
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "unsafeNew"#))
                                                   n)
                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t ty s))
                                                   @ a
                                                   $dMVector
                                                   @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                   (Control.Monad.Primitive.$fPrimMonadST
                                                      @ GHC.Prim.RealWorld)
                                                   n))
                                               `cast`
                                             (GHC.ST.N:ST[0]
                                                  <GHC.Prim.RealWorld>_N
                                                  <Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W t ty s)
                                                     (Control.Monad.Primitive.PrimState
                                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                                     a>_R)
                                               s2 of ds1 { (#,#) ipv1 ipv2 ->
                                        (GHC.ST.$fMonadST_$c>>
                                           @ GHC.Prim.RealWorld
                                           @ ()
                                           @ (Data.Vector.Generic.Base.Mutable
                                                (Data.Vector.SEXP.W t ty s)
                                                (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                                a)
                                           (Data.Vector.Generic.Mutable.Base.basicInitialize
                                              @ (Data.Vector.Generic.Base.Mutable
                                                   (Data.Vector.SEXP.W t ty s))
                                              @ a
                                              $dMVector
                                              @ (GHC.ST.ST GHC.Prim.RealWorld)
                                              (Control.Monad.Primitive.$fPrimMonadST
                                                 @ GHC.Prim.RealWorld)
                                              ipv2)
                                           (GHC.ST.$fMonadST_$creturn
                                              @ GHC.Prim.RealWorld
                                              @ (Data.Vector.Generic.Base.Mutable
                                                   (Data.Vector.SEXP.W t ty s)
                                                   (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                   a)
                                              ipv2))
                                          `cast`
                                        (GHC.ST.N:ST[0]
                                             <GHC.Prim.RealWorld>_N
                                             <Data.Vector.Generic.Base.Mutable
                                                (Data.Vector.SEXP.W t ty s)
                                                (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                                a>_R)
                                          ipv1 })
                                         `cast`
                                       (Sym (GHC.ST.N:ST[0]
                                                 <GHC.Prim.RealWorld>_N
                                                 <Data.Vector.Generic.Base.Mutable
                                                    (Data.Vector.SEXP.W t ty s)
                                                    (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                    a>_R)))
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N
                                         (Data.Vector.Generic.Base.Mutable
                                            <Data.Vector.SEXP.W t ty s>_N
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)
                                            <a>_N)_R)
                                      s1 of ds1 { (#,#) ipv1 ipv2 ->
                               case GHC.Types.HEq_sc
                                      @ *
                                      @ *
                                      @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                      @ a
                                      (GHC.Classes.$p4(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ (Data.Vector.SEXP.Base.ElemRep s ty
                                            Data.Type.Equality.~ a)
                                         $d(%,,,%))
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                    s ty>_N <a>_N) of cobox1 { DEFAULT ->
                               case Data.Vector.SEXP.Mutable.Internal.unW
                                      @ t
                                      @ ty
                                      @ (Control.Monad.Primitive.PrimState
                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                      @ a
                                      ipv2
                                        `cast`
                                      (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                <s>_N
                                                <ty>_N
                                                <t>_N) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N)) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                               case (Data.Vector.SEXP.foreignSEXP
                                       @ (GHC.ST.ST GHC.Prim.RealWorld)
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ ty
                                       (Control.Monad.Primitive.$fPrimMonadST @ GHC.Prim.RealWorld)
                                       (GHC.Ptr.Ptr
                                          @ (Language.R.HExp.HExp
                                               (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                               ty)
                                          dt)
                                         `cast`
                                       (Sym (Foreign.R.Internal.N:SEXP[0]
                                                 <Control.Monad.Primitive.PrimState
                                                    (GHC.ST.ST GHC.Prim.RealWorld)>_P
                                                 <ty>_P)))
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.ForeignSEXP ty>_R)
                                      ipv1 of ds2 { (#,#) ipv4 ipv5 ->
                               case (GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (Data.Vector.SEXP.W t ty s a)
                                       @ (GHC.ST.ST
                                            GHC.Prim.RealWorld (Data.Vector.SEXP.W t ty s a))
                                       (GHC.ST.$fMonadST_$creturn
                                          @ GHC.Prim.RealWorld
                                          @ (Data.Vector.SEXP.W t ty s a))
                                       (GHC.Base.$
                                          @ 'GHC.Types.PtrRepLifted
                                          @ (Data.Vector.SEXP.Vector s ty a)
                                          @ (Data.Vector.SEXP.W t ty s a)
                                          (\ (tpl :: Data.Vector.SEXP.Vector s ty a) -> tpl)
                                            `cast`
                                          (<Data.Vector.SEXP.Vector s ty a>_R
                                           ->_R Sym (Data.Vector.SEXP.N:W[0]
                                                         <t>_P <ty>_P <s>_P) <a>_N)
                                          (case ipv5
                                                  `cast`
                                                (Data.Vector.SEXP.N:ForeignSEXP[0]
                                                     <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                                           Data.Vector.SEXP.Vector @ s @ ty @ a dt4 dt5 dt1 dt2 })))
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.W t ty s a>_R)
                                      ipv4 of ds3 { (#,#) ipv3 ipv6 ->
                               (fill @ GHC.Prim.RealWorld ipv6 (GHC.Types.I# 0#))
                                 `cast`
                               (GHC.ST.N:ST[0]
                                    <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.W t ty s a>_R)
                                 ipv3 } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                       ipv2 } })) }) -}
f02b5984677a028dbc9788b527dc7985
  constructrN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (Data.Vector.SEXP.Vector s ty a -> a)
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(S),1*U(U)><L,C(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a -> a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       let {
                         $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                        (Data.Vector.Generic.Base.Mutable
                                           (Data.Vector.SEXP.W t ty s))
                                        a
                         = Data.Vector.SEXP.$fVectorWa_$cp1Vector
                             @ t
                             @ s
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                       } in
                       case eta of n { GHC.Types.I# ipv ->
                       letrec {
                         fill :: forall s1.
                                 Data.Vector.SEXP.W t ty s a
                                 -> GHC.Types.Int -> GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a)
                           {- Arity: 2 -}
                         = \ @ s1
                             (v1 :: Data.Vector.SEXP.W t ty s a)
                             (i :: GHC.Types.Int) ->
                           case v1
                                  `cast`
                                (Data.Vector.SEXP.N:W[0]
                                     <t>_P
                                     <ty>_P
                                     <s>_P <a>_N) of nt { Data.Vector.SEXP.Vector ipv1 ipv2 ipv3 ipv4 ->
                           case GHC.Classes.ltInt i n of wild {
                             GHC.Types.False
                             -> GHC.ST.$fMonadST_$creturn
                                  @ s1
                                  @ (Data.Vector.SEXP.W t ty s a)
                                  nt `cast` (Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N)
                             GHC.Types.True
                             -> let {
                                  x :: a
                                  = eta1
                                      (Data.Vector.SEXP.unW
                                         @ t
                                         @ ty
                                         @ s
                                         @ a
                                         (Data.Vector.Generic.unsafeSlice
                                            @ (Data.Vector.SEXP.W t ty s)
                                            @ a
                                            $dVector
                                            (GHC.Num.$fNumInt_$c- n i)
                                            i
                                            nt
                                              `cast`
                                            (Sym (Data.Vector.SEXP.N:W[0]
                                                      <t>_P <ty>_P <s>_P) <a>_N)))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                  @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                  (case GHC.Types.HEq_sc
                                          @ *
                                          @ *
                                          @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                          @ a
                                          (GHC.Classes.$p4(%,,,%)
                                             @ (Foreign.Storable.Storable a)
                                             @ (Foreign.R.Type.IsVector ty)
                                             @ (Data.Singletons.SingI ty)
                                             @ (Data.Vector.SEXP.Base.ElemRep s ty
                                                Data.Type.Equality.~ a)
                                             $d(%,,,%))
                                            `cast`
                                          (Data.Type.Equality.N:~[0]
                                               <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                        s ty>_N <a>_N) of cobox1 { DEFAULT ->
                                   GHC.Prim.seq
                                     @ a
                                     @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                     x })
                                  (\ (s2 :: GHC.Prim.State# s1)[OneShot] ->
                                   case (Data.Vector.Generic.unsafeThaw
                                           @ (GHC.ST.ST s1)
                                           @ (Data.Vector.SEXP.W t ty s)
                                           @ a
                                           (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                           $dVector
                                           nt
                                             `cast`
                                           (Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N))
                                          `cast`
                                        (GHC.ST.N:ST[0]
                                             <s1>_N
                                             (Data.Vector.Generic.Base.Mutable
                                                <Data.Vector.SEXP.W t ty s>_N
                                                (Control.Monad.Primitive.D:R:PrimStateST[0] <s1>_N)
                                                <a>_N)_R)
                                          s2 of ds1 { (#,#) ipv5 ipv6 ->
                                   let {
                                     i1 :: GHC.Types.Int
                                     = GHC.Num.$fNumInt_$c-
                                         (GHC.Num.$fNumInt_$c- n i)
                                         (GHC.Types.I# 1#)
                                   } in
                                   (GHC.ST.$fMonadST_$c>>
                                      @ s1
                                      @ ()
                                      @ (Data.Vector.SEXP.W t ty s a)
                                      (GHC.Base.$
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (GHC.ST.ST s1 ())
                                         @ (GHC.ST.ST s1 ())
                                         (Data.Vector.Internal.Check.checkIndex
                                            @ (GHC.ST.ST s1 ())
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Generic/Mutable.hs"#))
                                            (GHC.Types.I# 729#)
                                            Data.Vector.Internal.Check.Unsafe
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "unsafeWrite"#))
                                            i1
                                            (Data.Vector.Generic.Mutable.Base.basicLength
                                               @ (Data.Vector.Generic.Base.Mutable
                                                    (Data.Vector.SEXP.W t ty s))
                                               @ a
                                               $dMVector
                                               @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s1))
                                               ipv6
                                                 `cast`
                                               (Data.Vector.Generic.Base.Mutable
                                                  <Data.Vector.SEXP.W t ty s>_N
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                            <s1>_N))
                                                  <a>_N)_R))
                                         (Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                            @ (Data.Vector.Generic.Base.Mutable
                                                 (Data.Vector.SEXP.W t ty s))
                                            @ a
                                            $dMVector
                                            @ (GHC.ST.ST s1)
                                            (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                            ipv6
                                              `cast`
                                            (Data.Vector.Generic.Base.Mutable
                                               <Data.Vector.SEXP.W t ty s>_N
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <s1>_N))
                                               <a>_N)_R
                                            i1
                                            x))
                                      (\ (s3 :: GHC.Prim.State# s1)[OneShot] ->
                                       case GHC.Types.HEq_sc
                                              @ *
                                              @ *
                                              @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                              @ a
                                              (GHC.Classes.$p4(%,,,%)
                                                 @ (Foreign.Storable.Storable a)
                                                 @ (Foreign.R.Type.IsVector ty)
                                                 @ (Data.Singletons.SingI ty)
                                                 @ (Data.Vector.SEXP.Base.ElemRep s ty
                                                    Data.Type.Equality.~ a)
                                                 $d(%,,,%))
                                                `cast`
                                              (Data.Type.Equality.N:~[0]
                                                   <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                                       case Data.Vector.SEXP.Mutable.Internal.unW
                                              @ t
                                              @ ty
                                              @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s1))
                                              @ a
                                              ipv6
                                                `cast`
                                              (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                        <s>_N
                                                        <ty>_N
                                                        <t>_N) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                         <s1>_N)) <a>_N) of wild1 { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                                       case (Data.Vector.SEXP.foreignSEXP
                                               @ (GHC.ST.ST s1)
                                               @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s1))
                                               @ ty
                                               (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                               (GHC.Ptr.Ptr
                                                  @ (Language.R.HExp.HExp
                                                       (Control.Monad.Primitive.PrimState
                                                          (GHC.ST.ST s1))
                                                       ty)
                                                  dt)
                                                 `cast`
                                               (Sym (Foreign.R.Internal.N:SEXP[0]
                                                         <Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST s1)>_P
                                                         <ty>_P)))
                                              `cast`
                                            (GHC.ST.N:ST[0]
                                                 <s1>_N <Data.Vector.SEXP.ForeignSEXP ty>_R)
                                              s3 of ds2 { (#,#) ipv7 ipv8 ->
                                       case (GHC.Base.$
                                               @ 'GHC.Types.PtrRepLifted
                                               @ (Data.Vector.SEXP.W t ty s a)
                                               @ (GHC.ST.ST s1 (Data.Vector.SEXP.W t ty s a))
                                               (GHC.ST.$fMonadST_$creturn
                                                  @ s1
                                                  @ (Data.Vector.SEXP.W t ty s a))
                                               (GHC.Base.$
                                                  @ 'GHC.Types.PtrRepLifted
                                                  @ (Data.Vector.SEXP.Vector s ty a)
                                                  @ (Data.Vector.SEXP.W t ty s a)
                                                  (\ (tpl :: Data.Vector.SEXP.Vector s ty a) -> tpl)
                                                    `cast`
                                                  (<Data.Vector.SEXP.Vector s ty a>_R
                                                   ->_R Sym (Data.Vector.SEXP.N:W[0]
                                                                 <t>_P <ty>_P <s>_P) <a>_N)
                                                  (case ipv8
                                                          `cast`
                                                        (Data.Vector.SEXP.N:ForeignSEXP[0]
                                                             <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                                                   Data.Vector.SEXP.Vector
                                                     @ s
                                                     @ ty
                                                     @ a
                                                     dt4
                                                     dt5
                                                     dt1
                                                     dt2 })))
                                              `cast`
                                            (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)
                                              ipv7 of ds3 { (#,#) ipv9 ipv10 ->
                                       (fill @ s1 ipv10 (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# 1#)))
                                         `cast`
                                       (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)
                                         ipv9 } } } })
                                        `cast`
                                      (Sym (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)))
                                     `cast`
                                   (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)
                                     ipv5 })
                                    `cast`
                                  (Sym (GHC.ST.N:ST[0] <s1>_N <Data.Vector.SEXP.W t ty s a>_R)) } }
                       } in
                       case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ (Data.Vector.SEXP.W t ty s a)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case (GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (GHC.ST.ST
                                            GHC.Prim.RealWorld
                                            (Data.Vector.Generic.Base.Mutable
                                               (Data.Vector.SEXP.W t ty s)
                                               (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                               a))
                                       @ (GHC.ST.ST
                                            GHC.Prim.RealWorld
                                            (Data.Vector.Generic.Base.Mutable
                                               (Data.Vector.SEXP.W t ty s)
                                               (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                               a))
                                       (Data.Vector.Internal.Check.checkLength
                                          @ (GHC.ST.ST
                                               GHC.Prim.RealWorld
                                               (Data.Vector.Generic.Base.Mutable
                                                  (Data.Vector.SEXP.W t ty s)
                                                  (Control.Monad.Primitive.PrimState
                                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                                  a))
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "./Data/Vector/Generic/Mutable.hs"#))
                                          (GHC.Types.I# 585#)
                                          Data.Vector.Internal.Check.Bounds
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                                          n)
                                       (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (GHC.ST.ST
                                                     GHC.Prim.RealWorld
                                                     (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t ty s)
                                                        (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                        a))
                                                @ (GHC.ST.ST
                                                     GHC.Prim.RealWorld
                                                     (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t ty s)
                                                        (Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                                        a))
                                                (Data.Vector.Internal.Check.checkLength
                                                   @ (GHC.ST.ST
                                                        GHC.Prim.RealWorld
                                                        (Data.Vector.Generic.Base.Mutable
                                                           (Data.Vector.SEXP.W t ty s)
                                                           (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                           a))
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "./Data/Vector/Generic/Mutable.hs"#))
                                                   (GHC.Types.I# 591#)
                                                   Data.Vector.Internal.Check.Unsafe
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "unsafeNew"#))
                                                   n)
                                                (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t ty s))
                                                   @ a
                                                   $dMVector
                                                   @ (GHC.ST.ST GHC.Prim.RealWorld)
                                                   (Control.Monad.Primitive.$fPrimMonadST
                                                      @ GHC.Prim.RealWorld)
                                                   n))
                                               `cast`
                                             (GHC.ST.N:ST[0]
                                                  <GHC.Prim.RealWorld>_N
                                                  <Data.Vector.Generic.Base.Mutable
                                                     (Data.Vector.SEXP.W t ty s)
                                                     (Control.Monad.Primitive.PrimState
                                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                                     a>_R)
                                               s2 of ds1 { (#,#) ipv1 ipv2 ->
                                        (GHC.ST.$fMonadST_$c>>
                                           @ GHC.Prim.RealWorld
                                           @ ()
                                           @ (Data.Vector.Generic.Base.Mutable
                                                (Data.Vector.SEXP.W t ty s)
                                                (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                                a)
                                           (Data.Vector.Generic.Mutable.Base.basicInitialize
                                              @ (Data.Vector.Generic.Base.Mutable
                                                   (Data.Vector.SEXP.W t ty s))
                                              @ a
                                              $dMVector
                                              @ (GHC.ST.ST GHC.Prim.RealWorld)
                                              (Control.Monad.Primitive.$fPrimMonadST
                                                 @ GHC.Prim.RealWorld)
                                              ipv2)
                                           (GHC.ST.$fMonadST_$creturn
                                              @ GHC.Prim.RealWorld
                                              @ (Data.Vector.Generic.Base.Mutable
                                                   (Data.Vector.SEXP.W t ty s)
                                                   (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                   a)
                                              ipv2))
                                          `cast`
                                        (GHC.ST.N:ST[0]
                                             <GHC.Prim.RealWorld>_N
                                             <Data.Vector.Generic.Base.Mutable
                                                (Data.Vector.SEXP.W t ty s)
                                                (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                                a>_R)
                                          ipv1 })
                                         `cast`
                                       (Sym (GHC.ST.N:ST[0]
                                                 <GHC.Prim.RealWorld>_N
                                                 <Data.Vector.Generic.Base.Mutable
                                                    (Data.Vector.SEXP.W t ty s)
                                                    (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                    a>_R)))
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N
                                         (Data.Vector.Generic.Base.Mutable
                                            <Data.Vector.SEXP.W t ty s>_N
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)
                                            <a>_N)_R)
                                      s1 of ds1 { (#,#) ipv1 ipv2 ->
                               case GHC.Types.HEq_sc
                                      @ *
                                      @ *
                                      @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                      @ a
                                      (GHC.Classes.$p4(%,,,%)
                                         @ (Foreign.Storable.Storable a)
                                         @ (Foreign.R.Type.IsVector ty)
                                         @ (Data.Singletons.SingI ty)
                                         @ (Data.Vector.SEXP.Base.ElemRep s ty
                                            Data.Type.Equality.~ a)
                                         $d(%,,,%))
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                    s ty>_N <a>_N) of cobox1 { DEFAULT ->
                               case Data.Vector.SEXP.Mutable.Internal.unW
                                      @ t
                                      @ ty
                                      @ (Control.Monad.Primitive.PrimState
                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                      @ a
                                      ipv2
                                        `cast`
                                      (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                <s>_N
                                                <ty>_N
                                                <t>_N) (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N)) <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                               case (Data.Vector.SEXP.foreignSEXP
                                       @ (GHC.ST.ST GHC.Prim.RealWorld)
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ ty
                                       (Control.Monad.Primitive.$fPrimMonadST @ GHC.Prim.RealWorld)
                                       (GHC.Ptr.Ptr
                                          @ (Language.R.HExp.HExp
                                               (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                               ty)
                                          dt)
                                         `cast`
                                       (Sym (Foreign.R.Internal.N:SEXP[0]
                                                 <Control.Monad.Primitive.PrimState
                                                    (GHC.ST.ST GHC.Prim.RealWorld)>_P
                                                 <ty>_P)))
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.ForeignSEXP ty>_R)
                                      ipv1 of ds2 { (#,#) ipv4 ipv5 ->
                               case (GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (Data.Vector.SEXP.W t ty s a)
                                       @ (GHC.ST.ST
                                            GHC.Prim.RealWorld (Data.Vector.SEXP.W t ty s a))
                                       (GHC.ST.$fMonadST_$creturn
                                          @ GHC.Prim.RealWorld
                                          @ (Data.Vector.SEXP.W t ty s a))
                                       (GHC.Base.$
                                          @ 'GHC.Types.PtrRepLifted
                                          @ (Data.Vector.SEXP.Vector s ty a)
                                          @ (Data.Vector.SEXP.W t ty s a)
                                          (\ (tpl :: Data.Vector.SEXP.Vector s ty a) -> tpl)
                                            `cast`
                                          (<Data.Vector.SEXP.Vector s ty a>_R
                                           ->_R Sym (Data.Vector.SEXP.N:W[0]
                                                         <t>_P <ty>_P <s>_P) <a>_N)
                                          (case ipv5
                                                  `cast`
                                                (Data.Vector.SEXP.N:ForeignSEXP[0]
                                                     <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                                           Data.Vector.SEXP.Vector @ s @ ty @ a dt4 dt5 dt1 dt2 })))
                                      `cast`
                                    (GHC.ST.N:ST[0]
                                         <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.W t ty s a>_R)
                                      ipv4 of ds3 { (#,#) ipv3 ipv6 ->
                               (fill @ GHC.Prim.RealWorld ipv6 (GHC.Types.I# 0#))
                                 `cast`
                               (GHC.ST.N:ST[0]
                                    <GHC.Prim.RealWorld>_N <Data.Vector.SEXP.W t ty s a>_R)
                                 ipv3 } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                       ipv2 } })) }) -}
55555dfe9813601297b3b38f62a92244
  copy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,U)><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)) a
                      = Data.Vector.SEXP.$fVectorWa
                          @ s
                          @ (Control.Monad.Primitive.PrimState m)
                          @ ty
                          @ a
                          $dReifies
                          $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy s) ->
                    let {
                      eta2 :: Data.Vector.SEXP.Mutable.Internal.W
                                s ty (Control.Monad.R.Class.Region m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      eta3 :: Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m) a
                      = Data.Vector.SEXP.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.check
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                         (GHC.Types.I# 1979#)
                         Data.Vector.Internal.Check.Bounds
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "copy"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                         (GHC.Classes.eqInt
                            (Data.Vector.Generic.Mutable.Base.basicLength
                               @ (Data.Vector.Generic.Base.Mutable
                                    (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)))
                               @ a
                               (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                  @ s
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%))
                               @ (Control.Monad.Primitive.PrimState m)
                               eta2
                                 `cast`
                               (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                              <Control.Monad.Primitive.PrimState m>_N
                                              <ty>_N
                                              <s>_N)) <Control.Monad.Primitive.PrimState
                                                         m>_N <a>_N))
                            (Data.Vector.Fusion.Util.unId
                               @ GHC.Types.Int
                               (Data.Vector.Fusion.Bundle.Monadic.length
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                     @ Data.Vector.Fusion.Util.Id
                                     @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                                     @ a
                                     Data.Vector.Fusion.Util.$fMonadId
                                     $dVector
                                     eta3)))))
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (m ())
                         @ (m ())
                         (Data.Vector.Internal.Check.check
                            @ (m ())
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                            (GHC.Types.I# 1988#)
                            Data.Vector.Internal.Check.Unsafe
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                            (GHC.Classes.eqInt
                               (Data.Vector.Generic.Mutable.Base.basicLength
                                  @ (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)))
                                  @ a
                                  (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                     @ s
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     @ a
                                     $dReifies
                                     $d(%,,,%))
                                  @ (Control.Monad.Primitive.PrimState m)
                                  eta2
                                    `cast`
                                  (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                 <Control.Monad.Primitive.PrimState m>_N
                                                 <ty>_N
                                                 <s>_N)) <Control.Monad.Primitive.PrimState
                                                            m>_N <a>_N))
                               (Data.Vector.Fusion.Util.unId
                                  @ GHC.Types.Int
                                  (Data.Vector.Fusion.Bundle.Monadic.length
                                     @ Data.Vector.Fusion.Util.Id
                                     @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                                     @ a
                                     Data.Vector.Fusion.Util.$fMonadId
                                     (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                                        @ a
                                        Data.Vector.Fusion.Util.$fMonadId
                                        $dVector
                                        eta3)))))
                         (case eta2
                                 `cast`
                               (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                    <s>_P
                                    <ty>_P
                                    <Control.Monad.Primitive.PrimState
                                       m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                          case eta3
                                 `cast`
                               (Data.Vector.SEXP.N:W[0]
                                    <s>_P
                                    <ty>_P
                                    <Control.Monad.R.Class.Region
                                       m>_P <a>_N) of nt1 { Data.Vector.SEXP.Vector ipv3 ipv4 ipv5 ipv6 ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dStorable :: Foreign.Storable.Storable a
                            = GHC.Classes.$p1(%,,,%)
                                @ (Foreign.Storable.Storable a)
                                @ (Foreign.R.Type.IsVector ty)
                                @ (Data.Singletons.SingI ty)
                                @ (Data.Vector.SEXP.Base.ElemRep
                                     (Control.Monad.Primitive.PrimState m) ty
                                   Data.Type.Equality.~ a)
                                $d(%,,,%)
                          } in
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (GHC.Types.IO ())
                            @ (m ())
                            (Control.Monad.Primitive.unsafePrimToPrim
                               @ GHC.Types.IO
                               @ m
                               @ ()
                               Control.Monad.Primitive.$fPrimBaseIO
                               $dPrimMonad)
                            (Foreign.Marshal.Array.copyArray
                               @ a
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                  @ a
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  $dStorable
                                  (Data.Vector.SEXP.Mutable.Internal.unW
                                     @ s
                                     @ ty
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ a
                                     nt
                                       `cast`
                                     (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                               <s>_P
                                               <ty>_P
                                               <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                               (case Data.Vector.SEXP.unW
                                       @ s
                                       @ ty
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ a
                                       nt1
                                         `cast`
                                       (Sym (Data.Vector.SEXP.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.R.Class.Region
                                                    m>_P) <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                                  @ (GHC.Ptr.Ptr a)
                                  (Control.Monad.Primitive.unsafeInlineIO @ (GHC.Ptr.Ptr a))
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Foreign.R.Internal.SEXP GHC.Prim.Any ty
                                        -> GHC.Types.IO (GHC.Ptr.Ptr a))
                                     @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                                     (Data.Vector.SEXP.withForeignSEXP
                                        @ ty
                                        @ GHC.Prim.Any
                                        @ (GHC.Ptr.Ptr a)
                                        (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                                          `cast`
                                        (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)))
                                     (\ (sx :: Foreign.R.Internal.SEXP GHC.Prim.Any ty) ->
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (GHC.Ptr.Ptr a)
                                        @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                                        (GHC.Base.returnIO @ (GHC.Ptr.Ptr a))
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                                GHC.Prim.Any ty a)
                                           @ (GHC.Ptr.Ptr a)
                                           (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                              @ a
                                              @ GHC.Prim.Any
                                              @ ty
                                              $dStorable)
                                           (case sx
                                                   `cast`
                                                 (Foreign.R.Internal.N:SEXP[0]
                                                      <GHC.Prim.Any>_P
                                                      <ty>_P) of dt4 { GHC.Ptr.Ptr dt5 ->
                                            Data.Vector.SEXP.Mutable.Internal.MVector
                                              @ GHC.Prim.Any
                                              @ ty
                                              @ a
                                              dt5
                                              dt2
                                              dt3 })))) })
                               (Data.Vector.SEXP.$fVectorWa_$cbasicLength
                                  @ s
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%)
                                  nt1
                                    `cast`
                                  (Sym (Data.Vector.SEXP.N:W[0]
                                            <s>_P
                                            <ty>_P
                                            <Control.Monad.R.Class.Region
                                               m>_P) <a>_N))) } } }))) }) -}
eb3e139073fcbc6c89c53d6121fb4f4f
  create ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (forall r.
     GHC.ST.ST r (Data.Vector.SEXP.Mutable.Internal.MVector r ty a))
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><C(S(SS(SLL))),1*C1(U(U,1*U(U,U,U)))>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: forall r.
                           GHC.ST.ST r (Data.Vector.SEXP.Mutable.Internal.MVector r ty a)) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Vector.SEXP.W t ty s a)
                      @ (Data.Vector.SEXP.Vector s ty a)
                      (Data.Vector.SEXP.unW @ t @ ty @ s @ a)
                      (Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.New
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            (\ @ s1 ->
                             Data.Functor.<$>
                               @ (GHC.ST.ST s1)
                               @ (Data.Vector.SEXP.Mutable.Internal.MVector s1 ty a)
                               @ (Data.Vector.SEXP.Mutable.Internal.W t ty s1 a)
                               (GHC.ST.$fFunctorST @ s1)
                               (Data.Vector.SEXP.Mutable.Internal.withW
                                  @ Data.Proxy.Proxy
                                  @ t
                                  @ s1
                                  @ ty
                                  @ a
                                  p)
                               (eta @ s1))
                              `cast`
                            (forall (s1 :: <*>_N).
                             (GHC.ST.ST
                                <s1>_N
                                (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                               <s>_N <ty>_N <t>_N)) <s1>_N <a>_N))_R)))) }) -}
30b942e12f6b01584f333bd284f4decc
  drop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.drop @ (Data.Vector.SEXP.W t ty s) @ a g eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta1
                         x)) }) -}
ec35ae1316c3baed1090d10e031e6d8d
  dropWhile ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.Monadic.dropWhileM
                                @ Data.Vector.Fusion.Util.Id
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                Data.Vector.Fusion.Util.$fMonadId
                                (\ (x :: a) ->
                                 Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                   @ GHC.Types.Bool
                                   (eta x))
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
980736edfa37aa3f27206f21b275c723
  elem ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Eq a) =>
    a -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,U(C(C1(U)),A)><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Bool)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Bool
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ GHC.Types.Bool
                         (Data.Vector.Fusion.Bundle.Monadic.elem
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            $dEq
                            eta
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
8bb52412dadd389c5778c75f8d3ca1a5
  elemIndex ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Eq a) =>
    a -> Data.Vector.SEXP.Vector s ty a -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,1*U(1*C1(U),A)><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Base.Maybe GHC.Types.Int)
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (Data.Vector.SEXP.phony @ s @ (GHC.Base.Maybe GHC.Types.Int))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (GHC.Base.Maybe GHC.Types.Int)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       let {
                         f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                       } in
                       \ (x1 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ (GHC.Base.Maybe GHC.Types.Int)
                         (Data.Vector.Fusion.Bundle.Monadic.findIndex
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            f
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               x1)))
                      eta1) }) -}
5b8d0c32376e22a1c397ff96c993f366
  empty ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
  {- Arity: 1, Strictness: <S(LLLS(S)),U(U,U,A,U(U))>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.empty
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a)))) }) -}
32f3064dcd26585683f8e2ecd5ca4cce
  enumFromN ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    a -> GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLLLLC(S)),U(C(C1(U)),A,A,A,A,A,1*C1(U))><S,1*U><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a)
                   (eta :: a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         y :: a = GHC.Num.fromInteger @ a $dNum 1
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ (Data.Vector.SEXP.W t ty s a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) eta })
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.W t ty s a)
                            @ (Data.Vector.SEXP.W t ty s a)
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) y })
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t ty s) a)
                               @ (Data.Vector.SEXP.W t ty s a)
                               (Data.Vector.Generic.unstream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  (Data.Vector.SEXP.$fVectorWa
                                     @ t
                                     @ s
                                     @ ty
                                     @ a
                                     $dReifies
                                     $d(%,,,%)))
                               (Data.Vector.Fusion.Bundle.Monadic.enumFromStepN
                                  @ a
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  $dNum
                                  Data.Vector.Fusion.Util.$fMonadId
                                  eta
                                  y
                                  eta1))))) }) -}
0bafd56626b01e8d4f228b70c48b6465
  enumFromStepN ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    a -> a -> GHC.Types.Int -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U(C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U><S,1*U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a)
                   (eta :: a)
                   (eta1 :: a)
                   (eta2 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ (Data.Vector.SEXP.W t ty s a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) eta })
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.W t ty s a)
                            @ (Data.Vector.SEXP.W t ty s a)
                            (case GHC.Types.HEq_sc
                                    @ *
                                    @ *
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                    @ a
                                    (GHC.Classes.$p4(%,,,%)
                                       @ (Foreign.Storable.Storable a)
                                       @ (Foreign.R.Type.IsVector ty)
                                       @ (Data.Singletons.SingI ty)
                                       @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                       $d(%,,,%))
                                      `cast`
                                    (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                        s
                                                                        ty>_N <a>_N) of cobox1 { DEFAULT ->
                             GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) eta1 })
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t ty s) a)
                               @ (Data.Vector.SEXP.W t ty s a)
                               (Data.Vector.Generic.unstream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  (Data.Vector.SEXP.$fVectorWa
                                     @ t
                                     @ s
                                     @ ty
                                     @ a
                                     $dReifies
                                     $d(%,,,%)))
                               (Data.Vector.Fusion.Bundle.Monadic.enumFromStepN
                                  @ a
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  $dNum
                                  Data.Vector.Fusion.Util.$fMonadId
                                  eta
                                  eta1
                                  eta2))))) }) -}
f5bc1982395624bbe04f270996cdf532
  enumFromThenTo ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Enum.Enum a) =>
    a -> a -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,1*U(A,A,A,A,A,A,A,1*C1(C1(C1(U))))><L,U><L,U><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEnum :: GHC.Enum.Enum a)
                   (eta :: a)
                   (eta1 :: a)
                   (eta2 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.enumFromThenTo
                               @ a
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.SEXP.W t ty s)
                               $dEnum
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1
                               eta2)))) }) -}
7a48fd9617df4211715e917ffe667851
  enumFromTo ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Enum.Enum a) =>
    a -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,1*U(A,A,A,A,A,A,1*C1(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEnum :: GHC.Enum.Enum a)
                   (eta :: a)
                   (eta1 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.enumFromTo
                               @ a
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.SEXP.W t ty s)
                               $dEnum
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1)))) }) -}
de4203883ad7f2b583396cba81363147
  filter ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.filterM
                                   @ m
                                   @ a
                                   $dMonad
                                   (let {
                                      f1 :: GHC.Types.Bool -> m GHC.Types.Bool
                                      = GHC.Base.return @ m $dMonad @ GHC.Types.Bool
                                    } in
                                    \ (x :: a) -> f1 (eta x))
                                   eta3)
                                Data.Vector.Fusion.Bundle.Size.toMax
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
0b4ce311218227992846e4041caaf60e
  filterM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> m GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> m (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 4,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),C(C1(U)),A,U,A)><S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> m GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m (Data.Vector.SEXP.Vector s ty a))
                   @ (m (Data.Vector.SEXP.Vector s ty a))
                   (Data.Vector.SEXP.phony @ s @ (m (Data.Vector.SEXP.Vector s ty a)))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W t ty s a)
                      @ (Data.Vector.SEXP.Vector s ty a)
                      $dFunctor
                      (Data.Vector.SEXP.unW @ t @ ty @ s @ a)
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (m (Data.Vector.SEXP.W t ty s a))
                         @ Data.Proxy.Proxy
                         (\ (eta2 :: Data.Vector.SEXP.W t ty s a)[OneShot] ->
                          Data.Vector.Generic.unstreamM
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.filterM
                               @ m
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               $dMonad
                               eta
                               (Data.Vector.Fusion.Bundle.lift
                                  @ m
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  $dMonad
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta2))))
                         eta1
                         p)) }) -}
547bcae51cef0ade76d3947b8ed18139
  find ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Base.Maybe a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Base.Maybe a)
                   @ (GHC.Base.Maybe a)
                   (Data.Vector.SEXP.phony @ s @ (GHC.Base.Maybe a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (GHC.Base.Maybe a)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ (GHC.Base.Maybe a)
                         (Data.Vector.Fusion.Bundle.Monadic.findM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (x :: a) ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ GHC.Types.Bool
                               (eta x))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
6c0c44dc7fbe088e11e08ea11f654853
  findIndex ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Base.Maybe GHC.Types.Int)
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (Data.Vector.SEXP.phony @ s @ (GHC.Base.Maybe GHC.Types.Int))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (GHC.Base.Maybe GHC.Types.Int)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (x :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ (GHC.Base.Maybe GHC.Types.Int)
                         (Data.Vector.Fusion.Bundle.Monadic.findIndex
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            eta
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               x)))
                      eta1) }) -}
6fe863dbe6ce37b6b3e65752184fd691
  fold1M ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> m a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Bundle.Monadic.foldl1M
                         @ m
                         @ a
                         @ (Data.Vector.SEXP.W t ty s)
                         $dMonad
                         eta
                         (Data.Vector.Fusion.Bundle.lift
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dMonad
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
484e1dfae61c83b5bdad71c03d18a24f
  fold1M' ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> m a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                         @ m
                         @ a
                         @ (Data.Vector.SEXP.W t ty s)
                         $dMonad
                         eta
                         (Data.Vector.Fusion.Bundle.lift
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dMonad
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
e494d5b1fc93a6796e75b0cc0fef76b0
  fold1M'_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m ()
  {- Arity: 4,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> m a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m ())
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ a
                         @ ()
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ m
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            eta
                            (Data.Vector.Fusion.Bundle.lift
                               @ m
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dMonad
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  $dVector
                                  eta2)))
                         (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                      eta1) }) -}
75362701787d14e7b83af50fd19cf24d
  fold1M_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> a -> m a) -> Data.Vector.SEXP.Vector s ty a -> m ()
  {- Arity: 4,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> m a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m ())
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ a
                         @ ()
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M
                            @ m
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            eta
                            (Data.Vector.Fusion.Bundle.lift
                               @ m
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dMonad
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  $dVector
                                  eta2)))
                         (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                      eta1) }) -}
c3eee67d8195d398c5842d13438ef322
  foldM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m a
  {- Arity: 5,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> m a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       Data.Vector.Fusion.Bundle.Monadic.foldlM
                         @ m
                         @ a
                         @ b
                         @ (Data.Vector.SEXP.W t ty s)
                         $dMonad
                         eta
                         eta1
                         (Data.Vector.Fusion.Bundle.lift
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ b
                            $dMonad
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               $dVector
                               eta3)))
                      eta2) }) -}
6c98b599f2e4ef9c4d56e513d636fc2b
  foldM' ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m a
  {- Arity: 5,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S,1*U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> m a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       Data.Vector.Fusion.Bundle.Monadic.foldlM'
                         @ m
                         @ a
                         @ b
                         @ (Data.Vector.SEXP.W t ty s)
                         $dMonad
                         eta
                         eta1
                         (Data.Vector.Fusion.Bundle.lift
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ b
                            $dMonad
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               $dVector
                               eta3)))
                      eta2) }) -}
d4de1e170cc113dc8d2eba55316b8cc9
  foldM'_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m ()
  {- Arity: 5,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,1*U><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> m a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ (m ())
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ a
                         @ ()
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                            @ m
                            @ a
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            eta
                            eta1
                            (Data.Vector.Fusion.Bundle.lift
                               @ m
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               $dMonad
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ b
                                  $dVector
                                  eta3)))
                         (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                      eta2) }) -}
fa01627c05c6e6f5832e3dd4bc5f3c98
  foldM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> m a) -> a -> Data.Vector.SEXP.Vector s ty b -> m ()
  {- Arity: 5,
     Strictness: <S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,U><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> m a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ (m ())
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ a
                         @ ()
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM
                            @ m
                            @ a
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            eta
                            eta1
                            (Data.Vector.Fusion.Bundle.lift
                               @ m
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               $dMonad
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ b
                                  $dVector
                                  eta3)))
                         (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()))
                      eta2) }) -}
52b7a2ae159d8b37bb79c7d68daa0853
  foldl ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> b -> a) -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: b)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b1))
                            eta1
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               $dVector
                               eta3)))
                      eta2) }) -}
467f7890420f3b012d5f512f503bbd3c
  foldl' ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> b -> a) -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: b)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b1))
                            eta1
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               $dVector
                               eta3)))
                      eta2) }) -}
d5c501d0419ac456c19e39a375cb560c
  foldl1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
e5b99113aebacd3d43744e13558043c8
  foldl1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
2b7b54ff1bf456f568b97083a17be2f6
  foldr ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> b) -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> b)
                   @ b
                   (Data.Vector.SEXP.phony @ s @ b)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ b
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ b
                         (Data.Vector.Fusion.Bundle.Monadic.foldrM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: b) ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ b (eta a1 b1))
                            eta1
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta3)))
                      eta2) }) -}
cc376d3bda4eeb5c169201ead3517b5a
  foldr' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> b) -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,1*U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> b)
                   @ b
                   (Data.Vector.SEXP.phony @ s @ b)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ b
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ b
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                            @ Data.Vector.Fusion.Util.Id
                            @ b
                            @ a
                            @ GHC.Prim.Any
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: b) (b1 :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ b
                               (GHC.Base.flip @ a @ b @ b eta a1 b1))
                            eta1
                            (Data.Vector.Generic.streamR
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               @ GHC.Prim.Any
                               $dVector
                               eta3)))
                      eta2) }) -}
538af24b151cb597b3490094f067a5ce
  foldr1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldr1M
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a) ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
80e4b8bae323b324d03777695482f297
  foldr1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a) -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,1*U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ GHC.Prim.Any
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ a
                               (GHC.Base.flip @ a @ a @ a eta a1 b))
                            (Data.Vector.Generic.streamR
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               @ GHC.Prim.Any
                               $dVector
                               eta2)))
                      eta1) }) -}
343dabc43777cf9c1d202e7332981ff7
  forM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    Data.Vector.SEXP.Vector s ty a
    -> (a -> m b) -> m (Data.Vector.SEXP.Vector s ty b)
  {- Arity: 5,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),C(C1(U)),A,U,A)><S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,1*U(U,U,U,U)><L,C(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: a -> m b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m (Data.Vector.SEXP.Vector s ty b))
                   @ (m (Data.Vector.SEXP.Vector s ty b))
                   (Data.Vector.SEXP.phony @ s @ (m (Data.Vector.SEXP.Vector s ty b)))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W t ty s b)
                      @ (Data.Vector.SEXP.Vector s ty b)
                      $dFunctor
                      (Data.Vector.SEXP.unW @ t @ ty @ s @ b)
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (m (Data.Vector.SEXP.W t ty s b))
                         @ Data.Proxy.Proxy
                         (\ (ds :: Data.Vector.SEXP.W t ty s a)[OneShot] ->
                          Data.Vector.Generic.unstreamM
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.mapM
                               @ m
                               @ a
                               @ b
                               @ (Data.Vector.SEXP.W t ty s)
                               $dMonad
                               eta1
                               (Data.Vector.Fusion.Bundle.lift
                                  @ m
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  $dMonad
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                       `cast`
                                     (Data.Vector.Generic.Base.Vector
                                        <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                     ds))))
                         eta
                         p)) } }) -}
d0ef66f554db086c8fb50335eae4420a
  forM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    Data.Vector.SEXP.Vector s ty a -> (a -> m b) -> m ()
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><S,1*U(U,U,U,U)><L,C(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: a -> m b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m ())
                      @ Data.Proxy.Proxy
                      (\ (ds :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Bundle.Monadic.mapM_
                         @ m
                         @ a
                         @ b
                         @ (Data.Vector.SEXP.W t ty s)
                         $dMonad
                         eta1
                         (Data.Vector.Fusion.Bundle.lift
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dMonad
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               ds)))
                      eta) }) -}
6d7d6ccc1685d3eeca771a875b6fd1ae
  force ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.force @ (Data.Vector.SEXP.W t ty s) @ a g
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta
                         x)) }) -}
cf383ecaba33ad8315cf428b85056494
  foreignSEXP ::
    Control.Monad.Primitive.PrimMonad m =>
    Foreign.R.Internal.SEXP s ty -> m (Data.Vector.SEXP.ForeignSEXP ty)
  {- Arity: 2, Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U(U)>,
     Unfolding: (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (sx :: Foreign.R.Internal.SEXP s ty) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.Vector.SEXP.ForeignSEXP ty)
                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case sx
                           `cast`
                         (Trans
                              (Foreign.R.Internal.N:SEXP[0] <s>_P <ty>_P)
                              (GHC.Ptr.Ptr
                                 <Language.R.HExp.HExp
                                    s ty, Foreign.R.Internal.SEXPREC>)_R) of ds { GHC.Ptr.Ptr ds1 ->
                    case {__pkg_ccall_GC inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs R_PreserveObject GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld #)}
                           ds1
                           s1 of wild { Unit# ds2 ->
                    case GHC.ForeignPtr.$wnewConcForeignPtr
                           @ ()
                           ds1
                           (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case {__pkg_ccall_GC inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs R_ReleaseObject GHC.Prim.Addr#
                                                                                                        -> GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                        -> (# GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld #)}
                                   ds1
                                   s2 of wild1 { Unit# ds4 ->
                            (# ds4, GHC.Tuple.() #) })
                             `cast`
                           (Sym (GHC.Types.N:IO[0] <()>_R))
                           ds2 of ds4 { (#,#) ipv ipv1 ->
                    (# ipv,
                       ipv1
                         `cast`
                       (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)) #) } } })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <Data.Vector.SEXP.ForeignSEXP ty>_R)_R)) -}
823ed82035879255f215d886843fbbba
  freeze ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Vector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><L,U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Vector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Vector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      $dFunctor
                      (Data.Vector.SEXP.unW
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                      (let {
                         eta1 :: Data.Vector.SEXP.Mutable.Internal.W
                                   s ty (Control.Monad.R.Class.Region m) a
                         = Data.Vector.SEXP.Mutable.Internal.withW
                             @ Data.Proxy.Proxy
                             @ s
                             @ (Control.Monad.R.Class.Region m)
                             @ ty
                             @ a
                             p
                             eta
                       } in
                       let {
                         $dMVector :: Data.Vector.Generic.Mutable.Base.MVector
                                        (Data.Vector.Generic.Base.Mutable
                                           (Data.Vector.SEXP.W
                                              s ty (Control.Monad.Primitive.PrimState m)))
                                        a
                         = Data.Vector.SEXP.$fVectorWa_$cp1Vector
                             @ s
                             @ (Control.Monad.Primitive.PrimState m)
                             @ ty
                             @ a
                             $dReifies
                             $d(%,,,%)
                       } in
                       GHC.Base.=<<
                         @ m
                         @ (Data.Vector.Generic.Base.Mutable
                              (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                              (Control.Monad.Primitive.PrimState m)
                              a)
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                         (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                         (\ (eta2 :: Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m))
                                       (Control.Monad.Primitive.PrimState m)
                                       a) ->
                          case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep
                                         (Control.Monad.Primitive.PrimState m) ty
                                       Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     (Control.Monad.Primitive.PrimState
                                                                        m)
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          let {
                            $dMonad :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          case Data.Vector.SEXP.Mutable.Internal.unW
                                 @ s
                                 @ ty
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ a
                                 eta2
                                   `cast`
                                 (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                           <Control.Monad.Primitive.PrimState m>_N
                                           <ty>_N
                                           <s>_N) <Control.Monad.Primitive.PrimState
                                                     m>_N <a>_N) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                          GHC.Base.>>=
                            @ m
                            $dMonad
                            @ (Data.Vector.SEXP.ForeignSEXP ty)
                            @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                            (Data.Vector.SEXP.foreignSEXP
                               @ m
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dPrimMonad
                               (GHC.Ptr.Ptr
                                  @ (Language.R.HExp.HExp (Control.Monad.Primitive.PrimState m) ty)
                                  dt)
                                 `cast`
                               (Sym (Foreign.R.Internal.N:SEXP[0]
                                         <Control.Monad.Primitive.PrimState m>_P <ty>_P)))
                            (\ (fp :: Data.Vector.SEXP.ForeignSEXP ty) ->
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                               @ (m (Data.Vector.SEXP.W
                                       s ty (Control.Monad.Primitive.PrimState m) a))
                               (GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (Data.Vector.SEXP.W
                                       s ty (Control.Monad.Primitive.PrimState m) a))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.SEXP.Vector
                                       (Control.Monad.Primitive.PrimState m) ty a)
                                  @ (Data.Vector.SEXP.W
                                       s ty (Control.Monad.Primitive.PrimState m) a)
                                  (\ (tpl :: Data.Vector.SEXP.Vector
                                               (Control.Monad.Primitive.PrimState m) ty a) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.SEXP.Vector
                                      (Control.Monad.Primitive.PrimState m) ty a>_R
                                   ->_R Sym (Data.Vector.SEXP.N:W[0]
                                                 <s>_P
                                                 <ty>_P
                                                 <Control.Monad.Primitive.PrimState m>_P) <a>_N)
                                  (case fp
                                          `cast`
                                        (Data.Vector.SEXP.N:ForeignSEXP[0]
                                             <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                                   Data.Vector.SEXP.Vector
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ ty
                                     @ a
                                     dt4
                                     dt5
                                     dt1
                                     dt2 }))) } })
                         (let {
                            $dMonad :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          GHC.Base.>>=
                            @ m
                            $dMonad
                            @ (Data.Vector.Generic.Base.Mutable
                                 (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                 (Control.Monad.Primitive.PrimState m)
                                 a)
                            @ (Data.Vector.Generic.Base.Mutable
                                 (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                 (Control.Monad.Primitive.PrimState m)
                                 a)
                            (let {
                               n :: GHC.Types.Int
                               = Data.Vector.Generic.Mutable.Base.basicLength
                                   @ (Data.Vector.Generic.Base.Mutable
                                        (Data.Vector.SEXP.W
                                           s ty (Control.Monad.Primitive.PrimState m)))
                                   @ a
                                   $dMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   eta1
                                     `cast`
                                   (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                  <Control.Monad.Primitive.PrimState m>_N
                                                  <ty>_N
                                                  <s>_N)) <Control.Monad.Primitive.PrimState
                                                             m>_N <a>_N)
                             } in
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (m (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m))
                                       (Control.Monad.Primitive.PrimState m)
                                       a))
                               @ (m (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m))
                                       (Control.Monad.Primitive.PrimState m)
                                       a))
                               (Data.Vector.Internal.Check.checkLength
                                  @ (m (Data.Vector.Generic.Base.Mutable
                                          (Data.Vector.SEXP.W
                                             s ty (Control.Monad.Primitive.PrimState m))
                                          (Control.Monad.Primitive.PrimState m)
                                          a))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Vector/Generic/Mutable.hs"#))
                                  (GHC.Types.I# 591#)
                                  Data.Vector.Internal.Check.Unsafe
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeNew"#))
                                  n)
                               (Data.Vector.Generic.Mutable.Base.basicUnsafeNew
                                  @ (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m)))
                                  @ a
                                  $dMVector
                                  @ m
                                  $dPrimMonad
                                  n))
                            (\ (v' :: Data.Vector.Generic.Base.Mutable
                                        (Data.Vector.SEXP.W
                                           s ty (Control.Monad.Primitive.PrimState m))
                                        (Control.Monad.Primitive.PrimState m)
                                        a) ->
                             GHC.Base.>>
                               @ m
                               $dMonad
                               @ ()
                               @ (Data.Vector.Generic.Base.Mutable
                                    (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m))
                                    (Control.Monad.Primitive.PrimState m)
                                    a)
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (m ())
                                  @ (m ())
                                  (Data.Vector.Internal.Check.check
                                     @ (m ())
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "./Data/Vector/Generic/Mutable.hs"#))
                                     (GHC.Types.I# 802#)
                                     Data.Vector.Internal.Check.Unsafe
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                                     (GHC.Classes.eqInt
                                        (Data.Vector.Generic.Mutable.Base.basicLength
                                           @ (Data.Vector.Generic.Base.Mutable
                                                (Data.Vector.SEXP.W
                                                   s ty (Control.Monad.Primitive.PrimState m)))
                                           @ a
                                           $dMVector
                                           @ (Control.Monad.Primitive.PrimState m)
                                           v')
                                        (Data.Vector.Generic.Mutable.Base.basicLength
                                           @ (Data.Vector.Generic.Base.Mutable
                                                (Data.Vector.SEXP.W
                                                   s ty (Control.Monad.Primitive.PrimState m)))
                                           @ a
                                           $dMVector
                                           @ (Control.Monad.Primitive.PrimState m)
                                           eta1
                                             `cast`
                                           (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <ty>_N
                                                          <s>_N)) <Control.Monad.Primitive.PrimState
                                                                     m>_N <a>_N))))
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (m ())
                                     @ (m ())
                                     (Data.Vector.Internal.Check.check
                                        @ (m ())
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "./Data/Vector/Generic/Mutable.hs"#))
                                        (GHC.Types.I# 804#)
                                        Data.Vector.Internal.Check.Unsafe
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "overlapping vectors"#))
                                        (GHC.Classes.not
                                           (Data.Vector.Generic.Mutable.Base.basicOverlaps
                                              @ (Data.Vector.Generic.Base.Mutable
                                                   (Data.Vector.SEXP.W
                                                      s ty (Control.Monad.Primitive.PrimState m)))
                                              @ a
                                              $dMVector
                                              @ (Control.Monad.Primitive.PrimState m)
                                              v'
                                              eta1
                                                `cast`
                                              (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                             <Control.Monad.Primitive.PrimState m>_N
                                                             <ty>_N
                                                             <s>_N)) <Control.Monad.Primitive.PrimState
                                                                        m>_N <a>_N))))
                                     (case v'
                                             `cast`
                                           (Trans
                                                (Sub (Data.Vector.SEXP.D:R:MutableW[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <ty>_N
                                                          <s>_N) <Control.Monad.Primitive.PrimState
                                                                    m>_N)
                                                (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                     <s>_P
                                                     <ty>_P
                                                     <Control.Monad.Primitive.PrimState
                                                        m>_P) <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                                      case eta1
                                             `cast`
                                           (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                <s>_P
                                                <ty>_P
                                                <Control.Monad.Primitive.PrimState
                                                   m>_P <a>_N) of nt1 { Data.Vector.SEXP.Mutable.Internal.MVector ipv3 ipv4 ipv5 ->
                                      Data.Vector.Generic.Mutable.Base.basicUnsafeCopy
                                        @ (Data.Vector.Generic.Base.Mutable
                                             (Data.Vector.SEXP.W
                                                s ty (Control.Monad.Primitive.PrimState m)))
                                        @ a
                                        $dMVector
                                        @ m
                                        $dPrimMonad
                                        nt
                                          `cast`
                                        (Trans
                                             (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                       <s>_P
                                                       <ty>_P
                                                       <Control.Monad.Primitive.PrimState m>_P))
                                             (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                            <Control.Monad.Primitive.PrimState m>_N
                                                            <ty>_N
                                                            <s>_N)) <Control.Monad.Primitive.PrimState
                                                                       m>_N) <a>_N)
                                        nt1
                                          `cast`
                                        (Trans
                                             (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                                       <s>_P
                                                       <ty>_P
                                                       <Control.Monad.Primitive.PrimState m>_P))
                                             (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                                            <Control.Monad.Primitive.PrimState m>_N
                                                            <ty>_N
                                                            <s>_N)) <Control.Monad.Primitive.PrimState
                                                                       m>_N) <a>_N) } })))
                               (GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (Data.Vector.Generic.Base.Mutable
                                       (Data.Vector.SEXP.W
                                          s ty (Control.Monad.Primitive.PrimState m))
                                       (Control.Monad.Primitive.PrimState m)
                                       a)
                                  v'))))) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  fromList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    [a] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: [a]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.fromListN
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               (GHC.Base.foldr
                                  @ a
                                  @ (GHC.Types.Int -> GHC.Types.Int)
                                  (GHC.List.lengthFB @ a)
                                  GHC.List.idLength
                                  eta
                                  (GHC.Types.I# 0#))
                               eta)))) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  fromListN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int -> [a] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: [a]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.fromListN
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1)))) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  fromListN1 ::
    Data.Vector.SEXP.W t ty s a -> p t -> Data.Vector.SEXP.W t ty s a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)><L,A>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ s
                   @ a
                   @ (p :: * -> *)
                   (v :: Data.Vector.SEXP.W t ty s a)
                   (ds :: p t) ->
                 v) -}
50493310645b2a7af5a395440e6ae41e
  fromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Foreign.R.Internal.SEXP s ty -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 Data.Vector.SEXP.$wfromSEXP @ s @ ty @ a w ww1 }) -}
e0f33891a63f215f649515bc4ba8a3f8
  generate ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (GHC.Types.Int -> a) -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S,1*U(U)><L,C(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int -> a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.generateM
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               (\ (x :: GHC.Types.Int) ->
                                Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                  @ a
                                  (eta1 x)))))) }) -}
043d6b8e71f0199f49b153ddc77e89ca
  generateM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int
    -> (GHC.Types.Int -> m a) -> m (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 4,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,C(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int -> m a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m (Data.Vector.SEXP.Vector s ty a))
                   @ (m (Data.Vector.SEXP.Vector s ty a))
                   (Data.Vector.SEXP.phony @ s @ (m (Data.Vector.SEXP.Vector s ty a)))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W t ty s a)
                      @ (Data.Vector.SEXP.Vector s ty a)
                      $dFunctor
                      (\ (v :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.SEXP.proxyW @ t @ ty @ s @ a @ Data.Proxy.Proxy v p)
                      (Data.Vector.Generic.unstreamM
                         @ m
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ GHC.Prim.Any
                         $dMonad
                         $dVector
                         (Data.Vector.Fusion.Bundle.Monadic.generateM
                            @ m
                            @ a
                            @ GHC.Prim.Any
                            $dMonad
                            eta
                            eta1))) }) -}
e8f32ccf66fe94b639dcf73fab6f357d
  head ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(SLLS(S)),U(1*U,A,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.head
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)))
                      eta) }) -}
ce50e85f5b7a7e1184fc6eb8be69a32f
  headM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U,A,A,U(U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (m :: * -> *)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.headM
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ m
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%))
                         $dMonad)
                      eta) }) -}
ee35e12b91e08f0fd26ddb96a63375fb
  ifilter ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (GHC.Types.Int -> a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int -> a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.mapM
                                   @ m
                                   @ (GHC.Types.Int, a)
                                   @ a
                                   $dMonad
                                   (let {
                                      f1 :: a -> m a = GHC.Base.return @ m $dMonad @ a
                                    } in
                                    \ (x :: (GHC.Types.Int, a)) ->
                                    f1 (Data.Tuple.snd @ GHC.Types.Int @ a x))
                                   (Data.Vector.Fusion.Stream.Monadic.filterM
                                      @ m
                                      @ (GHC.Types.Int, a)
                                      $dMonad
                                      (let {
                                         f1 :: GHC.Types.Bool -> m GHC.Types.Bool
                                         = GHC.Base.return @ m $dMonad @ GHC.Types.Bool
                                       } in
                                       \ (x :: (GHC.Types.Int, a)) ->
                                       f1
                                         (Data.Tuple.uncurry
                                            @ GHC.Types.Int
                                            @ a
                                            @ GHC.Types.Bool
                                            eta
                                            x))
                                      (Data.Vector.Fusion.Stream.Monadic.indexed
                                         @ m
                                         @ a
                                         $dMonad
                                         eta3)))
                                Data.Vector.Fusion.Bundle.Size.toMax
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
df412ab76b544896c9276e9860113e1b
  ifoldl ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> GHC.Types.Int -> b -> a)
    -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(C1(U)))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> GHC.Types.Int -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (GHC.Types.Int, b)
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: (GHC.Types.Int, b))[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ a
                               (Data.Tuple.uncurry @ GHC.Types.Int @ b @ a (eta a1) b1))
                            eta1
                            (Data.Vector.Fusion.Bundle.Monadic.indexed
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               Data.Vector.Fusion.Util.$fMonadId
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ b
                                  $dVector
                                  eta3))))
                      eta2) }) -}
c1a6c4d7cdd69d7d68a96d25196b02ab
  ifoldl' ::
    Data.Vector.SEXP.Base.VECTOR s ty b =>
    (a -> GHC.Types.Int -> b -> a)
    -> a -> Data.Vector.SEXP.Vector s ty b -> a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(C1(U)))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> GHC.Types.Int -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ b
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) b
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ b $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (GHC.Types.Int, b)
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: (GHC.Types.Int, b))[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ a
                               (Data.Tuple.uncurry @ GHC.Types.Int @ b @ a (eta a1) b1))
                            eta1
                            (Data.Vector.Fusion.Bundle.Monadic.indexed
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.SEXP.W t ty s)
                               @ b
                               Data.Vector.Fusion.Util.$fMonadId
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ b
                                  $dVector
                                  eta3))))
                      eta2) }) -}
da7de3d8c5d7b7a6040b89cf9fdc4243
  ifoldr ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (GHC.Types.Int -> a -> b -> b)
    -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(C1(U)))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int -> a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> b)
                   @ b
                   (Data.Vector.SEXP.phony @ s @ b)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ b
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ b
                         (Data.Vector.Fusion.Bundle.Monadic.foldrM
                            @ Data.Vector.Fusion.Util.Id
                            @ (GHC.Types.Int, a)
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: (GHC.Types.Int, a)) (b1 :: b) ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                               @ b
                               (Data.Tuple.uncurry @ GHC.Types.Int @ a @ (b -> b) eta a1 b1))
                            eta1
                            (Data.Vector.Fusion.Bundle.Monadic.indexed
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               Data.Vector.Fusion.Util.$fMonadId
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  $dVector
                                  eta3))))
                      eta2) }) -}
dcdf0ab66f072090220aafa82b8710c8
  ifoldr' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (GHC.Types.Int -> a -> b -> b)
    -> b -> Data.Vector.SEXP.Vector s ty a -> b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(C1(U)))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int -> a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> b)
                   @ b
                   (Data.Vector.SEXP.phony @ s @ b)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ b
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.ifoldr'
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ b
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%))
                         eta
                         eta1)
                      eta2) }) -}
d4e3d565043b1fc67ade85006fa4ead8
  imap ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (GHC.Types.Int -> a -> b)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: GHC.Types.Int -> a -> b)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ b
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.mapM
                                   @ m
                                   @ (GHC.Types.Int, a)
                                   @ b
                                   $dMonad
                                   (let {
                                      f1 :: b -> m b = GHC.Base.return @ m $dMonad @ b
                                    } in
                                    \ (x :: (GHC.Types.Int, a)) ->
                                    f1 (Data.Tuple.uncurry @ GHC.Types.Int @ a @ b eta x))
                                   (Data.Vector.Fusion.Stream.Monadic.indexed @ m @ a $dMonad eta3))
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) } }) -}
ea7ddde1cdd9c73aa231762de1e0ebee
  indexM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> m a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(1*U,A,A,U(U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLLS),1*U(U,U,U,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (m :: * -> *)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (\ (ds :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Generic.indexM
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ m
                         $dVector
                         $dMonad
                         ds
                         eta1)
                      eta) }) -}
ebd60629a2ccf75334c674f9f834fa69
  init ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.init @ (Data.Vector.SEXP.W t ty s) @ a g
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta
                         x)) }) -}
3e276431df9c2a8e4d78d3d15719e4f7
  iterateN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int -> (a -> a) -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,C(U)><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: a -> a)
                   (eta2 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.iterateN
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1
                               eta2)))) }) -}
6bb77eed9fac4016a44a7d5c9c7b7873
  izipWith ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c) =>
    (GHC.Types.Int -> a -> b -> c)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
  {- Arity: 6,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(U)))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (6, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   (eta :: GHC.Types.Int -> a -> b -> c)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox2 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyc c)
                   @ (Data.Vector.SEXP.Vector s tyc c)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyc c))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyc
                      @ s
                      @ c
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyc s) c)
                         @ (Data.Vector.SEXP.W t tyc s c)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyc s)
                            @ c
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (GHC.Types.Int, a)
                                 @ b
                                 @ c
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (a1 :: (GHC.Types.Int, a)) (b1 :: b)[OneShot] ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ c
                                    (Data.Tuple.uncurry @ GHC.Types.Int @ a @ (b -> c) eta a1 b1))
                                 (Data.Vector.Fusion.Stream.Monadic.indexed
                                    @ Data.Vector.Fusion.Util.Id
                                    @ a
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tya s)
                                       @ a
                                       as'))
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tyb s)
                                    @ b
                                    bs') of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyc s)
                            @ c
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ c
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyc s) c)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 c)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyc s) c))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 c)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyc s) c))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyc s) c)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyc s) c)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyc s) c)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyc s)
                                                @ c
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector3 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyc s) c)
                                                   (eta3 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyc s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              c) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyc s))
                                                   @ c
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyc s)
                                                      @ c
                                                      $dVector3)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta3
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyc s) c)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyc s) c) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyc s c))
                            (case Data.Vector.Fusion.Bundle.Monadic.sSize
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tya s)
                                    @ a
                                    as' of wild1 {
                               Data.Vector.Fusion.Bundle.Size.Exact m
                               -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t tyb s)
                                         @ b
                                         bs' of wild2 {
                                    Data.Vector.Fusion.Bundle.Size.Exact n
                                    -> Data.Vector.Fusion.Bundle.Size.Exact
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Max n
                                    -> Data.Vector.Fusion.Bundle.Size.Max
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Unknown
                                    -> Data.Vector.Fusion.Bundle.Size.Max m }
                               Data.Vector.Fusion.Bundle.Size.Max m
                               -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t tyb s)
                                         @ b
                                         bs' of wild2 {
                                    Data.Vector.Fusion.Bundle.Size.Exact n
                                    -> Data.Vector.Fusion.Bundle.Size.Max
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Max n
                                    -> Data.Vector.Fusion.Bundle.Size.Max
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Unknown
                                    -> Data.Vector.Fusion.Bundle.Size.Max m }
                               Data.Vector.Fusion.Bundle.Size.Unknown
                               -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t tyb s)
                                         @ b
                                         bs' of wild2 {
                                    Data.Vector.Fusion.Bundle.Size.Exact n
                                    -> Data.Vector.Fusion.Bundle.Size.Max n
                                    Data.Vector.Fusion.Bundle.Size.Max n
                                    -> Data.Vector.Fusion.Bundle.Size.Max n
                                    Data.Vector.Fusion.Bundle.Size.Unknown
                                    -> Data.Vector.Fusion.Bundle.Size.Unknown } }) }))
                      p) } } }) -}
4d76a575ab1475edbae0406bd00457dc
  izipWith3 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d) =>
    (GHC.Types.Int -> a -> b -> c -> d)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
  {- Arity: 8,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(U))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (8, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   (eta :: GHC.Types.Int -> a -> b -> c -> d)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox3 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyd d)
                   @ (Data.Vector.SEXP.Vector s tyd d)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyd d))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyd
                      @ s
                      @ d
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyd s) d)
                         @ (Data.Vector.SEXP.W t tyd s d)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyd s)
                            @ d
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (GHC.Types.Int, a)
                                 @ b
                                 @ c
                                 @ d
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (a1 :: (GHC.Types.Int, a))
                                    (b1 :: b)[OneShot]
                                    (c1 :: c)[OneShot] ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ d
                                    (Data.Tuple.uncurry
                                       @ GHC.Types.Int
                                       @ a
                                       @ (b -> c -> d)
                                       eta
                                       a1
                                       b1
                                       c1))
                                 (Data.Vector.Fusion.Stream.Monadic.indexed
                                    @ Data.Vector.Fusion.Util.Id
                                    @ a
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tya s)
                                       @ a
                                       as'))
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tyb s)
                                    @ b
                                    bs')
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tyc s)
                                    @ c
                                    cs') of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyd s)
                            @ d
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ d
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyd s) d)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 d)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyd s) d))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 d)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyd s) d))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyd s) d)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyd s) d)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyd s) d)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyd s)
                                                @ d
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector4 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyd s) d)
                                                   (eta4 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyd s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              d) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyd s))
                                                   @ d
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyd s)
                                                      @ d
                                                      $dVector4)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta4
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyd s) d)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyd s) d) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyd s d))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           n))))) }))
                      p) } } } }) -}
586edb1f420cfe2e3e32bde76e0bd4eb
  izipWith3_go ::
    [Data.Vector.Fusion.Bundle.Size.Size]
    -> Data.Vector.Fusion.Bundle.Size.Size
    -> Data.Vector.Fusion.Bundle.Size.Size
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1574caeb6a25864ecb3ec299df9d9f43
  izipWith4 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e) =>
    (GHC.Types.Int -> a -> b -> c -> d -> e)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
  {- Arity: 10,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(C1(U)))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=5),
     Unfolding: InlineRule (10, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   @ (tye :: Foreign.R.Type.SEXPTYPE)
                   @ e
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   (eta :: GHC.Types.Int -> a -> b -> c -> d -> e)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c)
                   (eta4 :: Data.Vector.SEXP.Vector s tyd d) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ (Data.Vector.SEXP.Base.ElemRep s tye Data.Type.Equality.~ e)
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox4 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tye e)
                   @ (Data.Vector.SEXP.Vector s tye e)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tye e))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tye
                          @ e
                          $dReifies
                          $d(%,,,%)4
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector4 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      ds' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyd s)
                          @ d
                          $dVector4
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyd
                             @ d
                             p
                             eta4)
                    } in
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tye
                      @ s
                      @ e
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tye s) e)
                         @ (Data.Vector.SEXP.W t tye s e)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tye s)
                            @ e
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ ((GHC.Types.Int, a), b)
                                 @ (c, d)
                                 @ e
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (ds :: ((GHC.Types.Int, a), b)) (ds1 :: (c, d))[OneShot] ->
                                  case ds of wild { (,) a1 b1 ->
                                  case ds1 of wild1 { (,) c1 d1 ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ e
                                    (Data.Tuple.uncurry
                                       @ GHC.Types.Int
                                       @ a
                                       @ (b -> c -> d -> e)
                                       eta
                                       a1
                                       b1
                                       c1
                                       d1) } })
                                 (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (GHC.Types.Int, a)
                                    @ b
                                    @ ((GHC.Types.Int, a), b)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: (GHC.Types.Int, a)) (b1 :: b)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ ((GHC.Types.Int, a), b)
                                       (a1, b1))
                                    (Data.Vector.Fusion.Stream.Monadic.indexed
                                       @ Data.Vector.Fusion.Util.Id
                                       @ a
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (Data.Vector.Fusion.Bundle.Monadic.sElems
                                          @ Data.Vector.Fusion.Util.Id
                                          @ (Data.Vector.SEXP.W t tya s)
                                          @ a
                                          as'))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       bs'))
                                 (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                    @ Data.Vector.Fusion.Util.Id
                                    @ c
                                    @ d
                                    @ (c, d)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: c) (b1 :: d)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (c, d)
                                       (a1, b1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyc s)
                                       @ c
                                       cs')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyd s)
                                       @ d
                                       ds')) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tye s)
                            @ e
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ e
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tye s) e)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 e)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tye s) e))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 e)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tye s) e))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tye s) e)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tye s) e)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tye s) e)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tye s)
                                                @ e
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector5 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tye s) e)
                                                   (eta5 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tye s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              e) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tye s))
                                                   @ e
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tye s)
                                                      @ e
                                                      $dVector5)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta5
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tye s) e)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tye s) e) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tye s e))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           (c1
                                              (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ (Data.Vector.SEXP.W t tyd s)
                                                 @ d
                                                 ds')
                                              n)))))) }))
                      p) } } } } }) -}
d5e3330732f77aa2b3a51d1b8aa936b0
  izipWith5 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f) =>
    (GHC.Types.Int -> a -> b -> c -> d -> e -> f)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
  {- Arity: 12,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(C1(C1(U))))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=6),
     Unfolding: InlineRule (12, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   @ (tye :: Foreign.R.Type.SEXPTYPE)
                   @ e
                   @ (tyf :: Foreign.R.Type.SEXPTYPE)
                   @ f
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f)
                   (eta :: GHC.Types.Int -> a -> b -> c -> d -> e -> f)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c)
                   (eta4 :: Data.Vector.SEXP.Vector s tyd d)
                   (eta5 :: Data.Vector.SEXP.Vector s tye e) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyf Data.Type.Equality.~ f)
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ (Data.Vector.SEXP.Base.ElemRep s tye Data.Type.Equality.~ e)
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox5 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyf f)
                   @ (Data.Vector.SEXP.Vector s tyf f)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyf f))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyf s) f
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyf
                          @ f
                          $dReifies
                          $d(%,,,%)5
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector4 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    let {
                      $dVector5 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tye
                          @ e
                          $dReifies
                          $d(%,,,%)4
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      es' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tye s)
                          @ e
                          $dVector5
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tye
                             @ e
                             p
                             eta5)
                    } in
                    let {
                      ds' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyd s)
                          @ d
                          $dVector4
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyd
                             @ d
                             p
                             eta4)
                    } in
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyf
                      @ s
                      @ f
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyf s) f)
                         @ (Data.Vector.SEXP.W t tyf s f)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyf s)
                            @ f
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ ((GHC.Types.Int, a), b, c)
                                 @ (d, e)
                                 @ f
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (ds :: ((GHC.Types.Int, a), b, c)) (ds1 :: (d, e))[OneShot] ->
                                  case ds of wild { (,,) a1 b1 c1 ->
                                  case ds1 of wild1 { (,) d1 e1 ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ f
                                    (Data.Tuple.uncurry
                                       @ GHC.Types.Int
                                       @ a
                                       @ (b -> c -> d -> e -> f)
                                       eta
                                       a1
                                       b1
                                       c1
                                       d1
                                       e1) } })
                                 (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (GHC.Types.Int, a)
                                    @ b
                                    @ c
                                    @ ((GHC.Types.Int, a), b, c)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: (GHC.Types.Int, a))
                                       (b1 :: b)[OneShot]
                                       (c1 :: c)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ ((GHC.Types.Int, a), b, c)
                                       (a1, b1, c1))
                                    (Data.Vector.Fusion.Stream.Monadic.indexed
                                       @ Data.Vector.Fusion.Util.Id
                                       @ a
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (Data.Vector.Fusion.Bundle.Monadic.sElems
                                          @ Data.Vector.Fusion.Util.Id
                                          @ (Data.Vector.SEXP.W t tya s)
                                          @ a
                                          as'))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       bs')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyc s)
                                       @ c
                                       cs'))
                                 (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                    @ Data.Vector.Fusion.Util.Id
                                    @ d
                                    @ e
                                    @ (d, e)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: d) (b1 :: e)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (d, e)
                                       (a1, b1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyd s)
                                       @ d
                                       ds')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tye s)
                                       @ e
                                       es')) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyf s)
                            @ f
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ f
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyf s) f)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 f)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyf s) f))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 f)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyf s) f))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyf s) f)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyf s) f)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyf s) f)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyf s)
                                                @ f
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector6 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyf s) f)
                                                   (eta6 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyf s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              f) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyf s))
                                                   @ f
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyf s)
                                                      @ f
                                                      $dVector6)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta6
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyf s) f)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyf s) f) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyf s f))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           (c1
                                              (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ (Data.Vector.SEXP.W t tyd s)
                                                 @ d
                                                 ds')
                                              (c1
                                                 (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                    @ Data.Vector.Fusion.Util.Id
                                                    @ (Data.Vector.SEXP.W t tye s)
                                                    @ e
                                                    es')
                                                 n))))))) }))
                      p) } } } } } }) -}
b83828869ae649af62a6226015a93682
  izipWith6 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f,
     Data.Vector.SEXP.Base.VECTOR s tyg g) =>
    (GHC.Types.Int -> a -> b -> c -> d -> e -> f -> g)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
    -> Data.Vector.SEXP.Vector s tyg g
  {- Arity: 14,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(C1(C1(C1(U)))))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=7),
     Unfolding: InlineRule (14, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   @ (tye :: Foreign.R.Type.SEXPTYPE)
                   @ e
                   @ (tyf :: Foreign.R.Type.SEXPTYPE)
                   @ f
                   @ (tyg :: Foreign.R.Type.SEXPTYPE)
                   @ g
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f)
                   ($d(%,,,%)6 :: Data.Vector.SEXP.Base.VECTOR s tyg g)
                   (eta :: GHC.Types.Int -> a -> b -> c -> d -> e -> f -> g)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c)
                   (eta4 :: Data.Vector.SEXP.Vector s tyd d)
                   (eta5 :: Data.Vector.SEXP.Vector s tye e)
                   (eta6 :: Data.Vector.SEXP.Vector s tyf f) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyg)
                        @ g
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable g)
                           @ (Foreign.R.Type.IsVector tyg)
                           @ (Data.Singletons.SingI tyg)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyg Data.Type.Equality.~ g)
                           $d(%,,,%)6)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyg>_N <g>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyf Data.Type.Equality.~ f)
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ (Data.Vector.SEXP.Base.ElemRep s tye Data.Type.Equality.~ e)
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox5 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox6 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyg g)
                   @ (Data.Vector.SEXP.Vector s tyg g)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyg g))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyg s) g
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyg
                          @ g
                          $dReifies
                          $d(%,,,%)6
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector4 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    let {
                      $dVector5 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tye
                          @ e
                          $dReifies
                          $d(%,,,%)4
                    } in
                    let {
                      $dVector6 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyf s) f
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyf
                          @ f
                          $dReifies
                          $d(%,,,%)5
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      fs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyf s) f
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyf s)
                          @ f
                          $dVector6
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyf
                             @ f
                             p
                             eta6)
                    } in
                    let {
                      es' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tye s)
                          @ e
                          $dVector5
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tye
                             @ e
                             p
                             eta5)
                    } in
                    let {
                      ds' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyd s)
                          @ d
                          $dVector4
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyd
                             @ d
                             p
                             eta4)
                    } in
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyg
                      @ s
                      @ g
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyg s) g)
                         @ (Data.Vector.SEXP.W t tyg s g)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyg s)
                            @ g
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ ((GHC.Types.Int, a), b, c)
                                 @ (d, e, f)
                                 @ g
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (ds :: ((GHC.Types.Int, a), b, c))
                                    (ds1 :: (d, e, f))[OneShot] ->
                                  case ds of wild { (,,) a1 b1 c1 ->
                                  case ds1 of wild1 { (,,) d1 e1 f1 ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ g
                                    (Data.Tuple.uncurry
                                       @ GHC.Types.Int
                                       @ a
                                       @ (b -> c -> d -> e -> f -> g)
                                       eta
                                       a1
                                       b1
                                       c1
                                       d1
                                       e1
                                       f1) } })
                                 (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (GHC.Types.Int, a)
                                    @ b
                                    @ c
                                    @ ((GHC.Types.Int, a), b, c)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: (GHC.Types.Int, a))
                                       (b1 :: b)[OneShot]
                                       (c1 :: c)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ ((GHC.Types.Int, a), b, c)
                                       (a1, b1, c1))
                                    (Data.Vector.Fusion.Stream.Monadic.indexed
                                       @ Data.Vector.Fusion.Util.Id
                                       @ a
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (Data.Vector.Fusion.Bundle.Monadic.sElems
                                          @ Data.Vector.Fusion.Util.Id
                                          @ (Data.Vector.SEXP.W t tya s)
                                          @ a
                                          as'))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       bs')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyc s)
                                       @ c
                                       cs'))
                                 (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                    @ Data.Vector.Fusion.Util.Id
                                    @ d
                                    @ e
                                    @ f
                                    @ (d, e, f)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: d) (b1 :: e)[OneShot] (c1 :: f)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (d, e, f)
                                       (a1, b1, c1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyd s)
                                       @ d
                                       ds')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tye s)
                                       @ e
                                       es')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyf s)
                                       @ f
                                       fs')) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyg s)
                            @ g
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ g
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyg s) g)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 g)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyg s) g))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 g)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyg s) g))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyg s) g)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyg s) g)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyg s) g)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyg s)
                                                @ g
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector7 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyg s) g)
                                                   (eta7 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyg s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              g) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyg s))
                                                   @ g
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyg s)
                                                      @ g
                                                      $dVector7)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta7
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyg s) g)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyg s) g) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyg s g))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           (c1
                                              (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ (Data.Vector.SEXP.W t tyd s)
                                                 @ d
                                                 ds')
                                              (c1
                                                 (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                    @ Data.Vector.Fusion.Util.Id
                                                    @ (Data.Vector.SEXP.W t tye s)
                                                    @ e
                                                    es')
                                                 (c1
                                                    (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                       @ Data.Vector.Fusion.Util.Id
                                                       @ (Data.Vector.SEXP.W t tyf s)
                                                       @ f
                                                       fs')
                                                    n)))))))) }))
                      p) } } } } } } }) -}
d07920c4ce94994a81004ef345d8a15b
  last ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(SLLS(S)),U(1*U,A,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.last
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)))
                      eta) }) -}
787b19ddd8f24c6df5ebc56700f2fbe0
  lastM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U,A,A,U(U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (m :: * -> *)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.lastM
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ m
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%))
                         $dMonad)
                      eta) }) -}
9c1d9e5a7d52861f6bbb894133008b96
  length ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(LLLS),1*U(A,A,A,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Int)
                   @ GHC.Types.Int
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Int)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Int
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (x :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ GHC.Types.Int
                         (Data.Vector.Fusion.Bundle.Monadic.length
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Fusion.Bundle.Monadic.fromVector
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               Data.Vector.Fusion.Util.$fMonadId
                               $dVector
                               x)))
                      eta) }) -}
f3b50455f31bbe3cc20b73e986777b76
  map ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ b
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.mapM
                                   @ m
                                   @ a
                                   @ b
                                   $dMonad
                                   (let {
                                      f1 :: b -> m b = GHC.Base.return @ m $dMonad @ b
                                    } in
                                    \ (x :: a) -> f1 (eta x))
                                   eta3)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) } }) -}
178ff7743eb7fce91941aca34e9d1cdb
  mapM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> m b)
    -> Data.Vector.SEXP.Vector s ty a
    -> m (Data.Vector.SEXP.Vector s ty b)
  {- Arity: 5,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),C(C1(U)),A,U,A)><S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(U)><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (5, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> m b)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m (Data.Vector.SEXP.Vector s ty b))
                   @ (m (Data.Vector.SEXP.Vector s ty b))
                   (Data.Vector.SEXP.phony @ s @ (m (Data.Vector.SEXP.Vector s ty b)))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W t ty s b)
                      @ (Data.Vector.SEXP.Vector s ty b)
                      $dFunctor
                      (Data.Vector.SEXP.unW @ t @ ty @ s @ b)
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (m (Data.Vector.SEXP.W t ty s b))
                         @ Data.Proxy.Proxy
                         (\ (eta2 :: Data.Vector.SEXP.W t ty s a)[OneShot] ->
                          Data.Vector.Generic.unstreamM
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            $dMonad
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.mapM
                               @ m
                               @ a
                               @ b
                               @ (Data.Vector.SEXP.W t ty s)
                               $dMonad
                               eta
                               (Data.Vector.Fusion.Bundle.lift
                                  @ m
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  $dMonad
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                       `cast`
                                     (Data.Vector.Generic.Base.Vector
                                        <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                     eta2))))
                         eta1
                         p)) } }) -}
fff6c61fbf522edb72d0b00fc4ce908d
  mapM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    (a -> m b) -> Data.Vector.SEXP.Vector s ty a -> m ()
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> m b)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m ())
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Bundle.Monadic.mapM_
                         @ m
                         @ a
                         @ b
                         @ (Data.Vector.SEXP.W t ty s)
                         $dMonad
                         eta
                         (Data.Vector.Fusion.Bundle.lift
                            @ m
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dMonad
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
4c9a4d0b90685a82f733f16511c2f7d9
  maxIndex ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,1*U(A,1*U,A,A,A,A,A,A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Int)
                   @ GHC.Types.Int
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Int)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Int
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta1 :: Data.Vector.SEXP.W t ty s a) ->
                       let {
                         cmpr :: a -> a -> GHC.Types.Ordering
                         = GHC.Classes.compare @ a $dOrd
                       } in
                       Data.Tuple.fst
                         @ GHC.Types.Int
                         @ a
                         (Data.Vector.Fusion.Util.unId
                            @ (GHC.Types.Int, a)
                            (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                               @ Data.Vector.Fusion.Util.Id
                               @ (GHC.Types.Int, a)
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                                case a1 of wild { (,) i x ->
                                case b of wild1 { (,) j y ->
                                case i of i1 { GHC.Types.I# ipv ->
                                case j of j1 { GHC.Types.I# ipv1 ->
                                case cmpr x y of wild2 {
                                  DEFAULT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (i1, x)
                                  GHC.Types.LT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (j1, y) } } } } })
                               (Data.Vector.Fusion.Bundle.Monadic.indexed
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta1)))))
                      eta) }) -}
9f97668c0f9f11088a4ed7884e638348
  maxIndexBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> GHC.Types.Ordering)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Int)
                   @ GHC.Types.Int
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Int)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Int
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Tuple.fst
                         @ GHC.Types.Int
                         @ a
                         (Data.Vector.Fusion.Util.unId
                            @ (GHC.Types.Int, a)
                            (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                               @ Data.Vector.Fusion.Util.Id
                               @ (GHC.Types.Int, a)
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                                case a1 of wild { (,) i x ->
                                case b of wild1 { (,) j y ->
                                case i of i1 { GHC.Types.I# ipv ->
                                case j of j1 { GHC.Types.I# ipv1 ->
                                case eta x y of wild2 {
                                  DEFAULT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (i1, x)
                                  GHC.Types.LT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (j1, y) } } } } })
                               (Data.Vector.Fusion.Bundle.Monadic.indexed
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta2)))))
                      eta1) }) -}
f284d64def2f43a16a858ad33319467d
  maximum ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(U,A,A,U(U))><L,1*U(A,A,A,A,A,A,1*U,A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta1 :: Data.Vector.SEXP.W t ty s a) ->
                       let {
                         f :: a -> a -> a = GHC.Classes.max @ a $dOrd
                       } in
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (f a1 b))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta1)))
                      eta) }) -}
73964d2bec20074e57925118cb9bc5af
  maximumBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> GHC.Types.Ordering)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             case eta a1 b of wild {
                               DEFAULT -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a a1
                               GHC.Types.LT
                               -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a b })
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
cd99dc0a6eaed79b253491c238fa0b03
  minIndex ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,1*U(A,1*U,A,A,A,A,A,A)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Int)
                   @ GHC.Types.Int
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Int)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Int
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta1 :: Data.Vector.SEXP.W t ty s a) ->
                       let {
                         cmpr :: a -> a -> GHC.Types.Ordering
                         = GHC.Classes.compare @ a $dOrd
                       } in
                       Data.Tuple.fst
                         @ GHC.Types.Int
                         @ a
                         (Data.Vector.Fusion.Util.unId
                            @ (GHC.Types.Int, a)
                            (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                               @ Data.Vector.Fusion.Util.Id
                               @ (GHC.Types.Int, a)
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                                case a1 of wild { (,) i x ->
                                case b of wild1 { (,) j y ->
                                case i of i1 { GHC.Types.I# ipv ->
                                case j of j1 { GHC.Types.I# ipv1 ->
                                case cmpr x y of wild2 {
                                  DEFAULT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (i1, x)
                                  GHC.Types.GT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (j1, y) } } } } })
                               (Data.Vector.Fusion.Bundle.Monadic.indexed
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta1)))))
                      eta) }) -}
efd40216ed7b9b16bd4384b29fceeef8
  minIndexBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> GHC.Types.Ordering)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Int)
                   @ GHC.Types.Int
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Int)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Int
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Tuple.fst
                         @ GHC.Types.Int
                         @ a
                         (Data.Vector.Fusion.Util.unId
                            @ (GHC.Types.Int, a)
                            (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                               @ Data.Vector.Fusion.Util.Id
                               @ (GHC.Types.Int, a)
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               (\ (a1 :: (GHC.Types.Int, a)) (b :: (GHC.Types.Int, a))[OneShot] ->
                                case a1 of wild { (,) i x ->
                                case b of wild1 { (,) j y ->
                                case i of i1 { GHC.Types.I# ipv ->
                                case j of j1 { GHC.Types.I# ipv1 ->
                                case eta x y of wild2 {
                                  DEFAULT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (i1, x)
                                  GHC.Types.GT
                                  -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (GHC.Types.Int, a)
                                       (j1, y) } } } } })
                               (Data.Vector.Fusion.Bundle.Monadic.indexed
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta2)))))
                      eta1) }) -}
be1c7511ec2c83e047cf2422444e9d47
  minimum ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Ord a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(U,A,A,U(U))><L,1*U(A,A,A,A,A,A,A,1*U)><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta1 :: Data.Vector.SEXP.W t ty s a) ->
                       let {
                         f :: a -> a -> a = GHC.Classes.min @ a $dOrd
                       } in
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (f a1 b))
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta1)))
                      eta) }) -}
f901da1dad0388c25daf754d97fe88d4
  minimumBy ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> GHC.Types.Ordering)
    -> Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> GHC.Types.Ordering)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldl1M'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b :: a)[OneShot] ->
                             case eta a1 b of wild {
                               DEFAULT -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a a1
                               GHC.Types.GT
                               -> Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a b })
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               eta2)))
                      eta1) }) -}
87c4172f49c5143f99f8fdf22e39493c
  notElem ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Classes.Eq a) =>
    a -> Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><L,U(C(C1(U)),A)><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Bool)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Bool
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ GHC.Types.Bool
                         (GHC.Base.liftM
                            @ Data.Vector.Fusion.Util.Id
                            @ GHC.Types.Bool
                            @ GHC.Types.Bool
                            Data.Vector.Fusion.Util.$fMonadId
                            GHC.Classes.not
                            (Data.Vector.Fusion.Stream.Monadic.elem
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               Data.Vector.Fusion.Util.$fMonadId
                               $dEq
                               eta
                               (Data.Vector.Fusion.Bundle.Monadic.sElems
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W t ty s)
                                  @ a
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta2)))))
                      eta1) }) -}
d700a37838b37b4e4727a8bb5b4d2c4f
  null ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(LLLS),1*U(A,A,A,1*U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Vector.SEXP.phony @ s @ GHC.Types.Bool)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ GHC.Types.Bool
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (x :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ GHC.Types.Bool
                         (Data.Vector.Fusion.Bundle.Monadic.null
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               x)))
                      eta) }) -}
8451576458c12d414ef7a63fe1c808ba
  partition ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t
                      -> (Data.Vector.SEXP.Vector s ty a,
                          Data.Vector.SEXP.Vector s ty a))
                   @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony
                      @ s
                      @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a
                           -> (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                        {- Arity: 1 -}
                      = \ (x :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.partition_stream
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          @ (Data.Vector.SEXP.W t ty s)
                          $dVector
                          eta
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             x)
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    case Data.Vector.SEXP.proxyFW
                           @ t
                           @ ty
                           @ s
                           @ a
                           @ (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                           @ Data.Proxy.Proxy
                           g
                           eta1
                           x of wild { (,) a1 b ->
                    (Data.Vector.SEXP.unW @ t @ ty @ s @ a a1,
                     Data.Vector.SEXP.unW @ t @ ty @ s @ a b) }) }) -}
3e9c358e89b946dc6ea5b1a518289569
  phony ::
    (forall t.
     Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
     Data.Proxy.Proxy t -> r)
    -> r
  {- Arity: 1, HasNoCafRefs, Strictness: <C(C(S)),1*C1(C1(U))>,
     Unfolding: (\ @ s
                   @ r
                   (f :: forall t.
                         Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                         Data.Proxy.Proxy t -> r) ->
                 (\ @ s1
                    ($dReifies :: Data.Reflection.Reifies
                                    s1 (Control.Monad.R.Internal.AcquireIO s))[OneShot]
                    (p :: Data.Proxy.Proxy s1)[OneShot] ->
                  f @ s1 $dReifies p)
                   `cast`
                 (Trans
                      (Sym (Data.Reflection.N:Magic[0]
                                <Control.Monad.R.Internal.AcquireIO s>_N <r>_R))
                      (UnsafeCo representational (Data.Reflection.Magic
                                                    (Control.Monad.R.Internal.AcquireIO s)
                                                    r) ((GHC.Prim.Any
                                                         -> Control.Monad.R.Internal.AcquireIO s)
                                                        -> Data.Proxy.Proxy GHC.Prim.Any -> r)))
                   (Data.Vector.SEXP.!1 @ s)
                     `cast`
                   (<GHC.Prim.Any>_R
                    ->_R Trans
                             (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N).
                              <Foreign.R.Internal.SEXP Control.Memory.Region.V ty>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Foreign.R.Internal.SEXP s ty>_R))
                             (Sym (Control.Monad.R.Internal.N:AcquireIO[0] <s>_P)))
                   (Data.Proxy.Proxy @ GHC.Prim.Any @ GHC.Prim.Any)) -}
fe43c908d9b5f179d39b30bd0a28f678
  postscanl ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s b -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                            `cast`
                          (Data.Vector.Generic.Base.Vector
                             <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                               `cast`
                             (Data.Vector.Generic.Base.Vector
                                <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                             (Data.Vector.Fusion.Bundle.inplace
                                @ b
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m b)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.postscanlM
                                   @ m
                                   @ a
                                   @ b
                                   $dMonad
                                   (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                    GHC.Base.return @ m $dMonad @ a (eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ b
                                   $dVector
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ b
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
f2ee2e998fa3f1fae26347950a15902b
  postscanl' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s b -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                            `cast`
                          (Data.Vector.Generic.Base.Vector
                             <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                               `cast`
                             (Data.Vector.Generic.Base.Vector
                                <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                             (Data.Vector.Fusion.Bundle.inplace
                                @ b
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m b)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.postscanlM'
                                   @ m
                                   @ a
                                   @ b
                                   $dMonad
                                   (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                    GHC.Base.return @ m $dMonad @ a (eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ b
                                   $dVector
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ b
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
c7d007a32160c0522358abe79f29e372
  postscanr ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ b
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.postscanlM
                                   @ m
                                   @ b
                                   @ a
                                   $dMonad
                                   (\ (a1 :: b) (b1 :: a)[OneShot] ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ b
                                      (GHC.Base.flip @ a @ b @ b eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.streamR
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   $dVector
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
1be2d28be7711a4abe41d9c87338a51a
  postscanr' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ b
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.postscanlM'
                                   @ m
                                   @ b
                                   @ a
                                   $dMonad
                                   (\ (a1 :: b) (b1 :: a)[OneShot] ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ b
                                      (GHC.Base.flip @ a @ b @ b eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.streamR
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   $dVector
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
5ae65e8cb3b26cf2041cbf800d016f34
  prescanl ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s b -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                            `cast`
                          (Data.Vector.Generic.Base.Vector
                             <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                               `cast`
                             (Data.Vector.Generic.Base.Vector
                                <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                             (Data.Vector.Fusion.Bundle.inplace
                                @ b
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m b)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.prescanlM
                                   @ m
                                   @ a
                                   @ b
                                   $dMonad
                                   (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                    GHC.Base.return @ m $dMonad @ a (eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ b
                                   $dVector
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ b
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
f0c3f21850679104cf4882c43717eda4
  prescanl' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,1*U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s b -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                            `cast`
                          (Data.Vector.Generic.Base.Vector
                             <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                               `cast`
                             (Data.Vector.Generic.Base.Vector
                                <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                             (Data.Vector.Fusion.Bundle.inplace
                                @ b
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m b)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.prescanlM'
                                   @ m
                                   @ a
                                   @ b
                                   $dMonad
                                   (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                    GHC.Base.return @ m $dMonad @ a (eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ b
                                   $dVector
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ b
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
71d00dc55408f567eae147b38599695a
  prescanr ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ b
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.prescanlM
                                   @ m
                                   @ b
                                   @ a
                                   $dMonad
                                   (\ (a1 :: b) (b1 :: a)[OneShot] ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ b
                                      (GHC.Base.flip @ a @ b @ b eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.streamR
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   $dVector
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
115d69566b8363637d177d12ceb5486d
  prescanr' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,1*U><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ b
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta4 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.prescanlM'
                                   @ m
                                   @ b
                                   @ a
                                   $dMonad
                                   (\ (a1 :: b) (b1 :: a)[OneShot] ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ b
                                      (GHC.Base.flip @ a @ b @ b eta a1 b1))
                                   eta1
                                   eta4)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.streamR
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   $dVector
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                                   eta3)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
573c7973a735ae62a6f4543a0612ea97
  product ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       let {
                         f :: a -> a -> a = GHC.Num.* @ a $dNum
                       } in
                       let {
                         z :: a = GHC.Num.fromInteger @ a $dNum 1
                       } in
                       \ (x :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (f a1 b1))
                            z
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               x)))
                      eta) }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  proxyFW ::
    (Data.Vector.SEXP.W t ty s a -> r)
    -> Data.Vector.SEXP.Vector s ty a -> p t -> r
  {- Arity: 3, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ s
                   @ a
                   @ r
                   @ (p :: * -> *)
                   (f :: Data.Vector.SEXP.W t ty s a -> r)
                   (v :: Data.Vector.SEXP.Vector s ty a)
                   (p1 :: p t) ->
                 f v `cast`
                   (Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N)) -}
4a5b4c359e2212c04ebaea800b5a6472
  proxyFW2 ::
    (Data.Vector.SEXP.W t tya s a -> Data.Vector.SEXP.W t tyb s b -> r)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> p t
    -> r
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U><L,A>,
     Unfolding: InlineRule (4, True, True)
                (\ @ t
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ s
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ r
                   @ (p :: * -> *)
                   (f :: Data.Vector.SEXP.W t tya s a
                         -> Data.Vector.SEXP.W t tyb s b -> r)
                   (v1 :: Data.Vector.SEXP.Vector s tya a)
                   (v2 :: Data.Vector.SEXP.Vector s tyb b)
                   (p1 :: p t) ->
                 f v1
                     `cast`
                   (Sym (Data.Vector.SEXP.N:W[0] <t>_P <tya>_P <s>_P) <a>_N)
                   v2
                     `cast`
                   (Sym (Data.Vector.SEXP.N:W[0] <t>_P <tyb>_P <s>_P) <b>_N)) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  proxyW ::
    Data.Vector.SEXP.W t ty s a
    -> p t -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)><L,A>m,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.fromListN1
                  `cast`
                (forall (t :: <*>_N) (ty :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <*>_N) (a :: <*>_N) (p :: <*
                                                                                                          -> *>_N).
                 <Data.Vector.SEXP.W t ty s a>_R
                 ->_R <p t>_R
                 ->_R Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P <a>_N) -}
1f7f3b1f6fdd039a5e446384e74270a5
  replicate ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,1*U(U)><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ (Data.Vector.SEXP.W t ty s a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) eta1 })
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t ty s) a)
                            @ (Data.Vector.SEXP.W t ty s a)
                            (Data.Vector.Generic.unstream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)))
                            (Data.Vector.Fusion.Bundle.Monadic.replicate
                               @ Data.Vector.Fusion.Util.Id
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1)))) }) -}
4ee80d78feac65a325ca6ad8be2f4761
  replicateM ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s ty a) =>
    GHC.Types.Int -> m a -> m (Data.Vector.SEXP.Vector s ty a)
  {- Arity: 4,
     Strictness: <S(S(S(C(C(S))L)LLLL)LLLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A),C(C1(U)),A,C(U),A)><S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: m a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m (Data.Vector.SEXP.Vector s ty a))
                   @ (m (Data.Vector.SEXP.Vector s ty a))
                   (Data.Vector.SEXP.phony @ s @ (m (Data.Vector.SEXP.Vector s ty a)))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W t ty s a)
                      @ (Data.Vector.SEXP.Vector s ty a)
                      $dFunctor
                      (\ (v :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.SEXP.proxyW @ t @ ty @ s @ a @ Data.Proxy.Proxy v p)
                      (Data.Vector.Generic.unstreamM
                         @ m
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ GHC.Prim.Any
                         $dMonad
                         $dVector
                         (Data.Vector.Fusion.Bundle.Monadic.replicateM
                            @ m
                            @ a
                            @ GHC.Prim.Any
                            $dMonad
                            eta
                            eta1))) }) -}
076f4425d7f282a128a012762b63512b
  reverse ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (x :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Generic.streamR
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                $dVector
                                x))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta
                         x)) }) -}
28eec59b37d4f45d6e86091d8309232b
  scanl ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s b -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                            `cast`
                          (Data.Vector.Generic.Base.Vector
                             <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                               `cast`
                             (Data.Vector.Generic.Base.Vector
                                <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                             (Data.Vector.Fusion.Bundle.Monadic.++
                                @ Data.Vector.Fusion.Util.Id
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                Data.Vector.Fusion.Util.$fMonadId
                                (Data.Vector.Fusion.Bundle.Monadic.singleton
                                   @ Data.Vector.Fusion.Util.Id
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   eta1)
                                (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                                   @ Data.Vector.Fusion.Util.Id
                                   @ a
                                   @ b
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                    Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b1))
                                   eta1
                                   (Data.Vector.Generic.stream
                                      @ (Data.Vector.SEXP.W t ty s)
                                      @ b
                                      $dVector
                                      eta3))))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ b
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
8f0133b97a2d0a026cbdda44efe4a120
  scanl' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> a)
    -> a
    -> Data.Vector.SEXP.Vector s ty b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> a)
                   (eta1 :: a)
                   (eta2 :: Data.Vector.SEXP.Vector s ty b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s b -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s b) ->
                        case eta1 of z1 { DEFAULT ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                            `cast`
                          (Data.Vector.Generic.Base.Vector
                             <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                               `cast`
                             (Data.Vector.Generic.Base.Vector
                                <Data.Vector.SEXP.W t ty s>_N (Trans (Sym cobox0) cobox1))_R
                             (Data.Vector.Fusion.Bundle.Monadic.++
                                @ Data.Vector.Fusion.Util.Id
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                Data.Vector.Fusion.Util.$fMonadId
                                (Data.Vector.Fusion.Bundle.Monadic.singleton
                                   @ Data.Vector.Fusion.Util.Id
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   z1)
                                (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                                   @ Data.Vector.Fusion.Util.Id
                                   @ a
                                   @ b
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                    Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (eta a1 b1))
                                   z1
                                   (Data.Vector.Generic.stream
                                      @ (Data.Vector.SEXP.W t ty s)
                                      @ b
                                      $dVector
                                      eta3)))) }
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ b
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
08c5b535b1f758dd268347074a0035db
  scanl1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.scanl1M
                                   @ m
                                   @ a
                                   $dMonad
                                   (\ (x :: a) (y :: a)[OneShot] ->
                                    GHC.Base.return @ m $dMonad @ a (eta x y))
                                   eta3)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
646ab282e39a7d276b3ea4be6237d6b9
  scanl1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.scanl1M'
                                   @ m
                                   @ a
                                   $dMonad
                                   (\ (x :: a) (y :: a)[OneShot] ->
                                    GHC.Base.return @ m $dMonad @ a (eta x y))
                                   eta3)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
f010a04d6733a2a0c30b8cd90f5fed01
  scanr ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><L,U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.Monadic.++
                                @ Data.Vector.Fusion.Util.Id
                                @ (Data.Vector.SEXP.W t ty s)
                                @ b
                                Data.Vector.Fusion.Util.$fMonadId
                                (Data.Vector.Fusion.Bundle.Monadic.singleton
                                   @ Data.Vector.Fusion.Util.Id
                                   @ b
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   eta1)
                                (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                                   @ Data.Vector.Fusion.Util.Id
                                   @ b
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (\ (a1 :: b) (b1 :: a)[OneShot] ->
                                    Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                      @ b
                                      (GHC.Base.flip @ a @ b @ b eta a1 b1))
                                   eta1
                                   (Data.Vector.Generic.streamR
                                      @ (Data.Vector.SEXP.W t ty s)
                                      @ a
                                      @ (Data.Vector.SEXP.W t ty s)
                                      $dVector
                                        `cast`
                                      (Data.Vector.Generic.Base.Vector
                                         <Data.Vector.SEXP.W t ty s>_N
                                         (Trans (Sym cobox0) cobox1))_R
                                      eta3))))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
bfc5252328245edec4c8d75958fbccba
  scanr' ::
    (Data.Vector.SEXP.Base.VECTOR s ty a,
     Data.Vector.SEXP.Base.VECTOR s ty b) =>
    (a -> b -> b)
    -> b
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty b
  {- Arity: 5,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS(S)),1*U(A,A,A,1*U(1*U))><L,C(C1(U))><S,1*U><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s ty b)
                   (eta :: a -> b -> b)
                   (eta1 :: b)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty b)
                   @ (Data.Vector.SEXP.Vector s ty b)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty b))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ ty
                          @ b
                          $dReifies
                          $d(%,,,%)
                            `cast`
                          (GHC.Classes.(%,,,%)
                             (Foreign.Storable.Storable (Trans (Sym cobox1) cobox0))_N
                             <(Data.Singletons.SingI ty,
                               ty
                               Foreign.R.Constraints.:∈ '['Foreign.R.Type.Char,
                                                          'Foreign.R.Type.Logical,
                                                          'Foreign.R.Type.Int, 'Foreign.R.Type.Real,
                                                          'Foreign.R.Type.Complex,
                                                          'Foreign.R.Type.String,
                                                          'Foreign.R.Type.Vector,
                                                          'Foreign.R.Type.Expr,
                                                          'Foreign.R.Type.WeakRef,
                                                          'Foreign.R.Type.Raw])>_N
                             <Data.Singletons.SingI ty>_N
                             ((Data.Type.Equality.~)
                                <*>_N
                                <Data.Vector.SEXP.Base.ElemRep s ty>_N
                                (Trans (Sym cobox1) cobox0))_N)_R
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s b
                        {- Arity: 1 -}
                      = \ (eta3 :: Data.Vector.SEXP.W t ty s a) ->
                        case eta1 of z1 { DEFAULT ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ b
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ b
                             $dVector
                             (Data.Vector.Fusion.Bundle.Monadic.++
                                @ Data.Vector.Fusion.Util.Id
                                @ (Data.Vector.SEXP.W t ty s)
                                @ b
                                Data.Vector.Fusion.Util.$fMonadId
                                (Data.Vector.Fusion.Bundle.Monadic.singleton
                                   @ Data.Vector.Fusion.Util.Id
                                   @ b
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   z1)
                                (Data.Vector.Fusion.Bundle.Monadic.postscanlM
                                   @ Data.Vector.Fusion.Util.Id
                                   @ b
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (\ (a1 :: b) (b1 :: a)[OneShot] ->
                                    Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                      @ b
                                      (GHC.Base.flip @ a @ b @ b eta a1 b1))
                                   z1
                                   (Data.Vector.Generic.streamR
                                      @ (Data.Vector.SEXP.W t ty s)
                                      @ a
                                      @ (Data.Vector.SEXP.W t ty s)
                                      $dVector
                                        `cast`
                                      (Data.Vector.Generic.Base.Vector
                                         <Data.Vector.SEXP.W t ty s>_N
                                         (Trans (Sym cobox0) cobox1))_R
                                      eta3)))) }
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ b
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s b)
                         @ Data.Proxy.Proxy
                         g
                         eta2
                         x)) } }) -}
2eb8d6d6bfaf7901dfa6353cd4c64c80
  scanr1 ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.scanl1M
                                   @ m
                                   @ a
                                   $dMonad
                                   (\ (x :: a) (y :: a)[OneShot] ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ a
                                      (GHC.Base.flip @ a @ a @ a eta x y))
                                   eta3)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.streamR
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
88b6ff9eb949ababdfc5ebd4d89a0c2a
  scanr1' ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> a -> a)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> a -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstreamR
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.inplace
                                @ a
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                (\ @ (m :: * -> *)
                                   ($dMonad :: GHC.Base.Monad m)[OneShot]
                                   (eta3 :: Data.Vector.Fusion.Stream.Monadic.Stream
                                              m a)[OneShot] ->
                                 Data.Vector.Fusion.Stream.Monadic.scanl1M'
                                   @ m
                                   @ a
                                   $dMonad
                                   (\ (x :: a) (y :: a)[OneShot] ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ a
                                      (GHC.Base.flip @ a @ a @ a eta x y))
                                   eta3)
                                (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                (Data.Vector.Generic.streamR
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
8774bab7075bf7a6308fb575864d269f
  singleton ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ (Data.Vector.SEXP.W t ty s a)
                         (case GHC.Types.HEq_sc
                                 @ *
                                 @ *
                                 @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                 @ a
                                 (GHC.Classes.$p4(%,,,%)
                                    @ (Foreign.Storable.Storable a)
                                    @ (Foreign.R.Type.IsVector ty)
                                    @ (Data.Singletons.SingI ty)
                                    @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                    $d(%,,,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                     s
                                                                     ty>_N <a>_N) of cobox1 { DEFAULT ->
                          GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) eta })
                         (Data.Vector.Generic.new
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Generic.New.unstream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               (Data.Vector.Fusion.Bundle.Monadic.singleton
                                  @ Data.Vector.Fusion.Util.Id
                                  @ a
                                  @ (Data.Vector.SEXP.W t ty s)
                                  Data.Vector.Fusion.Util.$fMonadId
                                  eta))))) }) -}
080102f74c2913d3298b901aeb699a07
  slice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(S),U(U)><S(SLSS),U(U,U,U,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.slice
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                          eta
                          eta1
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta2
                         x)) }) -}
497ba92a0a62187e8b163bfed9e78fc3
  smallest ::
    [Data.Vector.Fusion.Bundle.Size.Size]
    -> Data.Vector.Fusion.Bundle.Size.Size
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Vector.Fusion.Bundle.Size.Size]) ->
                 case ds of wild {
                   [] -> GHC.List.foldl1'1 @ Data.Vector.Fusion.Bundle.Size.Size
                   : x xs -> Data.Vector.SEXP.izipWith3_go xs x }) -}
cdd95ce0fe8e906e27e70173db0c31aa
  snoc ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS),1*U(U,U,U,U)><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (ds :: Data.Vector.SEXP.W t ty s a) ->
                        GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.Vector.SEXP.W t ty s a)
                          @ (Data.Vector.SEXP.W t ty s a)
                          (case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Data.Vector.SEXP.Base.ElemRep s ty)
                                  @ a
                                  (GHC.Classes.$p4(%,,,%)
                                     @ (Foreign.Storable.Storable a)
                                     @ (Foreign.R.Type.IsVector ty)
                                     @ (Data.Singletons.SingI ty)
                                     @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                                     $d(%,,,%))
                                    `cast`
                                  (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                      s
                                                                      ty>_N <a>_N) of cobox1 { DEFAULT ->
                           GHC.Prim.seq @ a @ (Data.Vector.SEXP.W t ty s a) eta1 })
                          (GHC.Base.$
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t ty s) a)
                             @ (Data.Vector.SEXP.W t ty s a)
                             (Data.Vector.Generic.unstream
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector)
                             (Data.Vector.Fusion.Bundle.Monadic.++
                                @ Data.Vector.Fusion.Util.Id
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                Data.Vector.Fusion.Util.$fMonadId
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   ds)
                                (Data.Vector.Fusion.Bundle.Monadic.singleton
                                   @ Data.Vector.Fusion.Util.Id
                                   @ a
                                   @ (Data.Vector.SEXP.W t ty s)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   eta1)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta
                         x)) }) -}
d6c91a9d5827bdcbb0e57762493c4b1b
  span ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S(LLLS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t
                      -> (Data.Vector.SEXP.Vector s ty a,
                          Data.Vector.SEXP.Vector s ty a))
                   @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony
                      @ s
                      @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a
                           -> (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        case Data.Vector.Fusion.Util.unId
                               @ (GHC.Base.Maybe GHC.Types.Int)
                               (Data.Vector.Fusion.Bundle.Monadic.findIndex
                                  @ Data.Vector.Fusion.Util.Id
                                  @ a
                                  @ (Data.Vector.SEXP.W t ty s)
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (\ (x :: a) -> GHC.Classes.not (eta x))
                                  (Data.Vector.Generic.stream
                                     @ (Data.Vector.SEXP.W t ty s)
                                     @ a
                                     $dVector
                                     eta2)) of wild {
                          GHC.Base.Nothing
                          -> (eta2,
                              Data.Vector.Generic.new
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                (Data.Vector.Generic.New.unstream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   (Data.Vector.Fusion.Bundle.empty
                                      @ (Data.Vector.SEXP.W t ty s)
                                      @ a)))
                          GHC.Base.Just i
                          -> (Data.Vector.Generic.unsafeSlice
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                (GHC.Types.I# 0#)
                                i
                                eta2,
                              Data.Vector.Generic.unsafeSlice
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                i
                                (GHC.Num.$fNumInt_$c-
                                   (Data.Vector.Fusion.Util.unId
                                      @ GHC.Types.Int
                                      (Data.Vector.Fusion.Bundle.Monadic.length
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t ty s)
                                         @ a
                                         Data.Vector.Fusion.Util.$fMonadId
                                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                            @ Data.Vector.Fusion.Util.Id
                                            @ (Data.Vector.SEXP.W t ty s)
                                            @ a
                                            Data.Vector.Fusion.Util.$fMonadId
                                            $dVector
                                            eta2)))
                                   i)
                                eta2) }
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    case Data.Vector.SEXP.proxyFW
                           @ t
                           @ ty
                           @ s
                           @ a
                           @ (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                           @ Data.Proxy.Proxy
                           g
                           eta1
                           x of wild { (,) a1 b ->
                    (Data.Vector.SEXP.unW @ t @ ty @ s @ a a1,
                     Data.Vector.SEXP.unW @ t @ ty @ s @ a b) }) }) -}
878028b12dc9da40c0ccecabb474a2c3
  splitAt ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><L,1*U(U)><L,U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t
                      -> (Data.Vector.SEXP.Vector s ty a,
                          Data.Vector.SEXP.Vector s ty a))
                   @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony
                      @ s
                      @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a
                            -> (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                        {- Arity: 1 -}
                      = Data.Vector.Generic.splitAt
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                          eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    case Data.Vector.SEXP.proxyFW
                           @ t
                           @ ty
                           @ s
                           @ a
                           @ (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                           @ Data.Proxy.Proxy
                           g1
                           eta1
                           x of wild { (,) a1 b ->
                    (Data.Vector.SEXP.unW @ t @ ty @ s @ a a1,
                     Data.Vector.SEXP.unW @ t @ ty @ s @ a b) }) }) -}
912608c23a097fa00c6aa33556557078
  sum ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Num.Num a) =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       let {
                         f :: a -> a -> a = GHC.Num.+ @ a $dNum
                       } in
                       let {
                         z :: a = GHC.Num.fromInteger @ a $dNum 0
                       } in
                       \ (x :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Fusion.Util.unId
                         @ a
                         (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                            @ Data.Vector.Fusion.Util.Id
                            @ a
                            @ a
                            @ (Data.Vector.SEXP.W t ty s)
                            Data.Vector.Fusion.Util.$fMonadId
                            (\ (a1 :: a) (b1 :: a)[OneShot] ->
                             Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ a (f a1 b1))
                            z
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               x)))
                      eta) }) -}
35db4b1b8f92c949e38f66a2a2c3bb2a
  tail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.tail @ (Data.Vector.SEXP.W t ty s) @ a g
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta
                         x)) }) -}
03e37b85f593b31a9026e666ec1f535c
  take ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.take @ (Data.Vector.SEXP.W t ty s) @ a g eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta1
                         x)) }) -}
403d64db65471048930e07253be59ea7
  takeWhile ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (eta2 :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.unstream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             (Data.Vector.Fusion.Bundle.Monadic.takeWhileM
                                @ Data.Vector.Fusion.Util.Id
                                @ a
                                @ (Data.Vector.SEXP.W t ty s)
                                Data.Vector.Fusion.Util.$fMonadId
                                (\ (x :: a) ->
                                 Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                   @ GHC.Types.Bool
                                   (eta x))
                                (Data.Vector.Generic.stream
                                   @ (Data.Vector.SEXP.W t ty s)
                                   @ a
                                   $dVector
                                   eta2)))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
1e8ba3d42126865b91e1645f64a2aa8c
  thaw ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,U,A,U(U))><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Vector
                             (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)) a
                      = Data.Vector.SEXP.$fVectorWa
                          @ s
                          @ (Control.Monad.Primitive.PrimState m)
                          @ ty
                          @ a
                          $dReifies
                          $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy s) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      $dFunctor
                      (Data.Vector.SEXP.Mutable.Internal.unW
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                      (Data.Vector.Generic.thaw
                         @ m
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                         @ a
                         $dPrimMonad
                         $dVector
                         (Data.Vector.SEXP.withW
                            @ Data.Proxy.Proxy
                            @ s
                            @ (Control.Monad.R.Class.Region m)
                            @ ty
                            @ a
                            p
                            eta))
                        `cast`
                      (<m>_R (Data.Vector.SEXP.D:R:MutableW[0]
                                  <Control.Monad.Primitive.PrimState m>_N
                                  <ty>_N
                                  <s>_N <Control.Monad.Primitive.PrimState m>_N <a>_N))) }) -}
9b043eb7276557f3b1390655c9c01f4c
  toByteString ::
    Data.Vector.SEXP.Vector s 'Foreign.R.Type.Char GHC.Word.Word8
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (v :: Data.Vector.SEXP.Vector
                           s 'Foreign.R.Type.Char GHC.Word.Word8) ->
                 case v of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        GHC.Prim.realWorld# of s' { DEFAULT ->
                 case (Data.ByteString.$wpackCStringLen
                         (GHC.Prim.plusAddr# (GHC.Prim.plusAddr# dt 40#) dt2)
                         dt3
                         GHC.Prim.realWorld#)
                        `cast`
                      ((#,#)
                         <'GHC.Types.VoidRep>_R
                         <'GHC.Types.PtrRepLifted>_R
                         (GHC.Prim.State#
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                         <Data.ByteString.Internal.ByteString>_R)_R of ds { (#,#) ipv ipv1 ->
                 ipv1 } } }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  toList ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> [a]
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> [a])
                   @ [a]
                   (Data.Vector.SEXP.phony @ s @ [a])
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ [a]
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       \ (x :: Data.Vector.SEXP.W t ty s a) ->
                       GHC.Base.build
                         @ a
                         (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                          Data.Vector.Fusion.Bundle.toListFB
                            @ a
                            @ b
                            @ (Data.Vector.SEXP.W t ty s)
                            c
                            n
                            (Data.Vector.Generic.stream
                               @ (Data.Vector.SEXP.W t ty s)
                               @ a
                               $dVector
                               x)))
                      eta) }) -}
7842d096d1532389f72dc783995e6918
  toSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Foreign.R.Internal.SEXP s ty
  {- Arity: 2,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS),1*U(U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w1 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Data.Vector.SEXP.$wtoSEXP @ s @ ty @ a w ww1 ww2 ww3 ww4 }) -}
3c1356258193ba7b2c6e442674c652d8
  toString ::
    Data.Vector.SEXP.Vector s 'Foreign.R.Type.Char GHC.Word.Word8
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLSS),U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (w :: Data.Vector.SEXP.Vector
                           s 'Foreign.R.Type.Char GHC.Word.Word8) ->
                 case w of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Data.Vector.SEXP.$wtoString @ s ww1 ww2 ww3 ww4 }) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  unW ::
    Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.Vector s ty a
  RecSel Left Data.Vector.SEXP.W
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.unW1
                  `cast`
                (forall (t :: <*>_N) (ty :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <*>_N) (a :: <*>_N).
                 <Data.Vector.SEXP.W t ty s a>_R
                 ->_R Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P <a>_N) -}
5a4969675eb1cadbaf3eeb53aa5ed01a
  unW1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ s
                   @ a
                   (ds :: Data.Vector.SEXP.W t ty s a) ->
                 ds) -}
a740a2d60ec53c96c5e581feb3d71634
  unfoldr ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (b -> GHC.Base.Maybe (a, b)) -> b -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: b -> GHC.Base.Maybe (a, b))
                   (eta1 :: b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.unfoldr
                               @ Data.Vector.Fusion.Util.Id
                               @ b
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1)))) }) -}
210be9272c88eee2d4e6a488d9115380
  unfoldrN ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> (b -> GHC.Base.Maybe (a, b))
    -> b
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U(U)><L,C(U)><L,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: b -> GHC.Base.Maybe (a, b))
                   (eta2 :: b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ Data.Proxy.Proxy
                      (let {
                         $dVector :: Data.Vector.Generic.Base.Vector
                                       (Data.Vector.SEXP.W t ty s) a
                         = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                       } in
                       Data.Vector.Generic.new
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         (Data.Vector.Generic.New.unstream
                            @ (Data.Vector.SEXP.W t ty s)
                            @ a
                            $dVector
                            (Data.Vector.Fusion.Bundle.Monadic.unfoldrN
                               @ Data.Vector.Fusion.Util.Id
                               @ b
                               @ a
                               @ (Data.Vector.SEXP.W t ty s)
                               Data.Vector.Fusion.Util.$fMonadId
                               eta
                               eta1
                               eta2)))) }) -}
0a10b71d5cfd95548b5ad2b21629473c
  unsafeAccum ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> b -> a)
    -> Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, b)]
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ b
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> b -> a)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a)
                   (eta2 :: [(GHC.Types.Int, b)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (w :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.modifyWithBundle
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             @ GHC.Prim.Any
                             @ (GHC.Types.Int, b)
                             (\ @ s1 ->
                              Data.Vector.Generic.Mutable.unsafeAccum
                                @ (GHC.ST.ST s1)
                                @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s))
                                @ a
                                @ b
                                @ GHC.Prim.Any
                                (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                   @ t
                                   @ s
                                   @ ty
                                   @ a
                                   $dReifies
                                   $d(%,,,%))
                                eta)
                               `cast`
                             (forall (s1 :: <GHC.Types.*>_N).
                              (Data.Vector.Generic.Base.Mutable
                                 <Data.Vector.SEXP.W t ty s>_N
                                 (Control.Monad.Primitive.D:R:PrimStateST[0] <s1>_N)
                                 <a>_N)_R
                              ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                      Data.Vector.Fusion.Util.Id GHC.Prim.Any (GHC.Types.Int, b)
                                    -> GHC.ST.ST s1 ()>_R)
                             (Data.Vector.Generic.clone
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                w)
                             (Data.Vector.Fusion.Bundle.$sfromList
                                @ (GHC.Types.Int, b)
                                @ GHC.Prim.Any
                                eta2))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta1
                         x)) }) -}
aeaf29f15ca473270872ad0afd1d169b
  unsafeCopy ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m ()
  {- Arity: 4,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(A,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(U,A,A,U(U))><L,U(U,U,A)><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a)
                   (eta1 :: Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s -> m ())
                   @ (m ())
                   (Control.Monad.R.Internal.withAcquire @ m @ () $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)) a
                      = Data.Vector.SEXP.$fVectorWa
                          @ s
                          @ (Control.Monad.Primitive.PrimState m)
                          @ ty
                          @ a
                          $dReifies
                          $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy s) ->
                    let {
                      eta2 :: Data.Vector.SEXP.Mutable.Internal.W
                                s ty (Control.Monad.R.Class.Region m) a
                      = Data.Vector.SEXP.Mutable.Internal.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta
                    } in
                    let {
                      eta3 :: Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m) a
                      = Data.Vector.SEXP.withW
                          @ Data.Proxy.Proxy
                          @ s
                          @ (Control.Monad.R.Class.Region m)
                          @ ty
                          @ a
                          p
                          eta1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (m ())
                      @ (m ())
                      (Data.Vector.Internal.Check.check
                         @ (m ())
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "./Data/Vector/Generic.hs"#))
                         (GHC.Types.I# 1988#)
                         Data.Vector.Internal.Check.Unsafe
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "unsafeCopy"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "length mismatch"#))
                         (GHC.Classes.eqInt
                            (Data.Vector.Generic.Mutable.Base.basicLength
                               @ (Data.Vector.Generic.Base.Mutable
                                    (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)))
                               @ a
                               (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                  @ s
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  $dReifies
                                  $d(%,,,%))
                               @ (Control.Monad.Primitive.PrimState m)
                               eta2
                                 `cast`
                               (Sub (Sym (Data.Vector.SEXP.D:R:MutableW[0]
                                              <Control.Monad.Primitive.PrimState m>_N
                                              <ty>_N
                                              <s>_N)) <Control.Monad.Primitive.PrimState
                                                         m>_N <a>_N))
                            (Data.Vector.Fusion.Util.unId
                               @ GHC.Types.Int
                               (Data.Vector.Fusion.Bundle.Monadic.length
                                  @ Data.Vector.Fusion.Util.Id
                                  @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                                  @ a
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                     @ Data.Vector.Fusion.Util.Id
                                     @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                                     @ a
                                     Data.Vector.Fusion.Util.$fMonadId
                                     $dVector
                                     eta3)))))
                      (case eta2
                              `cast`
                            (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                 <s>_P
                                 <ty>_P
                                 <Control.Monad.Primitive.PrimState
                                    m>_P <a>_N) of nt { Data.Vector.SEXP.Mutable.Internal.MVector ipv ipv1 ipv2 ->
                       case eta3
                              `cast`
                            (Data.Vector.SEXP.N:W[0]
                                 <s>_P
                                 <ty>_P
                                 <Control.Monad.R.Class.Region
                                    m>_P <a>_N) of nt1 { Data.Vector.SEXP.Vector ipv3 ipv4 ipv5 ipv6 ->
                       case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty
                                    Data.Type.Equality.~ a)
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dStorable :: Foreign.Storable.Storable a
                         = GHC.Classes.$p1(%,,,%)
                             @ (Foreign.Storable.Storable a)
                             @ (Foreign.R.Type.IsVector ty)
                             @ (Data.Singletons.SingI ty)
                             @ (Data.Vector.SEXP.Base.ElemRep
                                  (Control.Monad.Primitive.PrimState m) ty
                                Data.Type.Equality.~ a)
                             $d(%,,,%)
                       } in
                       GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Types.IO ())
                         @ (m ())
                         (Control.Monad.Primitive.unsafePrimToPrim
                            @ GHC.Types.IO
                            @ m
                            @ ()
                            Control.Monad.Primitive.$fPrimBaseIO
                            $dPrimMonad)
                         (Foreign.Marshal.Array.copyArray
                            @ a
                            $dStorable
                            (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                               @ a
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               $dStorable
                               (Data.Vector.SEXP.Mutable.Internal.unW
                                  @ s
                                  @ ty
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ a
                                  nt
                                    `cast`
                                  (Sym (Data.Vector.SEXP.Mutable.Internal.N:W[0]
                                            <s>_P
                                            <ty>_P
                                            <Control.Monad.Primitive.PrimState m>_P) <a>_N)))
                            (case Data.Vector.SEXP.unW
                                    @ s
                                    @ ty
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ a
                                    nt1
                                      `cast`
                                    (Sym (Data.Vector.SEXP.N:W[0]
                                              <s>_P
                                              <ty>_P
                                              <Control.Monad.R.Class.Region
                                                 m>_P) <a>_N) of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                             GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                               @ (GHC.Ptr.Ptr a)
                               (Control.Monad.Primitive.unsafeInlineIO @ (GHC.Ptr.Ptr a))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Foreign.R.Internal.SEXP GHC.Prim.Any ty
                                     -> GHC.Types.IO (GHC.Ptr.Ptr a))
                                  @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                                  (Data.Vector.SEXP.withForeignSEXP
                                     @ ty
                                     @ GHC.Prim.Any
                                     @ (GHC.Ptr.Ptr a)
                                     (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                                       `cast`
                                     (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)))
                                  (\ (sx :: Foreign.R.Internal.SEXP GHC.Prim.Any ty) ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (GHC.Ptr.Ptr a)
                                     @ (GHC.Types.IO (GHC.Ptr.Ptr a))
                                     (GHC.Base.returnIO @ (GHC.Ptr.Ptr a))
                                     (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.SEXP.Mutable.Internal.MVector
                                             GHC.Prim.Any ty a)
                                        @ (GHC.Ptr.Ptr a)
                                        (Data.Vector.SEXP.Mutable.Internal.unsafeToPtr
                                           @ a
                                           @ GHC.Prim.Any
                                           @ ty
                                           $dStorable)
                                        (case sx
                                                `cast`
                                              (Foreign.R.Internal.N:SEXP[0]
                                                   <GHC.Prim.Any>_P
                                                   <ty>_P) of dt4 { GHC.Ptr.Ptr dt5 ->
                                         Data.Vector.SEXP.Mutable.Internal.MVector
                                           @ GHC.Prim.Any
                                           @ ty
                                           @ a
                                           dt5
                                           dt2
                                           dt3 })))) })
                            (Data.Vector.SEXP.$fVectorWa_$cbasicLength
                               @ s
                               @ (Control.Monad.Primitive.PrimState m)
                               @ ty
                               @ a
                               $dReifies
                               $d(%,,,%)
                               nt1
                                 `cast`
                               (Sym (Data.Vector.SEXP.N:W[0]
                                         <s>_P
                                         <ty>_P
                                         <Control.Monad.R.Class.Region m>_P) <a>_N))) } } })) }) -}
08469a570c26d0bfb406f7db4a87a039
  unsafeDrop ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.unsafeDrop
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                          eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta1
                         x)) }) -}
16dff0e707944dae1bb4b6135ef57813
  unsafeFreeze ::
    (Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a,
     Control.Monad.R.Class.MonadR m) =>
    Data.Vector.SEXP.Mutable.Internal.MVector
      (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Vector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><L,U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   (eta :: Data.Vector.SEXP.Mutable.Internal.MVector
                             (Control.Monad.R.Class.Region m) ty a) ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Vector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m)))
                      (p :: Data.Proxy.Proxy s) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Vector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      $dFunctor
                      (Data.Vector.SEXP.unW
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                      (case GHC.Types.HEq_sc
                              @ *
                              @ *
                              @ (Data.Vector.SEXP.Base.ElemRep
                                   (Control.Monad.Primitive.PrimState m) ty)
                              @ a
                              (GHC.Classes.$p4(%,,,%)
                                 @ (Foreign.Storable.Storable a)
                                 @ (Foreign.R.Type.IsVector ty)
                                 @ (Data.Singletons.SingI ty)
                                 @ (Data.Vector.SEXP.Base.ElemRep
                                      (Control.Monad.Primitive.PrimState m) ty
                                    Data.Type.Equality.~ a)
                                 $d(%,,,%))
                                `cast`
                              (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)
                                                                  ty>_N <a>_N) of cobox1 { DEFAULT ->
                       let {
                         $dMonad :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case Data.Vector.SEXP.Mutable.Internal.unW
                              @ s
                              @ ty
                              @ (Control.Monad.Primitive.PrimState m)
                              @ a
                              (Data.Vector.SEXP.Mutable.Internal.withW
                                 @ Data.Proxy.Proxy
                                 @ s
                                 @ (Control.Monad.R.Class.Region m)
                                 @ ty
                                 @ a
                                 p
                                 eta) of wild { Data.Vector.SEXP.Mutable.Internal.MVector dt dt1 dt2 ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (Data.Vector.SEXP.ForeignSEXP ty)
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                         (Data.Vector.SEXP.foreignSEXP
                            @ m
                            @ (Control.Monad.Primitive.PrimState m)
                            @ ty
                            $dPrimMonad
                            (GHC.Ptr.Ptr
                               @ (Language.R.HExp.HExp (Control.Monad.Primitive.PrimState m) ty)
                               dt)
                              `cast`
                            (Sym (Foreign.R.Internal.N:SEXP[0]
                                      <Control.Monad.Primitive.PrimState m>_P <ty>_P)))
                         (\ (fp :: Data.Vector.SEXP.ForeignSEXP ty) ->
                          GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                            @ (m (Data.Vector.SEXP.W
                                    s ty (Control.Monad.Primitive.PrimState m) a))
                            (GHC.Base.return
                               @ m
                               $dMonad
                               @ (Data.Vector.SEXP.W
                                    s ty (Control.Monad.Primitive.PrimState m) a))
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.SEXP.Vector
                                    (Control.Monad.Primitive.PrimState m) ty a)
                               @ (Data.Vector.SEXP.W s ty (Control.Monad.Primitive.PrimState m) a)
                               (\ (tpl :: Data.Vector.SEXP.Vector
                                            (Control.Monad.Primitive.PrimState m) ty a) ->
                                tpl)
                                 `cast`
                               (<Data.Vector.SEXP.Vector
                                   (Control.Monad.Primitive.PrimState m) ty a>_R
                                ->_R Sym (Data.Vector.SEXP.N:W[0]
                                              <s>_P
                                              <ty>_P
                                              <Control.Monad.Primitive.PrimState m>_P) <a>_N)
                               (case fp
                                       `cast`
                                     (Data.Vector.SEXP.N:ForeignSEXP[0]
                                          <ty>_P) of dt3 { GHC.ForeignPtr.ForeignPtr dt4 dt5 ->
                                Data.Vector.SEXP.Vector
                                  @ (Control.Monad.Primitive.PrimState m)
                                  @ ty
                                  @ a
                                  dt4
                                  dt5
                                  dt1
                                  dt2 }))) } })) }) -}
750d55d3c38a17cc5b7f16a9a74ec72d
  unsafeFromSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Foreign.R.Internal.SEXP s ty -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Foreign.R.Internal.SEXP s ty) ->
                 case w1
                        `cast`
                      (Foreign.R.Internal.N:SEXP[0]
                           <s>_P <ty>_P) of ww { GHC.Ptr.Ptr ww1 ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           w)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 case {__pkg_ccall_GC inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs R_PreserveObject GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld #)}
                        ww1
                        GHC.Prim.realWorld# of wild { Unit# ds2 ->
                 case GHC.ForeignPtr.$wnewConcForeignPtr
                        @ ()
                        ww1
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case {__pkg_ccall_GC inline-r-0.9.0.2-GXEXrsxC4K8OTVxhqWwxs R_ReleaseObject GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld #)}
                                ww1
                                s1 of wild1 { Unit# ds1 ->
                         (# ds1, GHC.Tuple.() #) })
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ds2 of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.readInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# ww1 32#)
                        0#
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv1 of dt { GHC.ForeignPtr.ForeignPtr dt1 dt2 ->
                 Data.Vector.SEXP.Vector
                   @ s
                   @ ty
                   @ a
                   dt1
                   dt2
                   0#
                   (GHC.Prim.narrow32Int# ipv3) } } } } } }) -}
db99393dfa20b5d6df90b4a97ac85ad1
  unsafeHead ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(SLLS(S)),U(1*U,A,A,U(U))><L,1*U(U,U,U,A)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.unsafeHead
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)))
                      eta) }) -}
d09d7f1385e4000825b4ea64e50a9d72
  unsafeHeadM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U,A,A,U(U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(U,U,U,A)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (m :: * -> *)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.unsafeHeadM
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ m
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%))
                         $dMonad)
                      eta) }) -}
5fc245a80d07662085866cbabbef6edd
  unsafeIndex ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> a
  {- Arity: 3,
     Strictness: <S(SLLS(S)),U(1*U,A,A,U(U))><L,1*U(U,U,U,A)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: GHC.Types.Int) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (\ (ds :: Data.Vector.SEXP.W t ty s a) ->
                       Data.Vector.Generic.unsafeIndex
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         $dVector
                         ds
                         eta1)
                      eta) }) -}
d644dfc9a0ed668e28095c7e39f905cc
  unsafeIndexM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> GHC.Types.Int -> m a
  {- Arity: 3, Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,U><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (m :: * -> *)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> GHC.Types.Int -> m a)
                   @ (GHC.Types.Int -> m a)
                   (Data.Vector.SEXP.phony @ s @ (GHC.Types.Int -> m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (GHC.Types.Int -> m a)
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.unsafeIndexM
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ m
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%))
                         $dMonad)
                      eta) }) -}
ec5b2829eb62f176a31f9ae971d825ad
  unsafeInit ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.unsafeInit
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta
                         x)) }) -}
8c73bbef38e50fc406f9f5e9f5380116
  unsafeLast ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> a
  {- Arity: 2,
     Strictness: <S(SLLS(S)),U(1*U,A,A,U(U))><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> a)
                   @ a
                   (Data.Vector.SEXP.phony @ s @ a)
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ a
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.unsafeLast
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)))
                      eta) }) -}
be6248bfc3bbdcf653aad6d1efe2f939
  unsafeLastM ::
    (Data.Vector.SEXP.Base.VECTOR s ty a, GHC.Base.Monad m) =>
    Data.Vector.SEXP.Vector s ty a -> m a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(1*U,A,A,U(U))><S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (m :: * -> *)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m a)
                   @ (m a)
                   (Data.Vector.SEXP.phony @ s @ (m a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    Data.Vector.SEXP.proxyFW
                      @ t
                      @ ty
                      @ s
                      @ a
                      @ (m a)
                      @ Data.Proxy.Proxy
                      (Data.Vector.Generic.unsafeLastM
                         @ (Data.Vector.SEXP.W t ty s)
                         @ a
                         @ m
                         (Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%))
                         $dMonad)
                      eta) }) -}
dbcfec7064b70e5c72d65b44527992ba
  unsafeSlice ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a
    -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(S),1*U(U)><S(SLSL),1*U(U,U,U,A)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Types.Int)
                   (eta2 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.unsafeSlice
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                          eta
                          eta1
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta2
                         x)) }) -}
ab98a506f733c131622340724d6f7ef4
  unsafeTail ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(SLSS),1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.unsafeTail
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta
                         x)) }) -}
0914c8d475ac05f0ca7fd2d147e59cab
  unsafeTake ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    GHC.Types.Int
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)),U(A,A,A,U(U))><S(S),1*U(U)><S(SLSL),1*U(U,U,U,A)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      g :: Data.Vector.Generic.Base.Vector (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g1 :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = Data.Vector.Generic.unsafeTake
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          g
                          eta
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g1
                         eta1
                         x)) }) -}
b7405423a6d1f0207b181d2383d85dd8
  unsafeThaw ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) ty a) =>
    Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) ty a
    -> m (Data.Vector.SEXP.Mutable.Internal.MVector
            (Control.Monad.R.Class.Region m) ty a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S(LC(C(S))LLL)L)LLLLLLL),U(1*U,U(U(A,C(C1(U)),A,A,A),A),A,A,1*U,A,C(C1(U)),U,C(C1(U)))><S(LLLS(S)),U(A,A,A,U(U))><L,U(U,U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) ty a)
                   (eta :: Data.Vector.SEXP.Vector
                             (Control.Monad.R.Class.Region m) ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) ty
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            ty>_N <a>_N) of cobox0 { DEFAULT ->
                 let {
                   $dPrimMonad :: Control.Monad.Primitive.PrimMonad m
                   = Control.Monad.R.Class.$p5MonadR @ m $dMonadR
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall s.
                      Data.Reflection.Reifies
                        s
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.R.Class.Region m)) =>
                      Data.Proxy.Proxy s
                      -> m (Data.Vector.SEXP.Mutable.Internal.MVector
                              (Control.Monad.R.Class.Region m) ty a))
                   @ (m (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a))
                   (Control.Monad.R.Internal.withAcquire
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.R.Class.Region m) ty a)
                      $dMonadR)
                   (\ @ s
                      ($dReifies :: Data.Reflection.Reifies
                                      s
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.R.Class.Region m))) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m)) a
                      = Data.Vector.SEXP.$fVectorWa
                          @ s
                          @ (Control.Monad.Primitive.PrimState m)
                          @ ty
                          @ a
                          $dReifies
                          $d(%,,,%)
                    } in
                    \ (p :: Data.Proxy.Proxy s) ->
                    Data.Functor.<$>
                      @ m
                      @ (Data.Vector.SEXP.Mutable.Internal.W
                           s ty (Control.Monad.Primitive.PrimState m) a)
                      @ (Data.Vector.SEXP.Mutable.Internal.MVector
                           (Control.Monad.Primitive.PrimState m) ty a)
                      $dFunctor
                      (Data.Vector.SEXP.Mutable.Internal.unW
                         @ s
                         @ ty
                         @ (Control.Monad.Primitive.PrimState m)
                         @ a)
                      (Data.Vector.Generic.unsafeThaw
                         @ m
                         @ (Data.Vector.SEXP.W s ty (Control.Monad.R.Class.Region m))
                         @ a
                         $dPrimMonad
                         $dVector
                         (Data.Vector.SEXP.withW
                            @ Data.Proxy.Proxy
                            @ s
                            @ (Control.Monad.R.Class.Region m)
                            @ ty
                            @ a
                            p
                            eta))
                        `cast`
                      (<m>_R (Data.Vector.SEXP.D:R:MutableW[0]
                                  <Control.Monad.Primitive.PrimState m>_N
                                  <ty>_N
                                  <s>_N <Control.Monad.Primitive.PrimState m>_N <a>_N))) }) -}
a84182432802abb56c9285f1f7beace3
  unsafeToSEXP ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a -> Foreign.R.Internal.SEXP s ty
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)),1*U(A,A,A,1*U(1*U))><S,1*U(U,U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (w :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (w1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case w1 of ww { Data.Vector.SEXP.Vector ww1 ww2 ww3 ww4 ->
                 Data.Vector.SEXP.$wunsafeToSEXP @ s @ ty @ a w ww1 ww2 }) -}
46a4352b70d6738144c01a57af4bed73
  unsafeUpd ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    Data.Vector.SEXP.Vector s ty a
    -> [(GHC.Types.Int, a)] -> Data.Vector.SEXP.Vector s ty a
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><S(LLLS),1*U(U,U,U,U)><L,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: Data.Vector.SEXP.Vector s ty a)
                   (eta1 :: [(GHC.Types.Int, a)]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s ty a)
                   @ (Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a -> Data.Vector.SEXP.W t ty s a
                        {- Arity: 1 -}
                      = \ (ds :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.new
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          $dVector
                          (Data.Vector.Generic.New.modifyWithBundle
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             @ GHC.Prim.Any
                             @ (GHC.Types.Int, a)
                             (\ @ s1 ->
                              Data.Vector.Generic.Mutable.unsafeUpdate
                                @ (GHC.ST.ST s1)
                                @ (Data.Vector.Generic.Base.Mutable (Data.Vector.SEXP.W t ty s))
                                @ a
                                @ GHC.Prim.Any
                                (Control.Monad.Primitive.$fPrimMonadST @ s1)
                                (Data.Vector.SEXP.$fVectorWa_$cp1Vector
                                   @ t
                                   @ s
                                   @ ty
                                   @ a
                                   $dReifies
                                   $d(%,,,%)))
                               `cast`
                             (forall (s1 :: <GHC.Types.*>_N).
                              (Data.Vector.Generic.Base.Mutable
                                 <Data.Vector.SEXP.W t ty s>_N
                                 (Control.Monad.Primitive.D:R:PrimStateST[0] <s1>_N)
                                 <a>_N)_R
                              ->_R <Data.Vector.Fusion.Bundle.Monadic.Bundle
                                      Data.Vector.Fusion.Util.Id GHC.Prim.Any (GHC.Types.Int, a)
                                    -> GHC.ST.ST s1 ()>_R)
                             (Data.Vector.Generic.clone
                                @ (Data.Vector.SEXP.W t ty s)
                                @ a
                                $dVector
                                ds)
                             (Data.Vector.Fusion.Bundle.$sfromList
                                @ (GHC.Types.Int, a)
                                @ GHC.Prim.Any
                                eta1))
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    Data.Vector.SEXP.unW
                      @ t
                      @ ty
                      @ s
                      @ a
                      (Data.Vector.SEXP.proxyFW
                         @ t
                         @ ty
                         @ s
                         @ a
                         @ (Data.Vector.SEXP.W t ty s a)
                         @ Data.Proxy.Proxy
                         g
                         eta
                         x)) }) -}
38ecd02f59bf7e412fa5e13b2a4156ca
  unstablePartition ::
    Data.Vector.SEXP.Base.VECTOR s ty a =>
    (a -> GHC.Types.Bool)
    -> Data.Vector.SEXP.Vector s ty a
    -> (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
  {- Arity: 3,
     Strictness: <S(LLLS(S)),U(U,U,A,U(U))><L,C(U)><S,1*U(U,U,U,U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s ty a)
                   (eta :: a -> GHC.Types.Bool)
                   (eta1 :: Data.Vector.SEXP.Vector s ty a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s ty)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector ty)
                           @ (Data.Singletons.SingI ty)
                           @ (Data.Vector.SEXP.Base.ElemRep s ty Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s ty>_N <a>_N) of cobox0 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t
                      -> (Data.Vector.SEXP.Vector s ty a,
                          Data.Vector.SEXP.Vector s ty a))
                   @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a)
                   (Data.Vector.SEXP.phony
                      @ s
                      @ (Data.Vector.SEXP.Vector s ty a, Data.Vector.SEXP.Vector s ty a))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t ty s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ ty @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      g :: Data.Vector.SEXP.W t ty s a
                           -> (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                        {- Arity: 1 -}
                      = \ (x :: Data.Vector.SEXP.W t ty s a) ->
                        Data.Vector.Generic.unstablePartition_stream
                          @ (Data.Vector.SEXP.W t ty s)
                          @ a
                          @ (Data.Vector.SEXP.W t ty s)
                          $dVector
                          eta
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W t ty s)
                             @ a
                             $dVector
                             x)
                    } in
                    \ (x :: Data.Proxy.Proxy t) ->
                    case Data.Vector.SEXP.proxyFW
                           @ t
                           @ ty
                           @ s
                           @ a
                           @ (Data.Vector.SEXP.W t ty s a, Data.Vector.SEXP.W t ty s a)
                           @ Data.Proxy.Proxy
                           g
                           eta1
                           x of wild { (,) a1 b ->
                    (Data.Vector.SEXP.unW @ t @ ty @ s @ a a1,
                     Data.Vector.SEXP.unW @ t @ ty @ s @ a b) }) }) -}
0357daea927ebc42ae020fc84207517a
  vectorBase ::
    Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.ForeignSEXP ty
  RecSel Left Data.Vector.SEXP.Vector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(U,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (ds :: Data.Vector.SEXP.Vector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 (GHC.ForeignPtr.ForeignPtr @ () dt dt1)
                   `cast`
                 (Sym (Data.Vector.SEXP.N:ForeignSEXP[0] <ty>_P)) }) -}
a55eb3af17f4dc1ae6c5f8b2d011430d
  vectorLength :: Data.Vector.SEXP.Vector s ty a -> GHC.Int.Int32
  RecSel Left Data.Vector.SEXP.Vector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (ds :: Data.Vector.SEXP.Vector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Int.I32# dt3 }) -}
ca3646771045982e6de0fcbc0431b44f
  vectorOffset :: Data.Vector.SEXP.Vector s ty a -> GHC.Int.Int32
  RecSel Left Data.Vector.SEXP.Vector
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   @ (ty :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   (ds :: Data.Vector.SEXP.Vector s ty a) ->
                 case ds of wild { Data.Vector.SEXP.Vector dt dt1 dt2 dt3 ->
                 GHC.Int.I32# dt2 }) -}
58bdd51a25c0c819b257993bcf1f6b22
  withForeignSEXP ::
    Data.Vector.SEXP.ForeignSEXP ty
    -> (Foreign.R.Internal.SEXP s ty -> GHC.Types.IO r)
    -> GHC.Types.IO r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,U)><C(C(S(SL))),1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.$fVectorWa1
                  `cast`
                (forall (ty :: <Foreign.R.Type.SEXPTYPE>_N) (s :: <GHC.Types.*>_N) (r :: <*>_N).
                 <Data.Vector.SEXP.ForeignSEXP ty>_R
                 ->_R <Foreign.R.Internal.SEXP s ty -> GHC.Types.IO r>_R
                 ->_R Sym (GHC.Types.N:IO[0] <r>_R)) -}
d8841a9f1e9d4159de390fe3d5e87dc0
  withW ::
    proxy t
    -> Data.Vector.SEXP.Vector s ty a -> Data.Vector.SEXP.W t ty s a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Vector.SEXP.all1
                  `cast`
                (forall (proxy :: <*
                                   -> *>_N) (t :: <*>_N) (s :: <*>_N) (ty :: <Foreign.R.Type.SEXPTYPE>_N) (a :: <*>_N).
                 <proxy t>_R
                 ->_R <Data.Vector.SEXP.Vector s ty a>_R
                 ->_R Sym (Data.Vector.SEXP.N:W[0] <t>_P <ty>_P <s>_P) <a>_N) -}
0aee73a5deac82daa2e4a70cbdcdb924
  zipWith ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c) =>
    (a -> b -> c)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
  {- Arity: 6,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (6, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   (eta :: a -> b -> c)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox2 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyc c)
                   @ (Data.Vector.SEXP.Vector s tyc c)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyc c))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      ys' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      xs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyc
                      @ s
                      @ c
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyc s) c)
                         @ (Data.Vector.SEXP.W t tyc s c)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyc s)
                            @ c
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ a
                                 @ b
                                 @ c
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ c (eta a1 b1))
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tya s)
                                    @ a
                                    xs')
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tyb s)
                                    @ b
                                    ys') of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyc s)
                            @ c
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ c
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyc s) c)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 c)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyc s) c))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 c)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyc s) c))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyc s) c)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyc s) c)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyc s) c)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyc s)
                                                @ c
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector3 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyc s) c)
                                                   (eta3 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyc s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              c) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyc s))
                                                   @ c
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyc s)
                                                      @ c
                                                      $dVector3)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta3
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyc s) c)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyc s) c) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyc s c))
                            (case Data.Vector.Fusion.Bundle.Monadic.sSize
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tya s)
                                    @ a
                                    xs' of wild1 {
                               Data.Vector.Fusion.Bundle.Size.Exact m
                               -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t tyb s)
                                         @ b
                                         ys' of wild2 {
                                    Data.Vector.Fusion.Bundle.Size.Exact n
                                    -> Data.Vector.Fusion.Bundle.Size.Exact
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Max n
                                    -> Data.Vector.Fusion.Bundle.Size.Max
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Unknown
                                    -> Data.Vector.Fusion.Bundle.Size.Max m }
                               Data.Vector.Fusion.Bundle.Size.Max m
                               -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t tyb s)
                                         @ b
                                         ys' of wild2 {
                                    Data.Vector.Fusion.Bundle.Size.Exact n
                                    -> Data.Vector.Fusion.Bundle.Size.Max
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Max n
                                    -> Data.Vector.Fusion.Bundle.Size.Max
                                         (Data.Vector.Fusion.Util.delay_inline
                                            @ GHC.Types.Int
                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                            GHC.Classes.$fOrdInt_$cmin
                                            m
                                            n)
                                    Data.Vector.Fusion.Bundle.Size.Unknown
                                    -> Data.Vector.Fusion.Bundle.Size.Max m }
                               Data.Vector.Fusion.Bundle.Size.Unknown
                               -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Data.Vector.SEXP.W t tyb s)
                                         @ b
                                         ys' of wild2 {
                                    Data.Vector.Fusion.Bundle.Size.Exact n
                                    -> Data.Vector.Fusion.Bundle.Size.Max n
                                    Data.Vector.Fusion.Bundle.Size.Max n
                                    -> Data.Vector.Fusion.Bundle.Size.Max n
                                    Data.Vector.Fusion.Bundle.Size.Unknown
                                    -> Data.Vector.Fusion.Bundle.Size.Unknown } }) }))
                      p) } } }) -}
c08b50433f4e49fa84e3e459d339a596
  zipWith3 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d) =>
    (a -> b -> c -> d)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
  {- Arity: 8,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(U)))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (8, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   (eta :: a -> b -> c -> d)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox3 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyd d)
                   @ (Data.Vector.SEXP.Vector s tyd d)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyd d))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyd
                      @ s
                      @ d
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyd s) d)
                         @ (Data.Vector.SEXP.W t tyd s d)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyd s)
                            @ d
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                 @ Data.Vector.Fusion.Util.Id
                                 @ a
                                 @ b
                                 @ c
                                 @ d
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (a1 :: a) (b1 :: b)[OneShot] (c1 :: c)[OneShot] ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure @ d (eta a1 b1 c1))
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tya s)
                                    @ a
                                    as')
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tyb s)
                                    @ b
                                    bs')
                                 (Data.Vector.Fusion.Bundle.Monadic.sElems
                                    @ Data.Vector.Fusion.Util.Id
                                    @ (Data.Vector.SEXP.W t tyc s)
                                    @ c
                                    cs') of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyd s)
                            @ d
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ d
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyd s) d)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 d)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyd s) d))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 d)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyd s) d))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyd s) d)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyd s) d)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyd s) d)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyd s)
                                                @ d
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector4 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyd s) d)
                                                   (eta4 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyd s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              d) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyd s))
                                                   @ d
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyd s)
                                                      @ d
                                                      $dVector4)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta4
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyd s) d)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyd s) d) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyd s d))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           n))))) }))
                      p) } } } }) -}
856f56fc8fe3c1d91c7c41b9280d4e27
  zipWith4 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e) =>
    (a -> b -> c -> d -> e)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
  {- Arity: 10,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(U))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=5),
     Unfolding: InlineRule (10, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   @ (tye :: Foreign.R.Type.SEXPTYPE)
                   @ e
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   (eta :: a -> b -> c -> d -> e)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c)
                   (eta4 :: Data.Vector.SEXP.Vector s tyd d) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ (Data.Vector.SEXP.Base.ElemRep s tye Data.Type.Equality.~ e)
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox4 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tye e)
                   @ (Data.Vector.SEXP.Vector s tye e)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tye e))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tye
                          @ e
                          $dReifies
                          $d(%,,,%)4
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector4 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      ds' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyd s)
                          @ d
                          $dVector4
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyd
                             @ d
                             p
                             eta4)
                    } in
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tye
                      @ s
                      @ e
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tye s) e)
                         @ (Data.Vector.SEXP.W t tye s e)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tye s)
                            @ e
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (a, b)
                                 @ (c, d)
                                 @ e
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (ds :: (a, b)) (ds1 :: (c, d))[OneShot] ->
                                  case ds of wild { (,) a1 b1 ->
                                  case ds1 of wild1 { (,) c1 d1 ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ e
                                    (eta a1 b1 c1 d1) } })
                                 (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                    @ Data.Vector.Fusion.Util.Id
                                    @ a
                                    @ b
                                    @ (a, b)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: a) (b1 :: b)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (a, b)
                                       (a1, b1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tya s)
                                       @ a
                                       as')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       bs'))
                                 (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                    @ Data.Vector.Fusion.Util.Id
                                    @ c
                                    @ d
                                    @ (c, d)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: c) (b1 :: d)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (c, d)
                                       (a1, b1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyc s)
                                       @ c
                                       cs')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyd s)
                                       @ d
                                       ds')) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tye s)
                            @ e
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ e
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tye s) e)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 e)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tye s) e))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 e)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tye s) e))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tye s) e)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tye s) e)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tye s) e)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tye s)
                                                @ e
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector5 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tye s) e)
                                                   (eta5 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tye s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              e) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tye s))
                                                   @ e
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tye s)
                                                      @ e
                                                      $dVector5)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta5
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tye s) e)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tye s) e) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tye s e))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           (c1
                                              (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ (Data.Vector.SEXP.W t tyd s)
                                                 @ d
                                                 ds')
                                              n)))))) }))
                      p) } } } } }) -}
0adfb34ba34778bb56282bbdaf9f205f
  zipWith5 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f) =>
    (a -> b -> c -> d -> e -> f)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
  {- Arity: 12,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(C1(U)))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=6),
     Unfolding: InlineRule (12, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   @ (tye :: Foreign.R.Type.SEXPTYPE)
                   @ e
                   @ (tyf :: Foreign.R.Type.SEXPTYPE)
                   @ f
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f)
                   (eta :: a -> b -> c -> d -> e -> f)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c)
                   (eta4 :: Data.Vector.SEXP.Vector s tyd d)
                   (eta5 :: Data.Vector.SEXP.Vector s tye e) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyf Data.Type.Equality.~ f)
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ (Data.Vector.SEXP.Base.ElemRep s tye Data.Type.Equality.~ e)
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox5 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyf f)
                   @ (Data.Vector.SEXP.Vector s tyf f)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyf f))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyf s) f
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyf
                          @ f
                          $dReifies
                          $d(%,,,%)5
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector4 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    let {
                      $dVector5 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tye
                          @ e
                          $dReifies
                          $d(%,,,%)4
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      es' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tye s)
                          @ e
                          $dVector5
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tye
                             @ e
                             p
                             eta5)
                    } in
                    let {
                      ds' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyd s)
                          @ d
                          $dVector4
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyd
                             @ d
                             p
                             eta4)
                    } in
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyf
                      @ s
                      @ f
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyf s) f)
                         @ (Data.Vector.SEXP.W t tyf s f)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyf s)
                            @ f
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (a, b, c)
                                 @ (d, e)
                                 @ f
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (ds :: (a, b, c)) (ds1 :: (d, e))[OneShot] ->
                                  case ds of wild { (,,) a1 b1 c1 ->
                                  case ds1 of wild1 { (,) d1 e1 ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ f
                                    (eta a1 b1 c1 d1 e1) } })
                                 (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                    @ Data.Vector.Fusion.Util.Id
                                    @ a
                                    @ b
                                    @ c
                                    @ (a, b, c)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: a) (b1 :: b)[OneShot] (c1 :: c)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (a, b, c)
                                       (a1, b1, c1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tya s)
                                       @ a
                                       as')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       bs')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyc s)
                                       @ c
                                       cs'))
                                 (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                    @ Data.Vector.Fusion.Util.Id
                                    @ d
                                    @ e
                                    @ (d, e)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: d) (b1 :: e)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (d, e)
                                       (a1, b1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyd s)
                                       @ d
                                       ds')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tye s)
                                       @ e
                                       es')) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyf s)
                            @ f
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ f
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyf s) f)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 f)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyf s) f))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 f)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyf s) f))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyf s) f)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyf s) f)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyf s) f)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyf s)
                                                @ f
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector6 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyf s) f)
                                                   (eta6 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyf s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              f) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyf s))
                                                   @ f
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyf s)
                                                      @ f
                                                      $dVector6)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta6
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyf s) f)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyf s) f) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyf s f))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           (c1
                                              (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ (Data.Vector.SEXP.W t tyd s)
                                                 @ d
                                                 ds')
                                              (c1
                                                 (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                    @ Data.Vector.Fusion.Util.Id
                                                    @ (Data.Vector.SEXP.W t tye s)
                                                    @ e
                                                    es')
                                                 n))))))) }))
                      p) } } } } } }) -}
a90e907d413bf1445c8ebf025a2226d4
  zipWith6 ::
    (Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b,
     Data.Vector.SEXP.Base.VECTOR s tyc c,
     Data.Vector.SEXP.Base.VECTOR s tyd d,
     Data.Vector.SEXP.Base.VECTOR s tye e,
     Data.Vector.SEXP.Base.VECTOR s tyf f,
     Data.Vector.SEXP.Base.VECTOR s tyg g) =>
    (a -> b -> c -> d -> e -> f -> g)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> Data.Vector.SEXP.Vector s tyc c
    -> Data.Vector.SEXP.Vector s tyd d
    -> Data.Vector.SEXP.Vector s tye e
    -> Data.Vector.SEXP.Vector s tyf f
    -> Data.Vector.SEXP.Vector s tyg g
  {- Arity: 14,
     Strictness: <S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(C1(C1(C1(C1(U))))))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=7),
     Unfolding: InlineRule (14, False, False)
                (\ @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   @ (tyd :: Foreign.R.Type.SEXPTYPE)
                   @ d
                   @ (tye :: Foreign.R.Type.SEXPTYPE)
                   @ e
                   @ (tyf :: Foreign.R.Type.SEXPTYPE)
                   @ f
                   @ (tyg :: Foreign.R.Type.SEXPTYPE)
                   @ g
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR s tyc c)
                   ($d(%,,,%)3 :: Data.Vector.SEXP.Base.VECTOR s tyd d)
                   ($d(%,,,%)4 :: Data.Vector.SEXP.Base.VECTOR s tye e)
                   ($d(%,,,%)5 :: Data.Vector.SEXP.Base.VECTOR s tyf f)
                   ($d(%,,,%)6 :: Data.Vector.SEXP.Base.VECTOR s tyg g)
                   (eta :: a -> b -> c -> d -> e -> f -> g)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b)
                   (eta3 :: Data.Vector.SEXP.Vector s tyc c)
                   (eta4 :: Data.Vector.SEXP.Vector s tyd d)
                   (eta5 :: Data.Vector.SEXP.Vector s tye e)
                   (eta6 :: Data.Vector.SEXP.Vector s tyf f) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyg)
                        @ g
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable g)
                           @ (Foreign.R.Type.IsVector tyg)
                           @ (Data.Singletons.SingI tyg)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyg Data.Type.Equality.~ g)
                           $d(%,,,%)6)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyg>_N <g>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyf)
                        @ f
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable f)
                           @ (Foreign.R.Type.IsVector tyf)
                           @ (Data.Singletons.SingI tyf)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyf Data.Type.Equality.~ f)
                           $d(%,,,%)5)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyf>_N <f>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tye)
                        @ e
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable e)
                           @ (Foreign.R.Type.IsVector tye)
                           @ (Data.Singletons.SingI tye)
                           @ (Data.Vector.SEXP.Base.ElemRep s tye Data.Type.Equality.~ e)
                           $d(%,,,%)4)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tye>_N <e>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyd)
                        @ d
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable d)
                           @ (Foreign.R.Type.IsVector tyd)
                           @ (Data.Singletons.SingI tyd)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyd Data.Type.Equality.~ d)
                           $d(%,,,%)3)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyd>_N <d>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyc Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyc>_N <c>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox5 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox6 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> Data.Vector.SEXP.Vector s tyg g)
                   @ (Data.Vector.SEXP.Vector s tyg g)
                   (Data.Vector.SEXP.phony @ s @ (Data.Vector.SEXP.Vector s tyg g))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyg s) g
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyg
                          @ g
                          $dReifies
                          $d(%,,,%)6
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    let {
                      $dVector3 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector4 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyd
                          @ d
                          $dReifies
                          $d(%,,,%)3
                    } in
                    let {
                      $dVector5 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tye
                          @ e
                          $dReifies
                          $d(%,,,%)4
                    } in
                    let {
                      $dVector6 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyf s) f
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyf
                          @ f
                          $dReifies
                          $d(%,,,%)5
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      fs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyf s) f
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyf s)
                          @ f
                          $dVector6
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyf
                             @ f
                             p
                             eta6)
                    } in
                    let {
                      es' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tye s) e
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tye s)
                          @ e
                          $dVector5
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tye
                             @ e
                             p
                             eta5)
                    } in
                    let {
                      ds' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyd s) d
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyd s)
                          @ d
                          $dVector4
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyd
                             @ d
                             p
                             eta4)
                    } in
                    let {
                      cs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyc s) c
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyc s)
                          @ c
                          $dVector3
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyc
                             @ c
                             p
                             eta3)
                    } in
                    let {
                      bs' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tyb s)
                          @ b
                          $dVector2
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tyb
                             @ b
                             p
                             eta2)
                    } in
                    let {
                      as' :: Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.Generic.stream
                          @ (Data.Vector.SEXP.W t tya s)
                          @ a
                          $dVector1
                          (Data.Vector.SEXP.withW
                             @ Data.Proxy.Proxy
                             @ t
                             @ s
                             @ tya
                             @ a
                             p
                             eta1)
                    } in
                    Data.Vector.SEXP.proxyW
                      @ t
                      @ tyg
                      @ s
                      @ g
                      @ Data.Proxy.Proxy
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyg s) g)
                         @ (Data.Vector.SEXP.W t tyg s g)
                         (Data.Vector.Generic.unstream
                            @ (Data.Vector.SEXP.W t tyg s)
                            @ g
                            $dVector)
                         (case Data.Vector.Fusion.Stream.Monadic.zipWithM
                                 @ Data.Vector.Fusion.Util.Id
                                 @ (a, b, c)
                                 @ (d, e, f)
                                 @ g
                                 Data.Vector.Fusion.Util.$fMonadId
                                 (\ (ds :: (a, b, c)) (ds1 :: (d, e, f))[OneShot] ->
                                  case ds of wild { (,,) a1 b1 c1 ->
                                  case ds1 of wild1 { (,,) d1 e1 f1 ->
                                  Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                    @ g
                                    (eta a1 b1 c1 d1 e1 f1) } })
                                 (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                    @ Data.Vector.Fusion.Util.Id
                                    @ a
                                    @ b
                                    @ c
                                    @ (a, b, c)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: a) (b1 :: b)[OneShot] (c1 :: c)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (a, b, c)
                                       (a1, b1, c1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tya s)
                                       @ a
                                       as')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyb s)
                                       @ b
                                       bs')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyc s)
                                       @ c
                                       cs'))
                                 (Data.Vector.Fusion.Stream.Monadic.zipWith3M
                                    @ Data.Vector.Fusion.Util.Id
                                    @ d
                                    @ e
                                    @ f
                                    @ (d, e, f)
                                    Data.Vector.Fusion.Util.$fMonadId
                                    (\ (a1 :: d) (b1 :: e)[OneShot] (c1 :: f)[OneShot] ->
                                     Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                       @ (d, e, f)
                                       (a1, b1, c1))
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyd s)
                                       @ d
                                       ds')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tye s)
                                       @ e
                                       es')
                                    (Data.Vector.Fusion.Bundle.Monadic.sElems
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Data.Vector.SEXP.W t tyf s)
                                       @ f
                                       fs')) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s0 step1 t1 ->
                          Data.Vector.Fusion.Bundle.Monadic.Bundle
                            @ Data.Vector.Fusion.Util.Id
                            @ (Data.Vector.SEXP.W t tyg s)
                            @ g
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ g
                               @ s0
                               step1
                               t1)
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                    (Data.Vector.SEXP.W t tyg s) g)
                               @ s0
                               (\ (s1 :: s0) ->
                                Data.Vector.Fusion.Util.$fMonadId_$c>>=
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step s0 g)
                                  @ (Data.Vector.Fusion.Stream.Monadic.Step
                                       s0
                                       (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                          (Data.Vector.SEXP.W t tyg s) g))
                                  (step1 s1)
                                  (\ (r :: Data.Vector.Fusion.Stream.Monadic.Step s0 g)[OneShot] ->
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Fusion.Stream.Monadic.Step
                                          s0
                                          (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                             (Data.Vector.SEXP.W t tyg s) g))
                                     @ (Data.Vector.Fusion.Util.Id
                                          (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyg s) g)))
                                     (Data.Vector.Fusion.Util.$fApplicativeId_$cpure
                                        @ (Data.Vector.Fusion.Stream.Monadic.Step
                                             s0
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                (Data.Vector.SEXP.W t tyg s) g)))
                                     (case r of wild1 {
                                        Data.Vector.Fusion.Stream.Monadic.Yield x s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Yield
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyg s) g)
                                             (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                @ (Data.Vector.SEXP.W t tyg s)
                                                @ g
                                                (GHC.Types.I# 1#)
                                                (\ @ (m1 :: * -> *)
                                                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad
                                                                     m1)
                                                   ($dVector7 :: Data.Vector.Generic.Base.Vector
                                                                   (Data.Vector.SEXP.W t tyg s) g)
                                                   (eta7 :: Data.Vector.Generic.Base.Mutable
                                                              (Data.Vector.SEXP.W t tyg s)
                                                              (Control.Monad.Primitive.PrimState m1)
                                                              g) ->
                                                 Data.Vector.Generic.Mutable.Base.basicUnsafeWrite
                                                   @ (Data.Vector.Generic.Base.Mutable
                                                        (Data.Vector.SEXP.W t tyg s))
                                                   @ g
                                                   (Data.Vector.Generic.Base.$p1Vector
                                                      @ (Data.Vector.SEXP.W t tyg s)
                                                      @ g
                                                      $dVector7)
                                                   @ m1
                                                   $dPrimMonad
                                                   eta7
                                                   (GHC.Types.I# 0#)
                                                   x))
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Skip s2
                                        -> Data.Vector.Fusion.Stream.Monadic.Skip
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyg s) g)
                                             s2
                                        Data.Vector.Fusion.Stream.Monadic.Done
                                        -> Data.Vector.Fusion.Stream.Monadic.Done
                                             @ s0
                                             @ (Data.Vector.Fusion.Bundle.Monadic.Chunk
                                                  (Data.Vector.SEXP.W t tyg s) g) })))
                               t1)
                            (GHC.Base.Nothing @ (Data.Vector.SEXP.W t tyg s g))
                            (Data.Vector.SEXP.smallest
                               (GHC.Base.build
                                  @ Data.Vector.Fusion.Bundle.Size.Size
                                  (\ @ a1
                                     (c1 :: Data.Vector.Fusion.Bundle.Size.Size
                                            -> a1 -> a1)[OneShot]
                                     (n :: a1)[OneShot] ->
                                   c1
                                     (Data.Vector.Fusion.Bundle.Monadic.sSize
                                        @ Data.Vector.Fusion.Util.Id
                                        @ (Data.Vector.SEXP.W t tya s)
                                        @ a
                                        as')
                                     (c1
                                        (Data.Vector.Fusion.Bundle.Monadic.sSize
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Data.Vector.SEXP.W t tyb s)
                                           @ b
                                           bs')
                                        (c1
                                           (Data.Vector.Fusion.Bundle.Monadic.sSize
                                              @ Data.Vector.Fusion.Util.Id
                                              @ (Data.Vector.SEXP.W t tyc s)
                                              @ c
                                              cs')
                                           (c1
                                              (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ (Data.Vector.SEXP.W t tyd s)
                                                 @ d
                                                 ds')
                                              (c1
                                                 (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                    @ Data.Vector.Fusion.Util.Id
                                                    @ (Data.Vector.SEXP.W t tye s)
                                                    @ e
                                                    es')
                                                 (c1
                                                    (Data.Vector.Fusion.Bundle.Monadic.sSize
                                                       @ Data.Vector.Fusion.Util.Id
                                                       @ (Data.Vector.SEXP.W t tyf s)
                                                       @ f
                                                       fs')
                                                    n)))))))) }))
                      p) } } } } } } }) -}
644f5dd2c9ebbbb959e6203ace0d00fb
  zipWithM ::
    (Control.Monad.R.Class.MonadR m,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) tya a,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) tyb b,
     Data.Vector.SEXP.Base.VECTOR
       (Control.Monad.R.Class.Region m) tyc c) =>
    (a -> b -> m c)
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) tya a
    -> Data.Vector.SEXP.Vector (Control.Monad.R.Class.Region m) tyb b
    -> m (Data.Vector.SEXP.Vector
            (Control.Monad.R.Class.Region m) tyc c)
  {- Arity: 7,
     Strictness: <S(SLLLLLLLL),U(1*U,1*U,A,A,A,A,A,A,A)><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,U,A,U(U))><L,C(C1(U))><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (7, False, False)
                (\ @ (m :: * -> *)
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ (tyc :: Foreign.R.Type.SEXPTYPE)
                   @ c
                   ($dMonadR :: Control.Monad.R.Class.MonadR m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR
                                   (Control.Monad.R.Class.Region m) tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR
                                    (Control.Monad.R.Class.Region m) tyb b)
                   ($d(%,,,%)2 :: Data.Vector.SEXP.Base.VECTOR
                                    (Control.Monad.R.Class.Region m) tyc c)
                   (eta :: a -> b -> m c)
                   (eta1 :: Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) tya a)
                   (eta2 :: Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) tyb b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) tyc)
                        @ c
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable c)
                           @ (Foreign.R.Type.IsVector tyc)
                           @ (Data.Singletons.SingI tyc)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) tyc
                              Data.Type.Equality.~ c)
                           $d(%,,,%)2)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            tyc>_N <c>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) tyb
                              Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            tyb>_N <b>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep
                             (Control.Monad.R.Class.Region m) tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep
                                (Control.Monad.R.Class.Region m) tya
                              Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            (Control.Monad.R.Class.Region m)
                                                            tya>_N <a>_N) of cobox2 { DEFAULT ->
                 let {
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO m
                   = Control.Monad.R.Class.$p2MonadR @ m $dMonadR
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.R.Class.$p1MonadR @ m $dMonadR
                 } in
                 let {
                   $dFunctor :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies
                        t
                        (Control.Monad.R.Internal.AcquireIO
                           (Control.Monad.Primitive.PrimState m)) =>
                      Data.Proxy.Proxy t
                      -> m (Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) tyc c))
                   @ (m (Data.Vector.SEXP.Vector
                           (Control.Monad.R.Class.Region m) tyc c))
                   (Data.Vector.SEXP.phony
                      @ (Control.Monad.Primitive.PrimState m)
                      @ (m (Data.Vector.SEXP.Vector
                              (Control.Monad.R.Class.Region m) tyc c)))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t
                                      (Control.Monad.R.Internal.AcquireIO
                                         (Control.Monad.Primitive.PrimState m))) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tyc (Control.Monad.Primitive.PrimState m))
                                    c
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ (Control.Monad.Primitive.PrimState m)
                          @ tyc
                          @ c
                          $dReifies
                          $d(%,,,%)2
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tya (Control.Monad.R.Class.Region m)) a
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ (Control.Monad.Primitive.PrimState m)
                          @ tya
                          @ a
                          $dReifies
                          $d(%,,,%)
                    } in
                    let {
                      $dVector2 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb (Control.Monad.R.Class.Region m)) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ (Control.Monad.Primitive.PrimState m)
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    let {
                      ys' :: Data.Vector.Fusion.Bundle.Monadic.Bundle
                               m (Data.Vector.SEXP.W t tyb (Control.Monad.R.Class.Region m)) b
                      = GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tyb (Control.Monad.R.Class.Region m)) b)
                          @ (Data.Vector.Fusion.Bundle.Monadic.Bundle
                               m (Data.Vector.SEXP.W t tyb (Control.Monad.R.Class.Region m)) b)
                          (Data.Vector.Fusion.Bundle.lift
                             @ m
                             @ (Data.Vector.SEXP.W t tyb (Control.Monad.R.Class.Region m))
                             @ b
                             $dMonad)
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W t tyb (Control.Monad.R.Class.Region m))
                             @ b
                             $dVector2
                             (Data.Vector.SEXP.withW
                                @ Data.Proxy.Proxy
                                @ t
                                @ (Control.Monad.R.Class.Region m)
                                @ tyb
                                @ b
                                p
                                eta2))
                    } in
                    let {
                      xs' :: Data.Vector.Fusion.Bundle.Monadic.Bundle
                               m (Data.Vector.SEXP.W t tya (Control.Monad.R.Class.Region m)) a
                      = GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.Vector.Fusion.Bundle.Bundle
                               (Data.Vector.SEXP.W t tya (Control.Monad.R.Class.Region m)) a)
                          @ (Data.Vector.Fusion.Bundle.Monadic.Bundle
                               m (Data.Vector.SEXP.W t tya (Control.Monad.R.Class.Region m)) a)
                          (Data.Vector.Fusion.Bundle.lift
                             @ m
                             @ (Data.Vector.SEXP.W t tya (Control.Monad.R.Class.Region m))
                             @ a
                             $dMonad)
                          (Data.Vector.Generic.stream
                             @ (Data.Vector.SEXP.W t tya (Control.Monad.R.Class.Region m))
                             @ a
                             $dVector1
                             (Data.Vector.SEXP.withW
                                @ Data.Proxy.Proxy
                                @ t
                                @ (Control.Monad.R.Class.Region m)
                                @ tya
                                @ a
                                p
                                eta1))
                    } in
                    GHC.Base.<*>
                      @ m
                      $dApplicative
                      @ (Data.Proxy.Proxy t)
                      @ (Data.Vector.SEXP.Vector
                           (Control.Monad.Primitive.PrimState m) tyc c)
                      (Data.Functor.<$>
                         @ m
                         @ (Data.Vector.SEXP.W
                              t tyc (Control.Monad.Primitive.PrimState m) c)
                         @ (Data.Proxy.Proxy t
                            -> Data.Vector.SEXP.Vector
                                 (Control.Monad.Primitive.PrimState m) tyc c)
                         $dFunctor
                         (Data.Vector.SEXP.proxyW
                            @ t
                            @ tyc
                            @ (Control.Monad.Primitive.PrimState m)
                            @ c
                            @ Data.Proxy.Proxy)
                         (GHC.Base.fmap
                            @ m
                            $dFunctor
                            @ (Data.Vector.Fusion.Bundle.Bundle
                                 (Data.Vector.SEXP.W t tyc (Control.Monad.Primitive.PrimState m)) c)
                            @ (Data.Vector.SEXP.W
                                 t tyc (Control.Monad.Primitive.PrimState m) c)
                            (Data.Vector.Generic.unstream
                               @ (Data.Vector.SEXP.W t tyc (Control.Monad.Primitive.PrimState m))
                               @ c
                               $dVector)
                            (Data.Functor.<$>
                               @ m
                               @ [c]
                               @ (Data.Vector.Fusion.Bundle.Monadic.Bundle
                                    Data.Vector.Fusion.Util.Id
                                    (Data.Vector.SEXP.W t tyc (Control.Monad.Primitive.PrimState m))
                                    c)
                               $dFunctor
                               (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                  @ Data.Vector.Fusion.Util.Id
                                  @ c
                                  @ (Data.Vector.SEXP.W t tyc (Control.Monad.Primitive.PrimState m))
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (case Data.Vector.Fusion.Bundle.Monadic.sSize
                                          @ m
                                          @ (Data.Vector.SEXP.W
                                               t tya (Control.Monad.R.Class.Region m))
                                          @ a
                                          xs' of wild {
                                     Data.Vector.Fusion.Bundle.Size.Exact m1
                                     -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                               @ m
                                               @ (Data.Vector.SEXP.W
                                                    t tyb (Control.Monad.R.Class.Region m))
                                               @ b
                                               ys' of wild1 {
                                          Data.Vector.Fusion.Bundle.Size.Exact n
                                          -> Data.Vector.Fusion.Bundle.Size.Exact
                                               (Data.Vector.Fusion.Util.delay_inline
                                                  @ GHC.Types.Int
                                                  @ (GHC.Types.Int -> GHC.Types.Int)
                                                  GHC.Classes.$fOrdInt_$cmin
                                                  m1
                                                  n)
                                          Data.Vector.Fusion.Bundle.Size.Max n
                                          -> Data.Vector.Fusion.Bundle.Size.Max
                                               (Data.Vector.Fusion.Util.delay_inline
                                                  @ GHC.Types.Int
                                                  @ (GHC.Types.Int -> GHC.Types.Int)
                                                  GHC.Classes.$fOrdInt_$cmin
                                                  m1
                                                  n)
                                          Data.Vector.Fusion.Bundle.Size.Unknown
                                          -> Data.Vector.Fusion.Bundle.Size.Max m1 }
                                     Data.Vector.Fusion.Bundle.Size.Max m1
                                     -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                               @ m
                                               @ (Data.Vector.SEXP.W
                                                    t tyb (Control.Monad.R.Class.Region m))
                                               @ b
                                               ys' of wild1 {
                                          Data.Vector.Fusion.Bundle.Size.Exact n
                                          -> Data.Vector.Fusion.Bundle.Size.Max
                                               (Data.Vector.Fusion.Util.delay_inline
                                                  @ GHC.Types.Int
                                                  @ (GHC.Types.Int -> GHC.Types.Int)
                                                  GHC.Classes.$fOrdInt_$cmin
                                                  m1
                                                  n)
                                          Data.Vector.Fusion.Bundle.Size.Max n
                                          -> Data.Vector.Fusion.Bundle.Size.Max
                                               (Data.Vector.Fusion.Util.delay_inline
                                                  @ GHC.Types.Int
                                                  @ (GHC.Types.Int -> GHC.Types.Int)
                                                  GHC.Classes.$fOrdInt_$cmin
                                                  m1
                                                  n)
                                          Data.Vector.Fusion.Bundle.Size.Unknown
                                          -> Data.Vector.Fusion.Bundle.Size.Max m1 }
                                     Data.Vector.Fusion.Bundle.Size.Unknown
                                     -> case Data.Vector.Fusion.Bundle.Monadic.sSize
                                               @ m
                                               @ (Data.Vector.SEXP.W
                                                    t tyb (Control.Monad.R.Class.Region m))
                                               @ b
                                               ys' of wild1 {
                                          Data.Vector.Fusion.Bundle.Size.Exact n
                                          -> Data.Vector.Fusion.Bundle.Size.Max n
                                          Data.Vector.Fusion.Bundle.Size.Max n
                                          -> Data.Vector.Fusion.Bundle.Size.Max n
                                          Data.Vector.Fusion.Bundle.Size.Unknown
                                          -> Data.Vector.Fusion.Bundle.Size.Unknown } }))
                               (Data.Vector.Fusion.Stream.Monadic.foldrM
                                  @ m
                                  @ c
                                  @ [c]
                                  $dMonad
                                  (\ (a1 :: c) (b1 :: [c]) ->
                                   GHC.Base.return @ m $dMonad @ [c] (GHC.Types.: @ c a1 b1))
                                  (GHC.Types.[] @ c)
                                  (Data.Vector.Fusion.Stream.Monadic.zipWithM
                                     @ m
                                     @ a
                                     @ b
                                     @ c
                                     $dMonad
                                     eta
                                     (Data.Vector.Fusion.Bundle.Monadic.sElems
                                        @ m
                                        @ (Data.Vector.SEXP.W
                                             t tya (Control.Monad.R.Class.Region m))
                                        @ a
                                        xs')
                                     (Data.Vector.Fusion.Bundle.Monadic.sElems
                                        @ m
                                        @ (Data.Vector.SEXP.W
                                             t tyb (Control.Monad.R.Class.Region m))
                                        @ b
                                        ys'))))))
                      (GHC.Base.pure
                         @ m
                         $dApplicative
                         @ (Data.Proxy.Proxy t)
                         p)) } } }) -}
1cab21a781df6dd77be0476e186b6fb8
  zipWithM_ ::
    (GHC.Base.Monad m, Data.Vector.SEXP.Base.VECTOR s tya a,
     Data.Vector.SEXP.Base.VECTOR s tyb b) =>
    (a -> b -> m c)
    -> Data.Vector.SEXP.Vector s tya a
    -> Data.Vector.SEXP.Vector s tyb b
    -> m ()
  {- Arity: 6,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,U,A)><S(LLLS(S)),U(U,A,A,U(U))><S(LLLS(S)),U(U,A,A,U(U))><L,C(C1(U))><S,1*U(U,U,U,U)><S,1*U(U,U,U,U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (6, False, False)
                (\ @ (m :: * -> *)
                   @ s
                   @ (tya :: Foreign.R.Type.SEXPTYPE)
                   @ a
                   @ (tyb :: Foreign.R.Type.SEXPTYPE)
                   @ b
                   @ c
                   ($dMonad :: GHC.Base.Monad m)
                   ($d(%,,,%) :: Data.Vector.SEXP.Base.VECTOR s tya a)
                   ($d(%,,,%)1 :: Data.Vector.SEXP.Base.VECTOR s tyb b)
                   (eta :: a -> b -> m c)
                   (eta1 :: Data.Vector.SEXP.Vector s tya a)
                   (eta2 :: Data.Vector.SEXP.Vector s tyb b) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tyb)
                        @ b
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable b)
                           @ (Foreign.R.Type.IsVector tyb)
                           @ (Data.Singletons.SingI tyb)
                           @ (Data.Vector.SEXP.Base.ElemRep s tyb Data.Type.Equality.~ b)
                           $d(%,,,%)1)
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tyb>_N <b>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Data.Vector.SEXP.Base.ElemRep s tya)
                        @ a
                        (GHC.Classes.$p4(%,,,%)
                           @ (Foreign.Storable.Storable a)
                           @ (Foreign.R.Type.IsVector tya)
                           @ (Data.Singletons.SingI tya)
                           @ (Data.Vector.SEXP.Base.ElemRep s tya Data.Type.Equality.~ a)
                           $d(%,,,%))
                          `cast`
                        (Data.Type.Equality.N:~[0] <*>_N <Data.Vector.SEXP.Base.ElemRep
                                                            s tya>_N <a>_N) of cobox1 { DEFAULT ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall t.
                      Data.Reflection.Reifies t (Control.Monad.R.Internal.AcquireIO s) =>
                      Data.Proxy.Proxy t -> m ())
                   @ (m ())
                   (Data.Vector.SEXP.phony @ s @ (m ()))
                   (\ @ t
                      ($dReifies :: Data.Reflection.Reifies
                                      t (Control.Monad.R.Internal.AcquireIO s)) ->
                    let {
                      $dVector :: Data.Vector.Generic.Base.Vector
                                    (Data.Vector.SEXP.W t tya s) a
                      = Data.Vector.SEXP.$fVectorWa @ t @ s @ tya @ a $dReifies $d(%,,,%)
                    } in
                    let {
                      $dVector1 :: Data.Vector.Generic.Base.Vector
                                     (Data.Vector.SEXP.W t tyb s) b
                      = Data.Vector.SEXP.$fVectorWa
                          @ t
                          @ s
                          @ tyb
                          @ b
                          $dReifies
                          $d(%,,,%)1
                    } in
                    \ (p :: Data.Proxy.Proxy t) ->
                    Data.Vector.Fusion.Stream.Monadic.consume
                      @ m
                      @ c
                      $dMonad
                      (Data.Vector.Fusion.Stream.Monadic.zipWithM
                         @ m
                         @ a
                         @ b
                         @ c
                         $dMonad
                         eta
                         (Data.Vector.Fusion.Bundle.Monadic.sElems
                            @ m
                            @ (Data.Vector.SEXP.W t tya s)
                            @ a
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tya s) a)
                               @ (Data.Vector.Fusion.Bundle.Monadic.Bundle
                                    m (Data.Vector.SEXP.W t tya s) a)
                               (Data.Vector.Fusion.Bundle.lift
                                  @ m
                                  @ (Data.Vector.SEXP.W t tya s)
                                  @ a
                                  $dMonad)
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t tya s)
                                  @ a
                                  $dVector
                                  (Data.Vector.SEXP.withW
                                     @ Data.Proxy.Proxy
                                     @ t
                                     @ s
                                     @ tya
                                     @ a
                                     p
                                     eta1))))
                         (Data.Vector.Fusion.Bundle.Monadic.sElems
                            @ m
                            @ (Data.Vector.SEXP.W t tyb s)
                            @ b
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Data.Vector.Fusion.Bundle.Bundle (Data.Vector.SEXP.W t tyb s) b)
                               @ (Data.Vector.Fusion.Bundle.Monadic.Bundle
                                    m (Data.Vector.SEXP.W t tyb s) b)
                               (Data.Vector.Fusion.Bundle.lift
                                  @ m
                                  @ (Data.Vector.SEXP.W t tyb s)
                                  @ b
                                  $dMonad)
                               (Data.Vector.Generic.stream
                                  @ (Data.Vector.SEXP.W t tyb s)
                                  @ b
                                  $dVector1
                                  (Data.Vector.SEXP.withW
                                     @ Data.Proxy.Proxy
                                     @ t
                                     @ s
                                     @ tyb
                                     @ b
                                     p
                                     eta2)))))) } }) -}
instance GHC.Classes.Eq [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.$fEqVector
instance GHC.Exts.IsList [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.$fIsListVector
instance GHC.Show.Show [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.$fShowVector
instance Data.Vector.Generic.Base.Vector [Data.Vector.SEXP.W, .]
  = Data.Vector.SEXP.$fVectorWa
family instance GHC.Exts.Item [Data.Vector.SEXP.Vector]
  = Data.Vector.SEXP.D:R:ItemVector
family instance Data.Vector.Generic.Base.Mutable [Data.Vector.SEXP.W]
  = Data.Vector.SEXP.D:R:MutableW
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

